:py:mod:`neural_compressor.strategy.utils`
==========================================

.. py:module:: neural_compressor.strategy.utils

.. autoapi-nested-parse::

   Intel Neural Compressor Strategy Utils.



Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   tuning_sampler/index.rst
   tuning_space/index.rst
   tuning_structs/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   neural_compressor.strategy.utils.TuningSampler
   neural_compressor.strategy.utils.OpWiseTuningSampler
   neural_compressor.strategy.utils.OpTypeWiseTuningSampler
   neural_compressor.strategy.utils.FallbackTuningSampler
   neural_compressor.strategy.utils.OpTuningConfig
   neural_compressor.strategy.utils.TuningItem
   neural_compressor.strategy.utils.TuningSpace




.. py:class:: TuningSampler(tuning_space: neural_compressor.strategy.utils.tuning_space.TuningSpace, tuning_order_lst: List[TuningOrder], initial_op_tuning_cfg: Dict)

   Not displayed in API Docs.

   Basic class of tuning sampler.


.. py:class:: OpWiseTuningSampler(tuning_space: neural_compressor.strategy.utils.tuning_space.TuningSpace, tuning_items_priority: List[str], tuning_order_lst: List[TuningOrder], op_dtype_dict: Dict[tuple, str], initial_op_tuning_cfg: Dict)

   Bases: :py:obj:`TuningSampler`

   Not displayed in API Docs.

   .. py:method:: get_opwise_candidate()

      Collect all op-wise setting.

      :returns: all op-wise setting.
      :rtype: op_wise_configs



.. py:class:: OpTypeWiseTuningSampler(tuning_space: neural_compressor.strategy.utils.tuning_space.TuningSpace, tuning_items_priority: List[str], tuning_order_lst: List[TuningOrder], op_dtype_dict: Dict[tuple, str], initial_op_tuning_cfg: Dict[tuple, neural_compressor.strategy.utils.tuning_structs.OpTuningConfig])

   Bases: :py:obj:`TuningSampler`

   Not displayed in API Docs.


.. py:class:: FallbackTuningSampler(tuning_space: neural_compressor.strategy.utils.tuning_space.TuningSpace, tuning_order_lst: List[TuningOrder], initial_op_tuning_cfg: Dict[tuple, Any], op_dtypes: Dict[str, str], accumulate: bool, skip_first: bool = True)

   Bases: :py:obj:`TuningSampler`

   Not displayed in API Docs.


.. py:class:: OpTuningConfig(op_name, op_type, op_quant_mode, tuning_space, kwargs={})

   Op tuning config.

   .. py:method:: get_state()

      Return the op tuning configuration.

      :returns: The op tuning state.
      :rtype: Dict


   .. py:method:: from_state(config: Dict)
      :classmethod:

      Create the tuning config from dict.

      :param config: A dict includes the tuning config.



.. py:class:: TuningItem(name, options=[], item_type=None)

   Not displayed in API Docs.

   .. py:property:: options

      Return all options.

      :returns: All options.

   .. py:method:: append(option)

      Append option.

      :param option: The option to add.


   .. py:method:: remove(option)

      Remove option.

      :param option: The option to remove.


   .. py:method:: get_option_by_name(option_name)

      Get the option item by name.

      :param option_name: option name.

      :returns: the queried option.
      :rtype: option


   .. py:method:: get_details(depth=0)

      Get the tuning item and its options recursively.

      :param depth: recursion depth. Defaults to 0.

      :returns: The tuning item and its options as a string.



.. py:class:: TuningSpace(capability, conf, framework=None)

   Not displayed in API Docs.

   .. py:method:: query_items_by_quant_mode(quant_mode)

      Collect all op items that support the specific quantization/precision mode.

      :param quant_mode: fp32/bf16/dynamic/static
      :type quant_mode: str

      :returns: the list of op items
      :rtype: List


   .. py:method:: query_quant_mode_item(op_name_type, quant_mode)

      Interface for query the quantization item.

      :param op_name_type: (op_name, op_type)
      :param quant_mode: The quantization mode.

      :returns: Return queried quantization item.


   .. py:method:: query_item_option(op_name_type, quant_mode, key, val)

      Check if the option exit in the tuning item.

      :param op_name_type: (op_name, op_type)
      :param quant_mode: The quantization mode.
      :param key: tuning item name.
      :param val: option of tuning item .

      :returns: Return True if the option exit in the tuning item else False.
      :rtype: bool


   .. py:method:: set_deafult_config(op_name_type, quant_mode)

      Get the default tuning config.

      :param op_name_type: (op_name, op_type)
      :param quant_mode: quantization mode.

      :returns: the default config according to the specified quantization mode.
      :rtype: op_tuning_config



