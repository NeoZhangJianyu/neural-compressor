Search.setIndex({"docnames": ["autoapi/644ec953a7dc_pruning_support/index", "autoapi/6ece06672ed3_v1_14/index", "autoapi/6f0d0f71d92e_v1_13/index", "autoapi/9e89549a08c8_v1_11/index", "autoapi/block_mask/index", "autoapi/env/index", "autoapi/neural_compressor/adaptor/adaptor/index", "autoapi/neural_compressor/adaptor/index", "autoapi/neural_compressor/adaptor/keras/index", "autoapi/neural_compressor/adaptor/keras_utils/index", "autoapi/neural_compressor/adaptor/keras_utils/quantizer/index", "autoapi/neural_compressor/adaptor/mxnet/index", "autoapi/neural_compressor/adaptor/mxnet_utils/index", "autoapi/neural_compressor/adaptor/mxnet_utils/util/index", "autoapi/neural_compressor/adaptor/onnxrt/index", "autoapi/neural_compressor/adaptor/ox_utils/calibration/index", "autoapi/neural_compressor/adaptor/ox_utils/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/activation/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/argmax/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/attention/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/binary_op/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/concat/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/conv/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/direct_q8/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/embed_layernorm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gather/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gavgpool/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gemm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/lstm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/matmul/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/maxpool/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/ops/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/pad/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/pooling/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/resize/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/split/index", "autoapi/neural_compressor/adaptor/ox_utils/quantizer/index", "autoapi/neural_compressor/adaptor/ox_utils/util/index", "autoapi/neural_compressor/adaptor/pytorch/index", "autoapi/neural_compressor/adaptor/query/index", "autoapi/neural_compressor/adaptor/tensorflow/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter_without_calib/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/bf16_convert/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_add_to_biasadd/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_layout/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_leakyrelu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_nan_to_random/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_placeholder_to_const/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dequantize_cast_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dilated_contraction/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dummy_biasadd/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/expanddims_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fetch_weight_from_reshape/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_batch_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_constant/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_biasadd_add/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_column_wise_mul/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_conv_with_math/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_in/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_gelu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_layer_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_fp32_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_reshape_transpose/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/graph_cse_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/grappler_pass/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/insert_print_node/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/move_squeeze_after_relu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/pre_optimize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/remove_training_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/rename_batch_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/split_shared_input/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_equivalent_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_unused_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/switch_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/update_enter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/graph_base/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_fake_quant/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value_without_calib/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_redundant_dequantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_requantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_redundant_dequantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_requantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/meta_op_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_hostconst_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_quantized_op_cse/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/rnn_convert/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/scale_propagation/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/insert_qdq_pattern/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/merge_duplicated_qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/share_qdq_y_pattern/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_util/index", "autoapi/neural_compressor/adaptor/tf_utils/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/fake_quantize/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_config/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_helper/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/optimize_layer/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_add/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_base/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_wrapper/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_concatv2/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_deconv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_in/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_matmul/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_pooling/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/optimize_qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_base/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_concatv2/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_for_intel_cpu/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_matmul/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_pooling/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph_common/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/bias_correction/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/graph_transform_base/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/insert_logging/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/rerange_quantized_concat/index", "autoapi/neural_compressor/adaptor/tf_utils/util/index", "autoapi/neural_compressor/adaptor/torch_utils/bf16_convert/index", "autoapi/neural_compressor/adaptor/torch_utils/hawq_metric/index", "autoapi/neural_compressor/adaptor/torch_utils/index", "autoapi/neural_compressor/adaptor/torch_utils/onnx/index", "autoapi/neural_compressor/adaptor/torch_utils/symbolic_trace/index", "autoapi/neural_compressor/adaptor/torch_utils/util/index", "autoapi/neural_compressor/algorithm/algorithm/index", "autoapi/neural_compressor/algorithm/fast_bias_correction/index", "autoapi/neural_compressor/algorithm/index", "autoapi/neural_compressor/algorithm/weight_correction/index", "autoapi/neural_compressor/benchmark/index", "autoapi/neural_compressor/conf/config/index", "autoapi/neural_compressor/conf/dotdict/index", "autoapi/neural_compressor/conf/index", "autoapi/neural_compressor/conf/pythonic_config/index", "autoapi/neural_compressor/config/index", "autoapi/neural_compressor/contrib/index", "autoapi/neural_compressor/contrib/strategy/index", "autoapi/neural_compressor/contrib/strategy/sigopt/index", "autoapi/neural_compressor/contrib/strategy/tpe/index", "autoapi/neural_compressor/data/dataloaders/base_dataloader/index", "autoapi/neural_compressor/data/dataloaders/dataloader/index", "autoapi/neural_compressor/data/dataloaders/default_dataloader/index", "autoapi/neural_compressor/data/dataloaders/fetcher/index", "autoapi/neural_compressor/data/dataloaders/index", "autoapi/neural_compressor/data/dataloaders/mxnet_dataloader/index", "autoapi/neural_compressor/data/dataloaders/onnxrt_dataloader/index", "autoapi/neural_compressor/data/dataloaders/pytorch_dataloader/index", "autoapi/neural_compressor/data/dataloaders/sampler/index", "autoapi/neural_compressor/data/dataloaders/tensorflow_dataloader/index", "autoapi/neural_compressor/data/datasets/bert_dataset/index", "autoapi/neural_compressor/data/datasets/coco_dataset/index", "autoapi/neural_compressor/data/datasets/dataset/index", "autoapi/neural_compressor/data/datasets/dummy_dataset/index", "autoapi/neural_compressor/data/datasets/dummy_dataset_v2/index", "autoapi/neural_compressor/data/datasets/imagenet_dataset/index", "autoapi/neural_compressor/data/datasets/index", "autoapi/neural_compressor/data/datasets/style_transfer_dataset/index", "autoapi/neural_compressor/data/filters/coco_filter/index", "autoapi/neural_compressor/data/filters/filter/index", "autoapi/neural_compressor/data/filters/index", "autoapi/neural_compressor/data/index", "autoapi/neural_compressor/data/transforms/coco_transform/index", "autoapi/neural_compressor/data/transforms/imagenet_transform/index", "autoapi/neural_compressor/data/transforms/index", "autoapi/neural_compressor/data/transforms/postprocess/index", "autoapi/neural_compressor/data/transforms/tokenization/index", "autoapi/neural_compressor/data/transforms/transform/index", "autoapi/neural_compressor/experimental/benchmark/index", "autoapi/neural_compressor/experimental/common/criterion/index", "autoapi/neural_compressor/experimental/common/dataloader/index", "autoapi/neural_compressor/experimental/common/index", "autoapi/neural_compressor/experimental/common/metric/index", "autoapi/neural_compressor/experimental/common/model/index", "autoapi/neural_compressor/experimental/common/optimizer/index", "autoapi/neural_compressor/experimental/common/postprocess/index", "autoapi/neural_compressor/experimental/common/torch_utils/index", "autoapi/neural_compressor/experimental/component/index", "autoapi/neural_compressor/experimental/data/dataloaders/base_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/default_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/fetcher/index", "autoapi/neural_compressor/experimental/data/dataloaders/index", "autoapi/neural_compressor/experimental/data/dataloaders/mxnet_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/onnxrt_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/pytorch_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/sampler/index", "autoapi/neural_compressor/experimental/data/dataloaders/tensorflow_dataloader/index", "autoapi/neural_compressor/experimental/data/datasets/bert_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/coco_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset_v2/index", "autoapi/neural_compressor/experimental/data/datasets/imagenet_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/index", "autoapi/neural_compressor/experimental/data/datasets/style_transfer_dataset/index", "autoapi/neural_compressor/experimental/data/filters/coco_filter/index", "autoapi/neural_compressor/experimental/data/filters/filter/index", "autoapi/neural_compressor/experimental/data/filters/index", "autoapi/neural_compressor/experimental/data/index", "autoapi/neural_compressor/experimental/data/transforms/imagenet_transform/index", "autoapi/neural_compressor/experimental/data/transforms/index", "autoapi/neural_compressor/experimental/data/transforms/tokenization/index", "autoapi/neural_compressor/experimental/data/transforms/transform/index", "autoapi/neural_compressor/experimental/distillation/index", "autoapi/neural_compressor/experimental/export/index", "autoapi/neural_compressor/experimental/export/qlinear2qdq/index", "autoapi/neural_compressor/experimental/export/torch2onnx/index", "autoapi/neural_compressor/experimental/export/utils/index", "autoapi/neural_compressor/experimental/graph_optimization/index", "autoapi/neural_compressor/experimental/index", "autoapi/neural_compressor/experimental/metric/bleu/index", "autoapi/neural_compressor/experimental/metric/bleu_util/index", "autoapi/neural_compressor/experimental/metric/coco_label_map/index", "autoapi/neural_compressor/experimental/metric/coco_tools/index", "autoapi/neural_compressor/experimental/metric/evaluate_squad/index", "autoapi/neural_compressor/experimental/metric/f1/index", "autoapi/neural_compressor/experimental/metric/index", "autoapi/neural_compressor/experimental/metric/metric/index", "autoapi/neural_compressor/experimental/mixed_precision/index", "autoapi/neural_compressor/experimental/model_conversion/index", "autoapi/neural_compressor/experimental/nas/basic_nas/index", "autoapi/neural_compressor/experimental/nas/dynas/index", "autoapi/neural_compressor/experimental/nas/dynast/dynas_manager/index", "autoapi/neural_compressor/experimental/nas/dynast/dynas_predictor/index", "autoapi/neural_compressor/experimental/nas/dynast/dynas_search/index", "autoapi/neural_compressor/experimental/nas/dynast/dynas_utils/index", "autoapi/neural_compressor/experimental/nas/dynast/index", "autoapi/neural_compressor/experimental/nas/dynast/supernetwork/index", "autoapi/neural_compressor/experimental/nas/dynast/supernetwork/machine_translation/index", "autoapi/neural_compressor/experimental/nas/dynast/supernetwork/machine_translation/modules_supernetwork/index", "autoapi/neural_compressor/experimental/nas/dynast/supernetwork/machine_translation/transformer_interface/index", "autoapi/neural_compressor/experimental/nas/dynast/supernetwork/machine_translation/transformer_supernetwork/index", "autoapi/neural_compressor/experimental/nas/index", "autoapi/neural_compressor/experimental/nas/nas/index", "autoapi/neural_compressor/experimental/nas/nas_utils/index", "autoapi/neural_compressor/experimental/nas/search_algorithms/index", "autoapi/neural_compressor/experimental/pruning/index", "autoapi/neural_compressor/experimental/pruning_recipes/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/pattern/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/tile_pattern/index", "autoapi/neural_compressor/experimental/pruning_v2/index", "autoapi/neural_compressor/experimental/pytorch_pruner/index", "autoapi/neural_compressor/experimental/pytorch_pruner/logger/index", "autoapi/neural_compressor/experimental/pytorch_pruner/patterns/index", "autoapi/neural_compressor/experimental/pytorch_pruner/prune_utils/index", "autoapi/neural_compressor/experimental/pytorch_pruner/pruner/index", "autoapi/neural_compressor/experimental/pytorch_pruner/pruning/index", "autoapi/neural_compressor/experimental/pytorch_pruner/scheduler/index", "autoapi/neural_compressor/experimental/quantization/index", "autoapi/neural_compressor/experimental/scheduler/index", "autoapi/neural_compressor/index", "autoapi/neural_compressor/metric/bleu/index", "autoapi/neural_compressor/metric/bleu_util/index", "autoapi/neural_compressor/metric/coco_label_map/index", "autoapi/neural_compressor/metric/coco_tools/index", "autoapi/neural_compressor/metric/evaluate_squad/index", "autoapi/neural_compressor/metric/f1/index", "autoapi/neural_compressor/metric/index", "autoapi/neural_compressor/metric/metric/index", "autoapi/neural_compressor/mix_precision/index", "autoapi/neural_compressor/model/base_model/index", "autoapi/neural_compressor/model/index", "autoapi/neural_compressor/model/keras_model/index", "autoapi/neural_compressor/model/model/index", "autoapi/neural_compressor/model/mxnet_model/index", "autoapi/neural_compressor/model/nets_factory/index", "autoapi/neural_compressor/model/onnx_model/index", "autoapi/neural_compressor/model/tensorflow_model/index", "autoapi/neural_compressor/model/torch_model/index", "autoapi/neural_compressor/objective/index", "autoapi/neural_compressor/pruner/criteria/index", "autoapi/neural_compressor/pruner/index", "autoapi/neural_compressor/pruner/logger/index", "autoapi/neural_compressor/pruner/patterns/index", "autoapi/neural_compressor/pruner/pruner_legacy/gradient_sensitivity/index", "autoapi/neural_compressor/pruner/pruner_legacy/group_lasso/index", "autoapi/neural_compressor/pruner/pruner_legacy/index", "autoapi/neural_compressor/pruner/pruner_legacy/magnitude/index", "autoapi/neural_compressor/pruner/pruner_legacy/pattern_lock/index", "autoapi/neural_compressor/pruner/pruner_legacy/pruner/index", "autoapi/neural_compressor/pruner/pruners/index", "autoapi/neural_compressor/pruner/pruning/index", "autoapi/neural_compressor/pruner/regs/index", "autoapi/neural_compressor/pruner/schedulers/index", "autoapi/neural_compressor/pruner/utils/index", "autoapi/neural_compressor/quantization/index", "autoapi/neural_compressor/strategy/auto_mixed_precision/index", "autoapi/neural_compressor/strategy/basic/index", "autoapi/neural_compressor/strategy/bayesian/index", "autoapi/neural_compressor/strategy/conservative/index", "autoapi/neural_compressor/strategy/exhaustive/index", "autoapi/neural_compressor/strategy/hawq_v2/index", "autoapi/neural_compressor/strategy/index", "autoapi/neural_compressor/strategy/mse/index", "autoapi/neural_compressor/strategy/mse_v2/index", "autoapi/neural_compressor/strategy/random/index", "autoapi/neural_compressor/strategy/strategy/index", "autoapi/neural_compressor/strategy/utils/index", "autoapi/neural_compressor/strategy/utils/tuning_sampler/index", "autoapi/neural_compressor/strategy/utils/tuning_space/index", "autoapi/neural_compressor/strategy/utils/tuning_structs/index", "autoapi/neural_compressor/training/index", "autoapi/neural_compressor/utils/collect_layer_histogram/index", "autoapi/neural_compressor/utils/constant/index", "autoapi/neural_compressor/utils/create_obj_from_config/index", "autoapi/neural_compressor/utils/index", "autoapi/neural_compressor/utils/kl_divergence/index", "autoapi/neural_compressor/utils/load_huggingface/index", "autoapi/neural_compressor/utils/logger/index", "autoapi/neural_compressor/utils/options/index", "autoapi/neural_compressor/utils/pytorch/index", "autoapi/neural_compressor/utils/utility/index", "autoapi/neural_compressor/ux/components/benchmark/benchmark/index", "autoapi/neural_compressor/ux/components/benchmark/benchmark_model/index", "autoapi/neural_compressor/ux/components/benchmark/execute_benchmark/index", "autoapi/neural_compressor/ux/components/benchmark/index", "autoapi/neural_compressor/ux/components/config_generator/benchmark_config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/graph_optimization_config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/mixed_precision_config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/profiling_config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/pruning_config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/quantization_config_generator/index", "autoapi/neural_compressor/ux/components/configuration_wizard/configuration_parser/index", "autoapi/neural_compressor/ux/components/configuration_wizard/get_boundary_nodes/index", "autoapi/neural_compressor/ux/components/configuration_wizard/get_configuration/index", "autoapi/neural_compressor/ux/components/configuration_wizard/index", "autoapi/neural_compressor/ux/components/configuration_wizard/params_feeder/index", "autoapi/neural_compressor/ux/components/configuration_wizard/pruning_config_parser/index", "autoapi/neural_compressor/ux/components/db_manager/db_manager/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/benchmark/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/benchmark_result/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/dataloader/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/dataset/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/domain/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/domain_flavour/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/example/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/framework/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/metric/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/model/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/optimization/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/optimization_type/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/precision/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/profiling/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/profiling_result/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/project/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/pruning_details/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/transform/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/tuning_details/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/tuning_history/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/benchmark_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/dataset_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/db_operations/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/diagnosis_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/dictionaries_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/examples_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/model_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/optimization_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/profiling_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/project_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/index", "autoapi/neural_compressor/ux/components/db_manager/params_interfaces/index", "autoapi/neural_compressor/ux/components/db_manager/utils/index", "autoapi/neural_compressor/ux/components/diagnosis/diagnosis/index", "autoapi/neural_compressor/ux/components/diagnosis/factory/index", "autoapi/neural_compressor/ux/components/diagnosis/index", "autoapi/neural_compressor/ux/components/diagnosis/onnx_diagnosis/index", "autoapi/neural_compressor/ux/components/diagnosis/onnx_diagnosis/onnxrt_diagnosis/index", "autoapi/neural_compressor/ux/components/diagnosis/op_details/index", "autoapi/neural_compressor/ux/components/diagnosis/op_entry/index", "autoapi/neural_compressor/ux/components/diagnosis/tensorflow_diagnosis/index", "autoapi/neural_compressor/ux/components/diagnosis/tensorflow_diagnosis/tensorflow_diagnosis/index", "autoapi/neural_compressor/ux/components/file_browser/file_browser/index", "autoapi/neural_compressor/ux/components/file_browser/index", "autoapi/neural_compressor/ux/components/graph/attribute/index", "autoapi/neural_compressor/ux/components/graph/collapser/index", "autoapi/neural_compressor/ux/components/graph/edge/index", "autoapi/neural_compressor/ux/components/graph/graph/index", "autoapi/neural_compressor/ux/components/graph/graph_reader/index", "autoapi/neural_compressor/ux/components/graph/index", "autoapi/neural_compressor/ux/components/graph/node/index", "autoapi/neural_compressor/ux/components/graph/reader/index", "autoapi/neural_compressor/ux/components/graph/reader/onnxrt_reader/index", "autoapi/neural_compressor/ux/components/graph/reader/tensorflow_reader/index", "autoapi/neural_compressor/ux/components/index", "autoapi/neural_compressor/ux/components/jobs_management/index", "autoapi/neural_compressor/ux/components/jobs_management/jobs_control_queue/index", "autoapi/neural_compressor/ux/components/jobs_management/jobs_manager/index", "autoapi/neural_compressor/ux/components/jobs_management/request/index", "autoapi/neural_compressor/ux/components/manage_workspace/index", "autoapi/neural_compressor/ux/components/model/domain/index", "autoapi/neural_compressor/ux/components/model/index", "autoapi/neural_compressor/ux/components/model/model/index", "autoapi/neural_compressor/ux/components/model/model_type_getter/index", "autoapi/neural_compressor/ux/components/model/onnxrt/index", "autoapi/neural_compressor/ux/components/model/onnxrt/model/index", "autoapi/neural_compressor/ux/components/model/pytorch/index", "autoapi/neural_compressor/ux/components/model/pytorch/model/index", "autoapi/neural_compressor/ux/components/model/repository/index", "autoapi/neural_compressor/ux/components/model/shape/index", "autoapi/neural_compressor/ux/components/model/tensorflow/frozen_pb/index", "autoapi/neural_compressor/ux/components/model/tensorflow/index", "autoapi/neural_compressor/ux/components/model/tensorflow/keras/index", "autoapi/neural_compressor/ux/components/model/tensorflow/meta_graph/index", "autoapi/neural_compressor/ux/components/model/tensorflow/model/index", "autoapi/neural_compressor/ux/components/model/tensorflow/saved_model/index", "autoapi/neural_compressor/ux/components/model/tensorflow/utils/index", "autoapi/neural_compressor/ux/components/model_zoo/download_config/index", "autoapi/neural_compressor/ux/components/model_zoo/download_model/index", "autoapi/neural_compressor/ux/components/model_zoo/downloader/index", "autoapi/neural_compressor/ux/components/model_zoo/index", "autoapi/neural_compressor/ux/components/model_zoo/list_models/index", "autoapi/neural_compressor/ux/components/names_mapper/index", "autoapi/neural_compressor/ux/components/names_mapper/names_mapper/index", "autoapi/neural_compressor/ux/components/optimization/execute_optimization/index", "autoapi/neural_compressor/ux/components/optimization/factory/index", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/graph_optimization/index", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/index", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/optimize_model/index", "autoapi/neural_compressor/ux/components/optimization/index", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/index", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/mixed_precision/index", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/optimize_model/index", "autoapi/neural_compressor/ux/components/optimization/neural_coder_optimization/index", "autoapi/neural_compressor/ux/components/optimization/neural_coder_optimization/optimize_model/index", "autoapi/neural_compressor/ux/components/optimization/optimization/index", "autoapi/neural_compressor/ux/components/optimization/pruning/index", "autoapi/neural_compressor/ux/components/optimization/pruning/optimize_model/index", "autoapi/neural_compressor/ux/components/optimization/pruning/pruning/index", "autoapi/neural_compressor/ux/components/optimization/tune/index", "autoapi/neural_compressor/ux/components/optimization/tune/tune_model/index", "autoapi/neural_compressor/ux/components/optimization/tune/tuning/index", "autoapi/neural_compressor/ux/components/optimization/tuning_history/index", "autoapi/neural_compressor/ux/components/profiling/execute_profiling/index", "autoapi/neural_compressor/ux/components/profiling/factory/index", "autoapi/neural_compressor/ux/components/profiling/index", "autoapi/neural_compressor/ux/components/profiling/profile_model/index", "autoapi/neural_compressor/ux/components/profiling/profiler/index", "autoapi/neural_compressor/ux/components/profiling/profiling/index", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/factory/index", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/index", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/profiler/index", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/utils/index", "autoapi/neural_compressor/ux/inc_bench/index", "autoapi/neural_compressor/ux/index", "autoapi/neural_compressor/ux/utils/consts/index", "autoapi/neural_compressor/ux/utils/environment/index", "autoapi/neural_compressor/ux/utils/exceptions/index", "autoapi/neural_compressor/ux/utils/executor/index", "autoapi/neural_compressor/ux/utils/expiring_dict/index", "autoapi/neural_compressor/ux/utils/github_info/index", "autoapi/neural_compressor/ux/utils/hw_info/index", "autoapi/neural_compressor/ux/utils/index", "autoapi/neural_compressor/ux/utils/json_serializer/index", "autoapi/neural_compressor/ux/utils/logger/index", "autoapi/neural_compressor/ux/utils/parser/index", "autoapi/neural_compressor/ux/utils/proc/index", "autoapi/neural_compressor/ux/utils/processes/index", "autoapi/neural_compressor/ux/utils/singleton/index", "autoapi/neural_compressor/ux/utils/status_updates/index", "autoapi/neural_compressor/ux/utils/templates/index", "autoapi/neural_compressor/ux/utils/templates/metric/index", "autoapi/neural_compressor/ux/utils/templates/workdir/index", "autoapi/neural_compressor/ux/utils/utils/index", "autoapi/neural_compressor/ux/utils/workload/config/index", "autoapi/neural_compressor/ux/utils/workload/dataloader/index", "autoapi/neural_compressor/ux/utils/workload/evaluation/index", "autoapi/neural_compressor/ux/utils/workload/graph_optimization/index", "autoapi/neural_compressor/ux/utils/workload/index", "autoapi/neural_compressor/ux/utils/workload/mixed_precision/index", "autoapi/neural_compressor/ux/utils/workload/model/index", "autoapi/neural_compressor/ux/utils/workload/pruning/index", "autoapi/neural_compressor/ux/utils/workload/quantization/index", "autoapi/neural_compressor/ux/utils/workload/tuning/index", "autoapi/neural_compressor/ux/utils/yaml_utils/index", "autoapi/neural_compressor/ux/web/communication/index", "autoapi/neural_compressor/ux/web/configuration/index", "autoapi/neural_compressor/ux/web/exceptions/index", "autoapi/neural_compressor/ux/web/index", "autoapi/neural_compressor/ux/web/router/index", "autoapi/neural_compressor/ux/web/server/index", "autoapi/neural_compressor/ux/web/service/benchmark/index", "autoapi/neural_compressor/ux/web/service/history_snapshot_parser/index", "autoapi/neural_compressor/ux/web/service/index", "autoapi/neural_compressor/ux/web/service/model/index", "autoapi/neural_compressor/ux/web/service/optimization/index", "autoapi/neural_compressor/ux/web/service/profiling/index", "autoapi/neural_compressor/ux/web/service/request_data_processor/index", "autoapi/neural_compressor/ux/web/service/response_generator/index", "autoapi/neural_compressor/ux/web/service/workload/index", "autoapi/neural_compressor/version/index", "docs/build_docs/source/index", "docs/source/CODE_OF_CONDUCT", "docs/source/CONTRIBUTING", "docs/source/FX", "docs/source/NAS", "docs/source/SECURITY", "docs/source/Welcome", "docs/source/adaptor", "docs/source/api-doc/adaptor", "docs/source/api-doc/adaptor/onnxrt", "docs/source/api-doc/adaptor/torch_utils", "docs/source/api-doc/adaptor/torch_utils/bf16_convert", "docs/source/api-doc/adaptor/torch_utils/hawq_metric", "docs/source/api-doc/adaptor/torch_utils/onnx", "docs/source/api-doc/adaptor/torch_utils/symbolic_trace", "docs/source/api-doc/adaptor/torch_utils/util", "docs/source/api-doc/algorithm", "docs/source/api-doc/apis", "docs/source/api-doc/basic_api", "docs/source/api-doc/basic_api/benchmark", "docs/source/api-doc/basic_api/config", "docs/source/api-doc/basic_api/mix_precision", "docs/source/api-doc/basic_api/objective", "docs/source/api-doc/basic_api/quantization", "docs/source/api-doc/basic_api/training", "docs/source/api-doc/common", "docs/source/api-doc/common/benchmark", "docs/source/api-doc/common/bleu", "docs/source/api-doc/common/criterion", "docs/source/api-doc/common/data", "docs/source/api-doc/common/data/dataloader", "docs/source/api-doc/common/data/datasets", "docs/source/api-doc/common/data/transforms", "docs/source/api-doc/common/metric", "docs/source/api-doc/common/model", "docs/source/api-doc/common/optimizer", "docs/source/api-doc/component", "docs/source/api-doc/component/Distillation", "docs/source/api-doc/component/MixedPrecision", "docs/source/api-doc/component/ModelConversion", "docs/source/api-doc/component/Nas", "docs/source/api-doc/component/Pruning", "docs/source/api-doc/component/Quantization", "docs/source/api-doc/component/Scheduler", "docs/source/api-doc/contrib", "docs/source/api-doc/model", "docs/source/api-doc/pythonic", "docs/source/api-doc/strategy", "docs/source/api-doc/strategy/strategy", "docs/source/api-doc/utils", "docs/source/bench", "docs/source/benchmark", "docs/source/dataloader", "docs/source/dataset", "docs/source/design", "docs/source/distillation", "docs/source/distillation_quantization", "docs/source/distributed", "docs/source/examples_readme", "docs/source/export", "docs/source/faq", "docs/source/framework_yaml", "docs/source/incompatible_changes", "docs/source/infrastructure", "docs/source/installation_guide", "docs/source/legal_information", "docs/source/metric", "docs/source/mixed_precision", "docs/source/model", "docs/source/neural_coder/README", "docs/source/neural_coder/docs/AWSSageMakerSupport", "docs/source/neural_coder/docs/BigDLNanoSupport", "docs/source/neural_coder/docs/IntelCPU_PerformanceSetting", "docs/source/neural_coder/docs/PythonAPI", "docs/source/neural_coder/docs/PythonLauncher", "docs/source/neural_coder/docs/Quantization", "docs/source/neural_coder/docs/SupportMatrix", "docs/source/neural_coder/docs/release_notes/v0.4", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/CHANGELOG", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/DEVELOP", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/README", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/RELEASE", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/CHANGELOG", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/DEVELOP", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/RELEASE", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/CHANGELOG", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/README", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/vsc-extension-quickstart", "docs/source/objective", "docs/source/orchestration", "docs/source/platform_configuration", "docs/source/pruning", "docs/source/pruning_details", "docs/source/publication_list", "docs/source/pythonic_style", "docs/source/quantization", "docs/source/quantization_mixed_precision", "docs/source/releases_info", "docs/source/sigopt_strategy", "docs/source/tensorboard", "docs/source/transform", "docs/source/tuning_strategies", "docs/source/user_yaml", "docs/source/validated_model_list", "index"], "filenames": ["autoapi/644ec953a7dc_pruning_support/index.rst", "autoapi/6ece06672ed3_v1_14/index.rst", "autoapi/6f0d0f71d92e_v1_13/index.rst", "autoapi/9e89549a08c8_v1_11/index.rst", "autoapi/block_mask/index.rst", "autoapi/env/index.rst", "autoapi/neural_compressor/adaptor/adaptor/index.rst", "autoapi/neural_compressor/adaptor/index.rst", "autoapi/neural_compressor/adaptor/keras/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/quantizer/index.rst", "autoapi/neural_compressor/adaptor/mxnet/index.rst", "autoapi/neural_compressor/adaptor/mxnet_utils/index.rst", "autoapi/neural_compressor/adaptor/mxnet_utils/util/index.rst", "autoapi/neural_compressor/adaptor/onnxrt/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/calibration/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/activation/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/argmax/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/attention/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/binary_op/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/concat/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/conv/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/direct_q8/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/embed_layernorm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gather/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gavgpool/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gemm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/lstm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/matmul/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/maxpool/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/ops/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/pad/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/pooling/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/resize/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/split/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/quantizer/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/util/index.rst", "autoapi/neural_compressor/adaptor/pytorch/index.rst", "autoapi/neural_compressor/adaptor/query/index.rst", "autoapi/neural_compressor/adaptor/tensorflow/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter_without_calib/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/bf16_convert/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_add_to_biasadd/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_layout/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_leakyrelu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_nan_to_random/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_placeholder_to_const/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dequantize_cast_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dilated_contraction/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dummy_biasadd/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/expanddims_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fetch_weight_from_reshape/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_batch_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_constant/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_biasadd_add/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_column_wise_mul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_conv_with_math/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_in/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_gelu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_layer_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_fp32_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_reshape_transpose/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/graph_cse_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/grappler_pass/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/insert_print_node/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/move_squeeze_after_relu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/pre_optimize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/remove_training_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/rename_batch_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/split_shared_input/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_equivalent_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_unused_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/switch_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/update_enter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/graph_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_fake_quant/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value_without_calib/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_redundant_dequantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_requantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_redundant_dequantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_requantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/meta_op_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_hostconst_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_quantized_op_cse/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/rnn_convert/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/scale_propagation/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/insert_qdq_pattern/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/merge_duplicated_qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/share_qdq_y_pattern/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_util/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/fake_quantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_config/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_helper/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/optimize_layer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_add/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_wrapper/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_concatv2/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_deconv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_in/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_matmul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_pooling/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/optimize_qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_concatv2/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_for_intel_cpu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_matmul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_pooling/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph_common/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/bias_correction/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/graph_transform_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/insert_logging/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/rerange_quantized_concat/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/util/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/bf16_convert/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/hawq_metric/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/onnx/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/symbolic_trace/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/util/index.rst", "autoapi/neural_compressor/algorithm/algorithm/index.rst", "autoapi/neural_compressor/algorithm/fast_bias_correction/index.rst", "autoapi/neural_compressor/algorithm/index.rst", "autoapi/neural_compressor/algorithm/weight_correction/index.rst", "autoapi/neural_compressor/benchmark/index.rst", "autoapi/neural_compressor/conf/config/index.rst", "autoapi/neural_compressor/conf/dotdict/index.rst", "autoapi/neural_compressor/conf/index.rst", "autoapi/neural_compressor/conf/pythonic_config/index.rst", "autoapi/neural_compressor/config/index.rst", "autoapi/neural_compressor/contrib/index.rst", "autoapi/neural_compressor/contrib/strategy/index.rst", "autoapi/neural_compressor/contrib/strategy/sigopt/index.rst", "autoapi/neural_compressor/contrib/strategy/tpe/index.rst", "autoapi/neural_compressor/data/dataloaders/base_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/default_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/fetcher/index.rst", "autoapi/neural_compressor/data/dataloaders/index.rst", "autoapi/neural_compressor/data/dataloaders/mxnet_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/onnxrt_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/pytorch_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/sampler/index.rst", "autoapi/neural_compressor/data/dataloaders/tensorflow_dataloader/index.rst", "autoapi/neural_compressor/data/datasets/bert_dataset/index.rst", "autoapi/neural_compressor/data/datasets/coco_dataset/index.rst", "autoapi/neural_compressor/data/datasets/dataset/index.rst", "autoapi/neural_compressor/data/datasets/dummy_dataset/index.rst", "autoapi/neural_compressor/data/datasets/dummy_dataset_v2/index.rst", "autoapi/neural_compressor/data/datasets/imagenet_dataset/index.rst", "autoapi/neural_compressor/data/datasets/index.rst", "autoapi/neural_compressor/data/datasets/style_transfer_dataset/index.rst", "autoapi/neural_compressor/data/filters/coco_filter/index.rst", "autoapi/neural_compressor/data/filters/filter/index.rst", "autoapi/neural_compressor/data/filters/index.rst", "autoapi/neural_compressor/data/index.rst", "autoapi/neural_compressor/data/transforms/coco_transform/index.rst", "autoapi/neural_compressor/data/transforms/imagenet_transform/index.rst", "autoapi/neural_compressor/data/transforms/index.rst", "autoapi/neural_compressor/data/transforms/postprocess/index.rst", "autoapi/neural_compressor/data/transforms/tokenization/index.rst", "autoapi/neural_compressor/data/transforms/transform/index.rst", "autoapi/neural_compressor/experimental/benchmark/index.rst", "autoapi/neural_compressor/experimental/common/criterion/index.rst", "autoapi/neural_compressor/experimental/common/dataloader/index.rst", "autoapi/neural_compressor/experimental/common/index.rst", "autoapi/neural_compressor/experimental/common/metric/index.rst", "autoapi/neural_compressor/experimental/common/model/index.rst", "autoapi/neural_compressor/experimental/common/optimizer/index.rst", "autoapi/neural_compressor/experimental/common/postprocess/index.rst", "autoapi/neural_compressor/experimental/common/torch_utils/index.rst", "autoapi/neural_compressor/experimental/component/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/base_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/default_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/fetcher/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/mxnet_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/onnxrt_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/pytorch_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/sampler/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/tensorflow_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/datasets/bert_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/coco_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset_v2/index.rst", "autoapi/neural_compressor/experimental/data/datasets/imagenet_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/index.rst", "autoapi/neural_compressor/experimental/data/datasets/style_transfer_dataset/index.rst", "autoapi/neural_compressor/experimental/data/filters/coco_filter/index.rst", "autoapi/neural_compressor/experimental/data/filters/filter/index.rst", "autoapi/neural_compressor/experimental/data/filters/index.rst", "autoapi/neural_compressor/experimental/data/index.rst", "autoapi/neural_compressor/experimental/data/transforms/imagenet_transform/index.rst", "autoapi/neural_compressor/experimental/data/transforms/index.rst", "autoapi/neural_compressor/experimental/data/transforms/tokenization/index.rst", "autoapi/neural_compressor/experimental/data/transforms/transform/index.rst", "autoapi/neural_compressor/experimental/distillation/index.rst", "autoapi/neural_compressor/experimental/export/index.rst", "autoapi/neural_compressor/experimental/export/qlinear2qdq/index.rst", "autoapi/neural_compressor/experimental/export/torch2onnx/index.rst", "autoapi/neural_compressor/experimental/export/utils/index.rst", "autoapi/neural_compressor/experimental/graph_optimization/index.rst", "autoapi/neural_compressor/experimental/index.rst", "autoapi/neural_compressor/experimental/metric/bleu/index.rst", "autoapi/neural_compressor/experimental/metric/bleu_util/index.rst", "autoapi/neural_compressor/experimental/metric/coco_label_map/index.rst", "autoapi/neural_compressor/experimental/metric/coco_tools/index.rst", "autoapi/neural_compressor/experimental/metric/evaluate_squad/index.rst", "autoapi/neural_compressor/experimental/metric/f1/index.rst", "autoapi/neural_compressor/experimental/metric/index.rst", "autoapi/neural_compressor/experimental/metric/metric/index.rst", "autoapi/neural_compressor/experimental/mixed_precision/index.rst", "autoapi/neural_compressor/experimental/model_conversion/index.rst", "autoapi/neural_compressor/experimental/nas/basic_nas/index.rst", "autoapi/neural_compressor/experimental/nas/dynas/index.rst", "autoapi/neural_compressor/experimental/nas/dynast/dynas_manager/index.rst", "autoapi/neural_compressor/experimental/nas/dynast/dynas_predictor/index.rst", "autoapi/neural_compressor/experimental/nas/dynast/dynas_search/index.rst", "autoapi/neural_compressor/experimental/nas/dynast/dynas_utils/index.rst", "autoapi/neural_compressor/experimental/nas/dynast/index.rst", "autoapi/neural_compressor/experimental/nas/dynast/supernetwork/index.rst", "autoapi/neural_compressor/experimental/nas/dynast/supernetwork/machine_translation/index.rst", "autoapi/neural_compressor/experimental/nas/dynast/supernetwork/machine_translation/modules_supernetwork/index.rst", "autoapi/neural_compressor/experimental/nas/dynast/supernetwork/machine_translation/transformer_interface/index.rst", "autoapi/neural_compressor/experimental/nas/dynast/supernetwork/machine_translation/transformer_supernetwork/index.rst", "autoapi/neural_compressor/experimental/nas/index.rst", "autoapi/neural_compressor/experimental/nas/nas/index.rst", "autoapi/neural_compressor/experimental/nas/nas_utils/index.rst", "autoapi/neural_compressor/experimental/nas/search_algorithms/index.rst", "autoapi/neural_compressor/experimental/pruning/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/pattern/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/tile_pattern/index.rst", "autoapi/neural_compressor/experimental/pruning_v2/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/logger/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/patterns/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/prune_utils/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/pruner/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/pruning/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/scheduler/index.rst", "autoapi/neural_compressor/experimental/quantization/index.rst", "autoapi/neural_compressor/experimental/scheduler/index.rst", "autoapi/neural_compressor/index.rst", "autoapi/neural_compressor/metric/bleu/index.rst", "autoapi/neural_compressor/metric/bleu_util/index.rst", "autoapi/neural_compressor/metric/coco_label_map/index.rst", "autoapi/neural_compressor/metric/coco_tools/index.rst", "autoapi/neural_compressor/metric/evaluate_squad/index.rst", "autoapi/neural_compressor/metric/f1/index.rst", "autoapi/neural_compressor/metric/index.rst", "autoapi/neural_compressor/metric/metric/index.rst", "autoapi/neural_compressor/mix_precision/index.rst", "autoapi/neural_compressor/model/base_model/index.rst", "autoapi/neural_compressor/model/index.rst", "autoapi/neural_compressor/model/keras_model/index.rst", "autoapi/neural_compressor/model/model/index.rst", "autoapi/neural_compressor/model/mxnet_model/index.rst", "autoapi/neural_compressor/model/nets_factory/index.rst", "autoapi/neural_compressor/model/onnx_model/index.rst", "autoapi/neural_compressor/model/tensorflow_model/index.rst", "autoapi/neural_compressor/model/torch_model/index.rst", "autoapi/neural_compressor/objective/index.rst", "autoapi/neural_compressor/pruner/criteria/index.rst", "autoapi/neural_compressor/pruner/index.rst", "autoapi/neural_compressor/pruner/logger/index.rst", "autoapi/neural_compressor/pruner/patterns/index.rst", "autoapi/neural_compressor/pruner/pruner_legacy/gradient_sensitivity/index.rst", "autoapi/neural_compressor/pruner/pruner_legacy/group_lasso/index.rst", "autoapi/neural_compressor/pruner/pruner_legacy/index.rst", "autoapi/neural_compressor/pruner/pruner_legacy/magnitude/index.rst", "autoapi/neural_compressor/pruner/pruner_legacy/pattern_lock/index.rst", "autoapi/neural_compressor/pruner/pruner_legacy/pruner/index.rst", "autoapi/neural_compressor/pruner/pruners/index.rst", "autoapi/neural_compressor/pruner/pruning/index.rst", "autoapi/neural_compressor/pruner/regs/index.rst", "autoapi/neural_compressor/pruner/schedulers/index.rst", "autoapi/neural_compressor/pruner/utils/index.rst", "autoapi/neural_compressor/quantization/index.rst", "autoapi/neural_compressor/strategy/auto_mixed_precision/index.rst", "autoapi/neural_compressor/strategy/basic/index.rst", "autoapi/neural_compressor/strategy/bayesian/index.rst", "autoapi/neural_compressor/strategy/conservative/index.rst", "autoapi/neural_compressor/strategy/exhaustive/index.rst", "autoapi/neural_compressor/strategy/hawq_v2/index.rst", "autoapi/neural_compressor/strategy/index.rst", "autoapi/neural_compressor/strategy/mse/index.rst", "autoapi/neural_compressor/strategy/mse_v2/index.rst", "autoapi/neural_compressor/strategy/random/index.rst", "autoapi/neural_compressor/strategy/strategy/index.rst", "autoapi/neural_compressor/strategy/utils/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_sampler/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_space/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_structs/index.rst", "autoapi/neural_compressor/training/index.rst", "autoapi/neural_compressor/utils/collect_layer_histogram/index.rst", "autoapi/neural_compressor/utils/constant/index.rst", "autoapi/neural_compressor/utils/create_obj_from_config/index.rst", "autoapi/neural_compressor/utils/index.rst", "autoapi/neural_compressor/utils/kl_divergence/index.rst", "autoapi/neural_compressor/utils/load_huggingface/index.rst", "autoapi/neural_compressor/utils/logger/index.rst", "autoapi/neural_compressor/utils/options/index.rst", "autoapi/neural_compressor/utils/pytorch/index.rst", "autoapi/neural_compressor/utils/utility/index.rst", "autoapi/neural_compressor/ux/components/benchmark/benchmark/index.rst", "autoapi/neural_compressor/ux/components/benchmark/benchmark_model/index.rst", "autoapi/neural_compressor/ux/components/benchmark/execute_benchmark/index.rst", "autoapi/neural_compressor/ux/components/benchmark/index.rst", "autoapi/neural_compressor/ux/components/config_generator/benchmark_config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/graph_optimization_config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/mixed_precision_config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/profiling_config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/pruning_config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/quantization_config_generator/index.rst", "autoapi/neural_compressor/ux/components/configuration_wizard/configuration_parser/index.rst", "autoapi/neural_compressor/ux/components/configuration_wizard/get_boundary_nodes/index.rst", "autoapi/neural_compressor/ux/components/configuration_wizard/get_configuration/index.rst", "autoapi/neural_compressor/ux/components/configuration_wizard/index.rst", "autoapi/neural_compressor/ux/components/configuration_wizard/params_feeder/index.rst", "autoapi/neural_compressor/ux/components/configuration_wizard/pruning_config_parser/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_manager/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/benchmark/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/benchmark_result/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/dataloader/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/dataset/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/domain/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/domain_flavour/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/example/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/framework/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/metric/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/model/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/optimization/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/optimization_type/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/precision/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/profiling/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/profiling_result/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/project/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/pruning_details/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/transform/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/tuning_details/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/tuning_history/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/benchmark_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/dataset_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/db_operations/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/diagnosis_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/dictionaries_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/examples_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/model_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/optimization_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/profiling_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/project_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/index.rst", "autoapi/neural_compressor/ux/components/db_manager/params_interfaces/index.rst", "autoapi/neural_compressor/ux/components/db_manager/utils/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/diagnosis/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/factory/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/onnx_diagnosis/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/onnx_diagnosis/onnxrt_diagnosis/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/op_details/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/op_entry/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/tensorflow_diagnosis/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/tensorflow_diagnosis/tensorflow_diagnosis/index.rst", "autoapi/neural_compressor/ux/components/file_browser/file_browser/index.rst", "autoapi/neural_compressor/ux/components/file_browser/index.rst", "autoapi/neural_compressor/ux/components/graph/attribute/index.rst", "autoapi/neural_compressor/ux/components/graph/collapser/index.rst", "autoapi/neural_compressor/ux/components/graph/edge/index.rst", "autoapi/neural_compressor/ux/components/graph/graph/index.rst", "autoapi/neural_compressor/ux/components/graph/graph_reader/index.rst", "autoapi/neural_compressor/ux/components/graph/index.rst", "autoapi/neural_compressor/ux/components/graph/node/index.rst", "autoapi/neural_compressor/ux/components/graph/reader/index.rst", "autoapi/neural_compressor/ux/components/graph/reader/onnxrt_reader/index.rst", "autoapi/neural_compressor/ux/components/graph/reader/tensorflow_reader/index.rst", "autoapi/neural_compressor/ux/components/index.rst", "autoapi/neural_compressor/ux/components/jobs_management/index.rst", "autoapi/neural_compressor/ux/components/jobs_management/jobs_control_queue/index.rst", "autoapi/neural_compressor/ux/components/jobs_management/jobs_manager/index.rst", "autoapi/neural_compressor/ux/components/jobs_management/request/index.rst", "autoapi/neural_compressor/ux/components/manage_workspace/index.rst", "autoapi/neural_compressor/ux/components/model/domain/index.rst", "autoapi/neural_compressor/ux/components/model/index.rst", "autoapi/neural_compressor/ux/components/model/model/index.rst", "autoapi/neural_compressor/ux/components/model/model_type_getter/index.rst", "autoapi/neural_compressor/ux/components/model/onnxrt/index.rst", "autoapi/neural_compressor/ux/components/model/onnxrt/model/index.rst", "autoapi/neural_compressor/ux/components/model/pytorch/index.rst", "autoapi/neural_compressor/ux/components/model/pytorch/model/index.rst", "autoapi/neural_compressor/ux/components/model/repository/index.rst", "autoapi/neural_compressor/ux/components/model/shape/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/frozen_pb/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/keras/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/meta_graph/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/model/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/saved_model/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/utils/index.rst", "autoapi/neural_compressor/ux/components/model_zoo/download_config/index.rst", "autoapi/neural_compressor/ux/components/model_zoo/download_model/index.rst", "autoapi/neural_compressor/ux/components/model_zoo/downloader/index.rst", "autoapi/neural_compressor/ux/components/model_zoo/index.rst", "autoapi/neural_compressor/ux/components/model_zoo/list_models/index.rst", "autoapi/neural_compressor/ux/components/names_mapper/index.rst", "autoapi/neural_compressor/ux/components/names_mapper/names_mapper/index.rst", "autoapi/neural_compressor/ux/components/optimization/execute_optimization/index.rst", "autoapi/neural_compressor/ux/components/optimization/factory/index.rst", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/graph_optimization/index.rst", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/index.rst", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/optimize_model/index.rst", "autoapi/neural_compressor/ux/components/optimization/index.rst", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/index.rst", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/mixed_precision/index.rst", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/optimize_model/index.rst", "autoapi/neural_compressor/ux/components/optimization/neural_coder_optimization/index.rst", "autoapi/neural_compressor/ux/components/optimization/neural_coder_optimization/optimize_model/index.rst", "autoapi/neural_compressor/ux/components/optimization/optimization/index.rst", "autoapi/neural_compressor/ux/components/optimization/pruning/index.rst", "autoapi/neural_compressor/ux/components/optimization/pruning/optimize_model/index.rst", "autoapi/neural_compressor/ux/components/optimization/pruning/pruning/index.rst", "autoapi/neural_compressor/ux/components/optimization/tune/index.rst", "autoapi/neural_compressor/ux/components/optimization/tune/tune_model/index.rst", "autoapi/neural_compressor/ux/components/optimization/tune/tuning/index.rst", "autoapi/neural_compressor/ux/components/optimization/tuning_history/index.rst", "autoapi/neural_compressor/ux/components/profiling/execute_profiling/index.rst", "autoapi/neural_compressor/ux/components/profiling/factory/index.rst", "autoapi/neural_compressor/ux/components/profiling/index.rst", "autoapi/neural_compressor/ux/components/profiling/profile_model/index.rst", "autoapi/neural_compressor/ux/components/profiling/profiler/index.rst", "autoapi/neural_compressor/ux/components/profiling/profiling/index.rst", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/factory/index.rst", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/index.rst", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/profiler/index.rst", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/utils/index.rst", "autoapi/neural_compressor/ux/inc_bench/index.rst", "autoapi/neural_compressor/ux/index.rst", "autoapi/neural_compressor/ux/utils/consts/index.rst", "autoapi/neural_compressor/ux/utils/environment/index.rst", "autoapi/neural_compressor/ux/utils/exceptions/index.rst", "autoapi/neural_compressor/ux/utils/executor/index.rst", "autoapi/neural_compressor/ux/utils/expiring_dict/index.rst", "autoapi/neural_compressor/ux/utils/github_info/index.rst", "autoapi/neural_compressor/ux/utils/hw_info/index.rst", "autoapi/neural_compressor/ux/utils/index.rst", "autoapi/neural_compressor/ux/utils/json_serializer/index.rst", "autoapi/neural_compressor/ux/utils/logger/index.rst", "autoapi/neural_compressor/ux/utils/parser/index.rst", "autoapi/neural_compressor/ux/utils/proc/index.rst", "autoapi/neural_compressor/ux/utils/processes/index.rst", "autoapi/neural_compressor/ux/utils/singleton/index.rst", "autoapi/neural_compressor/ux/utils/status_updates/index.rst", "autoapi/neural_compressor/ux/utils/templates/index.rst", "autoapi/neural_compressor/ux/utils/templates/metric/index.rst", "autoapi/neural_compressor/ux/utils/templates/workdir/index.rst", "autoapi/neural_compressor/ux/utils/utils/index.rst", "autoapi/neural_compressor/ux/utils/workload/config/index.rst", "autoapi/neural_compressor/ux/utils/workload/dataloader/index.rst", "autoapi/neural_compressor/ux/utils/workload/evaluation/index.rst", "autoapi/neural_compressor/ux/utils/workload/graph_optimization/index.rst", "autoapi/neural_compressor/ux/utils/workload/index.rst", "autoapi/neural_compressor/ux/utils/workload/mixed_precision/index.rst", "autoapi/neural_compressor/ux/utils/workload/model/index.rst", "autoapi/neural_compressor/ux/utils/workload/pruning/index.rst", "autoapi/neural_compressor/ux/utils/workload/quantization/index.rst", "autoapi/neural_compressor/ux/utils/workload/tuning/index.rst", "autoapi/neural_compressor/ux/utils/yaml_utils/index.rst", "autoapi/neural_compressor/ux/web/communication/index.rst", "autoapi/neural_compressor/ux/web/configuration/index.rst", "autoapi/neural_compressor/ux/web/exceptions/index.rst", "autoapi/neural_compressor/ux/web/index.rst", "autoapi/neural_compressor/ux/web/router/index.rst", "autoapi/neural_compressor/ux/web/server/index.rst", "autoapi/neural_compressor/ux/web/service/benchmark/index.rst", "autoapi/neural_compressor/ux/web/service/history_snapshot_parser/index.rst", "autoapi/neural_compressor/ux/web/service/index.rst", "autoapi/neural_compressor/ux/web/service/model/index.rst", "autoapi/neural_compressor/ux/web/service/optimization/index.rst", "autoapi/neural_compressor/ux/web/service/profiling/index.rst", "autoapi/neural_compressor/ux/web/service/request_data_processor/index.rst", "autoapi/neural_compressor/ux/web/service/response_generator/index.rst", "autoapi/neural_compressor/ux/web/service/workload/index.rst", "autoapi/neural_compressor/version/index.rst", "docs/build_docs/source/index.rst", "docs/source/CODE_OF_CONDUCT.md", "docs/source/CONTRIBUTING.md", "docs/source/FX.md", "docs/source/NAS.md", "docs/source/SECURITY.md", "docs/source/Welcome.md", "docs/source/adaptor.md", "docs/source/api-doc/adaptor.rst", "docs/source/api-doc/adaptor/onnxrt.rst", "docs/source/api-doc/adaptor/torch_utils.rst", "docs/source/api-doc/adaptor/torch_utils/bf16_convert.rst", "docs/source/api-doc/adaptor/torch_utils/hawq_metric.rst", "docs/source/api-doc/adaptor/torch_utils/onnx.rst", "docs/source/api-doc/adaptor/torch_utils/symbolic_trace.rst", "docs/source/api-doc/adaptor/torch_utils/util.rst", "docs/source/api-doc/algorithm.rst", "docs/source/api-doc/apis.rst", "docs/source/api-doc/basic_api.rst", "docs/source/api-doc/basic_api/benchmark.rst", "docs/source/api-doc/basic_api/config.rst", "docs/source/api-doc/basic_api/mix_precision.rst", "docs/source/api-doc/basic_api/objective.rst", "docs/source/api-doc/basic_api/quantization.rst", "docs/source/api-doc/basic_api/training.rst", "docs/source/api-doc/common.rst", "docs/source/api-doc/common/benchmark.rst", "docs/source/api-doc/common/bleu.rst", "docs/source/api-doc/common/criterion.rst", "docs/source/api-doc/common/data.rst", "docs/source/api-doc/common/data/dataloader.rst", "docs/source/api-doc/common/data/datasets.rst", "docs/source/api-doc/common/data/transforms.rst", "docs/source/api-doc/common/metric.rst", "docs/source/api-doc/common/model.rst", "docs/source/api-doc/common/optimizer.rst", "docs/source/api-doc/component.rst", "docs/source/api-doc/component/Distillation.rst", "docs/source/api-doc/component/MixedPrecision.rst", "docs/source/api-doc/component/ModelConversion.rst", "docs/source/api-doc/component/Nas.rst", "docs/source/api-doc/component/Pruning.rst", "docs/source/api-doc/component/Quantization.rst", "docs/source/api-doc/component/Scheduler.rst", "docs/source/api-doc/contrib.rst", "docs/source/api-doc/model.rst", "docs/source/api-doc/pythonic.rst", "docs/source/api-doc/strategy.rst", "docs/source/api-doc/strategy/strategy.rst", "docs/source/api-doc/utils.rst", "docs/source/bench.md", "docs/source/benchmark.md", "docs/source/dataloader.md", "docs/source/dataset.md", "docs/source/design.md", "docs/source/distillation.md", "docs/source/distillation_quantization.md", "docs/source/distributed.md", "docs/source/examples_readme.md", "docs/source/export.md", "docs/source/faq.md", "docs/source/framework_yaml.md", "docs/source/incompatible_changes.md", "docs/source/infrastructure.md", "docs/source/installation_guide.md", "docs/source/legal_information.md", "docs/source/metric.md", "docs/source/mixed_precision.md", "docs/source/model.md", "docs/source/neural_coder/README.md", "docs/source/neural_coder/docs/AWSSageMakerSupport.md", "docs/source/neural_coder/docs/BigDLNanoSupport.md", "docs/source/neural_coder/docs/IntelCPU_PerformanceSetting.md", "docs/source/neural_coder/docs/PythonAPI.md", "docs/source/neural_coder/docs/PythonLauncher.md", "docs/source/neural_coder/docs/Quantization.md", "docs/source/neural_coder/docs/SupportMatrix.md", "docs/source/neural_coder/docs/release_notes/v0.4.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/CHANGELOG.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/DEVELOP.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/README.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/RELEASE.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/CHANGELOG.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/DEVELOP.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/RELEASE.md", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/CHANGELOG.md", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/README.md", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/vsc-extension-quickstart.md", "docs/source/objective.md", "docs/source/orchestration.md", "docs/source/platform_configuration.md", "docs/source/pruning.md", "docs/source/pruning_details.md", "docs/source/publication_list.md", "docs/source/pythonic_style.md", "docs/source/quantization.md", "docs/source/quantization_mixed_precision.md", "docs/source/releases_info.md", "docs/source/sigopt_strategy.md", "docs/source/tensorboard.md", "docs/source/transform.md", "docs/source/tuning_strategies.md", "docs/source/user_yaml.md", "docs/source/validated_model_list.md", "index.rst"], "titles": ["<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">644ec953a7dc_pruning_support</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">6ece06672ed3_v1_14</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">6f0d0f71d92e_v1_13</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">9e89549a08c8_v1_11</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">block_mask</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">env</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.adaptor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.quantizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.onnxrt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.calibration</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.activation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.argmax</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.attention</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.binary_op</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.concat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.direct_q8</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.embed_layernorm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gather</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gavgpool</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gemm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.lstm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.maxpool</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.ops</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.pad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.resize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.split</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.quantizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.pytorch</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.query</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tensorflow</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_converter_without_calib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.bf16</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph_common</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.bias_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.insert_logging</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.bf16_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.hawq_metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.onnx</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.symbolic_trace</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.algorithm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.fast_bias_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.weight_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.dotdict</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.pythonic_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy.sigopt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy.tpe</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.base_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.default_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.fetcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.mxnet_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.onnxrt_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.pytorch_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.tensorflow_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.bert_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.coco_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.dummy_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.dummy_dataset_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.imagenet_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.style_transfer_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.filters.coco_filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.filters.filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.filters</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.coco_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.imagenet_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.postprocess</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.tokenization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.criterion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.postprocess</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.torch_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.component</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.base_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.default_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.fetcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.mxnet_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.onnxrt_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.pytorch_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.tensorflow_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.bert_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.coco_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dummy_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dummy_dataset_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.imagenet_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.style_transfer_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters.coco_filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters.filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.imagenet_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.tokenization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.distillation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.qlinear2qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.torch2onnx</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.graph_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.bleu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.bleu_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.coco_label_map</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.coco_tools</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.evaluate_squad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.f1</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.model_conversion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.basic_nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynast.dynas_manager</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynast.dynas_predictor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynast.dynas_search</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynast.dynas_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynast</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynast.supernetwork</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynast.supernetwork.machine_translation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.nas_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.search_algorithms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns.pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns.tile_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.patterns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.prune_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.scheduler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.scheduler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.bleu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.bleu_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.coco_label_map</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.coco_tools</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.evaluate_squad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.f1</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.mix_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.base_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.keras_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.mxnet_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.nets_factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.onnx_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.tensorflow_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.torch_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.objective</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruner.criteria</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruner.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruner.patterns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruner.pruner_legacy.gradient_sensitivity</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruner.pruner_legacy.group_lasso</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruner.pruner_legacy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruner.pruner_legacy.magnitude</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruner.pruner_legacy.pattern_lock</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruner.pruner_legacy.pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruner.pruners</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruner.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruner.regs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruner.schedulers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruner.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.auto_mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.basic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.bayesian</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.conservative</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.exhaustive</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.hawq_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.mse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.mse_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.random</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.tuning_sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.tuning_space</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.tuning_structs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.training</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.collect_layer_histogram</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.create_obj_from_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.kl_divergence</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.load_huggingface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.options</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.pytorch</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.benchmark.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.benchmark.benchmark_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.benchmark.execute_benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.benchmark_config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.graph_optimization_config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.mixed_precision_config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.profiling_config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.pruning_config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.quantization_config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.configuration_wizard.configuration_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.configuration_wizard.get_boundary_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.configuration_wizard.get_configuration</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.configuration_wizard</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.configuration_wizard.params_feeder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.configuration_wizard.pruning_config_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_manager</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.benchmark_result</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.domain</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.domain_flavour</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.example</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.framework</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.optimization_type</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.profiling_result</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.project</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.pruning_details</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.tuning_details</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.tuning_history</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.db_operations</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.examples_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.model_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.project_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.params_interfaces</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.onnx_diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.op_details</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.op_entry</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.tensorflow_diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.file_browser.file_browser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.file_browser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.attribute</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.collapser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.edge</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.graph_reader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.node</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.reader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.reader.onnxrt_reader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.reader.tensorflow_reader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.jobs_management</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.jobs_management.jobs_control_queue</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.jobs_management.jobs_manager</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.jobs_management.request</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.manage_workspace</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.domain</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.model_type_getter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.onnxrt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.onnxrt.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.pytorch</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.pytorch.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.repository</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.shape</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.frozen_pb</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.keras</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.meta_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.saved_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model_zoo.download_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model_zoo.download_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model_zoo.downloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model_zoo</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model_zoo.list_models</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.names_mapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.names_mapper.names_mapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.execute_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.graph_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.graph_optimizer.optimize_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.mixed_precision.mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.mixed_precision.optimize_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.neural_coder_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.pruning.optimize_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.pruning.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.tune</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.tune.tune_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.tune.tuning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.tuning_history</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.execute_profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.profile_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.tensorflow_profiler.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.tensorflow_profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.tensorflow_profiler.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.tensorflow_profiler.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.inc_bench</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.consts</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.environment</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.exceptions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.executor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.expiring_dict</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.github_info</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.hw_info</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.json_serializer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.proc</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.processes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.singleton</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.status_updates</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.templates</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.templates.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.templates.workdir</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.evaluation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.graph_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.tuning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.yaml_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.communication</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.configuration</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.exceptions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.router</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.server</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.history_snapshot_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.request_data_processor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.response_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.workload</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.version</span></code>", "Intel\u00ae Neural Compressor Documentation", "Contributor Covenant Code of Conduct", "Contribution Guidelines", "FX", "Neural Architecture Search", "Security Policy", "Intel\u00ae Neural Compressor1", "Adaptor", "Adaptor", "ONNX Runtime", "Torch Utils", "Bf16 Convert", "Hawq Metric", "Onnx", "Symbolic Trace", "Util", "Algorithm", "APIs", "User facing APIs", "Benchmark", "Config", "Mix Precision", "Objective", "Quantization", "Training", "Common", "Benchmark", "BLEU", "Criterion", "Data", "Dataloader", "Datasets", "Transforms", "Metric", "Model", "Optimizer", "Component(experiemental API, deprecated in 2.0)", "Distillation", "MixedPrecision", "ModelConversion", "Neural architecture search (NAS)", "Pruning", "Quantization", "Scheduler", "Contrib", "Model", "Pythonic", "Strategy", "Strategies", "Utils", "Intel\u00ae Neural Compressor Bench", "Benchmarking", "DataLoader", "Dataset", "Design", "Distillation", "Distillation for Quantization", "Distributed Training and Inference (Evaluation)", "Examples", "Export", "Frequently Asked Questions", "Framework YAML Configuration Files", "Incompatible changes between v1.2 and v1.1", "Infrastructure of Intel\u00ae Neural Compressor", "Installation", "Legal Information", "Metrics", "Mixed Precision", "Model", "Neural Coder", "AWS Amazon SageMaker Support", "BigDL Nano Support", "Intel CPU Platforms: Best Performance Setting", "Neural Coder as Python API", "Python Launcher", "Neural Coder for Quantization", "Supported Optimization Features", "v0.4", "Changelog", "neural_compressor_ext_lab", "Intel\u00ae Neural Compressor as JupyterLab Extension", "Making a new release of neural_compressor_ext_lab", "Changelog", "neural_compressor_ext_lab_alibaba", "Making a new release of neural_compressor_ext_lab_alibaba", "Change Log", "Neural Coder", "Welcome to your VS Code Extension", "Objective", "Optimization Orchestration", "SYSTEM CONFIGURATION", "Pruning", "Pruning details", "Full Publications/Events (52)", "Pythonic Style Access for Configurations", "Quantization", "Turn ON Auto Mixed Precision during Quantization", "Release", "SigOpt Strategy", "TensorBoard", "Transform", "Tuning Strategies", "User YAML Configuration Files", "Validated Models", "Intel\u00ae Neural Compressor Documentation"], "terms": {"pruning_support": 0, "revis": [0, 1, 2, 3, 325], "id": [0, 1, 2, 3, 182, 184, 218, 227, 229, 230, 231, 232, 269, 271, 272, 273, 274, 325, 349, 350, 352, 353, 354, 356, 359, 360, 361, 362, 363, 365, 366, 368, 369, 397, 398, 401, 469, 539, 578, 610, 613], "644ec953a7dc": 0, "6ece06672ed3": [0, 1], "creat": [0, 1, 2, 3, 5, 13, 41, 100, 112, 129, 156, 166, 168, 186, 187, 194, 204, 206, 220, 226, 230, 238, 239, 249, 250, 251, 267, 272, 306, 314, 315, 318, 322, 348, 365, 375, 376, 380, 381, 462, 483, 496, 509, 513, 516, 519, 565, 580, 591, 593, 595, 596, 599, 607, 610, 611, 613], "date": [0, 1, 2, 3, 304, 453], "2022": [0, 1, 2, 3, 518, 577, 615], "12": [0, 518, 562], "09": [0, 615], "17": [0, 615], "22": [0, 3, 474, 477, 615], "310141": 0, "v1": [1, 2, 3, 41, 135, 178, 179, 216, 231, 232, 234, 273, 274, 276, 285, 518, 569, 578, 580, 609, 610, 615], "14": [1, 2, 151, 221, 223, 286, 571, 615], "6f0d0f71d92e": [1, 2], "08": [1, 183, 219, 612, 615], "31": [1, 615], "07": [1, 2, 614, 615], "16": [1, 564, 565, 603, 615], "24": [1, 613, 615], "229939": 1, "update_dataload": 1, "db_session": [1, 349, 350, 351, 352, 353, 354, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 375, 376, 378, 380, 383], "sqlalchemi": [1, 348, 349, 350, 351, 352, 353, 354, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 375, 376, 378, 380, 381, 383, 572, 576], "orm": [1, 349, 350, 351, 352, 353, 354, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 375, 376, 378, 380, 383], "session": [1, 135, 165, 203, 285, 348, 349, 350, 351, 352, 353, 354, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 375, 376, 378, 380, 381, 383, 611, 613], "updat": [1, 42, 56, 68, 80, 100, 105, 112, 146, 223, 227, 233, 234, 242, 261, 263, 268, 269, 275, 276, 284, 285, 286, 288, 291, 292, 293, 295, 296, 297, 298, 301, 302, 314, 332, 349, 350, 351, 352, 360, 363, 365, 366, 368, 370, 376, 378, 379, 380, 383, 453, 476, 480, 485, 488, 490, 494, 539, 562, 571, 578, 584, 589, 592, 602, 603, 604, 613], "dataload": [1, 6, 8, 11, 13, 14, 15, 39, 41, 137, 139, 141, 142, 144, 146, 154, 155, 166, 177, 184, 187, 193, 204, 215, 220, 226, 236, 253, 258, 263, 266, 267, 268, 286, 297, 303, 319, 322, 330, 335, 342, 346, 357, 371, 374, 376, 381, 383, 405, 446, 459, 462, 465, 473, 484, 485, 489, 515, 518, 519, 541, 562, 567, 568, 569, 574, 578, 579, 601, 607, 611, 612, 614], "exist": [1, 47, 129, 148, 184, 185, 230, 250, 272, 285, 325, 350, 370, 376, 378, 379, 416, 467, 483, 484, 578, 585, 603, 613], "databas": [1, 168, 206, 348, 349, 350, 351, 352, 353, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 376, 377, 378, 379, 380, 381, 453, 467, 483], "update_transform": 1, "transform": [1, 14, 38, 44, 56, 61, 62, 84, 85, 87, 121, 122, 126, 130, 131, 132, 133, 134, 146, 166, 167, 168, 169, 170, 171, 173, 175, 176, 177, 204, 205, 206, 207, 208, 209, 211, 213, 214, 215, 226, 245, 247, 248, 268, 342, 346, 352, 357, 371, 374, 376, 381, 383, 405, 484, 485, 486, 487, 492, 515, 516, 518, 541, 564, 565, 567, 568, 569, 581, 586, 587, 588, 589, 605, 608, 611, 614], "13": [2, 3, 303, 518, 562, 615], "9e89549a08c8": [2, 3], "29": [2, 615], "41": [2, 615], "291905": 2, "11": [3, 474, 518, 562, 578, 579], "03": [3, 474, 615], "34": [3, 615], "52": [3, 615], "916541": 3, "block": [4, 61, 226, 239, 248, 253, 258, 261, 264, 291, 299, 501, 575, 600, 603, 604], "mask": [4, 166, 204, 230, 246, 248, 257, 261, 263, 265, 272, 286, 291, 292, 295, 296, 298, 301, 603, 604, 615], "run_migrations_offlin": 5, "run": [5, 6, 8, 11, 13, 15, 39, 100, 135, 154, 155, 165, 182, 184, 203, 218, 226, 239, 242, 262, 263, 277, 298, 302, 303, 306, 307, 431, 477, 499, 500, 501, 514, 518, 519, 562, 563, 569, 572, 573, 579, 581, 583, 585, 586, 587, 589, 591, 592, 593, 595, 596, 598, 603, 605, 607, 609, 610, 611, 613, 614], "migrat": [5, 467], "offlin": [5, 329, 513, 607], "mode": [5, 6, 8, 11, 14, 19, 37, 38, 39, 41, 100, 175, 184, 213, 226, 230, 272, 285, 298, 314, 315, 317, 329, 349, 476, 519, 562, 575, 576, 591, 595, 607, 608, 613], "thi": [5, 8, 37, 39, 41, 50, 56, 61, 62, 75, 80, 81, 97, 100, 105, 112, 122, 129, 130, 134, 137, 141, 145, 146, 154, 155, 165, 166, 167, 168, 169, 170, 171, 173, 182, 183, 186, 187, 192, 193, 203, 204, 205, 206, 207, 208, 209, 211, 218, 219, 226, 227, 230, 231, 232, 234, 239, 244, 245, 252, 253, 258, 261, 263, 264, 265, 266, 267, 268, 269, 272, 273, 274, 276, 277, 287, 291, 292, 293, 295, 296, 297, 298, 299, 300, 301, 303, 306, 311, 328, 329, 513, 514, 515, 516, 518, 519, 539, 562, 564, 565, 567, 568, 569, 573, 575, 577, 578, 579, 580, 581, 583, 584, 586, 587, 589, 591, 593, 595, 596, 597, 598, 599, 603, 604, 607, 608, 609, 610, 611, 612, 613], "configur": [5, 6, 8, 11, 13, 14, 39, 40, 41, 100, 108, 136, 141, 146, 147, 151, 154, 155, 157, 160, 168, 171, 177, 184, 206, 209, 220, 221, 223, 225, 226, 230, 236, 237, 238, 239, 241, 249, 250, 253, 258, 262, 264, 266, 267, 268, 272, 277, 286, 287, 291, 299, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 314, 315, 318, 319, 321, 322, 325, 327, 328, 330, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 349, 360, 371, 373, 376, 435, 437, 442, 446, 449, 452, 465, 467, 484, 485, 486, 487, 488, 490, 491, 492, 493, 494, 499, 501, 515, 516, 519, 562, 565, 578, 585, 599, 600, 603, 609, 612, 613, 615], "context": [5, 13, 329, 606], "just": [5, 92, 156, 177, 180, 181, 183, 186, 187, 188, 189, 191, 194, 219, 287, 516, 588, 592, 598, 601, 607, 612, 613], "url": [5, 168, 206, 430, 497, 577], "an": [5, 13, 37, 56, 61, 62, 64, 105, 129, 130, 137, 141, 145, 146, 159, 164, 168, 172, 177, 183, 187, 192, 193, 197, 202, 206, 210, 215, 219, 226, 227, 230, 231, 232, 239, 246, 249, 250, 251, 267, 268, 269, 272, 273, 274, 277, 284, 291, 298, 301, 306, 393, 398, 474, 511, 513, 515, 516, 518, 519, 539, 564, 565, 566, 571, 578, 579, 581, 585, 586, 589, 598, 600, 604, 605, 610, 611, 612, 613], "engin": [5, 241, 348, 360, 381], "though": [5, 248], "i": [5, 6, 8, 11, 13, 14, 15, 38, 39, 41, 42, 43, 47, 48, 51, 54, 56, 58, 61, 62, 64, 75, 76, 79, 80, 86, 87, 88, 97, 99, 100, 105, 112, 122, 129, 130, 131, 135, 137, 140, 141, 145, 146, 151, 154, 155, 156, 157, 160, 164, 165, 166, 167, 168, 169, 170, 173, 175, 176, 177, 179, 183, 184, 186, 187, 190, 192, 193, 194, 202, 203, 204, 205, 206, 207, 208, 211, 213, 214, 215, 216, 219, 226, 227, 230, 232, 233, 234, 236, 239, 242, 246, 248, 251, 253, 258, 262, 263, 264, 267, 269, 272, 274, 275, 276, 277, 284, 287, 288, 291, 292, 298, 299, 300, 302, 303, 306, 307, 312, 313, 314, 319, 328, 329, 348, 381, 393, 413, 416, 418, 419, 421, 423, 424, 425, 426, 432, 470, 472, 474, 476, 477, 482, 484, 486, 492, 497, 499, 513, 514, 515, 516, 518, 519, 520, 522, 528, 529, 530, 537, 539, 541, 548, 556, 557, 558, 559, 561, 562, 563, 564, 565, 567, 568, 569, 571, 573, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 586, 587, 589, 591, 592, 593, 595, 596, 598, 599, 600, 601, 603, 604, 606, 607, 608, 609, 610, 611, 612, 613, 614], "accept": [5, 287, 513, 562, 563], "here": [5, 62, 64, 112, 230, 237, 248, 249, 272, 518, 562, 565, 569, 571, 573, 578, 586, 593, 596, 598, 603, 607, 609, 610], "well": [5, 154, 155, 277, 303, 516, 565, 607, 609, 614], "By": [5, 227, 269, 539, 578, 580, 591, 592, 595, 613], "skip": [5, 61, 287, 611, 613], "creation": [5, 345], "we": [5, 38, 61, 62, 64, 68, 81, 100, 129, 130, 145, 165, 184, 186, 187, 203, 227, 230, 237, 248, 249, 269, 272, 309, 325, 513, 515, 518, 519, 539, 564, 569, 571, 573, 578, 585, 589, 593, 596, 598, 599, 600, 601, 603, 604, 606, 607, 610, 611, 613], "don": [5, 130, 145, 291, 474, 515, 562, 613], "t": [5, 61, 62, 64, 100, 129, 130, 145, 183, 186, 187, 219, 232, 241, 242, 246, 267, 274, 291, 474, 483, 515, 519, 562, 567, 569, 579, 599, 613, 614], "even": [5, 56, 562, 603], "need": [5, 6, 8, 11, 13, 14, 39, 56, 75, 81, 99, 100, 122, 129, 146, 154, 155, 156, 164, 165, 168, 175, 176, 177, 183, 186, 187, 188, 189, 194, 202, 203, 206, 213, 214, 215, 219, 220, 226, 233, 234, 239, 246, 248, 253, 258, 267, 275, 276, 277, 283, 284, 287, 291, 303, 307, 311, 314, 328, 329, 503, 515, 519, 562, 564, 565, 567, 569, 575, 579, 581, 583, 584, 587, 591, 592, 593, 595, 596, 598, 599, 603, 606, 607, 608, 609, 612, 613, 614], "dbapi": 5, "avail": [5, 281, 346, 351, 353, 354, 358, 361, 362, 367, 432, 518, 520, 522, 528, 529, 530, 537, 541, 548, 556, 557, 558, 559, 561, 562, 575, 591, 595, 602, 604, 613], "call": [5, 13, 112, 193, 226, 230, 241, 242, 253, 258, 261, 263, 264, 272, 292, 296, 297, 298, 319, 348, 381, 469, 477, 478, 515, 516, 519, 562, 564, 574, 587, 589, 599, 603, 607, 611, 612], "execut": [5, 8, 11, 14, 39, 41, 44, 46, 47, 49, 63, 67, 73, 76, 78, 83, 98, 133, 193, 220, 226, 237, 238, 249, 253, 258, 263, 266, 267, 298, 303, 322, 328, 329, 330, 331, 332, 349, 360, 363, 370, 376, 378, 379, 435, 437, 439, 442, 443, 446, 447, 448, 449, 451, 452, 454, 459, 462, 466, 469, 477, 478, 500, 562, 567, 568, 579, 583, 584, 591, 592, 595, 598, 599, 601, 603, 604, 607, 610, 613, 615], "emit": 5, "given": [5, 13, 14, 15, 37, 41, 61, 62, 64, 105, 106, 135, 141, 151, 182, 183, 218, 219, 230, 272, 284, 285, 286, 291, 298, 303, 314, 325, 393, 399, 413, 416, 418, 419, 421, 423, 424, 426, 470, 484, 497, 516, 603, 604, 612], "string": [5, 6, 8, 14, 37, 38, 39, 40, 41, 50, 57, 73, 100, 105, 106, 129, 131, 135, 146, 147, 166, 168, 185, 190, 204, 206, 220, 223, 225, 226, 227, 230, 236, 237, 238, 241, 249, 250, 251, 253, 258, 261, 262, 263, 264, 265, 266, 267, 268, 269, 272, 277, 281, 285, 286, 291, 298, 299, 300, 301, 302, 303, 315, 317, 322, 329, 342, 462, 484, 508, 578, 612], "script": [5, 227, 228, 231, 232, 269, 270, 273, 274, 331, 332, 418, 435, 437, 439, 442, 443, 445, 446, 448, 449, 451, 452, 457, 569, 575, 581, 585, 588, 589, 592, 605], "output": [5, 15, 37, 38, 39, 41, 47, 51, 53, 54, 62, 64, 68, 79, 80, 86, 88, 93, 99, 100, 103, 112, 129, 135, 141, 146, 148, 151, 154, 155, 182, 185, 187, 188, 192, 218, 220, 221, 223, 225, 226, 227, 230, 234, 239, 240, 248, 261, 268, 269, 272, 275, 276, 277, 284, 285, 286, 291, 298, 303, 319, 320, 323, 325, 326, 329, 349, 360, 363, 370, 376, 378, 379, 413, 423, 424, 425, 439, 443, 446, 469, 477, 485, 491, 515, 519, 539, 562, 567, 568, 569, 571, 573, 574, 578, 580, 589, 598, 599, 601, 603, 606, 607, 611, 612, 613, 614], "run_migrations_onlin": 5, "onlin": [5, 513, 518, 610], "In": [5, 50, 61, 62, 105, 165, 193, 203, 226, 230, 248, 261, 263, 272, 291, 298, 300, 312, 513, 515, 516, 519, 562, 564, 565, 567, 568, 569, 578, 588, 591, 592, 595, 600, 601, 603, 604, 607, 608, 610, 611, 612, 613], "scenario": [5, 346, 519, 562, 563, 567, 603, 604], "associ": [5, 230, 272, 371, 372], "connect": [5, 263, 288, 360, 370, 371, 373, 374, 375, 376, 377, 378, 379, 380, 562, 598, 602, 603, 604, 610], "adaptor_registri": [6, 519], "cl": [6, 39, 142, 144, 146, 168, 172, 175, 176, 177, 180, 183, 185, 190, 206, 210, 213, 214, 215, 217, 219, 251, 256, 261, 263, 265, 268, 287, 291, 297, 298, 300, 301, 314, 329], "The": [6, 8, 11, 14, 32, 39, 41, 47, 62, 64, 68, 73, 86, 87, 88, 100, 103, 105, 109, 111, 135, 137, 141, 142, 144, 146, 147, 148, 154, 155, 156, 166, 167, 168, 169, 170, 172, 174, 175, 176, 177, 180, 183, 185, 187, 188, 190, 193, 194, 204, 205, 206, 207, 208, 210, 212, 213, 214, 215, 217, 219, 220, 225, 226, 227, 228, 229, 231, 232, 233, 234, 236, 237, 238, 239, 240, 241, 242, 248, 249, 250, 251, 252, 253, 256, 258, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 273, 274, 275, 276, 277, 285, 287, 288, 291, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 314, 315, 317, 318, 319, 320, 322, 323, 324, 325, 328, 329, 349, 350, 352, 355, 359, 360, 363, 364, 366, 368, 369, 376, 381, 384, 386, 387, 388, 389, 390, 391, 392, 405, 412, 413, 465, 513, 515, 516, 519, 520, 522, 528, 529, 530, 537, 539, 541, 548, 556, 557, 558, 559, 561, 562, 563, 564, 565, 567, 569, 571, 573, 574, 575, 576, 578, 579, 580, 583, 584, 586, 589, 591, 592, 593, 595, 596, 598, 599, 600, 601, 603, 604, 606, 607, 608, 609, 610, 611, 612, 613, 614], "decor": [6, 32, 61, 62, 64, 135, 142, 144, 177, 180, 183, 190, 215, 217, 219, 233, 234, 251, 256, 261, 263, 265, 275, 276, 287, 291, 297, 298, 301, 314, 329, 479, 515, 516, 519, 613], "us": [6, 8, 11, 13, 14, 32, 38, 39, 41, 42, 43, 61, 62, 64, 103, 105, 106, 112, 137, 141, 146, 148, 154, 155, 164, 165, 166, 167, 168, 169, 170, 173, 177, 180, 182, 183, 184, 185, 190, 202, 203, 204, 205, 206, 207, 208, 211, 215, 217, 218, 219, 220, 221, 223, 225, 226, 227, 228, 230, 234, 235, 236, 237, 240, 242, 248, 249, 251, 253, 256, 258, 261, 263, 264, 265, 266, 267, 268, 269, 270, 272, 276, 287, 288, 291, 297, 298, 301, 306, 308, 309, 311, 312, 313, 314, 320, 321, 322, 323, 324, 325, 329, 376, 381, 386, 387, 391, 393, 405, 412, 414, 439, 443, 467, 484, 486, 496, 497, 513, 514, 515, 516, 518, 519, 539, 562, 563, 564, 565, 567, 568, 569, 571, 573, 574, 576, 577, 578, 579, 580, 581, 582, 583, 585, 586, 589, 591, 593, 595, 596, 598, 600, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615], "regist": [6, 32, 122, 142, 144, 168, 172, 175, 176, 177, 180, 183, 185, 190, 193, 206, 210, 213, 214, 215, 217, 219, 220, 226, 233, 234, 251, 252, 253, 254, 255, 256, 258, 261, 263, 265, 275, 276, 283, 286, 287, 288, 291, 297, 298, 300, 301, 306, 314, 516, 519, 565, 569, 578, 599, 600, 613], "all": [6, 8, 13, 14, 15, 32, 39, 41, 54, 57, 79, 80, 92, 112, 121, 126, 142, 144, 156, 157, 160, 164, 168, 172, 175, 176, 177, 180, 183, 184, 185, 190, 193, 194, 202, 206, 210, 213, 214, 215, 217, 219, 223, 226, 227, 230, 232, 233, 234, 244, 245, 246, 248, 251, 253, 254, 255, 256, 257, 258, 261, 264, 267, 269, 272, 274, 275, 276, 278, 279, 284, 287, 291, 297, 298, 299, 304, 306, 307, 308, 314, 315, 316, 317, 329, 333, 345, 348, 357, 374, 376, 381, 386, 387, 400, 402, 405, 406, 412, 413, 416, 418, 425, 431, 438, 440, 444, 445, 447, 450, 456, 461, 465, 474, 478, 501, 513, 518, 519, 562, 564, 565, 569, 573, 576, 581, 589, 592, 593, 596, 597, 598, 599, 601, 602, 603, 604, 605, 607, 608, 612, 613], "subclass": [6, 32, 142, 144, 161, 165, 168, 172, 175, 176, 177, 180, 183, 190, 199, 203, 206, 210, 213, 214, 215, 217, 219, 233, 234, 251, 254, 255, 256, 261, 263, 265, 275, 276, 287, 291, 297, 298, 301, 314, 519], "paramet": [6, 8, 11, 13, 14, 15, 37, 38, 39, 41, 50, 51, 54, 55, 56, 57, 61, 62, 64, 68, 73, 79, 80, 81, 84, 85, 100, 103, 105, 106, 112, 122, 129, 131, 135, 136, 137, 140, 141, 142, 144, 146, 147, 148, 151, 154, 155, 156, 165, 166, 168, 172, 175, 176, 177, 179, 180, 182, 183, 184, 185, 190, 194, 203, 204, 206, 210, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 236, 237, 238, 239, 240, 241, 242, 248, 249, 250, 251, 252, 253, 256, 258, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 272, 273, 274, 275, 276, 277, 281, 283, 285, 286, 287, 288, 291, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 306, 307, 311, 314, 315, 317, 318, 319, 322, 323, 325, 326, 328, 329, 342, 346, 351, 352, 371, 372, 373, 376, 382, 384, 393, 419, 437, 442, 446, 449, 452, 464, 469, 474, 476, 477, 483, 484, 486, 496, 497, 515, 539, 562, 564, 565, 567, 569, 575, 578, 592, 598, 599, 603, 604, 607, 610, 612, 613, 614], "framework_specific_info": [6, 8, 11, 14, 39, 41, 519], "base": [6, 8, 11, 13, 14, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 63, 65, 66, 67, 68, 69, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95, 97, 98, 99, 103, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 133, 134, 136, 137, 139, 141, 142, 143, 144, 145, 146, 147, 148, 151, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 196, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 224, 226, 227, 230, 233, 234, 235, 237, 238, 239, 241, 242, 246, 247, 248, 249, 250, 252, 253, 254, 255, 256, 257, 258, 261, 263, 265, 266, 267, 268, 269, 272, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 291, 292, 293, 295, 296, 297, 298, 300, 301, 304, 305, 306, 307, 308, 309, 311, 312, 313, 314, 315, 316, 320, 323, 324, 325, 326, 329, 334, 335, 336, 338, 339, 340, 341, 344, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 388, 389, 390, 392, 395, 397, 398, 401, 411, 413, 416, 418, 420, 421, 423, 424, 425, 426, 434, 437, 442, 446, 449, 452, 462, 466, 468, 470, 472, 476, 477, 478, 479, 482, 484, 485, 486, 487, 488, 490, 491, 492, 493, 494, 497, 498, 500, 502, 506, 507, 516, 519, 539, 565, 568, 569, 573, 586, 587, 589, 598, 602, 604, 610, 611, 613, 615], "object": [6, 8, 11, 13, 14, 32, 38, 39, 41, 51, 54, 55, 56, 57, 68, 73, 79, 80, 81, 86, 87, 88, 89, 100, 103, 106, 122, 129, 131, 136, 137, 140, 141, 142, 144, 146, 147, 148, 151, 154, 155, 156, 157, 159, 160, 164, 166, 167, 168, 172, 175, 176, 177, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 197, 202, 204, 205, 206, 210, 213, 214, 215, 217, 218, 219, 220, 223, 225, 226, 227, 230, 233, 234, 235, 238, 239, 241, 249, 250, 252, 253, 254, 255, 256, 258, 261, 262, 263, 264, 265, 266, 267, 268, 269, 272, 275, 276, 277, 279, 281, 283, 284, 285, 286, 288, 291, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 306, 314, 320, 322, 323, 324, 326, 328, 329, 346, 361, 362, 365, 368, 409, 474, 477, 484, 494, 496, 497, 501, 515, 516, 530, 539, 562, 563, 564, 565, 572, 578, 580, 601, 603, 604, 606, 607, 612, 613], "framework": [6, 8, 11, 13, 14, 39, 146, 152, 153, 157, 158, 160, 162, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 176, 177, 180, 183, 185, 186, 187, 190, 195, 196, 198, 200, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 217, 219, 225, 226, 233, 234, 235, 242, 266, 267, 275, 276, 277, 278, 279, 280, 281, 282, 284, 285, 286, 312, 314, 315, 317, 322, 331, 346, 357, 374, 376, 381, 383, 385, 405, 413, 416, 418, 419, 425, 432, 434, 439, 443, 448, 451, 455, 466, 472, 484, 485, 518, 519, 562, 569, 570, 574, 575, 576, 578, 579, 603, 605, 607, 611, 612, 613, 614], "layer": [6, 8, 11, 14, 39, 40, 41, 62, 64, 105, 106, 107, 108, 109, 111, 112, 151, 185, 192, 226, 248, 253, 258, 261, 262, 264, 291, 299, 302, 320, 322, 323, 329, 496, 519, 568, 575, 603, 604, 609], "abstract": [6, 11, 13, 40, 81, 103, 112, 183, 185, 219, 220, 225, 226, 233, 234, 250, 252, 256, 261, 265, 266, 275, 276, 278, 279, 280, 287, 291, 297, 301, 314, 335, 347, 413, 424, 425, 446, 458, 476, 500, 519, 574], "quantiz": [6, 7, 8, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 83, 87, 89, 91, 94, 97, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 134, 136, 137, 139, 141, 142, 144, 146, 151, 154, 155, 179, 186, 187, 193, 216, 221, 223, 224, 225, 226, 236, 267, 268, 277, 286, 305, 306, 307, 308, 309, 311, 312, 313, 314, 315, 317, 319, 320, 323, 324, 325, 328, 329, 341, 346, 376, 378, 384, 465, 473, 485, 489, 519, 530, 548, 562, 564, 565, 569, 571, 573, 574, 575, 578, 579, 580, 581, 586, 588, 589, 592, 601, 605, 609, 611, 612, 613, 614], "tune_cfg": [6, 8, 11, 13, 14, 39, 41, 135, 136, 141, 155, 307, 519, 613], "model": [6, 8, 11, 13, 14, 15, 28, 37, 38, 39, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95, 97, 98, 99, 100, 106, 108, 129, 135, 136, 137, 140, 141, 142, 144, 146, 151, 154, 155, 162, 165, 166, 168, 183, 184, 185, 187, 188, 193, 200, 203, 204, 206, 219, 220, 221, 222, 223, 224, 225, 226, 234, 235, 236, 237, 238, 240, 242, 247, 248, 249, 250, 252, 253, 258, 261, 262, 263, 264, 265, 266, 267, 268, 275, 276, 277, 287, 291, 292, 293, 295, 296, 297, 298, 299, 301, 302, 303, 306, 307, 311, 312, 314, 319, 325, 328, 329, 331, 332, 333, 335, 346, 349, 357, 360, 363, 365, 373, 374, 375, 376, 377, 378, 380, 381, 382, 384, 388, 392, 393, 398, 399, 400, 403, 404, 405, 429, 430, 432, 435, 438, 439, 440, 441, 443, 444, 445, 446, 450, 451, 456, 458, 461, 462, 465, 466, 473, 482, 484, 489, 499, 500, 504, 511, 515, 516, 519, 529, 537, 563, 564, 565, 567, 568, 569, 574, 575, 577, 578, 579, 581, 586, 588, 589, 592, 598, 600, 601, 602, 603, 604, 605, 607, 609, 610, 611, 612, 613, 614], "q_func": [6, 8, 11, 14, 39, 41, 154, 155, 226, 266, 267, 306, 307, 311, 314, 519, 613], "none": [6, 8, 11, 13, 14, 15, 37, 38, 39, 41, 42, 43, 57, 84, 100, 106, 112, 129, 135, 137, 141, 146, 147, 148, 151, 154, 155, 156, 158, 161, 164, 166, 167, 168, 169, 170, 171, 173, 179, 183, 184, 185, 186, 187, 193, 194, 196, 199, 202, 204, 205, 206, 207, 208, 209, 211, 216, 219, 220, 221, 223, 225, 226, 227, 230, 233, 234, 235, 236, 237, 239, 241, 242, 246, 248, 249, 250, 253, 257, 258, 262, 263, 266, 267, 268, 269, 272, 275, 276, 277, 282, 284, 285, 286, 287, 297, 302, 303, 306, 307, 311, 314, 315, 317, 319, 320, 322, 323, 328, 329, 330, 331, 332, 334, 335, 336, 338, 339, 340, 341, 342, 343, 344, 348, 349, 350, 351, 352, 353, 354, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 375, 376, 379, 381, 382, 383, 384, 398, 413, 416, 418, 420, 423, 424, 425, 430, 432, 437, 439, 442, 443, 446, 448, 449, 451, 452, 453, 454, 455, 458, 459, 460, 462, 464, 467, 469, 470, 472, 475, 477, 478, 482, 483, 484, 485, 486, 487, 488, 490, 492, 493, 494, 496, 497, 501, 503, 509, 519, 539, 565, 578, 607, 611, 612, 613], "do": [6, 8, 11, 14, 17, 19, 20, 21, 22, 23, 24, 25, 27, 29, 30, 31, 32, 33, 34, 35, 36, 39, 42, 43, 71, 73, 97, 165, 166, 203, 204, 220, 221, 223, 226, 227, 230, 264, 267, 269, 272, 287, 299, 307, 328, 513, 539, 562, 565, 569, 573, 575, 576, 578, 593, 596, 603, 608, 609, 613], "calibr": [6, 7, 8, 11, 13, 14, 16, 39, 42, 43, 71, 84, 85, 141, 142, 144, 146, 154, 155, 225, 226, 266, 267, 268, 277, 286, 303, 324, 493, 519, 564, 565, 574, 575, 607, 613, 614], "quanit": [6, 11, 14], "post": [6, 11, 14, 92, 93, 151, 154, 155, 183, 193, 219, 223, 226, 267, 268, 303, 496, 513, 519, 568, 569, 571, 575, 576, 581, 587, 598, 611, 613], "train": [6, 8, 11, 14, 39, 41, 50, 56, 73, 74, 112, 151, 154, 155, 166, 168, 183, 193, 204, 206, 219, 220, 226, 236, 237, 239, 240, 247, 249, 253, 258, 263, 264, 266, 267, 268, 297, 298, 299, 303, 314, 322, 492, 516, 519, 530, 565, 567, 568, 571, 575, 579, 581, 587, 598, 601, 603, 604, 605, 610, 613, 614, 615], "dict": [6, 8, 11, 13, 14, 15, 39, 41, 103, 105, 106, 112, 131, 135, 136, 137, 141, 142, 144, 148, 154, 155, 165, 168, 184, 185, 190, 203, 206, 221, 222, 223, 226, 229, 230, 231, 232, 234, 237, 239, 242, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 261, 262, 263, 264, 265, 271, 272, 273, 274, 276, 277, 278, 279, 285, 286, 288, 291, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 314, 315, 316, 318, 320, 322, 323, 328, 329, 330, 332, 335, 342, 343, 344, 346, 347, 349, 350, 351, 352, 353, 354, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 382, 383, 384, 389, 390, 393, 401, 410, 413, 420, 428, 429, 430, 432, 434, 435, 436, 437, 442, 446, 449, 452, 453, 454, 455, 457, 459, 460, 462, 469, 470, 472, 474, 476, 477, 480, 482, 484, 485, 486, 487, 488, 490, 491, 492, 493, 494, 496, 497, 500, 501, 503, 505, 507, 508, 510, 515, 578, 603, 606, 611, 613], "chosen": [6, 8, 562], "tune": [6, 8, 11, 13, 14, 39, 41, 146, 151, 154, 155, 166, 168, 204, 206, 225, 226, 266, 268, 277, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 329, 341, 360, 368, 369, 376, 378, 382, 405, 435, 440, 453, 465, 473, 485, 489, 518, 519, 562, 564, 565, 569, 575, 577, 579, 598, 600, 605, 608, 609, 610, 611, 614], "load": [6, 8, 166, 168, 182, 183, 204, 206, 218, 219, 230, 240, 242, 250, 272, 277, 285, 286, 303, 328, 329, 376, 378, 457, 484, 485, 564, 591, 595, 599, 606, 607], "dataset": [6, 8, 11, 14, 39, 41, 141, 146, 154, 155, 156, 158, 159, 161, 163, 164, 165, 177, 186, 187, 194, 196, 197, 199, 201, 202, 203, 215, 225, 226, 230, 231, 232, 234, 236, 242, 266, 267, 268, 272, 273, 274, 276, 277, 303, 322, 349, 357, 360, 363, 371, 376, 380, 381, 382, 393, 405, 482, 484, 485, 486, 516, 518, 519, 541, 564, 569, 578, 603, 604, 607, 609, 613, 614, 615], "option": [6, 8, 11, 14, 15, 39, 41, 100, 129, 146, 151, 154, 155, 156, 166, 183, 185, 194, 204, 219, 221, 223, 226, 230, 236, 241, 242, 248, 261, 267, 268, 272, 277, 285, 286, 291, 303, 315, 317, 319, 323, 325, 329, 474, 565, 573, 592, 610, 612, 613, 614], "awar": [6, 8, 11, 14, 39, 41, 137, 151, 157, 160, 177, 193, 226, 236, 261, 266, 267, 268, 309, 314, 519, 568, 569, 571, 575, 579, 598, 601, 613, 615], "evalu": [6, 8, 11, 14, 39, 41, 146, 154, 155, 166, 184, 193, 204, 220, 225, 226, 227, 230, 231, 232, 233, 234, 236, 237, 238, 241, 242, 249, 250, 253, 258, 263, 264, 267, 268, 269, 272, 273, 274, 275, 276, 277, 287, 291, 298, 299, 303, 314, 322, 334, 336, 338, 340, 341, 342, 465, 473, 485, 489, 516, 519, 539, 564, 565, 567, 568, 574, 575, 578, 579, 581, 587, 589, 592, 598, 600, 603, 607, 610, 611, 613, 614], "postprocess": [6, 8, 11, 14, 39, 41, 146, 177, 180, 183, 184, 187, 215, 217, 219, 225, 226, 236, 248, 266, 267, 268, 322, 487, 492, 519, 611, 612], "metric": [6, 8, 11, 14, 39, 41, 146, 154, 155, 184, 187, 220, 225, 226, 236, 237, 238, 240, 242, 249, 250, 251, 252, 253, 258, 266, 267, 268, 277, 287, 303, 322, 342, 346, 352, 357, 371, 374, 376, 381, 405, 465, 473, 476, 481, 484, 485, 487, 503, 516, 519, 522, 537, 539, 562, 564, 565, 569, 579, 610, 611, 613, 614, 615], "measur": [6, 8, 11, 14, 39, 41, 135, 184, 241, 242, 247, 277, 287, 324, 503, 516, 519, 563, 567, 578, 611, 613], "iter": [6, 8, 11, 13, 14, 15, 39, 41, 135, 142, 144, 151, 154, 155, 159, 164, 168, 169, 172, 177, 186, 187, 197, 202, 206, 207, 210, 215, 250, 263, 265, 277, 285, 298, 301, 303, 322, 349, 477, 485, 515, 516, 519, 563, 565, 603, 604, 606, 611, 613, 614], "1": [6, 8, 11, 14, 37, 38, 39, 41, 42, 48, 61, 68, 73, 84, 99, 103, 105, 133, 135, 141, 143, 145, 146, 151, 156, 158, 161, 165, 166, 167, 169, 170, 173, 174, 179, 183, 184, 185, 186, 187, 194, 196, 199, 203, 204, 205, 207, 208, 211, 212, 216, 219, 225, 226, 230, 231, 232, 234, 239, 242, 246, 248, 253, 258, 261, 263, 266, 267, 268, 272, 273, 274, 276, 286, 291, 298, 303, 304, 312, 322, 332, 454, 462, 513, 515, 518, 519, 564, 565, 567, 571, 573, 578, 579, 582, 584, 600, 601, 602, 603, 604, 606, 607, 609, 610, 611, 612, 613, 614], "tensorboard": [6, 8, 11, 14, 39, 41, 151, 268, 319, 322, 329, 519], "fals": [6, 8, 11, 13, 14, 15, 37, 39, 41, 42, 43, 57, 65, 66, 73, 84, 87, 94, 100, 103, 114, 121, 126, 130, 133, 134, 135, 140, 141, 146, 151, 155, 156, 158, 161, 166, 168, 179, 183, 184, 185, 186, 187, 192, 194, 196, 199, 204, 206, 216, 219, 230, 233, 234, 239, 240, 241, 242, 246, 247, 248, 261, 268, 272, 275, 276, 284, 287, 291, 314, 315, 317, 322, 325, 401, 420, 469, 472, 477, 478, 484, 503, 509, 519, 565, 573, 578, 591, 595, 606, 607, 611, 612, 614], "valid": [6, 8, 11, 39, 40, 41, 48, 53, 61, 62, 100, 129, 168, 206, 230, 242, 262, 263, 272, 285, 291, 298, 302, 432, 501, 514, 516, 519, 565, 567, 573, 575, 577, 589, 603, 604, 607, 609], "gener": [6, 7, 8, 13, 41, 42, 43, 82, 84, 85, 97, 100, 101, 112, 129, 131, 135, 141, 154, 155, 156, 165, 168, 169, 170, 171, 177, 180, 183, 184, 194, 203, 206, 207, 208, 209, 215, 217, 219, 223, 224, 226, 227, 235, 239, 246, 253, 261, 264, 267, 269, 277, 286, 291, 299, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 314, 330, 331, 334, 335, 336, 337, 338, 339, 340, 341, 347, 371, 376, 382, 437, 442, 446, 449, 451, 452, 457, 458, 459, 468, 477, 509, 515, 518, 519, 562, 564, 567, 578, 579, 581, 586, 591, 593, 595, 596, 598, 600, 602, 603, 604, 605, 607, 608, 611, 612, 613], "data": [6, 8, 11, 13, 14, 15, 38, 39, 41, 49, 73, 100, 129, 135, 137, 139, 141, 146, 154, 155, 184, 185, 186, 187, 221, 223, 224, 226, 242, 247, 261, 267, 268, 277, 284, 291, 303, 306, 312, 322, 329, 330, 332, 335, 342, 343, 344, 346, 370, 371, 373, 374, 375, 376, 377, 378, 379, 380, 382, 384, 393, 409, 410, 413, 416, 420, 425, 428, 429, 430, 432, 435, 437, 442, 446, 449, 452, 454, 459, 462, 469, 482, 484, 485, 486, 487, 488, 490, 491, 492, 493, 494, 496, 500, 505, 507, 508, 510, 518, 519, 537, 562, 564, 565, 569, 573, 576, 578, 579, 607, 608, 609, 610, 611, 612, 613], "label": [6, 8, 41, 146, 154, 155, 166, 168, 169, 170, 171, 174, 179, 183, 185, 187, 188, 204, 206, 207, 208, 209, 212, 216, 219, 227, 229, 233, 234, 239, 240, 268, 269, 271, 275, 276, 277, 303, 401, 515, 539, 564, 565, 578, 612], "process": [6, 8, 11, 14, 39, 41, 106, 137, 154, 155, 166, 167, 168, 177, 179, 180, 183, 184, 193, 204, 205, 206, 215, 216, 217, 219, 220, 221, 223, 226, 237, 238, 241, 247, 249, 250, 253, 258, 261, 263, 264, 265, 267, 268, 277, 291, 297, 298, 299, 301, 302, 303, 306, 328, 345, 428, 429, 432, 465, 469, 473, 476, 477, 485, 516, 519, 562, 564, 565, 567, 568, 569, 571, 582, 601, 603, 604, 607, 611, 612, 613, 614], "result": [6, 8, 11, 14, 38, 39, 41, 135, 137, 141, 154, 179, 183, 184, 185, 216, 219, 226, 227, 230, 231, 232, 233, 234, 239, 241, 250, 269, 272, 273, 274, 275, 276, 287, 309, 314, 330, 332, 349, 350, 363, 364, 366, 370, 376, 379, 382, 459, 500, 503, 513, 516, 518, 539, 562, 564, 567, 569, 575, 577, 578, 586, 587, 598, 599, 600, 603, 605, 607, 610, 611, 612, 613, 615], "from": [6, 8, 11, 13, 15, 38, 39, 41, 55, 61, 62, 63, 64, 100, 103, 105, 112, 122, 129, 131, 135, 141, 154, 155, 156, 159, 163, 166, 167, 168, 169, 170, 171, 173, 178, 179, 185, 186, 187, 193, 194, 197, 201, 204, 205, 206, 207, 208, 209, 211, 216, 220, 222, 223, 224, 226, 227, 230, 231, 232, 236, 239, 240, 241, 242, 246, 248, 251, 253, 258, 261, 262, 263, 264, 265, 267, 269, 272, 273, 274, 283, 284, 285, 287, 288, 291, 298, 299, 300, 301, 302, 306, 313, 314, 315, 318, 322, 325, 328, 329, 347, 349, 352, 353, 354, 356, 359, 360, 361, 362, 363, 365, 366, 368, 370, 371, 373, 376, 377, 378, 379, 380, 382, 393, 398, 416, 419, 428, 429, 430, 432, 457, 462, 476, 477, 482, 484, 485, 486, 492, 501, 503, 508, 509, 513, 515, 516, 518, 519, 539, 563, 564, 565, 567, 568, 569, 570, 571, 572, 575, 578, 579, 580, 581, 585, 586, 587, 589, 599, 600, 601, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613], "depend": [6, 8, 13, 41, 56, 73, 154, 155, 184, 226, 237, 249, 250, 277, 303, 514, 572, 573, 606, 613], "categori": [6, 8, 41, 168, 206, 229, 230, 271, 272, 563, 565, 588], "default": [6, 8, 15, 39, 41, 92, 100, 129, 135, 146, 148, 151, 154, 155, 156, 158, 166, 167, 168, 179, 183, 185, 193, 194, 196, 204, 205, 206, 216, 219, 221, 223, 226, 227, 230, 233, 234, 236, 248, 262, 268, 269, 272, 275, 276, 285, 286, 302, 315, 317, 325, 329, 351, 353, 354, 356, 358, 361, 362, 367, 389, 390, 393, 410, 420, 472, 474, 484, 486, 487, 491, 492, 515, 518, 519, 539, 562, 565, 571, 573, 575, 578, 586, 589, 591, 595, 600, 603, 604, 606, 608, 610, 612, 613, 614], "precis": [6, 8, 11, 14, 39, 40, 41, 42, 43, 73, 136, 154, 155, 225, 226, 230, 232, 234, 235, 266, 272, 274, 276, 277, 287, 304, 307, 314, 315, 317, 346, 357, 360, 361, 371, 372, 373, 374, 375, 376, 381, 405, 434, 439, 441, 442, 443, 466, 485, 488, 490, 518, 519, 530, 562, 563, 568, 569, 573, 575, 581, 587, 588, 589, 605, 606, 607, 613], "benchmark": [6, 8, 11, 41, 151, 186, 187, 226, 267, 268, 287, 329, 350, 357, 360, 370, 376, 378, 381, 382, 405, 465, 466, 476, 482, 499, 504, 518, 530, 537, 580, 581, 585, 589, 592, 598, 613, 614, 615], "int": [6, 8, 11, 13, 14, 38, 39, 41, 100, 129, 135, 137, 141, 156, 165, 166, 167, 179, 183, 194, 203, 204, 205, 216, 219, 221, 223, 228, 230, 234, 239, 241, 242, 251, 268, 270, 272, 276, 286, 287, 291, 297, 307, 329, 335, 348, 349, 350, 351, 352, 353, 354, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 371, 373, 375, 376, 377, 378, 379, 380, 381, 383, 427, 462, 469, 470, 472, 474, 475, 476, 477, 478, 484, 485, 487, 492, 494, 497, 509, 565, 578, 606, 612], "control": [6, 8, 11, 41, 74, 80, 142, 144, 242, 376, 381, 515, 562, 603, 613], "step": [6, 8, 11, 41, 42, 61, 62, 87, 97, 193, 226, 261, 263, 264, 265, 287, 288, 291, 296, 297, 298, 299, 300, 301, 319, 562, 567, 568, 569, 593, 596, 598, 601, 603, 604, 606, 608, 610, 611, 613], "mini": [6, 8, 11, 41, 615], "batch": [6, 8, 11, 13, 41, 56, 61, 105, 141, 156, 158, 159, 164, 165, 186, 187, 193, 194, 196, 197, 202, 203, 226, 242, 246, 248, 253, 258, 312, 319, 349, 360, 482, 562, 564, 567, 568, 601, 603, 612, 613, 615], "boolean": [6, 8, 11, 13, 41, 50, 241, 298, 484], "inspect": [6, 8, 11, 14, 39, 41, 562, 609, 611], "tensor": [6, 8, 11, 13, 14, 15, 37, 38, 39, 41, 64, 100, 112, 122, 129, 135, 137, 141, 183, 185, 219, 221, 222, 223, 248, 256, 257, 261, 263, 265, 283, 284, 285, 286, 288, 291, 292, 298, 300, 301, 311, 329, 373, 376, 384, 413, 515, 565, 603, 604, 607, 609, 611, 612, 613], "query_fw_cap": [6, 8, 11, 14, 39, 41, 519], "return": [6, 8, 11, 13, 14, 15, 39, 41, 42, 43, 44, 47, 50, 51, 54, 55, 56, 57, 61, 62, 64, 68, 73, 75, 79, 80, 84, 85, 86, 87, 88, 89, 100, 103, 105, 106, 112, 122, 129, 131, 133, 135, 136, 137, 140, 141, 142, 144, 148, 154, 155, 156, 158, 165, 168, 172, 175, 176, 177, 179, 180, 182, 183, 184, 185, 190, 194, 196, 203, 206, 210, 213, 214, 215, 216, 217, 218, 219, 220, 223, 224, 226, 227, 228, 230, 231, 232, 233, 234, 236, 237, 238, 239, 240, 242, 248, 249, 250, 251, 252, 253, 256, 258, 261, 262, 263, 264, 265, 267, 269, 270, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 285, 286, 287, 291, 297, 298, 299, 300, 301, 302, 303, 306, 307, 311, 314, 315, 316, 317, 318, 319, 322, 325, 328, 329, 349, 350, 352, 359, 360, 361, 362, 363, 365, 366, 368, 369, 393, 396, 397, 398, 399, 430, 469, 472, 474, 476, 477, 478, 484, 487, 496, 497, 500, 515, 516, 539, 565, 569, 578, 580, 600, 607, 611, 613], "capabl": [6, 8, 11, 13, 14, 39, 40, 41, 314, 315, 317, 563, 573, 579, 589, 606, 607, 613, 614], "queri": [6, 8, 11, 13, 14, 39, 41, 100, 105, 112, 135, 246, 248, 307, 315, 317, 351, 358, 367, 370, 371, 373, 374, 375, 376, 377, 378, 379, 380, 607], "query_fused_pattern": [6, 519], "fuse": [6, 13, 39, 41, 42, 43, 48, 52, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 73, 86, 87, 88, 89, 91, 121, 125, 126, 137, 140, 141, 515, 611], "pattern": [6, 40, 41, 52, 53, 55, 56, 58, 61, 62, 64, 72, 73, 87, 91, 97, 98, 99, 100, 113, 114, 116, 117, 118, 119, 121, 123, 124, 125, 126, 127, 128, 147, 151, 168, 206, 226, 254, 259, 263, 268, 289, 296, 297, 298, 300, 373, 376, 389, 398, 399, 476, 500, 519, 565, 573, 575, 599, 601, 606, 615], "conv": [6, 7, 15, 16, 28, 37, 42, 43, 52, 56, 60, 65, 66, 67, 87, 99, 100, 115, 125, 151, 268, 291, 515, 603, 606], "relu": [6, 68, 72, 73, 99, 113, 115, 117, 118, 123, 125, 127, 515, 573, 611], "bn": [6, 56, 73, 75, 113, 615], "inspect_tensor": [6, 8, 11, 14, 39, 41, 519], "op_list": [6, 8, 11, 14, 39, 41, 137, 311, 519, 611], "iteration_list": [6, 8, 11, 14, 39, 41, 519], "inspect_typ": [6, 8, 11, 14, 39, 41, 384, 519], "activ": [6, 7, 8, 11, 14, 15, 16, 28, 39, 41, 100, 118, 137, 141, 192, 221, 223, 286, 389, 518, 519, 562, 568, 573, 599, 602, 606, 607, 611, 614], "save_to_disk": [6, 8, 11, 14, 39, 41, 519], "strategi": [6, 8, 11, 13, 14, 39, 141, 151, 152, 168, 206, 226, 266, 268, 346, 368, 466, 484, 494, 518, 519, 529, 569, 575, 586, 598, 605, 606, 607, 608, 609, 614], "dump": [6, 8, 11, 14, 15, 39, 41, 100, 221, 223, 329, 339, 453, 474, 485, 497, 607, 611], "info": [6, 8, 11, 14, 38, 39, 42, 100, 141, 177, 180, 181, 186, 187, 191, 223, 261, 267, 280, 281, 284, 285, 286, 291, 302, 323, 326, 329, 349, 350, 352, 359, 360, 363, 364, 366, 369, 469, 472, 477, 484, 500, 515, 562, 571, 580], "feed": [6, 8, 39, 135, 165, 203, 346, 567], "list": [6, 8, 11, 13, 14, 38, 39, 41, 47, 50, 73, 100, 105, 112, 129, 135, 136, 137, 141, 154, 155, 159, 166, 179, 182, 183, 184, 185, 197, 204, 216, 218, 219, 221, 223, 226, 227, 228, 230, 231, 232, 234, 239, 241, 242, 251, 253, 258, 261, 264, 269, 270, 272, 273, 274, 276, 277, 285, 286, 287, 291, 299, 303, 307, 311, 314, 315, 316, 317, 319, 320, 323, 342, 344, 346, 347, 349, 351, 352, 353, 354, 356, 358, 359, 360, 361, 362, 363, 364, 365, 367, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 382, 383, 384, 393, 396, 398, 399, 401, 413, 416, 419, 420, 423, 424, 425, 427, 432, 435, 437, 439, 442, 443, 446, 449, 452, 462, 469, 474, 476, 477, 478, 482, 484, 485, 486, 487, 488, 490, 491, 492, 494, 496, 503, 515, 518, 519, 539, 565, 573, 581, 586, 588, 591, 592, 595, 600, 603, 606, 608, 611, 613], "op": [6, 7, 8, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 39, 40, 41, 46, 48, 50, 51, 53, 54, 56, 59, 60, 61, 62, 63, 64, 65, 66, 68, 72, 73, 75, 79, 80, 83, 86, 87, 88, 89, 91, 97, 99, 100, 113, 114, 115, 121, 123, 124, 125, 126, 128, 129, 130, 133, 135, 136, 137, 140, 141, 221, 223, 285, 304, 305, 307, 309, 311, 312, 315, 316, 317, 318, 324, 373, 376, 384, 389, 390, 398, 500, 519, 562, 573, 579, 603, 607, 608, 609, 611, 613, 614], "name": [6, 8, 13, 14, 37, 38, 39, 41, 47, 56, 57, 61, 62, 64, 73, 100, 105, 106, 122, 129, 131, 135, 136, 137, 140, 141, 142, 144, 146, 148, 151, 166, 167, 168, 171, 172, 175, 176, 177, 180, 181, 183, 184, 185, 187, 188, 190, 191, 192, 204, 205, 206, 209, 210, 213, 214, 215, 217, 219, 221, 222, 223, 229, 230, 233, 234, 239, 240, 242, 248, 253, 256, 258, 261, 263, 265, 267, 268, 271, 272, 275, 276, 281, 283, 284, 285, 286, 287, 288, 291, 292, 298, 300, 301, 315, 317, 320, 323, 325, 329, 349, 353, 354, 356, 359, 360, 361, 362, 363, 365, 384, 393, 395, 413, 416, 418, 419, 425, 432, 433, 434, 435, 446, 462, 469, 472, 484, 486, 487, 508, 515, 562, 565, 569, 573, 577, 578, 580, 584, 591, 595, 599, 602, 609, 610, 611, 613, 614, 615], "fp32": [6, 8, 11, 37, 39, 40, 41, 42, 43, 73, 86, 88, 121, 126, 130, 137, 141, 145, 154, 155, 221, 223, 234, 276, 286, 287, 307, 311, 315, 317, 322, 328, 329, 384, 518, 519, 562, 573, 578, 579, 588, 606, 607, 608, 609, 610, 611, 613, 614, 615], "contain": [6, 8, 11, 13, 14, 39, 50, 61, 62, 64, 68, 73, 100, 103, 129, 135, 137, 146, 154, 155, 166, 167, 168, 204, 205, 206, 220, 221, 223, 225, 226, 230, 231, 232, 236, 239, 244, 245, 253, 254, 255, 256, 258, 261, 262, 263, 264, 265, 266, 268, 272, 273, 274, 277, 291, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 314, 328, 333, 337, 345, 351, 353, 354, 356, 357, 358, 361, 362, 365, 367, 371, 376, 381, 386, 387, 391, 394, 400, 405, 406, 412, 431, 438, 440, 441, 444, 445, 447, 450, 456, 461, 465, 469, 477, 565, 567, 575, 578, 599, 603, 604, 611, 613], "str": [6, 8, 13, 14, 15, 39, 100, 129, 136, 137, 140, 141, 142, 144, 146, 156, 166, 167, 168, 172, 175, 176, 177, 179, 180, 183, 185, 190, 194, 204, 205, 206, 210, 213, 214, 215, 216, 217, 219, 221, 223, 224, 227, 228, 230, 232, 233, 234, 239, 241, 242, 251, 256, 268, 269, 270, 272, 274, 275, 276, 278, 279, 283, 285, 286, 291, 303, 311, 315, 316, 317, 319, 322, 325, 329, 330, 331, 332, 335, 342, 343, 344, 346, 348, 349, 352, 353, 354, 356, 359, 360, 361, 362, 363, 364, 365, 368, 371, 372, 373, 375, 376, 381, 382, 383, 384, 389, 390, 393, 395, 396, 397, 398, 399, 401, 410, 411, 413, 414, 416, 418, 419, 420, 421, 423, 424, 425, 426, 428, 429, 430, 432, 434, 435, 437, 439, 442, 443, 446, 448, 449, 451, 452, 453, 454, 457, 458, 459, 462, 469, 471, 472, 474, 476, 477, 480, 482, 483, 484, 485, 486, 487, 488, 490, 491, 492, 493, 494, 496, 497, 500, 501, 508, 509, 539, 565, 578, 606, 611, 612], "valu": [6, 8, 11, 14, 15, 38, 39, 41, 49, 50, 56, 61, 62, 64, 84, 85, 100, 105, 129, 130, 131, 135, 141, 145, 148, 151, 154, 155, 166, 169, 170, 179, 183, 184, 185, 204, 207, 208, 216, 219, 226, 230, 234, 240, 241, 246, 253, 258, 261, 262, 264, 272, 276, 277, 286, 287, 288, 291, 292, 295, 299, 302, 303, 306, 311, 314, 320, 322, 323, 329, 342, 344, 346, 351, 353, 354, 356, 358, 361, 362, 367, 371, 372, 393, 395, 434, 466, 469, 470, 474, 476, 482, 484, 487, 492, 494, 495, 497, 508, 515, 562, 565, 573, 578, 584, 600, 603, 604, 606, 607, 612, 613, 614], "ar": [6, 8, 15, 39, 56, 61, 62, 68, 112, 122, 151, 166, 183, 193, 204, 219, 226, 227, 230, 234, 240, 242, 246, 248, 251, 253, 258, 261, 262, 263, 264, 267, 268, 269, 272, 276, 291, 298, 299, 304, 306, 322, 328, 329, 413, 416, 418, 425, 469, 478, 513, 514, 515, 516, 518, 519, 539, 562, 564, 565, 567, 568, 569, 570, 571, 573, 574, 575, 577, 578, 579, 581, 584, 586, 589, 592, 598, 600, 601, 602, 603, 604, 607, 608, 609, 610, 611, 612, 613, 614], "weight": [6, 8, 15, 37, 38, 39, 41, 54, 55, 56, 73, 100, 112, 129, 130, 137, 145, 221, 223, 233, 234, 248, 257, 261, 263, 265, 275, 276, 285, 286, 288, 291, 292, 293, 295, 296, 298, 300, 301, 309, 329, 389, 494, 518, 519, 562, 568, 571, 573, 574, 578, 600, 603, 604, 606, 607, 611, 613, 614], "bool": [6, 8, 13, 14, 15, 39, 56, 57, 73, 100, 105, 129, 135, 137, 140, 141, 155, 166, 168, 179, 183, 204, 206, 216, 219, 221, 223, 228, 230, 234, 239, 241, 242, 248, 261, 268, 270, 272, 276, 286, 291, 307, 314, 315, 316, 317, 325, 329, 359, 393, 398, 401, 413, 416, 418, 419, 420, 421, 423, 424, 425, 426, 430, 432, 435, 453, 469, 470, 472, 477, 478, 484, 486, 487, 497, 503, 509, 565, 578, 606, 612], "save": [6, 8, 14, 39, 41, 100, 168, 172, 177, 206, 210, 215, 221, 223, 240, 250, 267, 278, 279, 280, 282, 284, 285, 286, 287, 307, 314, 319, 320, 323, 325, 329, 515, 519, 564, 574, 579, 580, 582, 586, 591, 595, 601, 603, 604, 607], "disk": [6, 8, 39, 41], "memori": [6, 8, 39, 68, 225, 226, 253, 258, 266, 564, 568, 579, 581, 600, 603, 604, 607, 613], "numpi": [6, 8, 11, 14, 38, 39, 41, 61, 62, 64, 100, 135, 183, 219, 224, 230, 234, 239, 241, 251, 272, 276, 572, 612], "arrai": [6, 8, 11, 14, 37, 38, 39, 41, 100, 129, 135, 183, 219, 230, 234, 239, 241, 251, 272, 276, 284, 286, 306, 329, 612], "node0_nam": [6, 8, 39, 41], "weight0_nam": [6, 8, 11, 14, 39, 41], "bias0_nam": [6, 8, 11, 14, 39, 41], "node1_nam": [6, 8, 39, 41], "weight1_nam": [6, 8, 39, 41], "bias1_nam": [6, 8, 39, 41], "0": [6, 8, 13, 37, 38, 39, 40, 47, 85, 100, 129, 135, 143, 146, 151, 156, 158, 161, 166, 169, 170, 173, 179, 183, 185, 186, 187, 194, 196, 199, 204, 207, 208, 211, 216, 219, 221, 223, 225, 226, 234, 239, 241, 242, 246, 248, 251, 253, 258, 261, 266, 268, 276, 286, 291, 301, 307, 315, 317, 469, 477, 515, 518, 562, 565, 567, 569, 571, 573, 577, 578, 579, 584, 591, 595, 602, 603, 604, 606, 607, 609, 610, 611, 612, 613, 614], "output0_nam": [6, 8, 39, 41], "output1_nam": [6, 8, 39, 41], "set_tensor": [6, 8, 11, 14, 39, 41, 519], "tensor_dict": [6, 8, 11, 14, 39, 41, 519], "set": [6, 8, 11, 13, 14, 15, 39, 40, 51, 61, 62, 91, 100, 105, 129, 135, 141, 142, 144, 146, 148, 154, 155, 156, 158, 166, 168, 171, 183, 184, 190, 194, 196, 204, 206, 209, 219, 220, 223, 225, 226, 230, 235, 236, 237, 239, 246, 248, 249, 253, 258, 262, 267, 268, 272, 277, 285, 287, 291, 298, 302, 303, 314, 315, 316, 329, 331, 371, 372, 373, 376, 393, 439, 443, 451, 472, 476, 482, 483, 485, 486, 487, 492, 496, 497, 501, 513, 516, 518, 562, 563, 565, 569, 573, 574, 575, 578, 579, 581, 583, 585, 599, 603, 606, 607, 610, 613, 614], "back": [6, 8, 11, 14, 39, 41, 112, 141, 183, 219, 239, 293, 598], "usual": [6, 8, 11, 14, 39, 166, 204, 226, 253, 258, 567, 601, 607], "note": [6, 8, 11, 14, 39, 48, 226, 230, 253, 258, 264, 272, 291, 299, 312, 365, 376, 380, 516, 518, 562, 569, 573, 576, 583, 586, 591, 595, 598, 603, 607, 611, 613, 614], "float": [6, 8, 11, 14, 38, 39, 41, 100, 129, 137, 166, 179, 204, 216, 226, 227, 228, 230, 231, 232, 239, 241, 242, 253, 258, 261, 263, 264, 265, 269, 270, 272, 273, 274, 285, 286, 291, 297, 298, 299, 300, 301, 306, 332, 350, 359, 368, 369, 384, 390, 445, 453, 469, 470, 474, 476, 482, 484, 485, 492, 494, 495, 503, 539, 565, 578, 606, 607, 612], "ha": [6, 8, 11, 14, 39, 56, 57, 61, 62, 64, 68, 73, 74, 87, 100, 112, 129, 146, 184, 226, 227, 241, 261, 263, 268, 269, 291, 298, 514, 516, 519, 539, 562, 564, 571, 575, 579, 584, 598, 604, 606, 607, 608, 610, 613], "respons": [6, 8, 11, 14, 39, 472, 476, 483, 496, 500, 501, 505, 507, 509, 510, 607], "int8": [6, 7, 8, 11, 14, 17, 18, 38, 39, 40, 41, 42, 43, 82, 101, 113, 114, 115, 121, 123, 124, 125, 126, 130, 135, 137, 145, 151, 179, 216, 221, 222, 223, 286, 307, 384, 515, 519, 562, 563, 565, 568, 573, 583, 586, 588, 589, 592, 598, 606, 607, 608, 609, 610, 611, 612, 614], "int32": [6, 8, 11, 14, 39, 100, 221, 223, 565], "format": [6, 8, 11, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 47, 61, 62, 135, 166, 167, 168, 172, 177, 204, 205, 206, 210, 215, 221, 223, 226, 230, 236, 239, 250, 272, 286, 311, 435, 474, 492, 565, 569, 571, 578, 579, 580, 581, 607], "someth": [6, 8, 11, 14, 39, 154, 155, 168, 206, 303], "like": [6, 8, 11, 14, 39, 68, 73, 91, 93, 100, 129, 135, 154, 155, 156, 168, 172, 177, 194, 206, 210, 215, 225, 226, 234, 240, 263, 266, 267, 276, 285, 291, 303, 319, 514, 515, 516, 519, 562, 567, 568, 575, 586, 601, 603, 607, 609, 613], "quantize_input": [6, 8, 37, 41], "abl": [6, 8, 41, 75, 154, 155, 182, 218, 277, 303, 589, 598, 603, 607], "take": [6, 8, 41, 146, 154, 155, 159, 183, 187, 188, 197, 219, 261, 268, 275, 276, 277, 291, 303, 306, 513, 515, 516, 564, 567, 573, 598, 603, 607, 608, 612, 613, 614], "input": [6, 8, 13, 15, 37, 38, 39, 41, 47, 54, 56, 57, 58, 61, 62, 64, 65, 66, 68, 73, 74, 76, 77, 79, 81, 99, 100, 105, 106, 112, 122, 129, 131, 135, 136, 137, 140, 141, 146, 151, 154, 155, 166, 167, 168, 170, 179, 182, 183, 185, 187, 188, 193, 204, 205, 206, 208, 216, 218, 219, 220, 221, 222, 223, 225, 226, 230, 235, 242, 246, 248, 253, 258, 267, 268, 272, 275, 276, 277, 281, 283, 284, 285, 286, 291, 298, 303, 319, 329, 331, 342, 365, 370, 371, 373, 376, 377, 378, 379, 380, 413, 416, 423, 424, 425, 427, 439, 443, 448, 451, 457, 482, 485, 491, 516, 519, 562, 563, 564, 565, 567, 568, 569, 571, 573, 574, 578, 580, 581, 586, 603, 606, 607, 611, 612, 614], "scale": [6, 8, 15, 37, 38, 41, 56, 61, 95, 130, 145, 179, 183, 216, 219, 223, 284, 571, 607, 610, 612], "type": [6, 8, 11, 13, 14, 15, 38, 39, 40, 41, 51, 54, 55, 56, 57, 62, 64, 68, 73, 79, 80, 86, 87, 88, 89, 91, 100, 103, 105, 106, 112, 122, 129, 135, 136, 137, 141, 142, 144, 148, 151, 155, 156, 164, 166, 168, 172, 175, 176, 177, 180, 183, 185, 190, 194, 202, 204, 206, 210, 213, 214, 215, 217, 219, 221, 223, 224, 226, 227, 228, 230, 233, 234, 236, 239, 241, 248, 251, 254, 255, 256, 261, 263, 265, 267, 269, 270, 272, 275, 276, 278, 279, 285, 286, 287, 291, 297, 298, 300, 301, 302, 304, 305, 306, 307, 311, 314, 315, 316, 317, 318, 319, 325, 328, 342, 347, 361, 362, 371, 372, 374, 376, 414, 469, 472, 474, 476, 479, 480, 514, 519, 539, 562, 565, 569, 573, 575, 579, 599, 603, 607, 610, 612, 613, 614], "path": [6, 8, 14, 39, 41, 100, 129, 135, 146, 147, 166, 167, 168, 183, 204, 205, 206, 219, 220, 221, 223, 225, 226, 236, 237, 238, 239, 242, 249, 250, 253, 258, 262, 264, 266, 267, 268, 277, 284, 285, 286, 299, 302, 303, 319, 325, 329, 330, 335, 349, 352, 359, 360, 363, 370, 371, 376, 378, 379, 393, 399, 410, 413, 416, 418, 419, 421, 423, 424, 425, 426, 430, 437, 442, 446, 449, 452, 453, 459, 469, 477, 482, 484, 485, 494, 509, 515, 516, 519, 562, 564, 565, 569, 574, 578, 579, 580, 584, 587, 598, 601, 612, 614], "where": [6, 8, 15, 38, 39, 61, 112, 230, 234, 246, 248, 250, 252, 261, 272, 276, 291, 567, 591, 595, 599, 603, 611], "convert": [6, 8, 13, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 46, 47, 48, 49, 50, 60, 68, 75, 81, 92, 94, 95, 121, 126, 136, 141, 166, 179, 182, 183, 204, 216, 218, 219, 226, 230, 234, 236, 250, 252, 262, 272, 276, 278, 279, 304, 319, 351, 358, 367, 462, 474, 515, 522, 579, 583, 607, 608, 612], "sourc": [6, 8, 15, 41, 187, 226, 228, 236, 248, 268, 270, 322, 397, 511, 515, 518, 577, 591, 593, 595, 596, 598, 605], "destinatin": [6, 8], "anoth": [6, 8, 41, 99, 100, 183, 219, 226, 227, 236, 269, 319, 329, 539, 567, 591, 595, 612, 613], "destin": [6, 8, 15, 41, 221, 222, 226, 236], "mxnet_util": 7, "util": [7, 12, 16, 100, 101, 129, 136, 137, 138, 139, 140, 192, 221, 226, 228, 262, 268, 270, 289, 310, 312, 334, 335, 336, 338, 340, 341, 344, 349, 360, 363, 366, 370, 371, 376, 378, 379, 381, 389, 390, 395, 397, 398, 401, 405, 411, 412, 420, 422, 446, 452, 456, 461, 465, 498, 520, 569, 581, 607, 613], "ox_util": 7, "oper": [7, 16, 38, 100, 135, 179, 216, 248, 261, 291, 307, 496, 500, 515, 562, 563, 564, 571, 598, 607, 612, 613], "argmax": [7, 16, 28], "attent": [7, 16, 28, 166, 204, 246, 248, 513, 567], "binary_op": [7, 16, 28], "concat": [7, 16, 28, 134, 469], "direct_q8": [7, 16, 28], "embed_layernorm": [7, 16, 28], "gather": [7, 13, 15, 16, 28, 261, 291, 472], "gavgpool": [7, 16, 28], "gemm": [7, 16, 28, 603], "lstm": [7, 16, 28], "matmul": [7, 15, 16, 28, 40, 46, 53, 59, 67, 73, 79, 80, 89, 99, 100, 118, 127, 223, 261, 291, 571, 573], "maxpool": [7, 16, 28, 119, 128, 573], "pad": [7, 16, 28, 65, 66, 166, 183, 204, 219, 246, 248, 565, 612], "pool": [7, 16, 28, 128], "resiz": [7, 16, 28, 166, 167, 179, 183, 204, 205, 216, 219, 564, 565, 612], "split": [7, 16, 28, 38, 73, 76, 129, 182, 183, 218, 219, 239, 515, 612], "tf_util": 7, "graph_rewrit": [7, 101], "bf16": [7, 40, 41, 42, 43, 51, 75, 82, 86, 88, 101, 136, 286, 307, 315, 317, 329, 519, 522, 573, 579, 583, 588, 592, 598, 608, 613], "qdq": [7, 17, 19, 20, 21, 22, 24, 26, 27, 30, 32, 34, 36, 37, 42, 82, 101, 102, 103, 141, 151, 221, 222, 223, 284, 286, 519, 571, 575, 588, 589, 607], "graph_bas": [7, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 63, 65, 66, 67, 68, 69, 71, 72, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95, 97, 98, 99, 101], "quantize_graph": [7, 101], "qat": [7, 39, 101, 102, 140, 223, 226, 236, 285, 568, 569, 571, 575, 607], "quantize_graph_bas": [7, 101, 102, 113, 114, 115, 116, 117, 118, 119, 121, 123, 124, 125, 126, 127, 128], "quantize_graph_bn": [7, 101, 102], "quantize_graph_concatv2": [7, 101, 102], "quantize_graph_conv": [7, 101, 102], "quantize_graph_for_intel_cpu": [7, 101, 102], "quantize_graph_matmul": [7, 101, 102], "quantize_graph_pool": [7, 101, 102], "transform_graph": [7, 101], "bias_correct": [7, 101, 132], "graph_transform_bas": [7, 101, 130, 132, 133, 134], "insert_log": [7, 101, 132], "rerange_quantized_concat": [7, 101, 132], "graph_convert": [7, 101], "graph_converter_without_calib": [7, 101], "graph_util": [7, 101], "quantize_graph_common": [7, 101], "torch_util": [7, 187, 226, 268], "bf16_convert": [7, 42, 43, 45, 82, 101, 138], "hawq_metr": [7, 138], "onnx": [7, 14, 15, 28, 37, 38, 138, 162, 200, 221, 222, 223, 224, 278, 279, 284, 286, 319, 327, 332, 435, 519, 520, 522, 564, 570, 571, 573, 575, 579, 580, 583, 588, 589, 605, 606, 613], "symbolic_trac": [7, 138], "tensorflow": [7, 45, 47, 69, 70, 71, 75, 82, 90, 96, 100, 101, 102, 104, 107, 112, 120, 132, 135, 165, 166, 167, 168, 171, 172, 173, 175, 176, 177, 180, 183, 185, 190, 203, 204, 205, 206, 209, 210, 211, 213, 214, 215, 217, 219, 223, 224, 225, 226, 228, 230, 233, 234, 235, 236, 266, 270, 272, 275, 276, 277, 285, 303, 312, 329, 391, 392, 404, 405, 412, 461, 462, 463, 465, 516, 518, 519, 562, 564, 567, 568, 570, 571, 573, 575, 576, 579, 580, 588, 589, 603, 605, 606, 610, 613, 614], "kerasadaptor": 8, "specifi": [8, 11, 14, 15, 39, 40, 41, 73, 100, 129, 154, 155, 183, 184, 219, 225, 226, 230, 233, 234, 237, 240, 242, 249, 250, 253, 258, 266, 267, 272, 275, 276, 277, 286, 292, 303, 315, 317, 328, 329, 346, 349, 352, 359, 360, 361, 363, 364, 365, 370, 371, 373, 374, 376, 378, 379, 383, 384, 385, 398, 430, 434, 435, 436, 455, 460, 476, 480, 484, 497, 501, 562, 569, 573, 578, 586, 600, 606, 607, 612, 613, 614], "function": [8, 11, 14, 37, 41, 56, 100, 129, 154, 155, 167, 193, 205, 225, 226, 237, 248, 249, 250, 253, 258, 264, 267, 284, 299, 320, 515, 516, 519, 562, 563, 564, 567, 568, 574, 575, 576, 578, 579, 589, 599, 603, 604, 607, 610, 611, 613], "fp32_baselin": [8, 11, 14, 39, 41, 322, 519], "boolen": [8, 14, 39, 41], "onli": [8, 11, 14, 15, 39, 41, 42, 43, 47, 56, 57, 61, 62, 64, 68, 81, 99, 105, 124, 128, 130, 145, 166, 184, 186, 187, 190, 204, 226, 236, 248, 261, 263, 291, 292, 298, 312, 484, 494, 496, 497, 519, 563, 564, 569, 571, 573, 579, 586, 599, 603, 604, 606, 611, 613, 614], "compare_label": [8, 11, 14, 39, 41, 234, 276, 578], "pipelin": [8, 11, 14, 39, 41, 220, 226, 237, 238, 249, 264, 267, 568, 601], "get_optype_wise_": [8, 41], "quantizable_op_detail": 8, "get": [8, 13, 14, 15, 39, 40, 41, 61, 62, 64, 73, 100, 105, 112, 113, 114, 115, 116, 117, 118, 119, 121, 123, 125, 127, 129, 131, 135, 137, 139, 141, 142, 144, 146, 148, 151, 154, 156, 159, 177, 180, 183, 184, 190, 192, 193, 194, 197, 215, 217, 219, 223, 224, 225, 226, 235, 242, 246, 252, 253, 258, 261, 263, 265, 266, 267, 268, 284, 285, 286, 287, 288, 291, 298, 300, 301, 306, 311, 315, 317, 322, 324, 326, 329, 330, 335, 342, 343, 344, 346, 349, 352, 353, 354, 356, 359, 360, 361, 362, 363, 364, 365, 370, 371, 373, 375, 376, 377, 378, 379, 380, 383, 384, 385, 388, 392, 393, 398, 410, 413, 414, 416, 418, 419, 423, 424, 425, 427, 430, 432, 434, 435, 436, 437, 442, 446, 449, 452, 453, 455, 459, 460, 462, 464, 471, 472, 476, 480, 482, 484, 485, 487, 491, 494, 496, 497, 500, 501, 505, 507, 508, 509, 510, 562, 575, 576, 584, 613], "wise": [8, 15, 41, 130, 145, 261, 291, 305, 306, 307, 311, 315, 316, 373, 376, 484, 562, 575, 603, 604, 611, 613, 614], "union": [8, 41, 234, 276, 319, 474, 578], "each": [8, 14, 15, 39, 40, 41, 81, 100, 105, 131, 137, 164, 168, 171, 179, 183, 202, 206, 209, 216, 219, 228, 230, 231, 232, 241, 242, 248, 263, 270, 272, 273, 274, 285, 286, 287, 291, 298, 311, 514, 519, 562, 565, 567, 568, 573, 583, 589, 592, 598, 600, 603, 604, 610, 611, 612, 613], "kei": [8, 14, 39, 41, 100, 105, 129, 131, 135, 137, 148, 226, 230, 246, 248, 251, 253, 258, 262, 264, 272, 285, 291, 299, 302, 306, 314, 315, 317, 320, 322, 323, 329, 476, 492, 562, 571, 611], "while": [8, 41, 131, 248, 263, 298, 306, 518, 519, 562, 565, 575, 579, 581, 586, 598, 606, 607], "detail": [8, 41, 183, 219, 246, 349, 352, 359, 360, 363, 365, 366, 368, 370, 371, 373, 376, 377, 378, 379, 380, 384, 389, 452, 457, 471, 484, 513, 514, 518, 573, 574, 578, 579, 581, 589, 598, 603, 609, 610, 611, 613, 615], "kerasqueri": 8, "local_config_fil": [8, 14, 39, 41], "querybackendcap": [8, 14, 39, 40, 41, 519], "defin": [8, 14, 39, 40, 41, 81, 87, 100, 129, 137, 146, 154, 155, 185, 226, 237, 238, 241, 249, 250, 251, 252, 253, 258, 261, 262, 263, 264, 265, 268, 277, 285, 291, 298, 299, 300, 301, 303, 306, 319, 328, 407, 408, 409, 496, 513, 516, 519, 562, 564, 565, 567, 568, 573, 575, 578, 599, 601, 603, 604, 607, 610, 611, 613, 614], "interfac": [8, 14, 39, 40, 81, 100, 103, 122, 131, 147, 151, 157, 160, 177, 225, 226, 241, 242, 253, 258, 266, 267, 268, 287, 314, 315, 317, 322, 324, 330, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 382, 446, 452, 459, 471, 518, 575, 589, 602, 607, 609], "adapt": [8, 14, 39, 40, 513, 518, 565, 589], "should": [8, 14, 15, 37, 39, 40, 41, 48, 68, 73, 105, 106, 131, 146, 154, 155, 164, 166, 168, 172, 177, 182, 183, 187, 188, 202, 204, 206, 210, 215, 218, 219, 223, 228, 233, 234, 263, 267, 268, 270, 275, 276, 277, 291, 298, 303, 314, 325, 329, 393, 474, 515, 516, 519, 562, 565, 569, 578, 584, 593, 596, 598, 600, 604, 607, 612, 613, 614], "implement": [8, 14, 39, 40, 41, 81, 100, 122, 130, 131, 134, 154, 155, 161, 164, 165, 166, 168, 172, 177, 199, 202, 203, 204, 206, 210, 215, 227, 233, 234, 256, 261, 265, 269, 275, 276, 277, 287, 291, 298, 299, 300, 301, 303, 309, 314, 518, 539, 564, 565, 589, 599, 604, 609, 611, 613, 614], "inherit": [8, 14, 39, 40, 163, 183, 185, 193, 201, 219, 226, 263, 265, 298, 301, 516, 519, 565], "specif": [8, 11, 14, 39, 40, 105, 106, 146, 157, 160, 166, 167, 168, 169, 173, 175, 176, 177, 184, 190, 204, 205, 206, 207, 211, 213, 214, 215, 226, 227, 230, 236, 237, 248, 249, 250, 268, 269, 272, 286, 292, 293, 295, 296, 297, 302, 315, 317, 325, 360, 371, 372, 373, 376, 384, 399, 513, 516, 519, 562, 567, 573, 574, 578, 579, 580, 581, 585, 586, 588, 592, 598, 600, 603, 606, 613, 614], "backend": [8, 14, 15, 39, 40, 41, 151, 152, 153, 157, 158, 162, 166, 167, 169, 170, 171, 172, 173, 177, 180, 183, 190, 195, 196, 198, 200, 204, 205, 207, 208, 209, 210, 211, 215, 217, 219, 235, 268, 277, 278, 279, 281, 284, 312, 515, 569, 574, 575, 587, 606, 607, 612, 614], "own": [8, 14, 39, 40, 68, 164, 183, 202, 219, 516, 562, 564, 565, 575, 578, 600, 610], "get_vers": [8, 14, 40, 41], "current": [8, 13, 14, 37, 40, 41, 56, 61, 62, 64, 68, 100, 105, 226, 236, 242, 253, 258, 261, 263, 264, 265, 288, 291, 292, 293, 295, 296, 297, 298, 299, 301, 306, 307, 311, 312, 314, 515, 516, 519, 562, 569, 573, 576, 578, 581, 585, 598, 600, 603, 604, 607, 613], "version": [8, 13, 14, 37, 40, 41, 47, 141, 154, 221, 223, 248, 268, 286, 306, 325, 432, 467, 472, 484, 513, 515, 518, 519, 562, 573, 576, 577, 591, 593, 595, 596, 602, 605, 613], "infom": [8, 14, 41, 186, 187, 223], "get_precis": [8, 14, 40, 41, 346], "support": [8, 13, 14, 38, 39, 40, 41, 68, 75, 92, 151, 154, 155, 156, 165, 166, 168, 172, 175, 176, 177, 179, 180, 183, 184, 185, 186, 187, 190, 193, 194, 203, 204, 206, 210, 213, 214, 215, 216, 217, 219, 226, 233, 234, 236, 241, 242, 248, 251, 253, 254, 255, 256, 258, 261, 263, 267, 268, 275, 276, 277, 281, 287, 291, 298, 303, 312, 315, 317, 322, 324, 346, 413, 416, 418, 419, 421, 423, 424, 425, 426, 432, 466, 474, 484, 511, 562, 581, 586, 589, 592, 598, 604, 605, 608, 610, 613], "get_op_typ": [8, 14, 39, 40, 41], "A": [8, 14, 39, 41, 48, 50, 61, 62, 64, 68, 69, 100, 103, 105, 106, 112, 129, 135, 141, 142, 144, 168, 172, 177, 182, 183, 186, 187, 188, 189, 206, 210, 215, 218, 219, 220, 226, 227, 230, 231, 232, 234, 237, 249, 250, 251, 252, 253, 254, 255, 256, 258, 261, 262, 263, 264, 265, 269, 272, 273, 274, 275, 276, 277, 279, 281, 285, 288, 291, 298, 299, 300, 301, 302, 304, 305, 306, 308, 309, 311, 312, 313, 315, 318, 518, 565, 570, 573, 578, 580, 591, 592, 595, 598, 603, 605, 612, 613, 614], "compos": [8, 14, 39, 41, 129, 183, 219, 322, 612], "dictionari": [8, 14, 15, 39, 41, 61, 62, 64, 112, 136, 137, 141, 148, 151, 182, 218, 230, 237, 239, 242, 248, 249, 250, 252, 268, 272, 351, 353, 354, 356, 358, 361, 362, 367, 371, 372, 374], "which": [8, 13, 14, 39, 41, 49, 61, 62, 74, 77, 99, 100, 105, 129, 137, 146, 154, 166, 167, 168, 179, 184, 204, 205, 206, 216, 226, 227, 230, 232, 240, 242, 250, 251, 253, 254, 255, 256, 261, 262, 263, 264, 265, 268, 269, 272, 274, 281, 284, 287, 288, 291, 292, 293, 295, 296, 297, 298, 301, 304, 306, 314, 325, 329, 482, 513, 515, 516, 518, 519, 539, 562, 564, 565, 567, 569, 573, 575, 578, 579, 580, 582, 586, 589, 592, 598, 599, 601, 603, 604, 606, 607, 608, 609, 611, 612, 613, 614], "get_quantization_cap": [8, 14, 39, 40, 41], "describ": [8, 14, 39, 41, 61, 62, 242, 519, 562, 573, 611], "get_op_types_by_precis": [8, 14, 39, 41], "per": [8, 14, 37, 38, 39, 40, 41, 156, 165, 184, 194, 203, 230, 242, 272, 291, 324, 329, 349, 519, 562, 602, 608, 615], "mxnetadaptor": 11, "nc_model": [11, 13, 253, 258], "config": [11, 13, 14, 15, 39, 40, 41, 103, 105, 106, 108, 112, 141, 146, 154, 155, 166, 184, 193, 204, 225, 226, 239, 247, 250, 253, 258, 261, 262, 263, 264, 265, 268, 277, 288, 291, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 311, 312, 313, 314, 315, 317, 318, 319, 322, 328, 329, 330, 331, 334, 335, 336, 338, 340, 341, 344, 370, 376, 378, 379, 383, 384, 428, 430, 437, 439, 442, 443, 446, 448, 449, 451, 452, 459, 462, 465, 473, 484, 487, 488, 489, 490, 492, 494, 495, 497, 505, 507, 510, 516, 518, 530, 562, 563, 567, 568, 569, 571, 575, 579, 580, 601, 603, 606, 607, 608, 610, 611, 613], "unimpl": [11, 14], "yet": [11, 14, 41, 291, 516, 562, 593, 596, 599], "mxnetmodel": [11, 282], "data_x": [11, 13], "loader": [11, 13, 154, 155, 267, 277, 303, 325], "acc": [11, 14, 234, 242, 276, 287, 516, 611, 615], "level": [11, 14, 307, 314, 323, 326, 475, 497, 513, 613], "modelwis": 11, "opwis": 11, "save_path": [11, 14, 41, 135, 221, 223, 278, 279, 284, 286, 319, 519, 580], "quantization_cfg": [11, 14, 41, 519], "includ": [11, 42, 43, 166, 168, 172, 175, 176, 177, 180, 183, 185, 204, 206, 210, 213, 214, 215, 217, 219, 225, 226, 230, 235, 248, 261, 265, 266, 272, 288, 291, 300, 301, 314, 315, 318, 513, 514, 518, 519, 562, 565, 576, 577, 578, 581, 584, 587, 592, 603, 604, 607, 608, 611, 613], "recover_tuned_model": [11, 41], "q_config": [11, 14, 15, 37, 40, 41, 221, 223, 280, 284, 285, 519], "recov": [11, 14, 41, 329, 519, 568], "mxnet": [12, 13, 161, 165, 168, 171, 172, 175, 176, 177, 180, 183, 199, 203, 206, 209, 210, 213, 214, 215, 217, 219, 225, 226, 233, 234, 266, 275, 276, 277, 282, 303, 518, 519, 564, 570, 573, 575, 579, 580, 606, 613, 614], "init": [12, 16, 144, 185, 289, 314, 565, 578], "optyp": [13, 222], "enum": [13, 38, 329, 434, 466], "isiter": 13, "obj": [13, 146, 165, 203, 220, 225, 226, 236, 237, 238, 249, 250, 253, 258, 262, 266, 267, 268, 277, 302, 303, 322, 329], "check": [13, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 56, 57, 61, 62, 73, 100, 105, 112, 135, 141, 151, 155, 168, 206, 222, 226, 236, 262, 267, 291, 298, 302, 306, 307, 314, 315, 317, 329, 371, 376, 413, 416, 418, 419, 421, 423, 424, 425, 426, 432, 435, 453, 469, 470, 472, 477, 484, 486, 514, 518, 562, 569, 576, 582, 584, 586, 593, 596, 597, 609], "whether": [13, 14, 15, 39, 41, 105, 106, 135, 156, 164, 166, 179, 183, 194, 202, 204, 216, 219, 220, 226, 228, 230, 234, 248, 253, 258, 261, 263, 270, 272, 276, 291, 307, 322, 325, 329, 435, 519, 565, 578, 612], "true": [13, 15, 37, 39, 41, 56, 57, 73, 79, 100, 103, 105, 133, 135, 137, 151, 155, 156, 164, 166, 168, 169, 182, 183, 184, 194, 202, 204, 206, 207, 218, 219, 221, 223, 228, 230, 234, 239, 246, 248, 256, 261, 270, 272, 276, 286, 287, 291, 292, 314, 315, 316, 317, 322, 430, 469, 472, 477, 478, 484, 565, 569, 573, 578, 581, 584, 585, 606, 607, 608, 611, 612, 613, 614], "els": [13, 56, 57, 135, 164, 202, 307, 315, 317, 469, 484, 586, 611], "ensure_list": 13, "x": [13, 48, 61, 62, 64, 68, 136, 165, 183, 203, 219, 242, 246, 248, 306, 569, 580, 603, 607, 611, 612], "ensur": [13, 15, 183, 219, 264, 299, 306, 348, 381, 413, 416, 418, 425, 467, 562, 569, 571, 607, 612], "check_mx_vers": 13, "mx": 13, "__version__": 13, "combine_cap": 13, "new": [13, 50, 97, 100, 122, 135, 156, 168, 177, 180, 183, 184, 194, 206, 215, 217, 219, 248, 261, 262, 265, 267, 287, 291, 301, 375, 376, 380, 496, 514, 569, 579, 592, 598, 599, 605, 607, 609, 610, 612, 614], "combin": [13, 40, 141, 154, 155, 179, 193, 216, 226, 267, 277, 303, 329, 515, 519, 575, 601, 605, 608, 612, 613], "make_nc_model": 13, "target": [13, 38, 39, 84, 85, 100, 129, 154, 185, 239, 262, 265, 287, 291, 295, 297, 301, 302, 304, 306, 397, 398, 565, 569, 603, 604, 611, 612, 613, 614], "sym_model": 13, "ctx": 13, "input_desc": 13, "symbol": [13, 136, 140, 141, 227, 269, 277, 303, 515, 522, 580], "neural": [13, 39, 137, 146, 151, 178, 179, 180, 183, 184, 187, 190, 193, 216, 217, 219, 221, 226, 233, 234, 236, 253, 258, 261, 264, 266, 267, 268, 275, 276, 277, 279, 281, 291, 299, 303, 309, 310, 315, 325, 388, 392, 416, 425, 464, 471, 484, 511, 514, 519, 548, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 579, 580, 582, 583, 586, 588, 589, 591, 593, 595, 596, 597, 600, 601, 605, 607, 609, 611, 612, 613, 614], "compressor": [13, 39, 146, 151, 178, 179, 180, 183, 184, 187, 190, 193, 216, 217, 219, 221, 226, 233, 234, 236, 261, 264, 266, 267, 268, 275, 276, 277, 279, 281, 291, 299, 303, 310, 315, 325, 388, 392, 416, 425, 464, 471, 484, 511, 514, 516, 519, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 579, 580, 581, 582, 586, 588, 589, 591, 593, 595, 596, 597, 600, 601, 603, 605, 607, 609, 611, 612, 613, 614], "tupl": [13, 39, 41, 100, 112, 141, 154, 155, 179, 183, 185, 216, 219, 221, 223, 230, 239, 242, 248, 272, 277, 287, 291, 303, 311, 315, 316, 399, 430, 484, 503, 565, 578, 612], "symnet": 13, "arg": [13, 39, 47, 146, 166, 167, 168, 204, 205, 206, 225, 226, 236, 248, 258, 261, 266, 267, 268, 278, 279, 280, 283, 286, 299, 306, 323, 325, 326, 334, 336, 338, 339, 340, 341, 351, 353, 354, 356, 358, 361, 362, 367, 469, 477, 497, 564, 565, 569, 587, 607, 611, 612], "aux": 13, "descript": [13, 100, 122, 129, 223, 224, 230, 250, 272, 286, 514, 515], "ncmodel": 13, "suppli": [13, 246], "get_framework_nam": [13, 413, 416, 418, 425], "prepare_model_data": 13, "prepar": [13, 39, 141, 193, 220, 226, 253, 258, 264, 266, 371, 376, 464, 515, 518, 565, 569, 607], "dataloaderwrap": 13, "prepare_model": 13, "create_data_exampl": 13, "exampl": [13, 105, 137, 141, 166, 167, 168, 179, 182, 183, 204, 205, 206, 216, 218, 219, 230, 231, 232, 234, 240, 264, 272, 273, 274, 276, 286, 299, 319, 357, 375, 381, 405, 429, 430, 431, 432, 477, 484, 513, 514, 518, 562, 574, 575, 581, 584, 585, 586, 589, 608, 609, 612, 613, 616], "prepare_dataload": 13, "io": [13, 518], "ndarray_to_devic": 13, "ndarrai": [13, 61, 62, 64, 100, 183, 219, 239, 241, 286, 306, 320, 323, 572, 612], "devic": [13, 73, 84, 85, 86, 87, 88, 89, 92, 97, 100, 121, 126, 129, 134, 137, 151, 185, 242, 268, 567, 581, 584, 589, 598, 603, 606], "is_model_quant": 13, "query_quantizable_nod": 13, "node": [13, 15, 21, 23, 32, 36, 37, 38, 41, 42, 43, 44, 47, 48, 49, 50, 54, 56, 57, 58, 61, 62, 64, 68, 71, 73, 74, 76, 77, 78, 80, 93, 99, 100, 122, 129, 131, 135, 221, 222, 223, 278, 279, 284, 285, 286, 382, 395, 396, 397, 398, 399, 400, 405, 413, 416, 423, 424, 425, 462, 463, 465, 519, 562, 569, 611], "map": [13, 38, 41, 122, 131, 137, 183, 219, 221, 222, 223, 225, 226, 229, 230, 231, 232, 234, 239, 253, 258, 261, 263, 266, 271, 272, 273, 274, 276, 291, 300, 434, 565, 569, 578, 591, 595, 603, 604, 607], "quantize_sym_model": 13, "qconfig": [13, 611], "accord": [13, 41, 112, 154, 166, 167, 168, 177, 180, 183, 204, 205, 206, 215, 217, 219, 226, 248, 265, 266, 286, 291, 292, 295, 296, 297, 301, 304, 306, 307, 309, 311, 314, 315, 317, 322, 483, 516, 519, 565, 569, 603, 604, 608, 612, 613], "run_forward": 13, "b_filter": 13, "collector": [13, 137, 320, 323], "pre_batch": 13, "post_batch": 13, "forward": [13, 136, 185, 246, 248, 286, 606, 607, 611], "propag": [13, 95, 112, 293], "filter": [13, 166, 167, 168, 169, 170, 171, 173, 177, 204, 205, 206, 207, 208, 209, 211, 215, 226, 268, 329, 352, 393, 416, 486, 564, 565, 575, 603, 604, 611], "infer": [13, 15, 61, 62, 122, 129, 225, 226, 266, 285, 303, 519, 567, 568, 579, 598, 600, 603, 604, 605, 607, 611, 613], "collect": [13, 38, 41, 177, 180, 181, 183, 186, 187, 188, 189, 191, 215, 217, 219, 227, 232, 233, 234, 269, 274, 275, 276, 315, 316, 317, 320, 323, 329, 330, 435, 459, 470, 472, 484, 485, 571, 607, 611, 613], "inform": [13, 41, 103, 137, 154, 155, 186, 187, 188, 189, 230, 261, 263, 264, 265, 267, 272, 275, 276, 284, 288, 291, 298, 299, 300, 301, 314, 346, 384, 413, 471, 472, 477, 478, 513, 514, 517, 518, 519, 520, 522, 528, 529, 530, 537, 541, 548, 556, 557, 558, 559, 561, 567, 571, 573, 580, 593, 596, 599, 603, 604, 608, 609, 611, 614, 615, 616], "dure": [13, 41, 56, 61, 62, 112, 239, 242, 248, 261, 265, 267, 291, 301, 478, 579, 580, 600, 601, 603, 604, 607, 611, 614], "prior": [13, 83, 306, 613], "after": [13, 15, 39, 51, 72, 141, 166, 179, 183, 186, 187, 193, 204, 216, 219, 220, 221, 223, 226, 239, 261, 263, 264, 265, 288, 291, 298, 299, 300, 301, 307, 319, 470, 516, 562, 564, 565, 567, 568, 571, 575, 578, 591, 592, 595, 599, 600, 601, 603, 604, 607, 608, 610, 611, 612, 613], "count": [13, 250, 291, 307, 516, 565], "make_symbol_block": 13, "gluon": [13, 277, 303, 580], "symbolblock": 13, "make_modul": 13, "parse_tune_config": 13, "quantizable_nod": 13, "distribute_calib_tensor": 13, "calib_tensor": 13, "calib_cfg": 13, "tensor_to_nod": 13, "distribut": [13, 130, 145, 146, 156, 158, 159, 161, 164, 186, 187, 194, 196, 197, 199, 202, 220, 226, 253, 258, 268, 306, 324, 472, 518, 567, 576, 593, 596, 607, 609, 613, 615], "algorithm": [13, 141, 147, 182, 218, 227, 234, 237, 241, 249, 250, 252, 268, 269, 276, 306, 322, 324, 516, 518, 519, 539, 567, 568, 573, 575, 587, 592, 603, 604, 607, 611, 613, 614], "kl": [13, 320, 323, 324, 573, 613, 614], "minmax": [13, 573, 614], "calib_model": 13, "qsym_model": 13, "calib_data": 13, "calibdata": 13, "threshold": [13, 15, 143, 230, 261, 272, 291, 320, 323, 324, 578], "amp_convert": 13, "amp_cfg": 13, "amp": [13, 581, 588, 602], "wrap": [13, 106, 112, 185, 230, 272, 342, 515, 569, 593, 596], "dataiterload": 13, "data_it": 13, "collectorbas": 13, "collect_gluon": 13, "_": [13, 154, 155, 303, 515, 516, 519, 567, 569, 573, 578, 579, 580, 581, 587, 591, 593, 595, 596, 600, 603, 604, 607, 608, 609, 610, 611, 613, 614], "arr": [13, 38, 329], "api": [13, 14, 39, 41, 64, 69, 97, 100, 112, 122, 146, 225, 226, 230, 264, 266, 268, 272, 303, 315, 316, 317, 329, 370, 371, 372, 373, 374, 375, 377, 378, 379, 380, 500, 501, 514, 515, 520, 522, 528, 537, 541, 556, 557, 558, 559, 561, 571, 575, 583, 587, 588, 589, 609, 610, 613, 616], "collect_modul": 13, "m": [13, 38, 64, 137, 261, 291, 518, 567, 581, 583, 586, 589, 593, 596, 615], "b": [13, 38, 64, 68, 166, 204, 223, 565, 578, 604, 613], "o": [13, 64, 393, 518, 583, 602], "calibcollector": 13, "include_tensors_kl": 13, "include_tensors_minmax": 13, "num_bin": [13, 320, 323, 324], "8001": [13, 320, 323], "calc_kl_th_dict": 13, "quantized_dtyp": 13, "calcul": [13, 15, 38, 39, 41, 54, 137, 155, 169, 170, 185, 207, 208, 226, 231, 232, 242, 247, 248, 253, 257, 258, 261, 263, 264, 273, 274, 287, 288, 291, 299, 300, 311, 320, 323, 384, 476, 482, 565, 578, 589, 600, 603, 604, 607, 610, 613, 614], "tensorcollector": 13, "include_nod": 13, "qtensor_to_tensor": 13, "build": [13, 105, 112, 122, 142, 143, 144, 145, 223, 224, 237, 239, 249, 250, 280, 282, 284, 285, 286, 349, 350, 352, 363, 364, 366, 369, 393, 453, 462, 484, 501, 519, 562, 576, 580, 591, 593, 595, 596, 599, 605, 610, 613], "up": [13, 61, 62, 64, 95, 183, 219, 226, 242, 253, 258, 262, 287, 370, 518, 562, 569, 573, 575, 589, 593, 596, 598, 605, 606, 607, 610, 612, 614], "preprocess": [13, 166, 177, 180, 183, 204, 215, 217, 219, 220, 226, 248, 322, 569, 612], "namecollector": 13, "cache_kl": 13, "cache_minmax": 13, "tensors_kl": 13, "tensors_minmax": 13, "properti": [13, 100, 112, 142, 144, 151, 156, 158, 166, 168, 184, 185, 193, 194, 196, 204, 206, 220, 225, 226, 233, 234, 235, 236, 250, 253, 258, 266, 267, 268, 275, 276, 278, 279, 280, 282, 284, 285, 286, 287, 299, 306, 314, 315, 317, 329, 330, 348, 381, 388, 392, 397, 398, 401, 413, 416, 421, 425, 434, 437, 442, 446, 449, 452, 459, 469, 476, 477, 478, 482, 487, 491, 494, 496, 497, 577, 602], "min_max_dict": 13, "mix": [13, 41, 42, 43, 136, 277, 304, 441, 442, 443, 490, 518, 519, 530, 575, 581, 587, 588, 589], "max": [13, 14, 15, 38, 41, 100, 130, 145, 183, 219, 231, 232, 273, 274, 306, 329, 494, 518, 562, 607, 612, 613], "post_collect": 13, "2": [13, 38, 40, 41, 42, 47, 68, 73, 99, 143, 167, 184, 205, 230, 232, 234, 242, 256, 257, 263, 272, 274, 276, 291, 298, 304, 306, 312, 515, 518, 519, 565, 567, 573, 575, 577, 578, 579, 600, 602, 603, 607, 609, 610, 612, 613], "onnxruntimeadaptor": 14, "rt": 14, "data_load": [14, 41, 42, 43, 519], "todo": [14, 166, 169, 204, 207, 230, 272, 482], "replac": [14, 61, 62, 79, 80, 100, 232, 274, 284, 307, 484, 569, 589, 609], "input_graph": [14, 121, 122, 126, 129, 130, 331, 439, 443, 448, 451, 458, 519], "eval": [14, 193, 226, 230, 236, 272, 515, 564, 581, 611], "func": [14, 185, 267, 286, 484, 501, 614], "onnxdataload": 14, "evalut": 14, "onnxtransform": 14, "onnxmetr": 14, "evaluaton": 14, "visualizaton": 14, "f1": [14, 226, 231, 233, 234, 268, 273, 275, 276, 569, 578, 610, 615], "e": [14, 40, 64, 239, 241, 267, 291, 474, 476, 501, 513, 518, 567, 581, 586, 587, 591, 595, 603, 613], "g": [14, 40, 239, 241, 267, 291, 476, 518, 567, 581, 586, 603, 604, 609, 613], "modelproto": [14, 221, 222, 223, 580], "onnxrt_qlinearopsadaptor": [14, 519], "onnxrt_integeropsadaptor": 14, "onnxrt_qdqadaptor": 14, "onnxrtqueri": 14, "get_graph_optim": 14, "onnxruntim": [14, 162, 200, 226, 235, 388, 392, 518, 519, 575, 606], "graph": [14, 15, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 107, 120, 122, 126, 129, 130, 132, 133, 134, 135, 165, 203, 223, 225, 268, 278, 279, 280, 284, 285, 286, 336, 338, 340, 405, 413, 416, 424, 425, 427, 437, 438, 439, 444, 445, 449, 462, 463, 465, 485, 488, 500, 515, 519, 565, 567, 569, 574, 578, 580, 581, 607, 608, 611], "optim": [14, 39, 41, 42, 43, 47, 51, 54, 55, 57, 68, 69, 73, 74, 79, 80, 83, 86, 87, 88, 89, 93, 106, 108, 129, 147, 151, 187, 193, 220, 225, 226, 240, 252, 263, 264, 266, 268, 286, 288, 297, 298, 299, 300, 306, 319, 320, 323, 330, 332, 336, 338, 340, 357, 361, 362, 368, 370, 371, 372, 373, 374, 375, 376, 378, 379, 381, 382, 384, 385, 386, 387, 388, 391, 392, 405, 459, 465, 466, 476, 482, 485, 488, 492, 499, 504, 516, 518, 537, 563, 567, 568, 569, 573, 575, 576, 580, 581, 583, 585, 586, 589, 592, 602, 603, 605, 606, 607, 608, 610, 611, 613, 614], "onnxrtaug": 15, "model_wrapp": 15, "dump_op_typ": 15, "black_nod": 15, "white_nod": 15, "cpuexecutionprovid": 15, "reduce_rang": [15, 37, 151, 268, 606], "augment": 15, "augment_graph": 15, "activation_onli": 15, "weight_onli": 15, "add": [15, 37, 38, 46, 53, 58, 61, 62, 99, 100, 105, 109, 115, 118, 135, 166, 168, 190, 204, 206, 226, 227, 234, 248, 253, 258, 262, 264, 267, 269, 276, 284, 299, 302, 307, 315, 317, 342, 349, 350, 352, 359, 360, 361, 362, 363, 364, 366, 368, 369, 370, 371, 375, 376, 377, 378, 379, 380, 382, 398, 484, 509, 514, 515, 539, 562, 564, 565, 569, 571, 573, 578, 593, 596, 610, 611, 613], "quantization_candid": 15, "store": [15, 168, 206, 230, 248, 254, 255, 256, 261, 263, 272, 288, 291, 298, 300, 301, 306, 325, 574], "part": [15, 220, 226, 230, 261, 263, 272, 298, 515, 576, 579, 593, 596], "get_intermediate_output": 15, "calib_mod": 15, "intermedi": [15, 38, 137, 151, 185, 515, 575, 603, 607], "dump_minmax": 15, "naiv": 15, "min": [15, 41, 100, 130, 145, 329, 562, 607, 612, 613], "dump_calibr": 15, "param": [15, 39, 40, 41, 61, 137, 154, 156, 184, 190, 194, 230, 233, 234, 248, 272, 275, 276, 306, 351, 383, 484, 487, 519, 580, 613], "give": [15, 598, 613], "pair": [15, 37, 42, 97, 105, 564, 579], "across": [15, 225, 226, 235, 266, 277, 518, 566, 603, 604], "test": [15, 183, 219, 239, 514, 518, 562, 576, 615], "first": [15, 41, 87, 97, 130, 145, 148, 166, 182, 204, 218, 220, 226, 230, 272, 304, 307, 393, 515, 516, 519, 562, 565, 571, 576, 579, 583, 592, 593, 596, 599, 606, 607, 608, 610, 611, 613, 614], "element": [15, 164, 202, 226, 230, 246, 248, 253, 258, 261, 264, 272, 291, 299, 329, 347, 565, 575, 578, 603], "minimum": [15, 291, 306, 589, 603, 613], "second": [15, 58, 166, 204, 307, 329, 393, 476, 562, 591, 595, 599, 613, 614], "maximum": [15, 48, 166, 183, 204, 219, 228, 248, 261, 263, 270, 291, 298, 306, 565, 603, 607, 612], "calculate_quantization_param": 15, "quantization_threshold": 15, "follow": [15, 62, 64, 73, 80, 83, 86, 87, 88, 89, 100, 168, 206, 226, 227, 230, 248, 253, 258, 269, 272, 304, 513, 514, 515, 516, 519, 529, 562, 564, 565, 567, 568, 569, 571, 573, 576, 577, 578, 579, 580, 581, 582, 583, 591, 595, 601, 603, 604, 606, 607, 611, 613], "param_nam": [15, 342], "dump_tensor": 15, "both": [15, 135, 137, 248, 250, 252, 513, 516, 519, 568, 576, 582, 606, 607, 613], "calculate_scale_zeropoint": 15, "last_nod": 15, "next_nod": 15, "rmin": [15, 38, 607], "rmax": [15, 38, 607], "scheme": [15, 37, 38, 40, 141, 501, 519, 564, 573, 589, 613, 614], "qtype": [15, 38, 519], "quantize_rang": [15, 38], "zero": [15, 37, 38, 183, 219, 226, 234, 253, 258, 261, 263, 264, 276, 291, 298, 299, 329, 518, 603, 604, 607, 612, 613], "point": [15, 37, 38, 179, 216, 231, 232, 251, 273, 274, 287, 306, 578, 598, 607, 612, 613], "activationoper": 17, "onnx_quant": [17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36], "onnx_nod": [17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36], "quantize_check": [17, 20, 21, 23, 25, 27, 31, 32, 33, 34, 35], "quantizaion": [17, 19, 20, 21, 22, 23, 24, 25, 27, 29, 30, 31, 32, 33, 34, 35, 36], "can": [17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 50, 130, 137, 145, 146, 154, 155, 165, 168, 183, 184, 186, 187, 203, 206, 219, 226, 230, 232, 234, 246, 248, 253, 258, 261, 263, 264, 265, 268, 272, 274, 276, 277, 287, 291, 298, 299, 301, 303, 325, 435, 467, 474, 484, 515, 516, 518, 519, 562, 563, 564, 565, 567, 568, 569, 573, 575, 576, 578, 579, 580, 581, 582, 583, 585, 586, 587, 589, 591, 592, 593, 595, 596, 598, 599, 600, 601, 602, 603, 604, 606, 607, 608, 610, 611, 612, 613, 614], "done": [17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 515, 567, 568, 582, 598, 603, 607], "convert_check": [17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36], "convert_format": [17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36], "convers": [17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 48, 75, 226, 236, 519, 579, 607, 608], "qoper": [17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37], "removableactivationoper": 17, "remov": [17, 37, 38, 41, 50, 51, 54, 56, 68, 73, 74, 77, 78, 79, 91, 93, 100, 105, 122, 129, 137, 185, 223, 232, 274, 284, 286, 315, 317, 349, 352, 359, 360, 363, 365, 366, 368, 370, 416, 477, 478, 485, 513, 514, 591, 595, 603, 604, 611], "qactivationoper": 17, "children": [17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 30, 31, 32, 33, 34, 35, 36, 284], "initi": [17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 30, 31, 32, 33, 34, 35, 36, 37, 38, 106, 135, 146, 154, 155, 163, 166, 185, 193, 201, 204, 220, 226, 237, 238, 249, 250, 262, 263, 267, 268, 284, 298, 303, 314, 348, 371, 372, 381, 430, 462, 464, 472, 485, 492, 516, 564, 565, 578, 597, 603, 604, 613], "argmaxoper": 18, "qargmaxoper": 18, "attentionoper": 19, "qattentionoper": 19, "qattent": 19, "binari": [20, 135, 234, 246, 248, 276, 518, 572, 578, 593, 596], "binaryoper": 20, "qbinaryoper": 20, "qbinari": 20, "concatoper": 21, "cast": [21, 23, 32, 36, 37, 38, 51, 571, 608, 612], "qconcatoper": 21, "qconcat": 21, "convoper": 22, "qconvoper": 22, "qlinearconv": 22, "direct8bit": 23, "direct8bitoper": 23, "directcastoper": 23, "qdirectoper": 23, "qdirect": 23, "embedlayernorm": 24, "embedlayernormalizationoper": 24, "qembedlayernormalizationoper": 24, "qembedlayernorm": 24, "gatheroper": 25, "qgatheroper": 25, "qgather": 25, "globalaveragepool": 26, "globalaveragepooloper": 26, "qglobalaveragepooloper": 26, "qlinearglobalaveragepool": 26, "gemmoper": 27, "qgemmoper": 27, "qgemm": 27, "lstmoper": 29, "matmuloper": 30, "qmatmuloper": 30, "qlinearmatmul": 30, "maxpooloper": 31, "qmaxpooloper": 31, "qmaxpool": 31, "op_registri": 32, "op_typ": [32, 39, 307, 311, 314, 315, 317, 318], "qop_registri": 32, "padoper": 33, "qpadoper": 33, "qpad": 33, "averagepool": 34, "pooloper": 34, "qpooloper": 34, "qlinearaveragepool": 34, "resizeoper": 35, "qresizeoper": 35, "qresiz": 35, "splitoper": 36, "qsplitoper": 36, "qsplit": 36, "static": [37, 39, 100, 129, 139, 151, 224, 239, 267, 268, 284, 303, 315, 317, 342, 346, 349, 350, 351, 352, 353, 354, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 373, 374, 375, 376, 377, 378, 379, 380, 382, 384, 385, 413, 416, 418, 419, 421, 423, 424, 425, 426, 436, 453, 455, 460, 462, 467, 469, 474, 476, 482, 483, 485, 487, 492, 497, 501, 508, 509, 519, 571, 575, 581, 586, 587, 588, 589, 592, 598, 613, 615], "quantization_param": 37, "op_types_to_quant": 37, "fallback_list": 37, "check_opset_vers": 37, "opset": [37, 221, 223, 286], "should_quant": 37, "quantize_model": 37, "merge_dedicated_qdq_pair": 37, "merg": [37, 98, 158, 196, 593, 596, 611, 613], "dedic": 37, "q": [37, 38, 42, 97, 99, 121], "dq": [37, 42, 97, 99, 121], "should_cast": 37, "insert_qdq": 37, "insert": [37, 41, 42, 71, 97, 99, 100, 103, 122, 133, 221, 223, 515, 575, 581, 603, 604, 607, 608, 611], "should_convert": 37, "convert_qdq_to_operator_ori": 37, "remove_redundant_pair": 37, "redud": 37, "dtype_cast": 37, "cfg": [37, 41, 65, 66, 141, 147, 322], "keep_io_typ": 37, "dtype": [37, 38, 42, 43, 100, 129, 136, 151, 169, 170, 179, 183, 207, 208, 216, 219, 221, 223, 224, 286, 565, 571, 573, 581, 606, 611, 612, 614], "quantize_output": 37, "initializer_use_weight_qtyp": 37, "direct_int8": 37, "indic": [37, 159, 164, 166, 197, 202, 204, 220, 226, 230, 246, 248, 251, 252, 272, 291, 515, 562, 572, 611], "quantize_bias_tensor": 37, "bia": [37, 41, 100, 129, 130, 221, 223, 246, 611], "quantize_bia": 37, "bias_nam": [37, 223], "input_nam": [37, 61, 62, 151, 221, 223, 286, 571], "weight_nam": [37, 292], "beta": [37, 61, 62, 64, 288], "input_scal": 37, "weight_scal": 37, "quantize_weights_per_channel": 37, "weight_qtyp": 37, "axi": [37, 38, 291], "channel": [37, 38, 100, 130, 145, 179, 183, 216, 219, 242, 246, 261, 291, 413, 416, 425, 519, 575, 576, 581, 583, 588, 603, 604, 612, 615], "quantize_weight_per_channel": 37, "channel_axi": [37, 103, 143, 145], "tensor_proto_to_arrai": 37, "tensorproto": [37, 38], "get_bias_add_nod": 37, "last_output": 37, "quantized_bias_nam": 37, "handl": [37, 54, 55, 56, 135, 137, 226, 239, 240, 241, 266, 326, 474, 500, 501, 515, 517, 564], "ad": [37, 112, 166, 204, 227, 269, 291, 298, 306, 349, 350, 352, 359, 360, 361, 362, 363, 366, 368, 369, 562, 579, 581, 586, 589, 593, 596, 611], "reshap": [37, 55, 61, 62, 64, 67, 72, 256, 291], "nodeproto": [37, 223], "_type_": [37, 223, 283], "previou": [37, 41, 61, 73, 248, 250, 287, 291, 312, 562, 609, 611, 613], "is_valid_quantize_weight": 37, "dequantize_tensor": [37, 137, 384], "value_nam": 37, "dequant": [37, 38, 51, 83, 86, 87, 88, 89, 91, 115, 116, 118, 137, 141, 329, 384, 515, 611], "helper": [38, 39, 41, 100, 106, 135, 137, 141, 166, 167, 168, 182, 204, 205, 206, 218, 222, 223, 246, 285, 327, 478], "onnxrt": [38, 166, 168, 175, 176, 177, 180, 183, 204, 206, 213, 214, 215, 217, 219, 233, 234, 275, 276, 327, 387, 388, 403, 405, 412, 465, 519], "dtype_to_nam": 38, "dtype_map": 38, "its": [38, 41, 54, 91, 100, 103, 112, 137, 162, 168, 182, 183, 200, 206, 218, 219, 221, 222, 228, 229, 233, 234, 263, 267, 270, 271, 275, 276, 291, 298, 306, 307, 311, 315, 317, 513, 562, 565, 567, 577, 578, 579, 589, 591, 595, 598, 599, 602, 603, 604, 610, 612, 613], "represent": [38, 50, 239, 349, 350, 352, 355, 359, 360, 363, 364, 366, 368, 369, 495, 513, 515, 568, 604, 607], "quanttyp": 38, "repres": [38, 168, 173, 206, 211, 230, 232, 234, 272, 274, 276, 291, 298, 299, 300, 301, 302, 351, 353, 354, 356, 358, 361, 362, 365, 367, 482, 513, 565, 571, 607, 613], "make_quant_nod": 38, "make": [38, 62, 129, 130, 145, 164, 202, 261, 263, 265, 291, 298, 301, 329, 348, 381, 413, 513, 514, 519, 562, 563, 564, 573, 578, 586, 591, 595, 598, 607, 608, 610, 613], "quantizelinear": [38, 571], "make_dquant_nod": 38, "dequantizelinear": [38, 571], "is_b_transpos": 38, "wheter": 38, "inuput": 38, "transpos": [38, 67, 183, 219, 261, 291, 612], "split_shared_bia": 38, "share": [38, 73, 76, 93, 99, 129, 572, 573, 613], "cast_tensor": 38, "remove_init_from_model_input": 38, "collate_pr": 38, "quantize_data_with_scale_zero": 38, "zero_point": [38, 223, 284, 291], "To": [38, 230, 256, 261, 265, 272, 287, 291, 301, 474, 514, 562, 565, 569, 571, 579, 582, 585, 591, 593, 595, 596, 606, 608, 609, 613, 614], "pack": [38, 55], "comput": [38, 41, 56, 61, 62, 112, 137, 141, 193, 220, 226, 227, 228, 230, 231, 232, 234, 240, 269, 270, 272, 273, 274, 276, 292, 295, 296, 319, 329, 539, 568, 578, 579, 581, 592, 603, 604, 607, 613], "linear": [38, 151, 221, 223, 261, 268, 291, 515, 567, 571, 603, 604], "when": [38, 47, 58, 61, 64, 112, 135, 146, 151, 166, 167, 175, 176, 177, 183, 204, 205, 213, 214, 215, 219, 227, 228, 240, 248, 261, 262, 263, 268, 269, 270, 291, 292, 298, 302, 303, 482, 484, 497, 501, 513, 516, 539, 562, 564, 565, 589, 591, 592, 595, 599, 603, 604, 607, 612, 613], "uint8": [38, 179, 216, 230, 272, 519, 565, 573, 606, 607, 612, 614], "ab": [38, 248, 263, 288, 607], "np": [38, 100, 129, 183, 219, 306, 569, 612], "sym": [38, 573, 614], "asym": [38, 573, 614], "calculate_scale_zp": 38, "quantize_data": 38, "necessari": [38, 220, 226, 513, 516, 580, 599, 610, 613], "trasnform": 38, "full": [38, 41, 166, 167, 168, 184, 204, 205, 206, 226, 518, 562, 565, 572, 576, 577, 599], "equat": [38, 232, 234, 274, 276, 607], "r": [38, 64, 130, 145, 242, 518, 562, 576, 599, 602, 607, 615], "": [38, 40, 41, 50, 56, 64, 73, 100, 112, 129, 130, 131, 135, 145, 147, 148, 151, 156, 165, 168, 182, 183, 184, 186, 187, 188, 194, 203, 206, 218, 219, 226, 232, 240, 242, 248, 261, 263, 264, 268, 274, 275, 276, 277, 281, 291, 298, 303, 307, 314, 329, 382, 413, 469, 470, 513, 516, 567, 569, 573, 575, 576, 579, 586, 589, 591, 595, 598, 601, 602, 603, 604, 605, 606, 607, 609, 610, 614], "z": [38, 567], "real": [38, 39, 169, 186, 187, 207, 569, 605, 607], "origin": [38, 39, 131, 141, 142, 144, 166, 183, 184, 204, 219, 226, 239, 248, 253, 258, 261, 262, 263, 264, 291, 292, 293, 295, 296, 297, 298, 299, 302, 307, 311, 329, 332, 514, 565, 586, 603, 604, 607, 612, 613, 614], "quantize_data_per_channel": 38, "tensor_valu": 38, "scale_valu": 38, "zo_valu": 38, "dequantize_data_with_scale_zero": 38, "sacal": 38, "dequantize_data": 38, "valueinfo": 38, "tensor_nam": [38, 135, 285, 286], "new_dtyp": 38, "quantizedvalu": 38, "new_quantized_nam": 38, "scale_nam": 38, "zero_point_nam": 38, "quantized_value_typ": 38, "quint8": 38, "linearli": 38, "intial": 38, "quantizediniti": 38, "quantized_data": 38, "quantizationmod": 38, "quantizedvaluetyp": 38, "quantformat": [38, 223], "quantize_nparrai": 38, "low": [38, 40, 41, 154, 155, 169, 170, 207, 208, 225, 226, 235, 266, 277, 518, 519, 563, 565, 569, 579, 605, 607, 613], "high": [38, 169, 170, 207, 208, 565, 576, 605, 613], "attribute_to_kwarg": 38, "attribut": [38, 56, 77, 100, 112, 129, 141, 148, 193, 266, 400, 401, 405, 465, 482, 519, 564, 573, 574, 606, 614], "kwarg": [38, 39, 41, 112, 113, 114, 115, 116, 117, 118, 119, 122, 123, 125, 127, 128, 146, 151, 168, 177, 180, 181, 183, 187, 188, 191, 206, 219, 225, 226, 236, 242, 248, 253, 258, 264, 266, 267, 268, 275, 276, 277, 278, 279, 280, 282, 283, 284, 285, 286, 299, 303, 315, 318, 319, 323, 325, 326, 328, 329, 334, 336, 338, 339, 340, 341, 351, 353, 354, 356, 358, 361, 362, 367, 564], "make_nod": 38, "find_by_nam": 38, "item_list": 38, "find": [38, 61, 62, 64, 135, 155, 234, 250, 251, 276, 284, 306, 329, 430, 500, 518, 519, 562, 584, 591, 595, 598, 599, 603, 610, 611, 613], "item": [38, 148, 182, 218, 262, 302, 314, 315, 317, 382, 470, 503, 569, 613], "get_ops_recurs": 39, "prefix": [39, 135, 136, 140, 184, 226, 227, 269, 497, 581, 586, 611], "graph_info": [39, 41, 278, 279, 280, 284, 285, 286], "templateadaptor": 39, "tampl": 39, "yaml": [39, 40, 41, 146, 148, 154, 155, 166, 168, 184, 193, 204, 206, 220, 225, 226, 236, 237, 238, 249, 250, 253, 258, 266, 267, 268, 277, 302, 303, 328, 329, 330, 334, 335, 336, 337, 338, 340, 341, 343, 344, 428, 430, 437, 442, 446, 449, 452, 484, 495, 519, 574, 578, 600, 603, 606, 611, 612], "file": [39, 100, 129, 135, 144, 146, 147, 154, 155, 166, 167, 168, 171, 182, 183, 192, 204, 205, 206, 209, 218, 219, 220, 223, 225, 226, 230, 236, 237, 238, 239, 240, 242, 249, 250, 253, 258, 262, 264, 266, 267, 268, 272, 277, 286, 287, 299, 302, 303, 325, 328, 329, 334, 335, 336, 337, 338, 339, 340, 341, 393, 430, 439, 443, 453, 469, 476, 477, 483, 484, 485, 497, 501, 505, 507, 509, 510, 516, 519, 562, 569, 572, 574, 577, 578, 580, 584, 593, 596, 597, 598, 599, 600, 603, 606, 611, 612], "is_fused_modul": [39, 137, 141], "_propagate_qconfig_help": [39, 137, 141], "detect": [39, 137, 141, 230, 234, 272, 276, 281, 413, 416, 425, 484, 515, 562, 581, 588, 589], "calculate_hessian_trac": 39, "fp32_model": [39, 41, 135, 137, 141, 221, 223, 286, 311, 329, 519], "q_model": [39, 137, 142, 144, 226, 236, 325, 515, 564, 565, 569, 571, 574, 578, 580, 607], "criterion": [39, 41, 137, 151, 187, 190, 220, 226, 268, 288, 291, 298, 452, 492, 537, 567, 568, 571, 603, 604, 607, 613, 614], "enable_act": [39, 137], "hessian": [39, 137, 309, 613], "trace": [39, 136, 137, 140, 141, 221, 223, 303, 309, 515, 522, 588, 613], "loss": [39, 112, 151, 155, 185, 193, 225, 226, 234, 253, 258, 266, 268, 276, 287, 319, 518, 567, 568, 569, 578, 579, 589, 601, 603, 604, 607, 613, 614], "gradient": [39, 112, 263, 286, 288, 292, 293, 575, 603, 604, 615], "amap": 39, "enabl": [39, 41, 99, 137, 248, 263, 298, 472, 518, 562, 569, 579, 581, 583, 586, 587, 589, 602, 603, 604, 605, 608, 613], "error": [39, 137, 227, 234, 240, 267, 269, 276, 311, 323, 326, 468, 496, 539, 578, 582, 613], "op_nam": [39, 141, 147, 151, 268, 307, 311, 314, 315, 317, 318, 384, 389, 390, 398, 399, 603, 611], "hessian_trac": [39, 137], "pytorchadaptor": 39, "objext": 39, "number": [39, 61, 62, 137, 141, 142, 144, 156, 164, 167, 179, 183, 194, 202, 205, 216, 219, 231, 232, 234, 241, 250, 261, 273, 274, 276, 291, 292, 297, 298, 301, 306, 322, 329, 416, 472, 482, 485, 562, 563, 565, 569, 578, 603, 607, 610, 612, 613], "summari": [39, 184, 226, 295, 319, 562, 593, 596, 602, 611], "accuraci": [39, 146, 151, 154, 155, 184, 220, 225, 226, 234, 238, 239, 240, 242, 249, 253, 258, 266, 268, 276, 277, 287, 303, 304, 307, 312, 314, 334, 350, 360, 370, 376, 378, 452, 476, 482, 485, 487, 503, 515, 518, 562, 564, 565, 568, 569, 571, 578, 579, 589, 598, 600, 601, 603, 604, 605, 606, 609, 610, 611, 614, 615], "optimizer_tupl": [39, 41], "criterion_tupl": [39, 41], "hook": [39, 41, 137, 154, 185, 192, 193, 220, 226, 253, 258, 286, 314, 322, 567, 568, 603, 611], "It": [39, 47, 56, 73, 154, 155, 192, 226, 232, 234, 239, 240, 251, 261, 266, 267, 274, 276, 277, 291, 303, 306, 307, 308, 311, 314, 325, 518, 519, 562, 567, 584, 587, 592, 598, 599, 603, 604, 607, 610, 613, 614], "other": [39, 61, 62, 64, 129, 165, 203, 232, 267, 274, 285, 325, 474, 478, 501, 513, 514, 515, 562, 573, 575, 576, 577, 580, 600, 602, 603, 607, 612, 613, 615], "is_fused_child": 39, "_post_eval_hook": [39, 611], "is_fused_op": 39, "is_last_fused_child": 39, "last": [39, 41, 87, 141, 154, 156, 194, 248, 261, 287, 288, 291, 314, 453, 562, 579, 581, 583, 588, 592, 607], "q_capabl": 39, "get_non_quant_modul": 39, "model_kwarg": 39, "non_quant_modul": 39, "custom": [39, 105, 146, 239, 267, 287, 328, 371, 376, 563, 567, 568, 581, 603, 610], "keyword": 39, "custom_non_quant_dict": 39, "pytorch_ipexadaptor": 39, "intel": [39, 187, 190, 221, 226, 233, 234, 261, 264, 268, 275, 276, 291, 299, 310, 315, 325, 464, 477, 511, 513, 514, 516, 517, 519, 564, 565, 566, 567, 568, 570, 571, 573, 576, 577, 579, 580, 581, 586, 588, 589, 600, 601, 602, 603, 605, 607, 608, 609, 611, 613, 614], "extens": [39, 267, 419, 484, 516, 519, 573, 575, 579, 580, 582, 587, 588, 589, 593, 596, 597, 605, 613, 614], "ipex": [39, 141, 286, 575, 583, 587, 588, 615], "unspport": 39, "best": [39, 155, 183, 219, 220, 225, 226, 237, 238, 249, 250, 266, 287, 311, 314, 513, 516, 518, 576, 581, 587, 598, 600, 607, 612, 613], "No": [39, 572, 602, 605], "pytorch_fxadaptor": 39, "fx": [39, 141, 303, 312, 575, 587, 588, 605, 607, 608, 615], "prepare_sub_graph": 39, "sub_module_list": 39, "fx_op_cfg": 39, "is_qat": [39, 140], "example_input": [39, 141, 151, 221, 223, 286, 571], "method": [39, 100, 112, 129, 130, 141, 159, 164, 165, 166, 168, 172, 175, 176, 177, 180, 183, 186, 187, 197, 202, 203, 204, 206, 210, 213, 214, 215, 217, 219, 226, 233, 234, 239, 242, 248, 250, 251, 252, 256, 266, 275, 276, 278, 279, 300, 322, 323, 325, 326, 469, 474, 478, 496, 515, 516, 518, 565, 567, 568, 578, 601, 603, 604, 607, 608, 612, 613], "sub": [39, 60, 61, 62, 81, 100, 184, 223, 226, 242, 314, 516, 613], "recurs": [39, 315, 317, 329], "traceabl": [39, 515], "qconfigmap": 39, "prepare_fx": 39, "dir": [39, 141, 166, 204, 328, 565, 572, 574], "convert_sub_graph": 39, "fuse_fx_model": 39, "approach": [39, 147, 151, 226, 237, 238, 239, 248, 249, 250, 268, 314, 346, 485, 492, 515, 516, 564, 565, 567, 575, 586, 598, 605, 606, 613, 614], "graphmodul": [39, 141, 515, 608], "torch": [39, 136, 137, 138, 139, 140, 141, 147, 151, 185, 221, 223, 234, 242, 246, 248, 268, 276, 277, 286, 291, 303, 325, 515, 520, 567, 569, 571, 579, 580, 581, 589, 607, 611], "fused_model": 39, "calculate_op_sensit": [39, 41], "output_op_nam": [39, 41], "confidence_batch": [39, 41, 141, 613], "fallback": [39, 41, 141, 304, 305, 309, 311, 312, 579, 608, 613], "requantize_cfg": [39, 41, 141], "inc": [39, 183, 219, 325, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 377, 378, 379, 380, 492, 513, 518, 581, 588, 598, 605, 606, 609], "switch": [39, 79, 581, 611], "stage": [39, 41, 87, 304, 312, 477, 567, 611, 613], "re": [39, 41, 306, 325, 576, 598], "sort": [39, 41, 129, 284, 311, 393, 613], "sensit": [39, 41, 263, 288, 292, 575, 603, 604], "ops_lst": 39, "pytorchqueri": 39, "3": [40, 64, 73, 105, 135, 168, 172, 177, 180, 183, 206, 210, 215, 217, 219, 230, 242, 272, 474, 515, 516, 518, 562, 564, 565, 567, 569, 571, 573, 578, 579, 581, 585, 589, 591, 595, 600, 603, 606, 607, 610, 612, 613, 615], "conv2d": [40, 53, 54, 55, 59, 60, 65, 66, 73, 115, 125, 130, 573, 611, 613], "get_fuse_pattern": [40, 41], "fusion": [40, 52, 53, 55, 58, 61, 62, 63, 64, 67, 72, 89, 91, 99, 113, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 127, 128, 515, 519, 573], "everi": [40, 61, 62, 64, 261, 263, 264, 291, 298, 299, 519, 586, 591, 595, 603, 604, 613], "set_quantization_config": 40, "organ": [40, 562, 614], "granular": [40, 519, 573, 575, 584, 603, 614], "etc": [40, 146, 182, 193, 218, 220, 225, 226, 232, 240, 241, 253, 258, 266, 268, 274, 277, 303, 328, 567, 575, 610, 613], "get_mixed_precision_combin": [40, 41], "unsupported_precis": 40, "hardwar": [40, 472, 514, 519, 567, 575, 579, 598, 602, 603, 604, 605, 606], "user": [40, 100, 146, 154, 155, 157, 160, 168, 171, 175, 176, 177, 183, 184, 190, 193, 206, 209, 213, 214, 215, 219, 225, 226, 239, 241, 253, 258, 264, 266, 267, 268, 277, 298, 299, 302, 303, 307, 314, 319, 329, 468, 515, 516, 518, 519, 529, 563, 567, 568, 573, 575, 578, 579, 580, 581, 582, 583, 585, 586, 587, 589, 592, 598, 600, 601, 603, 605, 607, 608, 609, 611, 612, 613], "tensorflowadaptor": 41, "stock": [41, 587], "spr": 41, "graphdef": [41, 50, 51, 54, 55, 57, 61, 62, 64, 68, 73, 79, 80, 86, 87, 88, 89, 100, 122, 129, 135, 285, 462, 580], "could": [41, 61, 62, 154, 155, 168, 206, 267, 277, 291, 299, 303, 314, 513, 515, 568, 601, 603, 604, 607], "graph_def": [41, 47, 100, 135, 277, 285, 303, 427, 462, 463], "frozen": [41, 50, 277, 285, 303, 421, 424, 562, 580], "pb": [41, 277, 285, 303, 421, 424, 435, 518, 563, 569, 580, 611, 615], "ckpt": [41, 135, 277, 285, 303, 615], "savedmodel": [41, 277, 285, 303, 615], "folder": [41, 135, 168, 173, 206, 211, 277, 303, 328, 565, 586, 591, 595, 611], "callback": [41, 253, 258, 319, 320, 322, 323, 500, 515, 601, 603, 607], "on_epoch_begin": [41, 193, 226, 253, 258, 263, 264, 292, 295, 296, 297, 298, 299, 319, 322, 567, 568, 601, 603], "on_epoch_end": [41, 193, 226, 253, 258, 263, 264, 292, 295, 296, 297, 298, 299, 319, 322, 567, 568, 601, 603], "larger": [41, 291], "better": [41, 91, 154, 155, 251, 277, 287, 303, 568, 578, 579, 603, 604, 605, 607, 610, 613], "tf": [41, 106, 112, 135, 165, 166, 167, 168, 183, 203, 204, 205, 206, 219, 283, 285, 332, 562, 569, 580, 605, 608, 612], "compat": [41, 75, 135, 230, 239, 272, 285, 569, 580, 593, 596, 598, 609], "definit": [41, 100, 159, 164, 197, 202, 398, 411, 420, 469, 500], "inspect_weight_and_bia": 41, "node_list": 41, "graph_node_name_map": [41, 135], "bias": 41, "fused_node_map": 41, "pattern_map": 41, "between": [41, 130, 137, 145, 183, 185, 219, 231, 233, 234, 239, 241, 242, 273, 275, 276, 298, 384, 496, 500, 515, 519, 567, 571, 575, 578, 589, 604, 607, 609, 610, 612, 613], "sequenc": [41, 57, 73, 166, 182, 183, 204, 218, 219, 227, 228, 232, 261, 269, 270, 274, 291, 519, 539, 565, 573, 604, 612], "val": [41, 135, 168, 171, 206, 209, 262, 302, 315, 317], "seq": 41, "fused_mapping_revers": 41, "fused_map": 41, "inspect_activ": 41, "local": [41, 261, 291, 298, 314, 325, 329, 344, 376, 381, 394, 414, 562, 591, 595, 604, 610], "correspond": [41, 112, 137, 166, 204, 227, 230, 234, 261, 263, 267, 269, 272, 276, 298, 306, 314, 322, 519, 539, 573, 603, 604, 606, 607, 610, 613], "actual": [41, 234, 276, 287, 569], "4": [41, 47, 73, 175, 176, 177, 178, 179, 180, 183, 213, 214, 215, 216, 217, 219, 227, 228, 230, 269, 270, 272, 291, 307, 474, 513, 518, 519, 539, 562, 563, 569, 572, 573, 575, 576, 578, 602, 603, 612, 613, 615], "tensorflowbasemodel": [41, 285, 425], "start": [41, 183, 219, 227, 230, 241, 269, 272, 284, 287, 298, 304, 307, 477, 497, 576, 612, 613], "quantizedv2": 41, "move": [41, 72, 515, 606, 609], "quantizedconv2d": 41, "qat_convert": 41, "quantize_recip": [41, 105, 106], "kera": [41, 64, 106, 112, 190, 280, 285, 405, 412, 422, 569, 580, 588, 589], "one": [41, 99, 100, 105, 122, 141, 157, 160, 177, 183, 193, 219, 226, 227, 230, 233, 234, 236, 239, 261, 264, 265, 269, 272, 275, 276, 291, 299, 301, 319, 478, 516, 518, 519, 539, 562, 567, 568, 569, 573, 575, 576, 578, 579, 581, 582, 586, 587, 589, 591, 592, 595, 598, 599, 600, 601, 603, 604, 606, 607, 609, 612, 613], "expect": [41, 112, 168, 206, 306, 332, 454, 477, 513, 514, 572, 598, 607, 613], "sequenti": [41, 164, 202, 267, 308, 613], "decid": [41, 105, 106, 228, 263, 270, 393, 519, 609, 613], "fake": [41, 103, 607], "quant": [41, 141, 515, 607], "converted_model": [41, 579], "diagnosis_help": [41, 519], "quan_model": [41, 135], "diagnosi": [41, 135, 268, 373, 376, 382, 405, 465, 494, 500], "get_output_op_nam": 41, "qmodel": [41, 137], "oupur": 41, "mse": [41, 141, 234, 268, 276, 310, 384, 390, 562, 578, 606, 609], "backup": 41, "fallen": 41, "denot": 41, "tensorflow_itexadaptor": 41, "itex": [41, 99], "tensorflowqueri": [41, 519], "performance_onli": [41, 42, 43, 97, 121, 126, 134, 494], "get_grappler_optimization_cfg": 41, "grappler": [41, 69, 573], "get_bf16_pattern": 41, "patter": [41, 115], "get_eightbit_pattern": 41, "qdq_enabl": [41, 42], "eightbit": [41, 611], "same": [41, 50, 61, 77, 135, 166, 183, 204, 219, 230, 253, 258, 272, 291, 307, 311, 329, 519, 563, 564, 565, 567, 569, 573, 582, 586, 591, 595, 602, 606, 607, 611, 612, 613], "generate_internal_pattern": 41, "translat": [41, 227, 228, 239, 242, 245, 247, 269, 270, 539], "intern": [41, 100, 137, 246, 468, 564, 565, 604], "express": [41, 227, 269, 513], "graphconvert": 42, "qt_config": 42, "recip": [42, 105, 151, 221, 223, 225, 226, 266, 571, 613], "int8_sequ": 42, "fp32_op": [42, 44, 97, 100], "bf16_op": [42, 44, 97, 100, 608], "fake_qu": [42, 83, 97, 121, 126], "itex_mod": [42, 73, 84, 97, 121, 126], "new_api": [42, 43, 65, 66, 71, 73, 87, 94, 121, 126, 130], "use_bf16": [42, 43, 606, 608], "fp32_frozen_graph": 42, "requantizeop": [42, 43], "so": [42, 43, 112, 183, 219, 263, 319, 325, 515, 519, 572, 575, 578, 584, 586, 607, 608, 611, 612], "self": [42, 57, 87, 151, 226, 230, 253, 263, 272, 306, 497, 519, 562, 564, 565, 575, 578, 610, 611, 613], "empti": [42, 105, 230, 272, 306, 584], "without": [42, 43, 85, 100, 135, 183, 219, 230, 263, 272, 298, 484, 513, 562, 564, 567, 569, 578, 589, 603, 605, 606, 607, 613], "bf16_node": [42, 43], "quantize_with_qdq_pattern": 42, "newapi": [42, 89], "graphconverterwithoutcalib": 43, "recover_config": 43, "convert_without_calib": 43, "quantize_without_calib": 43, "rewrit": [44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], "bf16convert": [44, 608], "graphrewriterbas": [44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 63, 65, 66, 67, 68, 69, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95, 97, 98, 99], "do_transform": [44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 86, 87, 88, 89, 91, 92, 93, 94, 95, 97, 98, 99, 114, 121, 122, 126, 130, 131, 133, 134], "biasadd": [46, 53, 58, 60, 73, 99, 115, 116, 118, 125, 127, 573], "convertaddtobiasaddoptim": 46, "addv2": [46, 62, 63, 64, 115, 118, 573], "layout": 47, "convertlayoutoptim": 47, "nchw": 47, "nhwc": [47, 61, 62], "abov": [47, 230, 272, 519, 603], "leakyrelu": [48, 113, 115, 117, 118, 123], "convertleakyreluoptim": 48, "below": [48, 60, 61, 62, 68, 73, 267, 305, 307, 312, 514, 515, 519, 564, 567, 569, 574, 578, 581, 583, 591, 592, 595, 598, 600, 601, 603, 606, 607, 610, 611, 613], "subgraph": [48, 56, 60, 61, 62, 64, 140, 571], "mul": [48, 59, 60, 61, 63, 64, 73, 115, 118, 571], "coeffici": [48, 240, 604], "less": [48, 73, 135, 329, 563, 567, 603], "than": [48, 56, 135, 166, 183, 204, 219, 230, 272, 287, 329, 516, 563, 565, 574, 578, 600, 601, 603, 604, 607, 610, 612, 613], "small": [48, 61, 62, 63, 230, 272, 309, 516, 562, 613], "nan": 49, "random": [49, 129, 135, 151, 179, 183, 216, 219, 239, 252, 268, 306, 310, 329, 494, 514, 516, 606, 612, 614], "convertnantorandom": 49, "const": [49, 50, 57, 58, 61, 62, 64, 76, 79, 80, 92, 93, 100, 268, 349, 360, 363, 370, 376, 378, 379, 383, 465, 473, 483], "consist": [49, 57, 248, 514, 515, 562, 571, 613], "placehold": [50, 164, 202], "convertplaceholdertoconst": 50, "renam": [50, 75, 248, 609], "placeholderwithdefault": 50, "constant": [50, 56, 73, 100, 129, 221, 223, 268, 284, 286, 306, 323, 466, 564, 573, 612], "help": [50, 192, 236, 284, 346, 484, 518, 580, 581, 587, 598, 613], "simplifi": [50, 581, 592, 598], "input_graph_def": [50, 51, 54, 55, 57, 61, 62, 64, 68, 79, 80, 100, 129], "nodes_to_convert": 50, "modifi": [50, 56, 61, 62, 64, 75, 168, 206, 226, 253, 258, 264, 299, 463, 515, 562, 569, 573, 614], "strtobool": 50, "val_str": 50, "equival": [50, 77, 239], "rerewrit": 51, "dequantizecastoptim": 51, "b16": 51, "redund": [51, 86, 88, 122], "dilat": 52, "contract": 52, "dilatedcontract": 52, "spacetobatchnd": 52, "batchtospacend": 52, "inject": 53, "dummi": [53, 169, 170, 207, 208, 224, 234, 276, 376, 380, 486, 518, 562, 565, 578], "injectdummybiasaddoptim": 53, "miss": [53, 342, 603, 607], "behind": 53, "them": [53, 56, 100, 166, 204, 515, 564, 573, 574, 601, 603, 613], "expanddim": 54, "expanddimsoptim": 54, "next": [54, 139, 159, 197, 224, 250, 265, 301, 304, 305, 306, 307, 308, 309, 311, 312, 313, 314, 516, 562, 606, 613], "whose": [54, 79, 80, 262, 291, 574, 603, 613], "featch": 55, "fetchweightfromreshapeoptim": 55, "fetch": [55, 141, 144, 159, 197, 230, 272, 565], "fold": [56, 57, 61, 62, 73, 221, 223, 286, 573], "batchnorm": [56, 61, 111, 515], "foldbatchnormnodesoptim": 56, "scale_after_norm": 56, "batchnormwithglobalnorm": 56, "nodedef": [56, 61, 62, 64, 100, 129, 131, 462], "normal": [56, 61, 62, 64, 183, 219, 232, 274, 484, 600, 612], "convolut": [56, 61, 62, 567, 603, 605], "multipl": [56, 61, 62, 105, 152, 153, 157, 158, 166, 167, 169, 170, 171, 172, 173, 177, 180, 183, 190, 195, 196, 198, 204, 205, 207, 208, 209, 210, 211, 215, 217, 219, 235, 263, 277, 278, 279, 281, 287, 292, 298, 305, 469, 563, 565, 571, 601, 603, 610, 613], "dynam": [56, 100, 156, 194, 221, 223, 267, 286, 315, 317, 337, 519, 564, 567, 571, 575, 581, 586, 587, 588, 589, 592, 598, 605, 613, 615], "onc": [56, 100, 135, 190, 265, 301, 562, 564, 598, 603, 604, 605, 613, 615], "final": [56, 263, 291, 298, 476, 584, 600, 603, 604, 607, 609, 613], "becom": [56, 519, 571, 604], "That": [56, 562], "mean": [56, 61, 62, 64, 156, 179, 183, 194, 216, 219, 230, 232, 234, 240, 242, 248, 261, 272, 274, 276, 287, 291, 311, 515, 564, 569, 573, 578, 584, 603, 604, 607, 612, 613, 614], "opportun": [56, 61, 62], "reduc": [56, 61, 62, 256, 291, 519, 568, 579, 598, 599, 604, 605, 607, 608, 613, 614], "down": [56, 592], "addit": [56, 62, 64, 141, 154, 319, 469, 562, 567, 592, 609], "rather": [56, 574], "more": [56, 129, 135, 154, 183, 219, 230, 246, 248, 261, 272, 291, 314, 516, 517, 518, 562, 565, 567, 569, 575, 576, 578, 579, 581, 589, 593, 596, 600, 601, 603, 604, 608, 613, 615], "expens": [56, 567, 613], "bake": 56, "identifi": [56, 61, 62, 64, 230, 272, 285, 325], "typic": [56, 105, 112, 226, 236, 267, 516, 518, 568, 603, 604], "perform": [56, 61, 62, 91, 146, 151, 166, 178, 179, 182, 184, 204, 216, 218, 225, 226, 237, 238, 240, 242, 249, 250, 253, 258, 266, 268, 287, 298, 300, 307, 311, 334, 350, 360, 370, 376, 378, 467, 476, 485, 487, 494, 503, 515, 516, 518, 519, 562, 563, 564, 565, 566, 568, 571, 575, 576, 578, 579, 580, 581, 583, 587, 589, 592, 598, 600, 601, 602, 603, 604, 605, 606, 607, 608, 611, 613, 614, 615], "simpler": 56, "form": [56, 61, 62, 64, 75, 230, 232, 272, 274, 376, 378, 477, 562, 567, 598], "spot": 56, "fusedbatchnorm": [56, 61, 75], "fusedbatchnormv3": [56, 113, 123], "_fusedbatchnormex": 56, "extend": [56, 61, 62], "futur": [56, 154, 155, 186, 187, 575, 579, 589], "newer": [56, 61, 62], "style": [56, 159, 173, 197, 211, 514, 565, 574], "rais": [56, 61, 62, 64, 75, 100, 185, 227, 230, 233, 234, 261, 262, 263, 269, 272, 275, 276, 277, 291, 298, 302, 306, 484, 497, 539, 603, 604], "valueerror": [56, 61, 62, 64, 75, 100, 227, 230, 234, 269, 272, 276, 539, 572], "If": [56, 61, 62, 64, 68, 75, 100, 154, 155, 168, 183, 206, 219, 230, 242, 261, 262, 263, 272, 277, 303, 304, 514, 515, 562, 563, 565, 569, 571, 576, 577, 578, 579, 584, 592, 593, 596, 598, 600, 607, 610, 611, 612, 613], "badli": [56, 61, 62, 64, 75], "duplic": [56, 61, 62, 64, 93, 98, 306], "graphfoldconstantoptim": 57, "supported_op_typ": 57, "check_all_fold": 57, "been": [57, 182, 218, 227, 241, 261, 263, 269, 291, 298, 514, 516, 539, 562, 567, 579, 598], "complet": [57, 519, 562, 613, 614, 615], "check_const_input": 57, "node_nam": [57, 61, 62, 64, 73, 100, 122, 129, 131, 135, 223, 284, 285, 364, 462], "fusebiasaddandaddoptim": 58, "columnwis": 59, "fusecolumnwisemuloptim": 59, "depthwiseconv2dn": [59, 65, 66, 115, 125, 573], "math": [60, 607], "fuseconvwithmathoptim": 60, "elimin": 60, "realdiv": [60, 63], "decompos": [61, 62], "fusedecomposedbnoptim": 61, "individu": [61, 62, 64, 238, 239, 249, 261, 291, 513], "some": [61, 62, 105, 154, 166, 193, 204, 226, 262, 314, 484, 562, 565, 576, 578, 600, 603, 604, 607, 608, 611, 613], "normalizatin": [61, 62], "via": [61, 62, 112, 225, 226, 253, 258, 266, 501, 513, 569, 575, 581, 598], "group": [61, 62, 293, 300, 401, 575, 603, 604, 611, 612, 613, 615], "instead": [61, 62, 148, 165, 203, 329, 584, 586, 589], "singl": [61, 62, 115, 116, 122, 124, 125, 159, 166, 182, 183, 197, 204, 218, 219, 230, 239, 241, 263, 265, 272, 288, 301, 306, 365, 382, 401, 469, 503, 515, 565, 576, 603, 604], "made": [61, 62, 64, 240, 242, 309, 519, 607, 609, 613], "those": [61, 62, 68, 311, 329, 567, 568, 574, 601, 603, 604, 607, 613], "provid": [61, 62, 100, 112, 154, 155, 177, 180, 183, 193, 215, 217, 219, 225, 226, 230, 239, 248, 253, 258, 266, 267, 272, 277, 303, 323, 325, 393, 413, 419, 469, 478, 503, 516, 519, 562, 563, 564, 568, 569, 570, 571, 575, 576, 579, 580, 581, 585, 589, 592, 598, 599, 603, 606, 607, 611, 613, 614, 615], "further": [61, 62, 64, 513, 579, 580, 581, 583, 592, 598], "recogn": [61, 62, 227, 269], "seen": [61, 62, 329, 519], "also": [61, 62, 165, 168, 172, 177, 183, 203, 206, 210, 215, 219, 227, 269, 291, 303, 312, 514, 516, 518, 519, 539, 562, 564, 575, 578, 581, 586, 591, 592, 595, 598, 599, 600, 603, 607, 608, 613], "attempt": [61, 62, 325], "multipli": 61, "rsqrt": [61, 62], "varianc": [61, 130, 145], "epsilon": [61, 614], "gamma": [61, 62, 64], "OR": 61, "mul_0": 61, "appli": [61, 69, 84, 85, 89, 91, 93, 94, 95, 103, 113, 114, 115, 116, 117, 118, 121, 123, 124, 125, 126, 127, 130, 134, 193, 226, 228, 261, 263, 270, 286, 291, 295, 298, 513, 562, 581, 583, 589, 598, 601, 603, 604, 607, 608, 610, 613, 614], "mul_1": 61, "insid": [61, 230, 272, 567, 568, 599, 603, 613], "end": [61, 100, 135, 166, 182, 183, 193, 204, 218, 219, 226, 239, 263, 264, 287, 292, 296, 297, 298, 299, 319, 519, 567, 568, 573, 576, 592, 600, 603, 604, 611, 612, 613], "mul_3": 61, "batchnorma": 61, "node_name_from_input": [61, 62, 64, 100, 129, 131], "strip": [61, 62, 64, 73, 77, 78, 135, 611], "off": [61, 62, 64, 514, 608], "port": [61, 62, 64, 129, 497, 501, 562], "underli": [61, 62, 64, 240], "node_from_map": [61, 62, 64], "node_map": [61, 62, 64], "pull": [61, 62, 64, 477], "def": [61, 62, 64, 122, 154, 155, 303, 515, 519, 564, 565, 567, 568, 569, 578, 607, 611, 613], "entri": [61, 62, 64, 122, 137, 190, 225, 267, 347, 390, 393, 476, 484, 577], "index": [61, 62, 64, 105, 112, 159, 164, 168, 172, 177, 184, 197, 202, 206, 210, 215, 226, 251, 287, 329, 501, 565, 578, 599], "want": [61, 62, 64, 100, 164, 166, 202, 204, 263, 307, 319, 515, 519, 562, 565, 569, 576, 578, 586, 598, 599, 600, 610, 611, 613], "isn": [61, 62, 64, 100], "present": [61, 62, 64, 562, 605], "values_from_const": [61, 62, 64, 100], "node_def": [61, 62, 64, 100], "extract": [61, 62, 64, 100, 168, 206, 503, 565], "access": [61, 62, 64, 100, 112, 148, 325, 329, 468, 484, 497, 501, 562, 593, 596], "valid_reshape_input": [61, 62], "reshape_in0_ndef": [61, 62], "reshape_in1_ndef": [61, 62], "bypass_reshap": [61, 62], "input_node_map": [61, 62], "get_const_dim_count": [61, 62], "dimens": [61, 62, 158, 183, 196, 219, 242, 257, 291, 306, 565, 567, 603, 612], "instancenorm": 62, "fusedecomposedinoptim": 62, "instanc": [62, 103, 105, 106, 112, 154, 155, 166, 184, 204, 226, 231, 232, 234, 237, 249, 250, 273, 274, 276, 277, 292, 293, 295, 296, 297, 303, 306, 314, 319, 349, 388, 392, 416, 425, 492, 513, 515, 519, 562, 563, 583, 589, 614, 615], "search": [62, 64, 73, 147, 154, 155, 225, 226, 227, 237, 238, 239, 241, 242, 249, 250, 251, 252, 266, 269, 306, 308, 309, 313, 371, 372, 399, 518, 539, 548, 575, 578, 581, 582, 592, 605, 611, 613], "contraint": [62, 64], "ani": [62, 64, 112, 129, 137, 220, 226, 230, 232, 248, 272, 274, 315, 316, 325, 331, 332, 334, 336, 338, 339, 340, 341, 342, 343, 344, 346, 347, 349, 350, 352, 359, 360, 361, 362, 363, 364, 366, 369, 371, 372, 382, 384, 389, 390, 393, 395, 401, 410, 413, 416, 420, 423, 424, 425, 427, 430, 432, 435, 439, 443, 445, 448, 451, 454, 457, 462, 463, 469, 470, 472, 474, 476, 477, 484, 485, 486, 487, 488, 490, 491, 492, 493, 494, 495, 496, 500, 501, 508, 509, 513, 514, 562, 564, 569, 581, 586, 599, 610], "clang": 62, "x____________": 62, "mean1": 62, "fusedop": [62, 64], "_mklfusedinstancenorm": 62, "_mkllayernorm": [62, 64], "squareddiff": 62, "mean0": 62, "mul1": 62, "constx": 62, "mul2": 62, "mul0": 62, "gelu": [63, 118], "fusegeluoptim": 63, "sqrt": 63, "erf": 63, "samll": 64, "layernorm": [64, 248], "fuselayernormoptim": 64, "remap": 64, "smaller": [64, 183, 219, 567, 603, 604, 612], "case": [64, 68, 165, 182, 183, 184, 203, 218, 219, 225, 226, 234, 253, 258, 266, 267, 276, 287, 474, 478, 484, 562, 564, 567, 568, 569, 573, 574, 578, 582, 586, 598, 599, 600, 603, 605, 607, 609, 612, 614], "fusedbatcnormv3": 64, "And": [64, 193, 226, 515, 563, 584], "restrict": [64, 603, 604, 610], "2d": 64, "3d": [64, 605], "fill": [64, 351, 353, 354, 356, 358, 361, 362, 367, 562, 598, 610, 612], "f": [64, 567, 569, 607], "u": [64, 130, 145, 581], "d": [64, 68, 239, 567, 574, 599, 604], "c": [64, 68, 168, 206, 562, 565, 572, 576, 604, 613], "h": [64, 183, 219, 569, 612], "n": [64, 167, 183, 205, 219, 228, 261, 270, 291, 472, 565, 567, 603, 604, 612], "v": [64, 589, 598, 614], "fusepadwithconv2doptim": 65, "excluded_op_nam": [65, 66, 147, 151, 268, 603], "itex_qdq_mod": [65, 66], "conv3d": [65, 66, 115], "fusepadwithfp32conv2doptim": 66, "fusetransposereshapeoptim": 67, "cse": [68, 93], "graphcseoptim": 68, "introduc": [68, 514, 519, 571, 573, 603, 604, 607, 609, 613], "ident": [68, 73, 74, 100, 129, 261, 291, 513, 567], "three": [68, 166, 204, 226, 253, 258, 264, 299, 515, 519, 562, 564, 571, 576, 579, 592, 601, 607, 608, 610, 611, 613], "child": [68, 611], "b1": 68, "c1c2": 68, "d1": [68, 329], "c1": 68, "c2": 68, "have": [68, 77, 100, 135, 146, 164, 182, 186, 187, 202, 218, 227, 230, 234, 241, 261, 263, 268, 269, 272, 276, 291, 298, 513, 514, 539, 562, 564, 565, 569, 573, 577, 578, 579, 581, 598, 600, 603, 604, 607, 613], "bound": [68, 183, 184, 219, 226, 230, 239, 272, 306, 578, 612], "relu6": [68, 115, 118, 573], "multi": [68, 73, 184, 226, 230, 241, 246, 248, 272, 287, 312, 342, 516, 564, 565, 575, 600, 613], "elim": [68, 73], "grappleroptim": 69, "input_output_nam": 69, "opt_cfg": 69, "python": [69, 112, 135, 168, 187, 206, 226, 230, 268, 272, 329, 432, 511, 514, 515, 562, 565, 569, 576, 583, 589, 592, 598, 605, 608, 612], "wrapper": [69, 112, 136, 165, 177, 180, 183, 185, 186, 187, 188, 189, 203, 215, 217, 219, 230, 234, 272, 275, 276, 279, 281, 285, 501, 509, 608], "leverag": [69, 516, 567, 581, 598, 601, 607], "built": [69, 112, 146, 152, 153, 157, 162, 166, 167, 172, 174, 176, 177, 179, 180, 183, 187, 188, 190, 195, 198, 200, 204, 205, 210, 212, 214, 215, 216, 217, 219, 267, 268, 275, 276, 279, 283, 516, 519, 565, 569, 591, 595, 600, 612, 613, 614], "convert_add_to_biasadd": [70, 82, 101], "convert_layout": [70, 82, 101], "convert_leakyrelu": [70, 82, 101], "convert_nan_to_random": [70, 82, 101], "convert_placeholder_to_const": [70, 82, 101], "dequantize_cast_optim": [70, 82, 101], "dilated_contract": [70, 82, 101], "dummy_biasadd": [70, 82, 101], "expanddims_optim": [70, 82, 101], "fetch_weight_from_reshap": [70, 82, 101], "fold_batch_norm": [70, 82, 101], "fold_const": [70, 82, 101], "fuse_biasadd_add": [70, 82, 101], "fuse_column_wise_mul": [70, 82, 101], "fuse_conv_with_math": [70, 82, 101], "fuse_decomposed_bn": [70, 82, 101], "fuse_decomposed_in": [70, 82, 101], "fuse_gelu": [70, 82, 101], "fuse_layer_norm": [70, 82, 101], "fuse_pad_with_conv": [70, 82, 101], "fuse_pad_with_fp32_conv": [70, 82, 101], "fuse_reshape_transpos": [70, 82, 101], "graph_cse_optim": [70, 82, 101], "grappler_pass": [70, 82, 101], "insert_print_nod": [70, 82, 101], "move_squeeze_after_relu": [70, 82, 101], "pre_optim": [70, 82, 101], "remove_training_nod": [70, 82, 101, 129], "rename_batch_norm": [70, 82, 101], "split_shared_input": [70, 82, 101, 129], "strip_equivalent_nod": [70, 82, 101, 135], "strip_unused_nod": [70, 82, 101, 135], "switch_optim": [70, 82, 101], "update_ent": [70, 82, 101], "print": [71, 137, 234, 276, 286, 329, 562, 569, 578, 603, 613], "insertprintminmaxnod": 71, "pre_node_nam": 71, "post_node_nam": 71, "pass": [71, 73, 75, 135, 146, 182, 218, 226, 246, 248, 253, 258, 264, 267, 299, 329, 427, 483, 496, 497, 515, 519, 563, 565, 567, 568, 569, 571, 574, 578, 599, 603, 606, 607, 608, 614], "sampl": [71, 100, 137, 156, 159, 164, 166, 167, 168, 172, 177, 179, 183, 194, 197, 202, 204, 205, 206, 210, 215, 216, 219, 233, 234, 251, 275, 276, 306, 360, 416, 485, 516, 518, 565, 575, 599, 607, 612, 613, 614, 615], "squeez": [72, 515], "movesqueezeafterreluoptim": 72, "match": [72, 73, 100, 112, 182, 218, 230, 231, 272, 273, 567, 599], "pre": [73, 106, 154, 155, 166, 204, 247, 277, 286, 303, 565, 567, 568, 579, 603, 604, 605, 607, 611, 613], "entranc": [73, 157, 160, 177], "preoptim": 73, "get_excluded_node_nam": 73, "exclud": [73, 80, 246, 248, 519], "get_optimized_model": 73, "non": [73, 112, 190, 262, 329, 515, 602, 603, 613], "possibl": [73, 184, 226, 239, 304, 308, 346, 413, 562, 601, 608, 613], "5": [73, 151, 170, 179, 185, 208, 216, 230, 234, 272, 276, 307, 519, 562, 565, 573, 578, 602, 603, 606, 612, 613, 614, 615], "useless": 73, "6": [73, 518, 562, 573, 607, 613, 615], "common": [73, 129, 181, 226, 236, 242, 250, 251, 252, 261, 267, 268, 291, 322, 477, 478, 484, 513, 565, 568, 569, 571, 574, 576, 607], "7": [73, 129, 518, 563, 572, 573, 576, 607, 609, 613], "get_matched_nod": 73, "illustr": [73, 568], "matched_node_a_nam": 73, "has_positive_input": [73, 100], "posit": [73, 100, 183, 219, 248, 291, 513, 562, 578, 581], "neg": [73, 100], "removetrainingnodesoptim": 74, "protected_nod": [74, 129], "types_to_splic": [74, 129], "checknumer": [74, 129], "stopgradi": 74, "tranin": 74, "edg": [74, 398, 400, 405, 465, 612], "fusedbatchnormv2": 75, "renamebatchnormoptim": 75, "due": [75, 603, 604, 607, 611], "histor": 75, "reason": [75, 186, 187, 513, 564, 611, 613], "As": [75, 230, 272, 515, 562, 564, 567, 592, 603, 604, 613], "latter": [75, 105], "former": 75, "chang": [75, 91, 130, 145, 263, 265, 298, 301, 306, 309, 329, 344, 350, 453, 475, 482, 514, 564, 569, 572, 577, 578, 581, 591, 592, 595, 598, 604, 611, 612, 613], "platform": [75, 329, 472, 575, 581, 589, 605, 607, 615], "vnni_bf16": 75, "amx": 75, "instruct": [75, 562, 567, 576, 579, 593, 596, 605, 606, 607], "splitsharedinputoptim": 76, "stripequivalentnodesoptim": 77, "output_node_nam": [77, 78, 121, 122, 126, 129, 135, 285], "unus": [78, 135, 239, 248, 284], "stripunusednodesoptim": 78, "input_node_nam": [78, 121, 126, 129, 135, 285], "switchoptim": 79, "condit": [79, 166, 167, 168, 183, 204, 205, 206, 219, 565, 577, 612, 613], "enter": [79, 80, 592, 598], "updateenteroptim": 80, "workaround": 80, "freeze_fake_qu": [82, 90, 101], "freeze_valu": [82, 90, 101], "freeze_value_without_calib": [82, 90, 101], "fuse_conv_redundant_dequant": [82, 90, 101], "fuse_conv_requant": [82, 90, 101], "fuse_matmul_redundant_dequant": [82, 90, 101], "fuse_matmul_requant": [82, 90, 101], "meta_op_optim": [82, 90, 101], "post_hostconst_convert": [82, 90, 101], "post_quantized_op_cs": [82, 90, 101], "rnn_convert": [82, 90, 101], "scale_propag": [82, 90, 101], "insert_qdq_pattern": [82, 96, 101], "merge_duplicated_qdq": [82, 96, 101], "share_qdq_y_pattern": [82, 96, 101], "freez": [83, 84, 85, 581, 603, 604], "fakequ": 83, "freezefakequantopoptim": 83, "freezevaluetransform": 84, "max_min_data": [84, 85], "postfix": [84, 85], "tensor_data": [84, 329], "th": [84, 85], "gpu": [84, 85, 92, 100, 129, 563, 575, 583, 589, 598, 606, 607], "generate_output_graph": [84, 85], "max_name_valu": [84, 85], "freeze_max": [84, 85], "freeze_min": [84, 85], "generate_output_graph_rang": [84, 85], "freezevaluewithoutcalibtransform": 85, "95": [85, 230, 234, 272, 276, 578, 615], "do_transformation_without_calib": 85, "quantizedconv": [86, 87], "quantizeddeconv": 86, "fuseconvredundantdequantizetransform": 86, "cpu": [86, 87, 88, 89, 100, 129, 151, 242, 268, 329, 563, 575, 579, 581, 583, 589, 598, 602, 605, 606, 608, 611], "_quantizedconv": 86, "_quantizeddeconv": 86, "successor": [86, 87, 88, 89], "requant": [87, 89, 611], "fuseconvrequantizetransform": 87, "two": [87, 100, 137, 168, 172, 173, 177, 184, 206, 210, 211, 215, 230, 261, 265, 267, 272, 291, 298, 301, 329, 515, 516, 562, 565, 567, 569, 573, 578, 579, 603, 607, 608, 610, 613, 614], "fuse_pattern": 87, "sum_pattern": 87, "quantizedmatmul": [88, 89], "fusematmulredundantdequantizetransform": 88, "_quantizedmatmul": [88, 89], "fusematmulrequantizedequantizetransform": 89, "quantizedmatmulwithbiasanddequant": 89, "fusematmulrequantizetransform": 89, "fusematmulrequantizedequantizenewapitransform": 89, "fusematmulrequantizenewapitransform": 89, "meta": [91, 168, 206], "metainfochangingmemopoptim": 91, "metaop": 91, "With": [91, 146, 268, 515, 519, 564, 586, 591, 595, 599, 600, 603, 605, 607, 610, 613, 615], "quantizev2": [91, 93, 115, 116, 118, 122], "hostconst": 92, "posthostconstconvert": 92, "postcseoptim": 93, "decreas": 93, "size": [93, 100, 156, 158, 159, 165, 168, 172, 174, 177, 179, 183, 194, 196, 197, 203, 206, 210, 212, 215, 216, 219, 230, 239, 242, 248, 261, 272, 284, 287, 291, 329, 349, 359, 360, 482, 484, 485, 513, 562, 564, 565, 569, 572, 598, 599, 600, 603, 604, 612, 614, 615], "rnn": [94, 100], "quantizedrnnconvert": 94, "calibration_data": [94, 97], "rnn_detail": 94, "scalepropagationtransform": 95, "direct": [95, 261, 291, 434], "algrothim": 95, "generategraphwithqdqpattern": 97, "op_wise_config": [97, 121, 126, 315, 316], "quantized_nod": 97, "befor": [97, 99, 112, 166, 193, 204, 220, 221, 223, 226, 253, 258, 261, 263, 264, 265, 288, 291, 297, 298, 299, 300, 301, 311, 319, 370, 514, 562, 565, 567, 568, 569, 572, 573, 593, 596, 603, 607, 610, 611, 613], "quantizaiton": 97, "mergeduplicatedqdqoptim": 98, "y": [99, 183, 219, 306, 584, 612], "shareqdqforitexypatternoptim": 99, "break": [99, 569], "graphanalyz": 100, "extend_engin": 100, "analyz": [100, 129, 285, 603, 604, 610, 611], "under": [100, 112, 168, 206, 328, 516, 562, 565, 577, 578, 581, 586, 587, 598, 601, 603, 604, 607, 611, 613], "singleton": [100, 268, 329, 465, 473], "getter": [100, 193, 220, 226, 250, 253, 258, 266, 267, 286, 414], "_graph": 100, "retrun": 100, "get_graph_input_output": 100, "sometim": [100, 129, 515, 603, 607], "doesn": [100, 183, 219, 267, 483, 519, 569, 599, 614], "know": [100, 186, 187, 220, 226, 253, 258, 470, 569, 609], "clearli": 100, "similar": [100, 248, 606, 613, 614], "featur": [100, 137, 151, 166, 167, 179, 183, 185, 204, 205, 216, 219, 248, 268, 514, 563, 564, 566, 567, 579, 580, 581, 585, 586, 589, 598, 604, 605, 609, 612], "summarize_graph": 100, "py": [100, 135, 137, 228, 230, 231, 232, 263, 270, 272, 273, 274, 298, 500, 515, 519, 562, 569, 576, 583, 585, 586, 587, 593, 596, 607, 609, 611], "writtern": 100, "googl": [100, 579, 605], "query_fusion_pattern_nod": 100, "public": [100, 513, 593, 596], "aggreg": [100, 478], "statu": [100, 349, 360, 363, 368, 370, 376, 378, 379, 467, 480, 496, 509, 513, 564, 600], "pleas": [100, 137, 166, 167, 168, 171, 204, 205, 206, 209, 226, 253, 258, 261, 263, 264, 288, 291, 299, 515, 516, 517, 518, 519, 562, 563, 565, 568, 569, 576, 578, 579, 581, 582, 586, 589, 603, 604, 608, 609, 610], "_search_pattern": 100, "remove_node_with_single_input_output": 100, "rebuild": [100, 582, 591, 595], "structur": [100, 263, 298, 318, 409, 575, 597, 599, 603, 604, 607, 611, 615], "except": [100, 268, 329, 465, 473, 474, 484, 499, 509], "fail": [100, 478, 515], "remove_nod": [100, 284], "replace_const_nod": 100, "new_const_nod": 100, "target_nod": 100, "old_constant_node_nam": 100, "replace_al": 100, "outdat": 100, "replace_constant_graph_with_constant_nod": 100, "new_nod": 100, "old_end_node_nam": 100, "replace_single_nod": 100, "old_output_node_nam": 100, "old_output_nam": [100, 284], "old_input_node_nam": 100, "old_input_nam": [100, 284], "would": [100, 291, 514, 579, 603, 604, 607], "top": [100, 183, 219, 225, 226, 234, 253, 258, 266, 276, 578, 598, 612, 615], "bottom": [100, 562], "replace_nod": 100, "old_node_nam": 100, "output_nodes_nam": 100, "node_name_detail": 100, "parent": [100, 257, 263, 265, 284, 298, 301, 611], "add_nod": [100, 284, 398], "start_node_nam": 100, "end_node_nam": 100, "dump_graph": 100, "get_frame_info": 100, "frame": 100, "ordereddict": [100, 314, 371, 376, 485], "parent_frame_detail": 100, "parse_graph": 100, "outputnod": 100, "graphrewriterhelp": 100, "encapsul": [100, 154, 155, 277, 303, 580], "compare_node_attr": 100, "node_a": 100, "node_b": 100, "compar": [100, 137, 234, 276, 287, 562, 568, 578, 604, 607, 610, 611, 613], "create_nod": [100, 129], "create_constant_nod": [100, 129], "shape": [100, 112, 129, 135, 169, 170, 179, 183, 207, 208, 216, 219, 230, 246, 248, 261, 272, 283, 291, 405, 412, 413, 416, 425, 427, 465, 518, 562, 565, 573, 612], "datatyp": [100, 129, 608, 613], "mai": [100, 129, 135, 287, 292, 293, 295, 296, 297, 513, 514, 564, 572, 577, 579, 591, 595, 602, 605, 607, 613], "set_attr_dtyp": [100, 129], "set_attr_tensor": [100, 129], "field": [100, 129, 168, 206, 230, 267, 272, 515, 519, 562, 569, 610, 613, 614], "set_attr_type_list": [100, 129], "attr": [100, 129, 135], "set_attr_string_list": [100, 129], "set_attr_str": [100, 129], "set_attr_int_list": 100, "set_attr_int": [100, 129], "set_attr_float": [100, 129], "set_attr_bool": [100, 129], "generate_int32_bias_for_conv": 100, "bias_tensor": 100, "channel_s": 100, "max_input": 100, "min_input": 100, "max_filter_tensor": [100, 329], "min_filter_tensor": [100, 329], "activation_rang": 100, "weights_rang": 100, "127": [100, 169, 170, 207, 208, 565, 607, 615], "rang": [100, 169, 170, 183, 207, 208, 219, 230, 239, 272, 319, 519, 565, 567, 568, 569, 601, 603, 604, 607, 612], "int32_bia": 100, "generate_int32_bias_for_matmul": 100, "weights_tensor": 100, "input_rang": 100, "max_filter_valu": 100, "min_filter_valu": 100, "gen_valid_sampling_log": 100, "log_path": 100, "log": [100, 133, 253, 258, 323, 326, 332, 349, 360, 363, 370, 376, 378, 379, 435, 469, 475, 476, 477, 478, 483, 497, 515, 562, 589, 610, 611, 613], "analysis_rnn_model": 100, "quantize_lay": [101, 102, 104], "fake_quant": [101, 102, 104], "quantize_config": [101, 102, 104], "quantize_help": [101, 102, 104], "quantize_wrapp": [101, 102, 104], "fuse_qdq_bn": [101, 102, 120], "fuse_qdq_concatv2": [101, 102, 120], "fuse_qdq_conv": [101, 102, 120], "fuse_qdq_deconv": [101, 102, 120], "fuse_qdq_in": [101, 102, 120], "fuse_qdq_matmul": [101, 102, 120], "fuse_qdq_pool": [101, 102, 120], "optimize_qdq": [101, 102, 120], "optimize_lay": [102, 104, 107], "quantize_layer_add": [102, 104, 107], "quantize_layer_bas": [102, 104, 107, 109, 111], "quantize_layer_bn": [102, 104, 107], "fakequantizebas": 103, "abc": [103, 232, 274, 413, 476, 519, 611, 613], "get_config": [103, 112, 510], "serial": [103, 166, 204, 382, 389, 390, 420, 472, 474, 486, 487, 491, 492], "fakequant": 103, "classmethod": [103, 112, 142, 144, 254, 255, 256, 315, 318, 325, 471, 505, 507, 510], "from_config": [103, 112], "instanti": [103, 325, 601], "requir": [103, 112, 193, 226, 230, 242, 267, 272, 285, 304, 307, 331, 333, 342, 345, 400, 406, 413, 416, 418, 425, 431, 438, 439, 440, 441, 443, 444, 445, 447, 450, 451, 456, 461, 465, 515, 519, 562, 563, 564, 568, 569, 573, 576, 579, 580, 582, 592, 598, 602, 603, 604, 607, 609, 610, 611, 613, 614], "per_channel": [103, 129, 573, 614], "num_bit": 103, "8": [103, 182, 218, 474, 515, 518, 573, 576, 603, 605, 613, 615], "symmetr": [103, 607, 612, 613], "narrow_rang": 103, "quantizeconfig": [105, 106, 112], "There": [105, 234, 267, 276, 562, 567, 573, 575, 578, 579, 581, 613, 614], "global": [105, 151, 261, 268, 291, 292, 293, 295, 296, 297, 298, 329, 497, 515, 603, 604, 606, 613], "add_quantize_recip": 105, "layer_nam": [105, 261, 291], "For": [105, 168, 182, 183, 193, 206, 218, 219, 226, 230, 231, 232, 234, 239, 261, 264, 272, 273, 274, 276, 277, 291, 299, 303, 307, 474, 513, 515, 517, 519, 562, 568, 569, 571, 573, 575, 581, 583, 584, 586, 589, 603, 608, 611, 613, 614, 615], "conv5_block3_3_conv": 105, "flase": 105, "conv5_block3_3_add": 105, "query_lay": 105, "layer_recip": 105, "remove_lay": 105, "get_quantize_recip": 105, "is_empti": 105, "clear_quantize_recip": 105, "clear": [105, 164, 202, 227, 233, 234, 242, 269, 275, 276, 519, 539, 573, 578], "class": [106, 141, 251, 277, 303, 407, 408, 515, 516, 564, 565, 567, 578, 589, 600, 601, 609, 611, 613, 614], "init_quantize_config": 106, "begin": [106, 193, 226, 253, 258, 263, 264, 288, 292, 296, 297, 298, 299, 319, 567, 568, 603, 613], "model_nam": [106, 242, 359, 365, 484], "special": [106, 515, 564, 578, 600], "qat_clone_funct": 106, "leav": [106, 592], "quantizewrapp": [106, 112], "wrapped_lay": 106, "config_quantizable_lay": 108, "quantizelayeradd": 109, "quantizelayerbas": [109, 110, 111], "quantizelay": 110, "quantizelayerbatchnorm": 111, "quantizewrapperbas": 112, "trainabl": 112, "sublay": 112, "trainable_weight": 112, "track": [112, 314, 598, 610], "descent": 112, "variabl": [112, 168, 184, 206, 226, 235, 241, 285, 300, 306, 472, 497, 518, 562, 604, 613], "non_trainable_weight": 112, "thei": [112, 146, 184, 226, 248, 268, 291, 325, 513, 567, 573, 578, 586, 600, 603, 604], "manual": [112, 168, 206, 565, 581, 587, 589, 592], "add_loss": 112, "regular": [112, 227, 262, 269, 300, 603], "eager": [112, 264, 299, 331, 439, 443, 451, 569, 575, 607, 608, 611, 615], "safe": [112, 324, 514], "gradienttap": 112, "input_shap": [112, 170, 208, 283, 413, 416, 425, 564, 565], "tensorshap": 112, "compute_output_shap": 112, "caus": [112, 582, 603, 604], "state": [112, 137, 233, 234, 246, 248, 275, 276, 286, 315, 318, 584, 603, 604], "happen": 112, "later": [112, 611], "integ": [112, 220, 226, 230, 234, 251, 261, 263, 265, 272, 276, 291, 298, 301, 519, 607, 613], "output_shap": 112, "query_input_index": 112, "design": [112, 165, 187, 188, 193, 203, 226, 241, 266, 275, 276, 307, 516, 586, 589, 603, 604, 607], "logic": [112, 154, 155, 314, 496, 614], "live": 112, "output_obj": 112, "fusenodestartwithfusedbatchnormv3": [113, 123], "quantizenodebas": [113, 114, 115, 116, 117, 118, 119, 122, 123, 124, 125, 127, 128], "_quantizedfusedbatchnorm": 113, "apply_newly_bn_relu_fus": [113, 123], "match_node_nam": [113, 115, 116, 117, 118, 123, 125, 127], "apply_newly_bn_leakyrelu_fus": [113, 123], "get_longest_fus": [113, 114, 115, 116, 117, 118, 119, 122, 123, 124, 125, 127, 128], "longest": [113, 114, 115, 116, 117, 118, 119, 123, 125, 127, 182, 183, 218, 219, 612], "apply_the_transform": [113, 114, 115, 116, 117, 118, 119, 122, 123, 124, 125, 127, 128], "concatv2": [114, 124, 134, 573], "fusenodestartwithconcatv2": [114, 124], "quantizedconcatv2": [114, 124], "fusenodestartwithconv2d": [115, 125], "apply_conv3d_add_addn_relu_fus": 115, "addn": [115, 125, 573], "apply_conv3d_add_addn_fus": 115, "apply_conv3d_add_relu_fus": 115, "apply_conv3d_add_fus": 115, "apply_conv3d_single_fus": 115, "apply_newly_conv_biasadd_relu_fus": 115, "elu": [115, 118], "sigmoid": [115, 118], "apply_newly_conv_biasadd_fus": 115, "apply_newly_conv_single_fus": 115, "apply_newly_conv_biasadd_addn_relu_fus": 115, "apply_conv_biasadd_hardswish_fus": 115, "hardswish": 115, "apply_newly_conv_biasadd_swishf32_fus": 115, "swishf32": 115, "swish_f32": 115, "apply_newly_conv_biasadd_addn_fus": 115, "conv2dbackpropinput": 116, "conv3dbackpropinputv2": 116, "fusenodestartwithdeconv2d": 116, "apply_single_deconv2d_fus": 116, "apply_deconv2d_biasadd_fus": 116, "apply_single_deconv3d_fus": 116, "apply_deconv3d_biasadd_fus": 116, "fusedinstancenorm": 117, "fusenodestartwithfusedinstancenorm": 117, "apply_newly_in_relu_fus": 117, "batchmatmul": 118, "batchmatmulv2": 118, "fusenodestartwithmatmul": [118, 127], "apply_matmul_biasadd_relu_fus": [118, 127], "tanh": 118, "apply_matmul_biasadd_fus": [118, 127], "apply_batchmatmulv2_fus": 118, "apply_batchmatmulv2_mul_add_fus": 118, "avgpool": [119, 128, 573], "fusenodestartwithpool": [119, 128], "optimizeqdqgraph": 121, "op_wise_sequ": [121, 126], "quantizegraphbas": [121, 122, 126], "get_quantized_nod": 121, "quantizegraph": 122, "register_transform": 122, "virtual": [122, 131, 605], "deriv": [122, 193, 220, 226, 261, 263, 265, 288, 291, 298, 300, 301], "remove_dead_nod": 122, "output_nam": [122, 151, 221, 223, 286, 571], "longer": [122, 166, 183, 204, 219, 565, 612], "eightbitize_single_input_tensor_nod": 122, "original_nod": 122, "add_op_funct": 122, "add_output_graph_nod": 122, "output_nod": [122, 359], "remove_redundant_quant": 122, "old_graph": 122, "create_nodes_map": 122, "apply_conv_single_fus": 125, "apply_conv_biasadd_relu_fus": 125, "apply_conv_biasadd_fus": 125, "apply_conv_biasadd_addn_relu_fus": 125, "quantizegraphforintel": 126, "itself": [128, 278, 279, 280, 282, 284, 285, 586], "herlper": 129, "quantizegraphhelp": 129, "sever": [129, 183, 219, 265, 301, 516, 562, 567, 568, 575, 579, 591, 595, 603, 604, 606, 612, 613, 614], "staticmethod": 129, "get_sorted_graph": 129, "wa": [129, 155, 453, 519, 562, 605, 613], "reorder": [129, 246, 248], "pars": [129, 131, 141, 166, 167, 179, 183, 204, 205, 216, 219, 248, 292, 331, 342, 347, 370, 371, 373, 376, 377, 378, 379, 382, 435, 439, 443, 448, 451, 457, 476, 484, 492, 503, 612], "easier": [129, 562, 591, 595, 598, 605], "in_graph": [129, 135], "ouput": 129, "prune": [129, 193, 226, 254, 255, 256, 258, 259, 261, 262, 263, 265, 267, 268, 286, 288, 289, 291, 292, 293, 295, 296, 297, 298, 300, 301, 302, 319, 329, 340, 347, 360, 366, 376, 378, 405, 413, 425, 440, 465, 473, 484, 489, 518, 548, 569, 573, 575, 601, 605, 607, 614], "out": [129, 137, 166, 167, 168, 204, 205, 206, 225, 226, 248, 261, 266, 284, 291, 514, 515, 518, 565, 581, 586, 591, 592, 593, 595, 596, 598, 604, 606, 607], "aren": 129, "uncondition": 129, "copy_attr": 129, "attr_valu": 129, "copi": [129, 262, 329], "unique_node_name_from_input": 129, "ensure_tensor_name_has_port": 129, "sure": [129, 261, 263, 265, 291, 298, 301, 413, 562, 563], "explicit": [129, 513], "generate_quantized_weight_nod": 129, "host_op_typ": 129, "input_nod": [129, 359], "weight_bit": 129, "enter_nod": 129, "correct": [130, 145, 230, 231, 232, 234, 262, 272, 273, 274, 276, 302, 434, 513, 562, 581], "biascorrect": 130, "fp32_graph": 130, "weight_empir": 130, "graphtransformbas": [130, 131, 133, 134], "Will": [130, 157, 160, 177, 497, 567, 575], "our": [130, 516, 518, 571, 599, 610], "task": [130, 166, 173, 204, 211, 234, 248, 276, 565, 567, 568, 575, 578, 603, 604], "close": [130, 145], "w_int8": [130, 145], "w_fp32": [130, 145], "ratio": [130, 145, 179, 183, 216, 219, 226, 253, 258, 261, 263, 264, 265, 291, 295, 298, 299, 301, 565, 603, 604, 612, 615], "differ": [130, 142, 144, 145, 159, 168, 183, 185, 197, 206, 219, 225, 226, 227, 233, 234, 241, 249, 250, 252, 255, 261, 266, 267, 269, 275, 276, 291, 324, 513, 515, 516, 518, 539, 562, 564, 565, 567, 569, 570, 571, 574, 575, 578, 580, 591, 595, 600, 603, 607, 611, 612, 613], "equal": [130, 135, 145, 329, 578, 604], "minim": [130, 145, 306, 518, 567, 578, 591, 595, 603, 604, 607, 613], "round": [130, 145, 607], "scale_c": [130, 145], "shift": [130, 145, 179, 216, 599, 612], "notic": [130, 145, 184, 226, 577, 609], "empir": [130, 145], "solut": [130, 145, 239, 519, 572, 583, 587, 592, 605, 613], "graphtransform": 131, "input_pb": [131, 133, 134], "parse_input_pb": 131, "pbdef": 131, "generate_input_map": 131, "get_node_name_from_input": 131, "insertlog": 133, "node_name_list": 133, "show_nam": 133, "show_op": 133, "first_n": 133, "summar": [133, 567], "1024": [133, 168, 206, 584], "messag": [133, 484, 496, 501, 613], "dump_fp32": 133, "rerang": 134, "rerangequantizedconcat": 134, "rerange_quant": 134, "version1_lt_version2": [135, 329], "version1": [135, 329], "version2": [135, 329], "version1_gt_version2": [135, 329], "greater": [135, 329], "version1_eq_version2": [135, 329], "version1_gte_version2": [135, 329], "version1_lte_version2": [135, 329], "disable_random": 135, "seed": [135, 151, 239, 241, 252, 268, 329, 494, 614], "disabl": [135, 472, 501, 513, 598], "read_graph": 135, "in_graph_is_binari": 135, "read": [135, 168, 171, 183, 206, 209, 219, 226, 253, 258, 262, 264, 299, 399, 403, 404, 565, 608, 610], "write_graph": 135, "out_graph_def": 135, "out_graph_fil": 135, "write": [135, 175, 176, 177, 213, 214, 215, 230, 272, 329, 569, 574, 581, 611], "is_ckpt_format": 135, "model_path": [135, 284, 399, 414, 419, 484], "is_saved_model_format": 135, "saved_model": [135, 226, 236, 285, 405, 412, 422], "get_estimator_graph": 135, "estim": [135, 137, 234, 237, 238, 242, 249, 250, 276, 285, 613], "input_fn": [135, 285], "get_tensor_by_nam": 135, "try_cnt": 135, "consid": [135, 234, 276, 513, 567, 599, 613], "import": [135, 226, 236, 239, 292, 319, 329, 515, 516, 518, 563, 564, 565, 567, 568, 569, 571, 578, 579, 580, 581, 585, 587, 600, 601, 603, 604, 606, 607, 608, 609, 610, 611, 612, 613], "scope": [135, 193, 226, 283, 603], "suffix": 135, "time": [135, 183, 219, 234, 246, 276, 287, 306, 329, 470, 476, 477, 482, 497, 569, 572, 586, 588, 591, 595, 598, 599, 600, 603, 604, 605, 607, 610, 611, 612, 613], "got": [135, 572, 611], "iterator_sess_run": 135, "sess": [135, 285], "iter_op": [135, 285], "feed_dict": [135, 165, 203], "output_tensor": [135, 285], "integr": [135, 185, 519, 562, 599], "makeiter": 135, "predict": [135, 146, 183, 187, 188, 219, 227, 231, 232, 233, 234, 240, 242, 268, 269, 273, 274, 275, 276, 516, 539, 567, 578, 589, 611, 612], "pred": [135, 233, 234, 275, 276, 578], "collate_tf_pr": 135, "collat": [135, 141], "tbe": 135, "get_input_output_node_nam": 135, "fix_ref_type_of_graph_def": 135, "fix": [135, 166, 204, 263, 298, 514, 565, 585, 604, 613], "ref": 135, "tool": [135, 329, 518, 519, 591, 595, 605, 607], "strip_unused_lib": 135, "offici": [135, 227, 231, 232, 269, 273, 274, 513, 562, 578], "r1": 135, "15": [135, 241, 573, 615], "branch": [135, 325], "get_graph_def": 135, "auto_input_output": 135, "get_model_input_shap": 135, "inout": 135, "get_tensor_val_from_graph_nod": 135, "tensor_v": 135, "int8_node_name_revers": 135, "revers": [135, 562], "tf_diagnosis_help": 135, "generate_feed_dict": 135, "input_tensor": [135, 285, 286], "bf16modulewrapp": 136, "nn": [136, 137, 141, 185, 221, 223, 242, 246, 248, 277, 286, 303, 325, 515, 567, 571, 580, 611], "bf16modul": 136, "mixed_precision_model": 136, "bf16_symbolic_trac": 136, "fx_sub_module_list": 136, "_description_": 136, "node_collector": 137, "record": [137, 141, 166, 167, 168, 174, 185, 192, 204, 205, 206, 212, 287, 565, 610, 611, 613], "hook_fn_act": 137, "inp": 137, "outp": 137, "hessiantrac": 137, "refer": [137, 166, 204, 226, 227, 228, 233, 234, 253, 258, 261, 263, 264, 269, 270, 275, 276, 288, 291, 299, 515, 518, 519, 539, 563, 564, 565, 568, 569, 574, 577, 578, 579, 581, 586, 589, 600, 603, 606, 609, 612, 613], "yao": 137, "zhewei": 137, "et": [137, 248], "al": [137, 248], "pyhessian": 137, "network": [137, 239, 242, 263, 288, 291, 309, 516, 518, 562, 567, 568, 571, 602, 605, 607, 613], "through": [137, 146, 154, 155, 182, 218, 268, 277, 303, 307, 563, 573, 574, 575, 576, 578, 584, 600, 601, 603, 606], "len": [137, 183, 219, 306, 565, 569, 612], "2020": 137, "ieee": [137, 579], "confer": [137, 604], "big": 137, "dong": 137, "zhen": 137, "hawq": [137, 309, 522, 613], "v2": [137, 309, 518, 569, 587, 609, 613, 615], "advanc": [137, 493, 513, 518, 607, 614], "system": [137, 184, 325, 329, 472, 499, 500, 563, 584, 603], "33": [137, 239, 615], "18518": 137, "18529": 137, "http": [137, 166, 168, 204, 206, 227, 228, 230, 231, 232, 248, 261, 263, 264, 269, 270, 272, 273, 274, 288, 291, 299, 509, 515, 518, 562, 565, 576, 577, 587, 593, 596, 609], "github": [137, 166, 204, 227, 228, 231, 232, 261, 264, 269, 270, 273, 274, 291, 299, 428, 430, 471, 514, 518, 562, 565, 570, 576, 577, 587, 593, 596, 609], "com": [137, 166, 204, 227, 228, 231, 232, 261, 264, 269, 270, 273, 274, 291, 299, 477, 513, 518, 562, 565, 576, 577, 581, 587, 609, 610, 615], "openvinotoolkit": 137, "nncf": 137, "blob": [137, 227, 228, 231, 232, 261, 269, 270, 273, 274, 291, 587], "develop": [137, 287, 484, 514, 515, 576, 579, 581, 587, 598, 605, 607, 608, 610], "mse_metric_gap": [137, 384], "fp32_tensor": [137, 384], "euclidean": [137, 384, 567], "distanc": [137, 384, 567], "get_fused_map": 137, "weight_to_op": 137, "get_devic": 137, "register_act_grad_hook": 137, "append": [137, 141, 267, 306, 315, 317, 515, 568, 601], "reset_act_gradient_and_hook": 137, "reset": [137, 227, 233, 234, 269, 275, 276, 287, 497, 539, 578], "get_param": [137, 183, 219], "get_vthv_weight": 137, "num_sampl": [137, 234, 276], "vthv": 137, "get_weight_trac": 137, "op_name_to_trac": 137, "get_act_trac": 137, "res_dict": 137, "get_act_gap": 137, "gap": [137, 571, 580], "get_avg_trac": 137, "32": [137, 230, 272, 569, 574, 602, 603, 615], "averag": [137, 230, 231, 232, 234, 272, 273, 274, 276, 578, 613], "compare_weight": 137, "float_dict": 137, "quantized_dict": 137, "being": [137, 230, 242, 267, 272, 286, 401], "usag": [137, 165, 203, 226, 230, 236, 267, 272, 287, 484, 562, 565, 569, 570, 578, 581, 589, 600, 606, 612], "wt_compare_dict": 137, "float_model": 137, "state_dict": [137, 248, 569, 611], "compute_error": 137, "weight_dict": 137, "hawq_top": 137, "modul": [138, 221, 226, 243, 244, 245, 249, 259, 260, 290, 294, 473, 481, 489, 515, 562, 564, 567, 571, 575, 578, 580, 603, 606, 608, 611], "dataread": [139, 224], "sample_s": 139, "100": [139, 151, 168, 206, 230, 239, 268, 272, 563, 565, 569, 574, 606, 607, 612, 613, 614, 615], "ortq": [139, 224], "get_next": [139, 224], "trace_and_fuse_sub_graph": 140, "traced_model": 140, "get_embedding_contigu": 141, "embed": [141, 248], "contigu": [141, 603], "collate_torch_pr": 141, "collate_result": 141, "input2tupl": 141, "append_attr": 141, "fx_model": 141, "generate_activation_observ": 141, "observ": [141, 610, 611, 613], "what": [141, 146, 164, 202, 268, 298, 319, 513, 562], "check_cfg_and_qconfig": 141, "op_infos_from_cfg": 141, "output_tensor_ids_op_nam": 141, "paser_cfg": 141, "ops_nam": 141, "get_quantizable_ops_from_cfg": 141, "input_tensor_ids_op_nam": 141, "auto_copi": 141, "fetch_modul": 141, "set_modul": 141, "new_modul": 141, "simple_infer": 141, "get_example_input": 141, "example_inp": 141, "get_fallback_ord": 141, "fall": 141, "order": [141, 227, 228, 248, 267, 269, 270, 286, 305, 306, 307, 311, 312, 413, 416, 425, 486, 515, 539, 578, 603, 606, 611, 613], "confid": 141, "ordered_op": 141, "get_mse_order_per_fp32": 141, "influenc": 141, "fallback_ord": 141, "get_mse_order_per_int8": 141, "get_torch_vers": 141, "algorithm_registri": [142, 144], "algorithm_typ": [142, 144], "registr": [142, 144, 168, 172, 175, 176, 177, 180, 183, 190, 206, 210, 213, 214, 215, 217, 219, 256], "support_algorithm": [142, 144], "algorithmschedul": [142, 144], "conf": [142, 144, 154, 155, 184, 226, 235, 236, 253, 258, 267, 278, 279, 284, 286, 292, 293, 295, 296, 297, 303, 306, 307, 311, 314, 315, 317, 319, 492, 495, 515, 516, 518, 563, 567, 574, 579, 580, 601, 607, 610, 613], "phase": [142, 144, 267, 298, 299, 516, 603, 604, 607, 608, 613], "origin_model": [142, 144], "adaptor": [142, 144, 193, 226, 322, 518, 529, 575, 608, 609, 611], "calib_it": [142, 144], "fastbiascorrect": [143, 145], "fast_bias_correct": [144, 268], "weight_correct": [144, 268], "weightcorrect": 145, "ep": 145, "1e": [145, 614], "05": [145, 230, 234, 272, 276, 477, 578, 615], "conf_fname_or_obj": [146, 184, 193, 220, 225, 226, 235, 236, 237, 238, 249, 250, 253, 258, 266, 267, 268], "benchmark_conf": [146, 147, 268], "goal": [146, 155, 220, 225, 226, 253, 258, 266, 268, 277, 287, 297, 303, 314, 485, 518, 564, 601, 607, 613], "prefer": [146, 225, 226, 266, 268, 277, 303], "space": [146, 154, 155, 225, 226, 232, 237, 239, 241, 249, 250, 251, 252, 266, 268, 274, 277, 287, 298, 303, 304, 306, 307, 308, 309, 311, 313, 314, 317, 484, 513, 514, 516, 519, 603, 607, 614], "batch_siz": [146, 156, 158, 161, 164, 165, 166, 167, 186, 187, 194, 196, 199, 202, 203, 204, 205, 221, 223, 242, 247, 268, 286, 335, 349, 360, 462, 485, 516, 564, 565, 569, 571, 574, 581, 607], "collate_fn": [146, 156, 158, 159, 161, 186, 187, 194, 196, 197, 199, 268, 565], "last_batch": [146, 156, 158, 161, 165, 186, 187, 194, 196, 199, 203, 268], "rollov": [146, 156, 158, 161, 165, 186, 187, 194, 196, 199, 203, 268], "sampler": [146, 156, 158, 160, 161, 186, 187, 194, 196, 198, 199, 215, 226, 268, 315, 316, 569], "batch_sampl": [146, 156, 158, 161, 186, 187, 194, 196, 199, 268], "num_work": [146, 156, 158, 161, 186, 187, 194, 196, 199, 242, 268, 607], "pin_memori": [146, 156, 158, 161, 186, 187, 194, 196, 199, 268], "shuffl": [146, 156, 158, 161, 186, 187, 194, 196, 199, 268, 607], "metric_cl": [146, 187, 188, 233, 234, 268, 275, 276], "mani": [146, 241, 242, 268, 287, 304, 576, 613, 614], "alwai": [146, 187, 188, 230, 268, 272, 275, 276, 578], "user_metr": [146, 187, 188, 268, 275, 276], "sub_class": [146, 268], "basemetr": [146, 233, 234, 268, 275, 276], "postprocess_cl": [146, 177, 180, 181, 187, 191, 268], "fit": [146, 277, 291, 303, 306, 515, 518, 563, 564, 565, 569, 574, 578, 579, 580, 603, 604, 607], "b_dataload": [146, 184, 226, 563], "b_func": [146, 184, 226, 563], "benchmarkconfig": [146, 151, 563], "prunerv2": 147, "target_spars": [147, 151, 268, 291, 603, 606, 614], "pruning_typ": [147, 151, 268, 603], "start_step": [147, 151, 263, 268, 298, 603, 606], "end_step": [147, 151, 263, 268, 298, 603, 606], "pruning_scop": [147, 151, 268, 603], "pruning_frequ": [147, 151, 268, 298, 603], "min_sparsity_ratio_per_op": [147, 151, 268, 291, 603], "max_sparsity_ratio_per_op": [147, 151, 268, 291, 298, 603], "sparsity_decay_typ": [147, 151, 268, 603], "pruning_op_typ": [147, 151, 268, 603], "reg_typ": 147, "criterion_reduce_typ": 147, "resume_from_pruned_checkpoint": 147, "similiar": [147, 151, 268], "cfg_fname": 147, "parser": [147, 268, 342, 347, 465, 469, 473, 503], "quantization_conf": 147, "dotdict": 147, "pruning_conf": 147, "graph_optimization_conf": [147, 225, 226], "mixedprecision_conf": 147, "distillation_conf": [147, 220, 226], "nasconfig": [147, 226, 238, 249, 250, 516], "search_spac": [147, 237, 249, 250, 251, 252], "search_algorithm": [147, 226, 249, 250, 268, 516], "na": [147, 226, 268, 281, 548, 575], "procedur": [147, 291, 307, 516], "deep_get": 148, "dot": [148, 484, 579, 607], "nest": 148, "eg": [148, 168, 172, 177, 206, 210, 215, 565, 606], "person": [148, 513, 605], "john": 148, "deep": [148, 518, 519, 564, 575, 576, 579, 581, 583, 586, 587, 589, 592, 598, 605, 607, 613], "deep_set": 148, "sex": [148, 513], "male": 148, "notat": 148, "check_valu": 151, "src": [151, 599], "supported_typ": 151, "supported_valu": 151, "random_se": [151, 306, 319, 368, 494, 614], "1978": 151, "workspac": [151, 268, 285, 286, 319, 328, 329, 370, 371, 376, 378, 379, 380, 410, 483, 485, 494, 580], "default_workspac": 151, "resume_from": [151, 329], "warmup": [151, 485, 563, 606], "cores_per_inst": [151, 349, 485, 563, 606], "num_of_inst": [151, 485, 563, 606], "inter_num_of_thread": [151, 606], "intra_num_of_thread": [151, 606], "accuracycriterion": [151, 452, 613], "higher_is_bett": [151, 578, 613, 614], "rel": [151, 606, 613, 614, 615], "tolerable_loss": [151, 613], "01": [151, 602, 606, 613, 614, 615], "absolut": [151, 234, 240, 276, 288, 292, 295, 477, 578, 602, 603, 604, 607, 613], "tuningcriterion": [151, 600, 610, 613], "basic": [151, 182, 218, 237, 249, 261, 268, 291, 310, 314, 315, 316, 319, 518, 575, 576, 606, 610], "strategy_kwarg": [151, 610, 613], "timeout": [151, 155, 314, 494, 606, 613, 614], "max_trial": [151, 494, 613], "posttrainingquantconfig": [151, 268, 515, 518, 564, 580, 607, 610, 613], "quant_format": [151, 221, 223, 268, 286, 571], "calibration_sampling_s": [151, 268], "op_type_list": [151, 268, 606, 613], "op_name_list": [151, 268, 613], "excluded_precis": [151, 268], "quant_level": [151, 268, 613], "tuning_criterion": [151, 268, 600, 610, 613], "accuracy_criterion": [151, 268, 287, 600, 606, 613, 614], "_basequantizationconfig": [151, 268], "quantizationawaretrainingconfig": [151, 268, 515, 568, 607, 613], "weightpruningconfig": [151, 268, 601, 603], "pruning_config": [151, 268, 603], "9": [151, 241, 268, 515, 518, 576, 603, 604, 606, 613, 614, 615], "snip_momentum": [151, 268, 288, 603], "4x1": [151, 257, 268, 291, 603, 615], "98": [151, 268, 603, 606, 615], "exp": [151, 268, 603, 604], "weight_compress": [151, 268, 606, 614], "knowledgedistillationlossconfig": [151, 568, 601], "temperatur": [151, 185, 614], "loss_typ": [151, 185, 614], "ce": [151, 185, 614], "loss_weight": [151, 185, 614], "knowledg": [151, 185, 220, 226, 518, 568, 575, 580, 614], "distil": [151, 185, 192, 193, 226, 268, 319, 518, 548, 575, 601, 614], "intermediatelayersknowledgedistillationlossconfig": 151, "layer_map": [151, 185], "add_origin_loss": [151, 185], "selfknowledgedistillationlossconfig": [151, 567], "distillationconfig": [151, 268, 567, 568, 601], "teacher_model": [151, 185, 220, 226, 268, 567, 568], "sgd": [151, 190, 268, 567, 606, 614], "learning_r": [151, 268, 606, 614], "0001": [151, 268, 567, 606], "callabl": [151, 232, 268, 274, 319, 480, 484, 500, 501], "teacher": [151, 185, 220, 226, 248, 268, 518, 567, 568, 615], "altern": [151, 268], "mixedprecisionconfig": [151, 579], "mixedprecis": [151, 226, 235, 277, 338, 442, 490, 548], "exportconfig": 151, "opset_vers": [151, 221, 223, 286, 571], "dynamic_ax": [151, 221, 223, 286, 571], "export": [151, 226, 230, 268, 272, 278, 279, 284, 286, 319, 484, 518, 584, 599, 611], "onnxqlinear2qdqconfig": 151, "onnxqlinear2qdq": 151, "torch2onnxconfig": [151, 571], "qdq_op_fp32_bia": [151, 221, 223, 571], "torch2onnx": [151, 221, 226, 268], "tf2onnxconfig": 151, "tf2onnx": 151, "sigopt": [152, 153, 268, 605], "tpe": [152, 153, 268], "sigopttunestrategi": 154, "q_dataload": [154, 155, 306, 307, 311, 314, 574, 613], "eval_dataload": [154, 155, 193, 225, 226, 236, 267, 277, 303, 306, 307, 311, 314, 518, 563, 574, 613], "eval_func": [154, 155, 193, 225, 226, 236, 267, 277, 287, 303, 306, 307, 311, 314, 515, 564, 565, 567, 568, 569, 613, 614], "q_hook": [154, 155, 306, 307, 311, 314], "tunestrategi": [154, 155, 304, 305, 306, 307, 308, 309, 311, 312, 313, 314, 613], "hpo": 154, "mandatori": [154, 155, 303, 614], "yield": [154, 155, 164, 186, 187, 202, 277, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 314, 564, 607, 613], "free": [154, 155, 303, 513, 578, 587, 592, 600, 610], "taken": [154, 155, 277, 303], "reserv": [154, 155, 193, 226, 267, 292], "tuner": [154, 155, 225, 226, 266, 277, 303], "higher": [154, 155, 251, 277, 303, 304, 515, 567, 571, 578, 603, 604, 607, 610, 613], "scalar": [154, 155, 277, 303, 578, 607], "pseudo": [154, 155, 303, 611], "code": [154, 155, 184, 226, 236, 244, 245, 248, 264, 267, 303, 371, 376, 394, 412, 477, 478, 509, 510, 515, 518, 519, 564, 565, 567, 568, 569, 574, 575, 577, 578, 581, 583, 585, 586, 587, 589, 592, 598, 600, 601, 603, 605, 606, 607, 610, 611, 612], "resum": [154, 155, 314, 319, 325, 518], "params_to_tune_config": 154, "next_tune_cfg": [154, 304, 305, 306, 307, 308, 309, 311, 312, 313, 314, 613], "travers": [154, 155, 304, 307, 308, 314], "concret": [154, 314, 613], "get_acc_target": 154, "base_acc": 154, "ceiterion": 154, "main": [154, 190, 264, 299, 314, 464, 501, 515, 518, 569, 585, 587, 599, 604, 607], "overrid": [154, 193, 226, 266, 314, 325, 329, 474], "constraint": [154, 225, 226, 266, 610, 613, 614], "create_exp": 154, "acc_target": 154, "experi": [154, 513, 581, 610, 613], "fefin": 155, "tpetunestrategi": 155, "add_loss_to_tuned_history_and_find_best": 155, "tuning_history_list": 155, "histori": [155, 306, 314, 328, 329, 369, 376, 378, 382, 435, 453, 503, 598, 613], "object_evalu": 155, "alredi": 155, "calculate_loss": 155, "acc_diff": 155, "lat_diff": 155, "stop": [155, 284, 307, 314, 453, 477, 613, 614], "trials_count": [155, 307, 314], "either": [155, 230, 272, 314, 579, 582, 586, 601, 606, 607], "met": [155, 314, 516, 573, 579, 607, 611], "reach": [155, 261, 265, 287, 291, 301, 314, 514, 564, 603, 604, 613], "otherwis": [155, 168, 183, 206, 219, 314, 513, 565, 593, 596, 606, 612], "basedatalod": [156, 194], "basedataload": [156, 158, 161, 162, 163, 165, 194, 196, 199, 200, 201, 203], "_generate_dataload": [156, 194], "drop": [156, 194, 230, 262, 272, 579, 592, 603, 604, 615], "incomplet": [156, 194, 325], "discard": [156, 194], "dispatch": [157, 160, 177, 575], "unifi": [157, 160, 177, 225, 226, 266, 476, 518, 519, 564, 574, 575, 580], "default_col": [158, 196], "outer": [158, 196], "defaultdataload": [158, 162, 165, 196, 200, 203], "base_dataload": [158, 160, 161, 162, 163, 165, 196, 198, 199, 200, 201, 203, 215, 226], "drop_last": [159, 164, 197, 202], "iterablefetch": [159, 197], "indexfetch": [159, 197], "default_dataload": [160, 162, 165, 198, 200, 203, 215, 226], "fetcher": [160, 198, 215, 226], "mxnet_dataload": [160, 198, 215, 226], "onnxrt_dataload": [160, 198, 215, 226], "pytorch_dataload": [160, 198, 215, 226], "tensorflow_dataload": [160, 198, 215, 226, 462], "mxnetdataload": [161, 199], "onnxrtbertdataload": [162, 200], "bert": [162, 165, 166, 183, 200, 203, 204, 219, 565, 567, 578, 586, 612, 615], "varient": [162, 200], "onnxrtdataload": [162, 200], "pytorchdataload": [163, 201], "data_sourc": [164, 202, 322], "__iter__": [164, 168, 172, 177, 202, 206, 210, 215, 564, 565], "matter": [164, 202, 608], "you": [164, 166, 202, 204, 230, 246, 248, 263, 272, 514, 515, 518, 562, 565, 569, 571, 576, 577, 578, 581, 583, 584, 586, 591, 595, 598, 599, 603, 609, 610, 611], "iterablesampl": [164, 202], "squential": [164, 202], "your": [164, 166, 202, 204, 230, 272, 514, 518, 562, 565, 569, 571, 576, 577, 581, 584, 585, 586, 591, 592, 593, 595, 596, 598, 603, 610, 611, 613], "iterabledataset": [164, 167, 168, 170, 171, 172, 177, 202, 205, 206, 208, 209, 210, 215], "try": [164, 202, 413, 416, 425, 497, 515, 571, 607], "indexdataset": [164, 202], "__getitem__": [164, 168, 172, 177, 180, 183, 202, 206, 210, 215, 217, 219, 565], "__len__": [164, 168, 172, 177, 202, 206, 210, 215, 565], "inter": [164, 168, 172, 177, 202, 206, 210, 215], "retriev": [164, 202, 478], "act": [164, 202, 513], "sequentialsampl": [164, 202], "batchsampl": [164, 202], "tfdatadataload": [165, 203], "tensorflow1": [165, 203], "coupl": [165, 203], "satisfi": [165, 203, 576], "tf1": [165, 203, 580], "although": [165, 203, 610], "pytorch": [165, 166, 168, 171, 172, 175, 176, 177, 180, 183, 185, 190, 192, 203, 204, 206, 209, 210, 213, 214, 215, 217, 219, 221, 223, 224, 225, 226, 233, 234, 235, 259, 261, 264, 266, 268, 275, 276, 277, 286, 291, 299, 303, 312, 323, 325, 329, 332, 405, 412, 435, 445, 465, 515, 516, 518, 519, 564, 567, 568, 570, 571, 573, 575, 576, 579, 580, 581, 583, 586, 587, 588, 589, 598, 603, 605, 606, 609, 613, 614], "tensorflowbertdataload": [165, 203], "tensorflowmodelzoobertdataload": [165, 203], "zoo": [165, 183, 203, 219, 518, 615], "tensorflowdataload": [165, 203, 462], "directli": [165, 203, 230, 234, 262, 272, 276, 571, 578, 585, 606, 607, 611], "pytorchbertdataset": [166, 204], "model_typ": [166, 204, 285, 384, 414, 565], "construct": [166, 169, 170, 173, 177, 180, 181, 186, 187, 188, 189, 191, 204, 207, 208, 211, 275, 276, 279, 281, 285, 322, 513, 565, 569, 604, 613], "tensordataset": [166, 204, 565], "repo": [166, 204, 565, 570, 591, 593, 595, 596], "link": [166, 204, 562, 565, 591, 595, 598], "huggingfac": [166, 204, 325, 518, 565, 586, 587, 588, 589], "easi": [166, 204, 226, 266, 562, 564, 571, 605, 607, 610], "classifi": [166, 204, 234, 276, 307, 565, 567, 603], "squad": [166, 183, 204, 219, 231, 232, 234, 273, 274, 276, 565, 578, 612, 615], "distilbert": [166, 204, 518, 565, 605, 615], "xlnet": [166, 204, 565], "xlm": [166, 204, 565, 615], "101": [166, 204, 234, 276, 578, 615], "2043": [166, 204], "2001": [166, 204], "onnxrtbertdataset": [166, 204], "data_dir": [166, 204, 565], "model_name_or_path": [166, 204, 325, 565, 586, 587], "max_seq_length": [166, 183, 204, 219, 565, 612], "128": [166, 169, 170, 183, 204, 207, 208, 219, 565, 607, 612, 615], "do_lower_cas": [166, 182, 183, 204, 218, 219, 565, 612], "mrpc": [166, 204, 234, 276, 565, 578, 586, 615], "dynamic_length": [166, 204, 565], "student": [166, 185, 192, 204, 220, 226, 518, 565, 567, 568, 615], "shortcut": [166, 204, 565], "select": [166, 204, 238, 242, 249, 300, 312, 515, 516, 562, 575, 576, 598, 604, 607, 611, 613], "length": [166, 183, 204, 219, 227, 230, 248, 269, 272, 518, 539, 565, 578, 607, 612], "token": [166, 177, 180, 183, 204, 215, 217, 219, 226, 227, 228, 248, 268, 269, 270, 325, 497, 501, 539, 562, 565, 578, 610, 612, 613], "truncat": [166, 183, 204, 219, 565, 612], "shorter": [166, 183, 204, 219, 565, 612], "lowercas": [166, 204, 565], "fine": [166, 204, 298, 565, 584, 605, 607], "choic": [166, 204, 519, 562, 565, 578], "qqp": [166, 204, 565, 578, 615], "qnli": [166, 204, 565, 578, 615], "rte": [166, 204, 565, 578, 615], "st": [166, 204, 565, 578], "cola": [166, 204, 565, 578, 615], "mnli": [166, 204, 565, 578, 615], "wnli": [166, 204, 565, 578, 615], "mobilebert": [166, 204, 565, 567, 615], "roberta": [166, 204, 565, 615], "uncas": [166, 183, 204, 219, 565, 612, 615], "load_and_cache_exampl": [166, 204], "cach": [166, 204, 227, 269, 325, 414, 501, 539, 572, 607], "convert_examples_to_featur": [166, 183, 204, 219], "max_length": [166, 204], "label_list": [166, 204, 234, 276], "output_mod": [166, 204], "classif": [166, 183, 204, 219, 234, 264, 276, 299, 518, 567, 578, 587, 605], "pad_token": [166, 204], "pad_token_segment_id": [166, 204], "mask_padding_with_zero": [166, 204], "inputfeatur": [166, 183, 204, 219], "input_id": [166, 183, 204, 219], "vocabulari": [166, 182, 183, 204, 218, 219, 248, 612], "attention_mask": [166, 204], "avoid": [166, 204, 515, 611], "NOT": [166, 204, 573, 576], "token_type_id": [166, 204], "segment": [166, 204, 228, 230, 270, 272], "portion": [166, 204], "problem": [166, 204, 234, 241, 276, 578, 579, 599], "regress": [166, 204], "seq_length": [166, 204], "to_json_str": [166, 204], "json": [166, 167, 183, 204, 205, 219, 339, 457, 459, 467, 474, 484, 565, 580, 599, 612], "tensorflowbertdataset": [166, 204], "root": [166, 167, 168, 171, 204, 205, 206, 209, 234, 240, 276, 278, 279, 280, 282, 284, 285, 286, 319, 501, 564, 565, 569, 578, 614], "label_fil": [166, 183, 204, 219, 565, 612], "tfrecord": [166, 167, 168, 172, 177, 204, 205, 206, 210, 215, 565], "guid": [166, 204, 515, 518, 565, 567, 576, 581, 589, 598], "parsedecodebert": [166, 204], "tensorflowmodelzoobertdataset": [166, 167, 204, 205], "num_cor": [166, 167, 171, 204, 205, 209, 565], "28": [166, 167, 171, 204, 205, 209, 565, 615], "coco": [167, 174, 178, 205, 212, 230, 234, 272, 276, 578], "parsedecodecoco": [167, 205], "cocorecorddataset": [167, 205], "directori": [167, 168, 205, 206, 285, 325, 328, 329, 393, 446, 467, 484, 497, 565, 569, 572, 591, 593, 595, 596, 611], "interleav": [167, 205, 565], "parallel": [167, 205, 565], "cocoraw": [167, 205, 564, 565], "img_dir": [167, 205, 565], "val2017": [167, 205, 565], "anno_dir": [167, 205, 565], "annot": [167, 205, 230, 272, 565, 578], "instances_val2017": [167, 205, 565], "raw": [167, 171, 174, 205, 209, 212, 311, 518, 578, 613], "arrang": [167, 168, 171, 205, 206, 209, 298, 565, 603], "wai": [167, 168, 171, 205, 206, 209, 516, 562, 564, 565, 578, 581, 584, 599, 601, 603, 604, 607, 613, 614], "jpg": [167, 171, 173, 205, 209, 211, 565], "imag": [167, 168, 171, 173, 179, 183, 205, 206, 209, 211, 216, 219, 230, 242, 272, 482, 562, 565, 569, 606, 611, 612, 615], "coconpi": [167, 205, 565], "npy_dir": [167, 205, 565], "npy": [167, 205, 565], "tensorflowdataset": [168, 206], "pytorchdataset": [168, 206], "mxnetdataset": [168, 206], "onnxrtqldataset": [168, 206], "qlinear": [168, 175, 206, 213, 234, 276, 284, 519, 571, 588, 615], "onnxrtitdataset": [168, 206], "IT": [168, 175, 206, 213], "pytorchmxnetwrapdataset": [168, 206], "datafunc": [168, 206], "pytorchmxnetwrapfunct": [168, 183, 206, 219], "framework_dataset": [168, 206], "convent": [168, 206, 230, 272, 567], "imageclassifi": [168, 206], "choos": [168, 206, 313, 562, 575, 576, 586, 609, 613, 614], "tensorflow_itex": [168, 171, 172, 173, 175, 176, 177, 206, 209, 210, 211, 213, 214, 215, 606], "onnxrt_qdq": [168, 172, 175, 176, 177, 206, 210, 213, 214, 215, 606], "onnxrt_qlinearop": [168, 172, 175, 176, 177, 183, 206, 210, 213, 214, 215, 219, 606], "onnxrt_integerop": [168, 172, 175, 176, 177, 183, 206, 210, 213, 214, 215, 219, 606], "pytorch_ipex": [168, 172, 175, 176, 177, 206, 210, 213, 214, 215, 606, 614], "pytorch_fx": [168, 172, 175, 176, 177, 206, 210, 213, 214, 215, 606], "onnxrt_qoper": [168, 172, 175, 176, 177, 206, 210, 213, 214, 215, 606], "dataset_registri": [168, 172, 177, 206, 210, 215], "dataset_typ": [168, 172, 177, 206, 210, 215, 225, 226, 236, 266, 352], "dataset_format": [168, 172, 177, 206, 210, 215], "data_format": [168, 172, 177, 179, 206, 210, 215, 216], "raw_imag": [168, 172, 177, 206, 210, 215], "overwrit": [168, 172, 177, 206, 210, 215, 591, 595], "over": [168, 172, 177, 206, 210, 215, 230, 234, 272, 276, 306, 518, 575, 578, 589, 598, 606, 613], "download_url": [168, 206], "filenam": [168, 206, 240, 329, 330, 430, 446, 453, 459, 469, 477, 565], "md5": [168, 206], "download": [168, 206, 325, 405, 428, 429, 431, 432, 465, 562, 565, 576, 609], "address": [168, 206, 501, 513, 562, 579, 605], "gen_bar_updat": [168, 206], "progress": [168, 206, 265, 291, 298, 301, 592, 598, 604], "bar": [168, 206, 562, 598], "check_integr": [168, 206], "fpath": [168, 206], "checksum": [168, 206], "calculate_md5": [168, 206], "chunk_siz": [168, 206], "cifar10": [168, 206, 565], "cifar100": [168, 206, 565], "automat": [168, 171, 178, 179, 206, 209, 216, 225, 226, 235, 242, 266, 515, 518, 562, 563, 565, 575, 579, 581, 583, 586, 587, 589, 591, 592, 593, 595, 596, 598, 601, 604, 612, 613], "www": [168, 206, 565, 615], "toronto": [168, 206, 565], "edu": [168, 206, 565], "kriz": [168, 206, 565], "cifar": [168, 206, 565, 615], "10": [168, 206, 230, 272, 306, 462, 518, 562, 563, 565, 576, 603, 606, 612, 613], "tar": [168, 206, 565, 593, 596], "gz": [168, 206, 565, 593, 596], "subset": [168, 171, 206, 209, 565], "internet": [168, 206, 562, 565], "put": [168, 206, 565, 567, 603], "alreadi": [168, 182, 184, 206, 218, 470, 497, 519, 562, 565, 575, 593, 596, 613], "again": [168, 206, 565, 608], "load_meta": [168, 206], "pytorchcifar10": [168, 206], "mxnetcifar10": [168, 206], "tensorflowcifar10": [168, 206], "pytorchcifar100": [168, 206], "mxnetcifar100": [168, 206], "tensorflowcifar100": [168, 206], "mnist": [168, 206, 565, 569], "nation": [168, 206, 513], "institut": [168, 206], "standard": [168, 183, 206, 219, 325, 571, 578, 612, 613], "technologi": [168, 206, 518, 602], "fashionmnist": [168, 206, 565], "npz": [168, 206, 565], "idx1": [168, 206, 565], "ubyt": [168, 206, 565], "idx3": [168, 206, 565], "t10k": [168, 206, 565], "class_to_idx": [168, 206], "read_data": [168, 206], "pytorchmnist": [168, 206], "mxnetmnist": [168, 206], "tensorflowmnist": [168, 206], "pytorchfashionmnist": [168, 206], "mxnetfashionmnist": [168, 206], "tensorflowfashionmnist": [168, 206], "imagefold": [168, 206, 565, 569], "subfold": [168, 206], "belong": [168, 206, 223, 281, 607], "class_1": [168, 206, 565], "xxx": [168, 206, 514, 565], "png": [168, 206, 565], "xxy": [168, 206, 565], "xxz": [168, 206, 565], "class_n": [168, 206, 565], "123": [168, 206, 565, 612], "nsdf3": [168, 206, 565], "asd932_": [168, 206, 565], "mxnetimagefold": [168, 206], "tensorflowimagefold": [168, 206], "tensorflowtfrecorddataset": [168, 206], "tensorflowimagerecord": [168, 206], "imagenet": [168, 171, 179, 206, 209, 216, 242, 516, 587, 611, 612, 614, 615], "000": [168, 206, 565], "001": [168, 206, 565, 569, 614], "099": [168, 206, 565], "tensorflowvocrecord": [168, 206], "pascal": [168, 206], "voc": [168, 206, 234, 276], "2012": [168, 206], "00000": [168, 206], "00004": [168, 206], "00001": [168, 206], "00003": [168, 206], "dummydataset": [169, 170, 207, 208], "float32": [169, 170, 183, 207, 208, 219, 230, 272, 482, 519, 563, 565, 607, 612], "stand_norm": [169, 170, 207, 208, 565], "dummy_v2": [170, 208, 564, 565], "sparse_dummy_v2": [170, 208, 565], "label_shap": [170, 208, 565], "sparsedummydataset": [170, 208], "dense_shap": [170, 208, 565], "sparse_ratio": [170, 208, 565], "imagenetraw": [171, 209, 565], "data_path": [171, 209, 565], "image_list": [171, 209, 565], "img1": [171, 209, 565], "img2": [171, 209, 565], "imgx": [171, 209, 565], "val_map": [171, 209, 565], "txt": [171, 209, 477, 518, 562, 565, 576], "pytorchimagenetraw": [171, 209], "mxnetimagenetraw": [171, 209], "tensorflowimagenetraw": [171, 209], "inteltensorflow": [171, 173, 209, 211], "tensorflowimagenetdataset": [171, 209], "onnxrtimagenetdataset": [171, 209], "bert_dataset": [172, 177, 210, 215, 226, 268], "coco_dataset": [172, 177, 210, 215, 226, 268], "dummy_dataset": [172, 177, 210, 215, 226, 268], "dummy_dataset_v2": [172, 177, 210, 215, 226, 268], "imagenet_dataset": [172, 177, 210, 215, 226, 268], "style_transfer_dataset": [172, 177, 210, 215, 226, 268], "transfer": [173, 211, 220, 226, 565, 567, 568], "styletransferdataset": [173, 211], "content_fold": [173, 211, 565], "style_fold": [173, 211, 565], "crop_ratio": [173, 211, 565], "resize_shap": [173, 211, 565], "256": [173, 179, 211, 216, 565, 569, 612, 615], "image_format": [173, 211, 565], "holder": [173, 211, 565], "labelbalancecocorecordfilt": [174, 212], "balanc": [174, 212, 602], "labelbalancecocorawfilt": [174, 212], "tensorflowfilt": [175, 213], "onnxrtqlfilt": [175, 213], "onnxrtitfilt": [175, 213], "pytorchfilt": [175, 213], "mxnetfilt": [175, 213], "filter_registri": [175, 176, 177, 213, 214, 215], "filter_typ": [175, 176, 177, 213, 214, 215], "__call__": [175, 176, 177, 213, 214, 215], "coco_filt": [176, 177, 214, 215, 226, 268], "imagenet_transform": [177, 180, 215, 217, 226, 268], "transform_cl": [177, 180, 183, 215, 217, 219], "basetransform": [177, 178, 179, 180, 183, 215, 216, 217, 219], "transform_registri": [177, 180, 183, 215, 217, 219], "transform_typ": [177, 180, 183, 215, 217, 219], "user_postprocess": [177, 180, 181, 187, 191], "parsedecodecocotransform": 178, "experiment": [178, 268, 462, 516, 539, 565, 568, 569, 571, 606, 608, 609, 612], "decod": [178, 179, 216, 227, 248, 269, 539, 578, 612], "quantizedinput": [179, 216, 612], "desir": [179, 183, 216, 219, 248, 612], "labelshift": [179, 216, 487, 612], "label_shift": [179, 216, 612], "parsedecodeimagenet": [179, 216, 612], "proto": [179, 183, 216, 219, 612], "parsedecodeimagenettransform": [179, 216], "tensorflowresizecropimagenettransform": [179, 216], "height": [179, 183, 216, 219, 242, 261, 291, 569, 603, 612, 614], "width": [179, 183, 216, 219, 242, 261, 291, 569, 607, 612, 614], "random_crop": [179, 216, 612], "resize_sid": [179, 216, 612], "resize_method": [179, 216], "bilinear": [179, 183, 216, 219, 612], "random_flip_left_right": [179, 216, 612], "mean_valu": [179, 216, 612], "channels_last": [179, 216, 581], "subpixel": [179, 216], "rgb": [179, 216], "seri": [179, 216, 518, 612], "applic": [179, 216, 468, 497, 499, 501, 562, 571, 581, 598, 605, 611, 612], "crop": [179, 183, 216, 219, 565, 612], "flip": [179, 183, 216, 219, 612], "left": [179, 183, 216, 219, 291, 562, 592, 598, 612], "right": [179, 216, 230, 272, 482, 513, 515, 562, 598, 612], "std": [179, 183, 216, 219, 242, 612], "bilinearimagenettransform": [179, 216], "central_fract": [179, 216, 612], "875": [179, 216, 612], "fraction": [179, 216, 612], "onnxbilinearimagenettransform": [179, 216], "onnxresizecropimagenettransform": [179, 216], "std_valu": [179, 216], "229": [179, 216], "224": [179, 216, 242, 518, 564, 565, 569, 571, 581, 612, 614], "225": [179, 216], "resizewithaspectratio": [179, 216], "87": [179, 216, 615], "inter_pol": [179, 216], "cv2": [179, 216], "inter_area": [179, 216], "aspect": [179, 183, 216, 219, 612], "convert_to_unicod": [182, 218], "text": [182, 183, 218, 219, 227, 232, 264, 269, 274, 299, 539, 577, 587, 605, 612, 615], "unicod": [182, 218, 227, 269], "assum": [182, 218, 230, 251, 272, 519, 573, 598], "utf": [182, 218], "load_vocab": [182, 218], "vocab_fil": [182, 183, 218, 219, 612], "convert_by_vocab": [182, 218], "vocab": [182, 218, 248], "whitespace_token": [182, 218], "whitespac": [182, 218, 232, 274], "clean": [182, 185, 218, 349, 360, 363, 370, 371, 376, 378, 379, 380, 467, 483, 514], "piec": [182, 218, 227, 269, 539, 571, 578], "fulltoken": [182, 218], "tokenzi": [182, 218], "convert_tokens_to_id": [182, 218], "convert_ids_to_token": [182, 218], "basictoken": [182, 218], "punctuat": [182, 218, 227, 232, 269, 274], "lower": [182, 183, 218, 219, 232, 274, 307, 484, 568, 603, 604, 605, 607, 612, 613], "wordpiecetoken": [182, 218], "unk_token": [182, 218], "unk": [182, 218], "max_input_chars_per_word": [182, 218], "200": [182, 218, 515, 613, 615], "wordpiec": [182, 183, 218, 219, 612], "word": [182, 218, 227, 269, 539, 578, 615], "greedi": [182, 218], "unaff": [182, 218], "un": [182, 218], "aff": [182, 218], "separ": [182, 218, 500, 513, 562, 574, 577, 601, 606], "concat_gener": [183, 219], "tensorflowtransform": [183, 219], "mxnettransform": [183, 219], "pytorchtransform": [183, 219], "onnxrtqltransform": [183, 219], "onnxrtittransform": [183, 219], "tensorflowwrapfunct": [183, 219], "transform_func": [183, 219], "pytorchmxnettransform": [183, 219], "get_torchvision_map": [183, 219], "interpol": [183, 219, 298, 578, 604, 612], "torchvis": [183, 219, 242, 518, 581, 587], "composetransform": [183, 219], "transform_list": [183, 219, 612], "togeth": [183, 219, 261, 267, 291, 567, 576, 585, 605, 611, 612], "croptoboundingbox": [183, 219, 612], "offset_height": [183, 219, 612], "offset_width": [183, 219, 612], "target_height": [183, 219, 612], "target_width": [183, 219, 612], "box": [183, 219, 230, 234, 272, 276, 306, 515, 562, 578, 581, 592, 598, 611, 612, 613], "vertic": [183, 219, 261, 291, 612], "coordin": [183, 219, 306, 612], "corner": [183, 219, 519, 612], "horizont": [183, 219, 612], "mxnetcroptoboundingbox": [183, 219], "onnxrtcroptoboundingbox": [183, 219], "tensorflowcroptoboundingbox": [183, 219], "resizewithratio": [183, 219, 612], "min_dim": [183, 219, 612], "800": [183, 219, 612], "max_dim": [183, 219, 612], "1365": [183, 219, 612], "constant_valu": [183, 219], "side": [183, 219, 248, 562, 565, 592, 612], "exce": [183, 219, 612], "tensorflowresizewithratio": [183, 219], "perm": [183, 219, 612], "permut": [183, 219, 291, 612], "tensorflowtranspos": [183, 219], "mxnettranspos": [183, 219], "pytorchtranspos": [183, 219], "randomverticalflip": [183, 219, 612], "randomli": [183, 219, 252, 306, 313, 516, 612, 613], "tensorflowrandomverticalflip": [183, 219], "randomhorizontalflip": [183, 219, 612], "tensorflowrandomhorizontalflip": [183, 219], "toarrai": [183, 219, 612], "pil": [183, 219, 612], "casttftransform": [183, 219], "castonnxtransform": [183, 219], "castpytorchtransform": [183, 219], "centercroptftransform": [183, 219], "center": [183, 219, 517, 518, 612, 613], "paddedcentercroptransform": [183, 219], "crop_pad": [183, 219], "resizetftransform": [183, 219], "nearest": [183, 219, 612], "bicub": [183, 219, 612], "resizepytorchtransform": [183, 219], "randomcroptftransform": [183, 219], "locat": [183, 219, 569, 584, 591, 595, 598, 607, 609, 612, 614], "randomresizedcroppytorchtransform": [183, 219], "randomresizedcropmxnettransform": [183, 219], "randomresizedcroptftransform": [183, 219], "pramet": [183, 219], "normalizetftransform": [183, 219], "rescal": [183, 219, 612], "deviat": [183, 219, 612], "broadcast": [183, 219, 569, 612], "rescalekeraspretraintransform": [183, 219], "rescaletftransform": [183, 219], "rescaletransform": [183, 219], "alignimagechanneltransform": [183, 219], "dim": [183, 219, 256, 291, 306, 612], "align": [183, 219, 264, 513, 612], "now": [183, 219, 482, 515, 516, 565, 569, 589, 606, 612, 613], "w": [183, 219, 242, 603, 604, 612], "must": [183, 219, 230, 234, 272, 276, 514, 515, 563, 564, 576, 612], "pytorchalignimagechannel": [183, 219], "tondarraytransform": [183, 219], "resizemxnettransform": [183, 219], "resizetransform": [183, 219], "cropresizetftransform": [183, 219], "boundari": [183, 219, 382, 612], "area": [183, 219, 230, 272, 578, 612], "pytorchcropresizetransform": [183, 219], "mxnetcropresizetransform": [183, 219], "cropresizetransform": [183, 219], "centercroptransform": [183, 219], "mxnetnormalizetransform": [183, 219], "pytorchnormalizetransform": [183, 219], "normalizetransform": [183, 219], "randomcroptransform": [183, 219], "randomresizedcroptransform": [183, 219], "get_final_text": [183, 219], "pred_text": [183, 219], "orig_text": [183, 219], "project": [183, 219, 248, 349, 352, 357, 359, 360, 363, 370, 371, 375, 376, 377, 378, 379, 380, 381, 405, 512, 513, 514, 605, 610, 613, 616], "squadexampl": [183, 219], "qas_id": [183, 219], "question_text": [183, 219], "doc_token": [183, 219], "orig_answer_text": [183, 219], "start_posit": [183, 219], "end_posit": [183, 219], "is_imposs": [183, 219], "simpl": [183, 219, 518, 562, 576, 610, 613], "answer": [183, 219, 231, 232, 273, 274, 513, 612, 615], "unique_id": [183, 219], "example_index": [183, 219], "doc_span_index": [183, 219], "token_to_orig_map": [183, 219], "token_is_max_context": [183, 219], "input_mask": [183, 219, 298], "segment_id": [183, 219], "read_squad_exampl": [183, 219], "input_fil": [183, 219], "doc_strid": [183, 219, 612], "max_query_length": [183, 219, 612], "output_fn": [183, 219], "inputbatch": [183, 219], "collecttransform": [183, 219], "10833": [183, 219], "tfsquadv1posttransform": [183, 219], "n_best_siz": [183, 219, 612], "20": [183, 219, 241, 242, 518, 602, 612, 614, 615], "384": [183, 219, 612], "64": [183, 219, 516, 612, 615], "max_answer_length": [183, 219, 612], "30": [183, 219, 518, 575, 612, 615], "total": [183, 219, 234, 263, 265, 276, 285, 286, 287, 291, 298, 301, 307, 565, 604, 612], "nbest_predict": [183, 219, 612], "question": [183, 219, 231, 232, 273, 274, 513, 514, 519, 576, 581, 612, 615], "becaus": [183, 219, 230, 261, 272, 291, 515, 603, 607, 612, 613], "long": [183, 219, 572, 612], "document": [183, 219, 514, 569, 579, 583, 593, 596, 597, 609, 612], "chunk": [183, 219, 612], "how": [183, 219, 220, 226, 241, 242, 261, 288, 291, 298, 514, 515, 517, 519, 562, 564, 565, 567, 568, 569, 574, 592, 593, 596, 597, 598, 603, 604, 607, 612, 613, 614], "much": [183, 219, 220, 226, 288, 567, 592, 603, 604, 612], "stride": [183, 219, 292, 612], "process_result": [183, 219], "get_postprocess_result": [183, 219], "tfmodelzoocollecttransform": [183, 219], "tfsquadv1modelzooposttransform": [183, 219], "squadv1": [183, 219, 612], "see": [183, 219, 227, 230, 246, 269, 272, 513, 515, 517, 562, 577, 591, 592, 595, 598, 599, 611, 613, 615], "parsedecodevoctransform": [183, 219], "set_env_var": 184, "env_var": 184, "overwrite_exist": 184, "environ": [184, 268, 432, 464, 465, 473, 497, 513, 562, 563, 576, 591, 595, 598, 613], "env": [184, 469, 477], "set_all_env_var": 184, "physic": [184, 513, 563], "core": [184, 226, 241, 329, 349, 562, 563, 577, 591, 595, 602, 615], "get_architectur": 184, "architectur": [184, 237, 238, 248, 249, 250, 252, 548, 563, 567, 576, 603, 604, 605], "get_threads_per_cor": 184, "thread": [184, 500, 562, 564, 602], "get_thread": 184, "get_physical_id": 184, "socket": [184, 329, 472, 501, 602, 615], "get_core_id": 184, "get_bounded_thread": 184, "core_id": 184, "bind": 184, "command": [184, 226, 248, 319, 349, 360, 363, 370, 376, 378, 379, 446, 469, 477, 497, 562, 569, 581, 583, 586, 591, 595, 599], "unnecessari": [184, 226], "Not": [184, 193, 226, 253, 258, 315, 316, 317, 329, 468, 516], "summary_benchmark": [184, 226], "config_inst": [184, 226], "trigger": [184, 226, 263, 298, 514], "generate_prefix": [184, 226], "core_list": [184, 226], "numactl": [184, 226, 584, 592], "run_inst": [184, 226], "critet": 185, "tensorflowcrossentropyloss": 185, "pytorchcrossentropyloss": 185, "tensorflowknowledgedistillationloss": 185, "pytorchknowledgedistillationloss": 185, "pytorchintermediatelayersknowledgedistillationloss": 185, "tensorflowcriterion": 185, "pytorchcriterion": 185, "criterion_cl": 185, "criterion_registri": 185, "criterion_typ": 185, "registry_criterion": 185, "param_dict": [185, 190, 239], "crossentropyloss": [185, 567], "tensorflowsparsecategoricalcrossentropi": 185, "sparsecategoricalcrossentropyloss": 185, "knowledgedistillationframework": 185, "student_model": [185, 220, 226], "knowledgedistillationloss": [185, 614], "teacher_model_forward": 185, "notimplementederror": [185, 233, 234, 275, 276], "teacher_student_loss_c": 185, "student_output": [185, 193, 226, 319, 567, 568], "teacher_output": [185, 193, 220, 226, 319], "student_targets_loss_c": 185, "groud": 185, "truth": [185, 231, 232, 273, 274], "loss_cal": 185, "loss_cal_sloss": 185, "student_loss": [185, 193, 226, 319, 567, 568], "softcrossentropi": 185, "logit": [185, 567], "ground": [185, 231, 232, 273, 274], "kullbackleiblerdiverg": 185, "pytorchknowledgedistillationlosswrapp": 185, "tensorflowknowledgedistillationlosswrapp": 185, "tensorflowknowledgedistillationlossextern": 185, "intermediatelayersknowledgedistillationloss": [185, 492], "init_loss_func": 185, "init_feature_match": 185, "student_featur": 185, "teacher_featur": 185, "matcher": [185, 599], "clear_featur": 185, "register_hooks_for_model": 185, "attributeerror": 185, "remove_all_hook": 185, "pytorch_linear_feature_match": 185, "pytorchintermediatelayersknowledgedistillationlosswrapp": 185, "selfknowledgedistillationloss": [185, 492], "selfknowledg": 185, "pytorchselfknowledgedistillationloss": 185, "l2diverg": 185, "feature1": 185, "feature2": 185, "pytorchselfknowledgedistillationlosswrapp": 185, "setter": [186, 187], "calib_dataload": [186, 187, 226, 266, 267, 286, 303, 515, 518, 564, 565, 574, 578, 607], "known": [186, 187, 306, 518, 571, 603, 611, 613], "open": [187, 226, 268, 477, 511, 513, 518, 562, 571, 572, 593, 596, 599, 605], "librari": [187, 226, 268, 511, 514, 518, 576, 583, 592, 598, 605, 607], "recommend": [187, 188, 275, 276, 519, 565, 571, 573, 589, 592, 597, 599, 603, 606, 613], "tensorflowoptim": 190, "pytorchoptim": 190, "optimizer_cl": 190, "allow": [190, 306, 325, 501, 562, 567, 569, 578, 579, 606, 614], "optimizer_registri": 190, "optimizer_typ": 190, "cross": [190, 233, 234, 275, 276, 574, 613], "tensorflowsgd": 190, "tensorflowadamw": 190, "tensorflow_addon": 190, "adamw": 190, "tensorflowadam": 190, "adam": [190, 614], "pytorchsgd": 190, "record_output": 192, "output_process": 192, "get_activ": 192, "mainli": [193, 226, 265, 291, 301, 604, 607], "shot": [193, 226, 263, 265, 288, 301, 516, 575, 603, 604, 605], "train_func": [193, 226, 267, 569, 607], "train_dataload": [193, 226, 603], "prepare_qat": [193, 226], "pre_process": [193, 220, 226, 237, 249, 253, 258, 266, 569], "compress": [193, 226, 253, 258, 268, 319, 511, 518, 567, 575, 598, 600, 601, 603, 604, 605, 607], "post_process": [193, 226], "on_train_begin": [193, 226, 253, 258, 263, 264, 297, 298, 299, 319, 515, 567, 568, 601, 603, 607], "Be": [193, 226, 230, 272, 292, 296, 297], "epoch": [193, 220, 226, 253, 258, 263, 264, 292, 295, 296, 297, 298, 299, 319, 567, 568, 569, 601, 603, 614], "on_train_end": [193, 226, 253, 258, 263, 264, 297, 298, 299, 319, 567, 568, 601, 603, 607], "pre_epoch_begin": [193, 226, 253, 258], "post_epoch_end": [193, 226, 253, 258], "on_step_begin": [193, 226, 253, 258, 263, 264, 288, 292, 295, 296, 297, 298, 299, 319, 322, 567, 568, 601, 603], "batch_id": [193, 226, 292, 295, 296, 297, 319], "on_batch_begin": [193, 226, 253, 258], "on_after_compute_loss": [193, 226, 253, 258, 319, 567, 568, 601], "on_before_optimizer_step": [193, 226, 263, 264, 288, 293, 297, 298, 299, 300, 319, 567, 568, 601, 603], "on_after_optimizer_step": [193, 226, 263, 264, 288, 298, 299, 300, 319, 603], "on_before_ev": [193, 226, 263, 264, 298, 299], "on_after_ev": [193, 226, 263, 264, 298, 299], "on_post_grad": [193, 226], "on_step_end": [193, 226, 253, 258, 263, 264, 292, 295, 296, 297, 298, 299, 319, 322, 567, 568, 601, 603], "on_batch_end": [193, 226, 253, 258], "register_hook": [193, 226], "input_arg": [193, 226], "input_kwarg": [193, 226], "compon": [220, 226, 237, 249, 253, 258, 266, 267, 268, 319, 465, 500, 503, 515, 518, 569, 576, 577, 581, 598, 601, 602], "relat": [220, 226, 230, 244, 245, 253, 258, 261, 272, 300, 322, 412, 415, 417, 422, 502, 505, 506, 507, 510, 581, 614], "_epoch_ran": [220, 226], "ran": [220, 226], "eval_frequ": [220, 226], "frequenc": [220, 226, 263, 298, 602, 603, 614], "term": [220, 226, 298, 300, 514, 567, 577, 578, 600, 601, 613], "best_scor": [220, 226], "best_model": [220, 226], "found": [220, 226, 237, 238, 249, 250, 306, 312, 468, 484, 501, 518, 562, 579, 586, 613], "train_cfg": [220, 226, 322], "evaluation_distribut": [220, 226, 253, 258], "train_distribut": [220, 226, 253, 258], "on_post_forward": [220, 226], "deprec": [220, 226, 484, 593, 596, 612], "init_train_cfg": [220, 226], "create_criterion": [220, 226], "create_optim": [220, 226], "disil": [220, 226], "generate_hook": [220, 226, 253, 258], "qlinear2qdq": [221, 226, 268], "torch_to_fp32_onnx": [221, 223], "do_constant_fold": [221, 223, 286], "verbos": [221, 223, 239, 240, 241, 286, 306], "int8_model": [221, 223, 519], "ax": [221, 223, 286], "torch_to_int8_onnx": [221, 223], "u8s8": [221, 223], "optionl": [221, 223], "qdq_op_int32_bia": [221, 223, 571], "qdq_op_fp32_bias_qdq": [221, 223, 571], "onnx_qlinear_to_qdq": [221, 222], "input_name_to_nod": [221, 222, 284], "qlinearop": [221, 222, 575, 589, 607], "check_model": 222, "update_weight_bia": 223, "fp32_onnx_path": [223, 224], "wegiht": 223, "set_data_typ": 223, "weight_typ": 223, "activation_typ": 223, "get_node_map": 223, "module_node_map": 223, "get_quantizable_onnx_op": 223, "quantize_nod": 223, "build_scale_map": 223, "int8_scale_info": 223, "scale_zp_dict": 223, "set_scale_info": 223, "int8_onnx_model": 223, "int8_onnx_path": 223, "recalculate_bia": 223, "recalcul": [223, 291], "remove_nodes_by_nam": 223, "sub_graph_with_int32_bia": 223, "a_info": 223, "b_info": 223, "qdq_fp32_bia": 223, "excut": 223, "qdq_int32_bia": 223, "qdq_fp32_bias_qdq": 223, "onnx2numpy_dtyp": 224, "onnx_node_typ": 224, "dummydataread": 224, "achiev": [225, 226, 266, 571, 578, 601, 603, 604, 605, 607, 611, 613], "within": [225, 226, 230, 266, 272, 285, 298, 306, 513, 515, 579, 591, 595, 598, 605], "variou": [225, 226, 235, 266, 277, 575, 581, 604, 606], "dl": [225, 226, 235, 253, 258, 266, 277, 574, 585, 598, 605], "bring": [225, 226, 266, 592, 607], "work": [225, 226, 253, 258, 266, 517, 564, 567, 593, 596, 603, 604, 608, 609, 611], "sinc": [225, 226, 227, 253, 258, 266, 269, 325, 453, 539, 567, 571, 578, 592, 598, 601], "vari": [225, 226, 253, 258, 266, 602, 615], "roc": [225, 226, 234, 253, 258, 266, 276], "criteria": [225, 226, 253, 258, 261, 263, 266, 268, 289, 312, 515, 598], "footprint": [225, 226, 253, 258, 266, 287, 568, 600, 603, 604, 606], "flexibl": [225, 226, 253, 258, 266, 567, 603, 604], "set_config_by_model": [225, 226, 235], "model_obj": [225, 226, 235], "popular": [226, 268, 511, 518, 519, 567, 571, 603, 607, 613], "techniqu": [226, 268, 511, 518, 575, 581, 601, 603, 604, 606, 607, 614], "bleu": [226, 228, 233, 247, 268, 270, 275, 578], "bleu_util": [226, 233, 268, 275], "coco_label_map": [226, 233, 268, 275], "coco_tool": [226, 233, 268, 275], "evaluate_squad": [226, 233, 268, 275], "dynast": [226, 249, 268], "supernetwork": [226, 239, 242, 243, 249], "dynas_manag": [226, 242, 243, 249], "dynas_predictor": [226, 242, 243, 249], "dynas_search": [226, 243, 249], "dynas_util": [226, 241, 243, 249], "basic_na": [226, 249, 268], "dyna": [226, 239, 240, 241, 242, 243, 249, 268, 516, 575, 606], "nas_util": [226, 249, 268], "pruning_recip": [226, 268], "tile_pattern": [226, 254, 255], "pytorch_prun": [226, 268, 299], "logger": [226, 259, 268, 289, 320, 323, 329, 465, 469, 473], "prune_util": [226, 259, 268], "pruner": [226, 253, 258, 259, 261, 264, 268, 492, 495, 603, 614], "schedul": [226, 259, 263, 268, 289, 295, 298, 300, 319, 548, 601], "graph_optim": [226, 235, 268, 336, 405, 440, 444, 445, 465, 473, 489], "mixed_precis": [226, 268, 338, 405, 440, 465, 473, 489], "model_convers": [226, 268], "pruning_v2": [226, 268], "quantconf": [226, 266, 277, 303], "qfunc": [226, 266], "routinu": [226, 266], "pruningconf": [226, 253, 258], "pruning_func": [226, 253, 258], "update_items_for_all_prun": [226, 253, 264], "argument": [226, 246, 248, 253, 258, 264, 267, 299, 331, 439, 443, 448, 451, 457, 469, 477, 497, 516], "howev": [226, 253, 258, 264, 299, 571, 603], "still": [226, 253, 258, 264, 299, 607, 608], "analys": [226, 253, 258, 264], "generate_prun": [226, 253, 258], "flow": [226, 231, 232, 253, 258, 273, 274, 515, 516], "dens": [226, 253, 258, 265, 301, 603, 604, 615], "spars": [226, 253, 258, 263, 298, 565, 603, 604, 605], "get_sparsity_ratio": [226, 253, 258, 261, 264, 291, 299], "sparsiti": [226, 253, 257, 258, 261, 263, 264, 265, 285, 286, 291, 295, 296, 297, 298, 299, 301, 329, 518, 565, 575, 603, 615], "elementwise_over_matmul_gemm_conv": [226, 253, 258, 264, 299], "elementwise_over_al": [226, 253, 258, 264, 299], "blockwise_over_matmul_gemm_conv": [226, 253, 258, 264, 299], "graphoptim": [226, 235, 336, 437, 488], "privat": [226, 235, 513], "member": [226, 235, 513, 519], "modelconvers": [226, 236, 548], "unicoderegex": [227, 269], "hoc": [227, 269], "hack": [227, 269], "nondigit_punct_r": [227, 269], "compil": [227, 269, 602], "preced": [227, 269], "digit": [227, 269, 605], "punct_nondigit_r": [227, 269], "symbol_r": [227, 269], "property_char": [227, 269], "join": [227, 269], "bleu_token": [227, 269], "mose": [227, 269], "smt": [227, 269], "mosesdecod": [227, 269], "master": [227, 228, 231, 232, 261, 264, 269, 270, 273, 274, 291, 299], "mteval": [227, 269], "v14": [227, 269], "pl": [227, 269], "l954": [227, 269], "l983": [227, 269], "bilingu": [227, 269, 539], "understudi": [227, 269, 539], "score": [227, 228, 230, 231, 232, 234, 247, 261, 263, 269, 270, 272, 273, 274, 276, 288, 291, 298, 300, 309, 312, 322, 515, 539, 578, 600, 603, 604, 610, 613], "qualiti": [227, 269, 539], "machin": [227, 245, 269, 344, 539, 562, 571, 576, 584, 598, 605, 611], "natur": [227, 269, 539], "languag": [227, 248, 269, 513, 539, 605], "approxim": [227, 228, 269, 270, 539, 578], "glue": [227, 234, 269, 276, 539, 565, 578, 587], "ngram": [227, 269, 539, 578], "breviti": [227, 228, 269, 270, 539, 578], "penalti": [227, 228, 269, 270, 539, 578], "doe": [227, 230, 239, 269, 272, 304, 539, 565, 578, 609, 612], "beam": [227, 269, 539, 578], "occur": [227, 269, 539], "bleu_scor": [227, 228, 269, 270, 539], "tensor2tensor": [228, 248, 270], "bleu_hook": [228, 270], "compute_bleu": [228, 247, 270], "reference_corpu": [228, 270], "translation_corpu": [228, 270], "max_ord": [228, 270], "use_bp": [228, 270], "against": [228, 270], "gram": [228, 270], "flag": [228, 270, 319, 494], "third": [230, 272, 577], "parti": [230, 272, 577, 607], "pycocotool": [230, 272, 572, 576], "object_detect": [230, 272], "noth": [230, 272, 477, 613], "thu": [230, 272, 607], "cannot": [230, 272, 472, 515, 571, 572, 611], "slim": [230, 272, 283, 285, 580], "jonathanhuang": [230, 272], "image_id": [230, 272, 578], "encod": [230, 239, 248, 272, 612], "groundtruth": [230, 272], "invok": [230, 272], "groundtruth_dict": [230, 272], "exportgroundtruthtococo": [230, 272], "groundtruth_boxes_list": [230, 272], "groundtruth_classes_list": [230, 272], "max_num_class": [230, 272], "output_path": [230, 272, 284, 477], "detections_list": [230, 272], "exportdetectionstococo": [230, 272], "detection_boxes_list": [230, 272], "detection_scores_list": [230, 272], "detection_classes_list": [230, 272], "cocowrapp": [230, 272], "loadannot": [230, 272], "cocoevalwrapp": [230, 272], "agnostic_mod": [230, 272], "computemetr": [230, 272], "detection_typ": [230, 272], "bbox": [230, 272, 515, 578], "hold": [230, 272, 284, 306, 565], "datastructur": [230, 272], "mscoco": [230, 272], "org": [230, 248, 263, 272, 288, 514, 515, 518, 562, 576, 593, 596], "replic": [230, 272], "behavior": [230, 272, 513, 514, 519, 573, 580, 611, 614], "extern": [230, 272, 284, 562], "storag": [230, 272, 518, 578], "category_id": [230, 272], "iou_typ": [230, 272], "iou_thr": [230, 234, 272, 276, 578], "map_point": [230, 234, 272, 276, 578], "cocoev": [230, 272], "Then": [230, 272, 562, 591, 593, 595, 596, 613], "getcategori": [230, 272], "getagnosticmod": [230, 272], "agnost": [230, 272, 567], "getcategoryidlist": [230, 272], "accumul": [230, 272, 305, 315, 316, 613], "p": [230, 272, 562, 599], "include_metrics_per_categori": [230, 272], "all_metrics_per_categori": [230, 272], "summeri": [230, 272], "per_category_ap": [230, 272], "care": [230, 272], "hand": [230, 272, 516, 562], "pollut": [230, 272], "mldash": [230, 272], "summary_metr": [230, 272], "iou": [230, 234, 272, 276], "increment": [230, 246, 248, 272, 613], "50iou": [230, 272], "50": [230, 232, 241, 272, 274, 516, 615], "75iou": [230, 272], "75": [230, 272, 615], "pixel": [230, 272, 612], "medium": [230, 272, 518], "96": [230, 272, 615], "larg": [230, 272, 284, 564, 567, 603, 604, 615], "10000": [230, 272, 306], "recal": [230, 232, 234, 272, 274, 276], "bycategori": [230, 272], "supercategori": [230, 272], "backward": [230, 272, 319, 567, 568, 569, 601, 603, 607, 609], "performancebycategori": [230, 272], "regardless": [230, 272, 513], "category_stat": [230, 272], "exportsingleimagegroundtruthtococo": [230, 272], "next_annotation_id": [230, 272], "category_id_set": [230, 272], "groundtruth_box": [230, 272], "groundtruth_class": [230, 272], "groundtruth_mask": [230, 272], "groundtruth_is_crowd": [230, 272], "ingest": [230, 272], "ones": [230, 272, 604], "exportsingleimagedetectionstococo": [230, 272], "uniqu": [230, 242, 267, 272, 306, 371, 372, 607], "assign": [230, 272, 286, 329, 370, 371, 376, 377, 378, 379, 562, 569, 606], "continu": [230, 261, 272, 291, 307, 516, 599, 603], "num_gt_box": [230, 272], "num_detect": [230, 234, 272, 276, 578, 614], "image_height": [230, 272], "image_width": [230, 272], "detection_mask": [230, 272], "crowd": [230, 272], "exportsingleimagedetectionboxestococo": [230, 272], "detection_box": [230, 272, 614], "detection_scor": [230, 272, 614], "detection_class": [230, 272, 614], "exporsingleimagedetectionboxestococo": [230, 272], "exportsingleimagedetectionmaskstococo": [230, 272], "allenai": [231, 232, 273, 274], "bi": [231, 232, 273, 274], "att": [231, 232, 273, 274], "f1_score": [231, 232, 273, 274], "ground_truth": [231, 232, 273, 274], "metric_max_over_ground_truth": [231, 232, 273, 274], "metric_fn": [231, 232, 273, 274], "exact_match_scor": [231, 273], "exact": [231, 273], "articl": [231, 232, 273, 274], "paragraph": [231, 232, 273, 274], "qa": [231, 232, 273, 274], "cantain": [231, 232, 273, 274], "normalize_answ": [232, 274], "extra": [232, 274], "newlin": [232, 274], "tab": [232, 274, 373, 376, 382, 500, 598, 611], "harmon": [232, 234, 274, 276], "answer_start": [232, 274], "177": [232, 274], "denver": [232, 274], "bronco": [232, 274], "nfl": [232, 274], "team": [232, 274, 513, 608], "afc": [232, 274], "super": [232, 239, 242, 274, 516], "bowl": [232, 274], "56be4db0acb8001400a502ec": [232, 274], "percentag": [232, 240, 274, 614], "single_output": [233, 234, 275, 276], "hvd": [233, 234, 275, 276, 569], "sample_weight": [233, 234, 275, 276], "metric_registri": [233, 234, 275, 276], "metric_typ": [233, 234, 275, 276], "decorator_metr": [233, 234, 275, 276], "tensorflowmetr": [234, 276], "maintain": [234, 276, 513, 514, 518, 580, 581, 593, 596, 603, 609], "pytorchmetr": [234, 276], "mxnetmetr": [234, 276], "onnxrtqlmetr": [234, 276], "onnxrtitmetr": [234, 276], "wrappytorchmetr": [234, 276], "wrapmxnetmetr": [234, 276], "wraponnxrtmetr": [234, 276], "proport": [234, 276], "were": [234, 276, 584], "pred_list": [234, 276], "pytorchloss": [234, 276], "least": [234, 264, 276, 291, 299, 478, 603, 604, 613], "sum": [234, 276, 567], "mae": [234, 276, 578], "magnitud": [234, 268, 276, 288, 289, 293, 294, 575, 603, 604, 615], "numer": [234, 276, 579, 605, 607], "rmse": [234, 240, 276, 578, 613], "squar": [234, 240, 276, 311, 578, 613], "tensorflowtopk": [234, 276], "k": [234, 276, 578, 603], "among": [234, 276, 592], "most": [234, 276, 306, 562, 579, 603, 607, 613], "outcom": [234, 276], "num_correct": [234, 276], "generaltopk": [234, 276], "cocomapv2": [234, 276, 578], "anno_path": [234, 276, 578], "map_kei": [234, 276], "detectionboxes_precis": [234, 276], "output_index_map": [234, 276, 578], "tensorflowmap": [234, 276], "tensorflowcocomap": [234, 276], "tensorflowvocmap": [234, 276], "squadf1": [234, 276, 578], "miou": [234, 276], "num_class": [234, 276], "21": [234, 276, 587, 615], "intersect": [234, 276, 519, 578], "hist": [234, 276, 324], "onnxrtglu": [234, 276], "dlrm": [234, 276], "basicna": [237, 249], "model_build": [237, 249, 250], "nasbas": [237, 238, 249, 250, 516], "conf_fnam": [237, 249], "init_by_cfg": [237, 249], "init_for_search": [238, 249], "select_model_arch": [238, 249, 250], "create_acc_predictor": [238, 249], "predictor": [238, 239, 240, 242, 249, 516], "create_macs_predictor": [238, 249], "mac": [238, 240, 242, 247, 249, 516, 599], "create_latency_predictor": [238, 249], "latenc": [238, 239, 240, 242, 247, 249, 482, 610, 613], "init_cfg": [238, 249], "manag": [239, 240, 241, 242, 348, 381, 383, 406, 467, 483, 518, 581, 582, 592], "parametermanag": [239, 242], "hot": 239, "pymoo": [239, 241, 242], "process_param_dict": 239, "upper": [239, 241, 598], "vector": [239, 250, 252], "onehot_gener": 239, "in_arrai": 239, "onehot": 239, "account": [239, 513, 610, 613], "depth": [239, 315, 317, 567, 608], "input_arrai": 239, "elast": 239, "mapper": [239, 370, 433, 434], "random_sampl": [239, 306], "subnetwork": [239, 242], "trial_limit": 239, "100000": 239, "translate2param": 239, "pymoo_vector": 239, "translate2pymoo": 239, "import_csv": 239, "filepath": 239, "column_nam": 239, "drop_dupl": 239, "panda": 239, "datafram": [239, 285, 286], "csv": [239, 242, 484, 516, 562], "purpos": [239, 573, 579, 598, 606], "subnet": [239, 242], "column": [239, 562, 603], "df": [239, 285, 286], "set_se": 239, "create_training_set": 239, "train_with_al": 239, "sklearn": 239, "transformerltencod": 239, "alpha": [240, 288, 300], "default_alpha": 240, "cost_factor": 240, "default_cost_factor": 240, "max_iter": 240, "default_max_iter": 240, "regressor": 240, "get_paramet": 240, "get_metr": [240, 322, 346], "mape": 240, "kendal": 240, "rank": [240, 569], "correl": 240, "spearman": 240, "searcher": [240, 252], "searchalgomanag": 241, "nsga2": [241, 516], "optuna": 241, "configure_nsga2": 241, "popul": [241, 516], "num_ev": [241, 516], "1000": [241, 482, 614], "warm_pop": 241, "crossover_prob": 241, "crossover_eta": 241, "mutation_prob": 241, "02": [241, 615], "mutation_eta": 241, "configure_ag": 241, "ag": [241, 513], "run_search": 241, "save_histori": 241, "previous": [241, 564], "problemmultiobject": 241, "evaluation_interfac": 241, "evaluationinterfac": [241, 242], "param_count": 241, "param_upperbound": 241, "supernet": [241, 242, 244, 245, 516], "ofa": [241, 242], "mobilenetv3": [241, 242, 516], "45": [241, 515, 615], "get_mac": 242, "input_s": 242, "measure_lat": 242, "warmup_step": 242, "measure_step": 242, "resolut": 242, "warm": [242, 287], "adjust": [242, 291, 589, 607], "runner": [242, 599], "ofarunn": 242, "acc_predictor": 242, "macs_predictor": 242, "latency_predictor": 242, "datasetpath": 242, "resnet50": [242, 518, 569, 581, 585, 607, 610, 615], "w1": 242, "ilsvrc2012": [242, 516], "estimate_accuracy_top1": 242, "subnet_cfg": 242, "top1": [242, 607], "estimate_mac": 242, "estimate_lat": 242, "validate_top1": 242, "validate_mac": 242, "flop": 242, "fvcore": 242, "get_subnet": 242, "transformerltrunn": 242, "checkpoint_path": [242, 247], "predictor_mod": 242, "csv_path": 242, "written": 242, "eval_subnet": 242, "clear_csv": 242, "evaluationinterfaceresnet50": 242, "evaluationinterfacemobilenetv3": 242, "evaluationinterfacetransformerlt": 242, "get_torchvision_model": 242, "torchvisionrefer": 242, "dataset_path": [242, 247, 485, 516], "baselin": [242, 287, 314, 322, 610, 611], "subprocess": [242, 477, 500], "machine_transl": [243, 244, 249], "transformer_interfac": [243, 244, 245], "lt": [245, 516, 565, 602], "get_incremental_st": 246, "incremental_st": [246, 248], "set_incremental_st": 246, "multiheadattentionsup": 246, "super_embed_dim": 246, "num_head": 246, "is_encod": 246, "super_kdim": 246, "super_vdim": 246, "dropout": [246, 248], "add_bias_kv": [246, 248], "add_zero_attn": [246, 248], "self_attent": 246, "encoder_decoder_attent": 246, "out_dim": 246, "qkv_dim": 246, "head": [246, 248, 603], "key_padding_mask": 246, "need_weight": 246, "static_kv": 246, "attn_mask": [246, 248], "timestep": 246, "bytetensor": [246, 248], "src_len": [246, 248], "reorder_incremental_st": 246, "new_ord": [246, 248], "buffer": [246, 285], "compute_lat": 247, "get_model_paramet": 247, "compute_mac": 247, "transformersupernetwork": 248, "fairseq": 248, "vaswani": 248, "2017": 248, "arxiv": [248, 263, 288], "1706": 248, "03762": 248, "transformerencod": 248, "transformerdecod": 248, "line": [248, 476, 477, 497, 562, 569, 575, 581, 586, 587, 603, 611], "encoder_config": 248, "embed_token": 248, "encoder_lay": 248, "transformerencoderlay": 248, "argpars": [248, 598], "namespac": 248, "src_token": 248, "src_length": 248, "longtensor": 248, "sentenc": 248, "encoder_out": 248, "embed_dim": 248, "encoder_padding_mask": 248, "reorder_encoder_out": 248, "rearrang": 248, "max_posit": 248, "upgrade_state_dict_nam": 248, "upgrad": 248, "possibli": 248, "old": [248, 264, 329, 609], "decoder_config": 248, "no_encoder_attn": 248, "decoder_lay": 248, "transformerdecoderlay": 248, "attend": 248, "prev_output_token": 248, "tgt_len": 248, "forc": [248, 325, 579, 608], "extract_featur": 248, "output_lay": 248, "layer_idx": 248, "paper": [248, 567, 603, 604], "ffn": 248, "residu": 248, "suggest": [248, 252, 306, 515, 610], "learn": [248, 518, 519, 564, 565, 571, 574, 575, 576, 579, 581, 583, 586, 587, 589, 592, 593, 596, 598, 604, 605, 607, 611, 613], "robust": 248, "encoder_normalize_befor": 248, "norm": 248, "layer_norm": 248, "self_attn_layer_norm": 248, "final_layer_norm": 248, "seq_len": 248, "t_tgt": 248, "t_src": 248, "decoder_normalize_befor": 248, "prev_self_attn_st": 248, "prev_attn_st": 248, "self_attn_mask": 248, "self_attn_padding_mask": 248, "builder": [250, 285], "propos": [250, 291, 516, 519, 567, 579, 603], "res_save_path": 250, "count_model_paramet": 250, "load_search_result": 250, "dump_search_result": 250, "params_vec2params_dict": [250, 252], "paras_vec": 250, "find_best_model_arch": 250, "lie": [250, 516], "pareto": [250, 251, 516], "front": [250, 251, 516], "metrics_convers": 250, "init_search_cfg": 250, "nas_registri": 251, "nas_method": 251, "create_search_space_pool": 251, "idx": [251, 284, 565], "enumer": [251, 319, 333, 434, 440, 466, 519, 567, 568, 569, 601, 603, 611], "find_pareto_front": 251, "n_point": 251, "n_metric": 251, "n_pareto_point": 251, "get_feedback": 252, "feedback": 252, "para_vec": 252, "gridsearch": 252, "grid": [252, 516], "whole": [252, 499, 562, 607, 615], "exhaust": [252, 268, 310, 606], "randomsearch": 252, "42": [252, 602, 615], "bayesianoptimizationsearch": 252, "bayesian": [252, 268, 310, 516, 606], "indices2params_vec": 252, "tfpruningcallback": [253, 258], "input_model": [253, 258, 580, 611], "pure": [253, 258], "s_output": [253, 258], "s_loss": [253, 258], "t_output": [253, 258], "support_pattern": [254, 255, 256], "pattern_registri": 256, "pattern_typ": 256, "patternbas": [256, 257], "mask_shap": [256, 257], "is_contigu": 256, "compute_spars": [256, 257, 329], "abs_sum": 256, "abs_max": 256, "tile": 257, "tilepatternbas": 257, "nxm": [257, 261, 291, 298, 604], "matrix": [257, 518, 589, 604], "repeat_mask": 257, "ori_shap": 257, "repeat": [257, 613], "tilepattern_1x1": 257, "1x1": [257, 567, 603], "unstructur": [257, 575, 603, 604, 615], "tilepattern_2x2": 257, "2x2": 257, "tilepattern_1x16": 257, "1x16": 257, "tilepattern_4x1": 257, "tilepattern_1x2": 257, "1x2": 257, "update_config": [258, 299], "register_pattern": [261, 291], "registri": [261, 263, 265, 288, 291, 298, 300, 301, 516], "get_pattern": [261, 291], "assertionerror": [261, 262, 263, 277, 291, 298, 302], "unit": [261, 291, 476, 484, 514], "is_glob": [261, 291], "contrast": [261, 291, 612], "get_mask": [261, 291], "target_sparsity_ratio": [261, 263, 291, 298], "pre_mask": [261, 291], "max_sparsity_ratio_per_lay": [261, 263, 606], "get_masks_glob": [261, 291], "get_mask_singl": 261, "exact_sparsity_ratio": [261, 291], "obtain": [261, 262, 265, 291, 299, 300, 301, 302, 515, 571, 604, 610, 613], "get_block_size_dict": [261, 291], "get_masks_loc": [261, 291], "calul": [261, 291], "ration": [261, 291], "get_pattern_lock_mask": [261, 291], "lock": [261, 291, 296, 297, 575, 601, 603, 604], "patternnxm": [261, 291], "kept": [261, 291], "block_siz": [261, 291], "hidden": [261, 291, 484, 519, 603], "block_size_1": [261, 291], "block_size_2": [261, 291], "keep_pre_mask": [261, 291], "keep": [261, 262, 302, 307, 515, 519, 597, 598, 609, 613], "unchang": [261, 291], "patternninm": [261, 291], "doc": [261, 291, 315, 316, 317, 329, 578, 593, 596], "md": [261, 291, 569], "check_config": [262, 302], "prune_config": [262, 302], "everyth": [262, 302, 586], "reset_non_value_to_default": 262, "undefin": [262, 302], "process_and_check_config": [262, 302], "obejct": 262, "process_config": [262, 302], "parse_to_prun": [262, 302], "parse_not_to_prun": 262, "register_prun": [263, 298], "get_prun": [263, 298], "module_nam": [263, 265, 288, 298, 300, 301, 329, 484], "cuurent": [263, 298], "current_sparsity_ratio": [263, 298], "global_step": [263, 298], "update_frequency_on_step": [263, 606], "mask_weight": [263, 298], "formal": [263, 298], "local_step": [263, 264, 298, 299], "judg": 263, "Or": 263, "simpli": [263, 569, 580, 581, 583, 586, 598], "check_is_pruned_step": [263, 298], "update_scor": 263, "magnitudeprun": 263, "snipprun": 263, "snip": [263, 288, 575, 603, 604, 615], "1810": [263, 288], "02340": [263, 288], "snipmomentumprun": 263, "moreoev": 263, "momentum": [263, 288, 575, 603, 604, 614], "patternlockprun": [263, 296, 298], "templat": [264, 268, 299, 352, 371, 376, 465, 473, 510, 562, 603], "tree": [264, 299, 347, 376, 378], "nlp": [264, 299, 586, 603, 604, 607], "huggingface_model": [264, 299], "config_file_path": [264, 299], "pruner_info": [264, 299], "register_schedul": [265, 301], "get_schedul": [265, 301], "gradual": [265, 301, 603, 604], "update_sparsity_ratio": [265, 301], "aggressive_ratio": 265, "current_prune_step": [265, 301], "total_prune_step": [265, 301], "oneshotschedul": [265, 301], "aggress": 265, "iterativeschedul": [265, 301], "target_ratio": [265, 301], "server": [267, 268, 405, 412, 464, 465, 472, 473, 481, 484, 495, 497, 499, 562, 598], "seper": 267, "opt_model": 267, "fulli": [267, 607], "meet": [267, 304, 307, 312, 515, 571, 600, 605, 606, 607, 611, 613], "saniti": 267, "illeg": 267, "sync": 267, "accordingli": [267, 295, 589], "contrib": 268, "base_model": [268, 279, 280, 282, 284, 285, 286], "keras_model": [268, 279], "mxnet_model": [268, 279], "nets_factori": [268, 279], "onnx_model": [268, 279, 416], "tensorflow_model": [268, 279], "torch_model": [268, 279], "pruner_legaci": [268, 289], "gradient_sensit": [268, 289, 294], "group_lasso": [268, 289, 294], "pattern_lock": [268, 289, 294], "reg": [268, 289, 298], "tuning_sampl": [268, 310, 315], "tuning_spac": [268, 310, 315, 316, 318], "tuning_struct": [268, 310, 315, 316], "auto_mixed_precis": [268, 310], "conserv": [268, 310], "hawq_v2": [268, 310], "mse_v2": [268, 310], "collect_layer_histogram": [268, 323], "create_obj_from_config": [268, 323], "kl_diverg": [268, 323], "load_huggingfac": [268, 323], "ux": 268, "config_gener": [268, 405, 465], "configuration_wizard": [268, 405, 465], "db_manag": [268, 405, 465, 503], "file_brows": [268, 405, 465], "jobs_manag": [268, 405, 465], "model_zoo": [268, 405, 465], "names_mapp": [268, 405, 465], "profil": [268, 339, 357, 364, 366, 376, 379, 381, 382, 405, 413, 421, 465, 466, 476, 482, 499, 504], "manage_workspac": [268, 405, 465], "workload": [268, 334, 335, 336, 338, 340, 341, 344, 366, 371, 376, 436, 453, 460, 465, 467, 473, 483, 484, 499, 502, 504, 505, 506, 507, 605], "executor": [268, 332, 465, 473], "expiring_dict": [268, 465, 473], "github_info": [268, 465, 473], "hw_info": [268, 465, 473], "json_seri": [268, 335, 389, 390, 395, 397, 398, 401, 411, 420, 446, 452, 465, 472, 473, 482, 485, 486, 487, 488, 490, 491, 492, 493, 494], "proc": [268, 465, 473], "status_upd": [268, 465, 473], "yaml_util": [268, 465, 473], "web": [268, 464, 465, 562, 611], "servic": [268, 465, 498, 499, 598, 602], "commun": [268, 465, 499, 500, 501, 513, 562], "router": [268, 465, 499], "inc_bench": [268, 465, 518, 562], "mix_precis": [268, 579], "set_random_se": [268, 329, 494], "set_tensorboard": [268, 329], "set_workspac": [268, 329, 485, 494], "eval_metr": [277, 303], "hybirdblock": [277, 303], "paramt": [277, 303], "basemodel": [278, 279, 280, 282, 284, 285, 286], "plai": [278, 279, 603, 605], "role": [278, 279, 603], "node_typ": [278, 279], "kerasmodel": [280, 423], "get_model_fwk_nam": 281, "fwk": 281, "net": 283, "factori": [283, 386, 405, 440, 456, 461, 465, 476, 480], "tfslimnetsfactori": 283, "model_func": 283, "arg_scop": 283, "onnxmodel": [284, 416], "large_s": 284, "ort": 284, "about": [284, 288, 384, 413, 469, 471, 472, 477, 478, 513, 562, 564, 608, 615], "output_name_to_nod": 284, "ir_vers": 284, "opset_import": 284, "nodes_to_remov": 284, "nodes_to_add": 284, "add_initi": 284, "get_initi": 284, "remove_initi": 284, "init_to_remov": 284, "set_initi": 284, "get_children": 284, "get_par": 284, "find_node_by_nam": 284, "new_nodes_list": 284, "find_nodes_by_initi": 284, "get_scale_zero": 284, "save_model_to_fil": 284, "use_external_data_format": 284, "2gb": 284, "replace_node_input": 284, "new_input_nam": 284, "replace_input_of_all_nod": 284, "white_optyp": 284, "black_optyp": 284, "replace_node_output": 284, "new_output_nam": 284, "replace_output_of_all_nod": 284, "remove_unused_const": 284, "topological_sort": 284, "enable_subgraph": 284, "topolog": 284, "get_nodes_chain": 284, "start_nod": 284, "stop_nod": 284, "result_chain": 284, "chain": 284, "get_model_typ": [285, 414], "validate_graph_nod": 285, "validate_and_inference_input_output": 285, "input_tensor_nam": 285, "output_tensor_nam": 285, "graph_sess": 285, "graph_def_sess": 285, "frozen_pb_sess": 285, "load_saved_model": 285, "saved_model_tag": 285, "serv": [285, 501, 509], "signatur": 285, "saved_model_dir": 285, "tag": [285, 325, 471, 484, 611], "metagraphdef": 285, "keras_sess": 285, "slim_sess": 285, "checkpoint_sess": 285, "estimator_sess": 285, "saved_model_sess": 285, "renturn": 285, "workspace_path": [285, 286, 469, 484], "tensorflowsavedmodelmodel": 285, "get_all_weight_nam": [285, 286], "update_weight": [285, 286, 296], "new_tensor": [285, 286], "get_weight": [285, 286], "wight": 285, "report_spars": [285, 286], "total_spars": [285, 286], "build_saved_model": 285, "savedmodelbuild": 285, "protocol": 285, "asset": 285, "tensorflowqatmodel": 285, "tensorflowcheckpointmodel": 285, "checkpoint": [285, 328, 580], "tensorflowmodel": [285, 392, 421, 423, 424, 425, 426], "pytorchbasemodel": 286, "register_forward_pre_hook": 286, "remove_hook": 286, "generate_forward_pre_hook": 286, "update_gradi": 286, "grad_nam": 286, "new_grad": 286, "grad": 286, "prune_weights_": 286, "place": [286, 568, 576, 603, 611], "get_input": 286, "get_gradi": 286, "pytorchmodel": [286, 292, 293, 295, 296, 297], "quantized_state_dict": 286, "load_quantized_state_dict": 286, "stat_dict": 286, "export_to_jit": 286, "jit": [286, 581, 583, 588, 611], "export_to_fp32_onnx": 286, "rand": [286, 581], "stdout": 286, "export_to_bf16_onnx": 286, "export_to_int8_onnx": 286, "s8s8": 286, "pytorchfxmodel": 286, "ipexmodel": 286, "driven": [287, 518, 579, 598, 600, 611], "objective_registri": 287, "objective_custom_registri": 287, "obj_cl": 287, "sart": 287, "result_list": 287, "loop": [287, 319, 515, 516, 573, 610, 613], "durat": [287, 314, 349, 360, 363, 370, 376, 378, 379, 469, 610], "alloc": 287, "models": [287, 600, 606], "multiobject": [287, 494], "metric_criterion": 287, "metric_weight": 287, "obj_criterion": 287, "obj_weight": 287, "is_measur": 287, "accuracy_target": 287, "accuracy_meet": 287, "verifi": 287, "set_model": 287, "best_result": 287, "tune_data": 287, "acc1": 287, "obj1": 287, "obj2": 287, "acc2": 287, "register_criterion": 288, "get_criterion": 288, "pruningcriterion": 288, "magnitudecriterion": 288, "criterion_class": 288, "determin": [288, 291, 298, 324, 497, 513, 515, 604], "magtinud": 288, "gradientcriterion": 288, "snipcriterion": 288, "product": [288, 575, 579, 581, 582, 598, 602, 605, 607, 610, 613], "snipmomentumcriterion": 288, "mechan": [288, 610], "preserv": 288, "basepattern": [291, 300], "keep_mask_lay": 291, "invalid_lay": 291, "reduce_tensor": 291, "along": [291, 477, 576], "unprun": 291, "get_single_mask_per_target_ratio": 291, "return_dict": 291, "zero_cnt": 291, "total_cnt": 291, "check_layer_valid": 291, "get_reduced_masks_from_data": 291, "update_residual_cnt": 291, "get_sparsity_ratio_each_lay": 291, "sparsity_ratio": 291, "cnt": 291, "sparsityinfo": 291, "adjust_ratio": 291, "key_new_spars": 291, "max_sparsity_ratio": 291, "min_sparsity_ratio": 291, "final_target_sparsity_ratio": 291, "examin": [291, 603], "adjust_sparsity_ratio": 291, "block_wis": 291, "get_sparsity_ratio_progress": 291, "reshape_orig_to_pattern": 291, "s1": 291, "s2": 291, "reshape_reduced_to_orig": 291, "orig_shap": 291, "reduce_scor": 291, "get_mask_per_threshold": 291, "cur_target_sparsity_ratio": 291, "keep_exact_sparsity_ratio": 291, "remain": [291, 586], "count_new_masked_cnt": 291, "new_added_mask": 291, "update_new_added_mask": 291, "cur_mask": 291, "bacaus": 291, "update_progressive_mask": 291, "progressive_step": 291, "progressive_config": 291, "update_progressive_masks_linear": 291, "update_progressive_masks_scor": 291, "update_progressive_masks_loc": 291, "domain": [291, 346, 354, 357, 374, 376, 381, 405, 412, 413, 416, 434, 465, 466, 468, 484, 496, 501, 562, 603, 604, 613], "update_progressive_masks_glob": 291, "get_least_ninm_mask_from_data": 291, "elementwis": [291, 292], "sparisti": 291, "get_ele_mask_per_threshold": 291, "least_ninm_mask": 291, "least_m_in_m_mask": 291, "gradientsensitivityprun": 292, "local_config": [292, 293, 295, 296, 297, 302], "global_config": [292, 293, 295, 296, 297, 302], "overwritten": [292, 293, 295, 296, 297, 586], "elementwise_prun": 292, "parse_weight_nam": 292, "weight_name_pattern": 292, "compute_mask": [292, 295, 296], "prune_weight": 292, "update_importance_elementwis": 292, "update_importance_ab": 292, "update_importance_weight": 292, "prune_by_import": 292, "num_inst": 292, "lasso": [293, 300, 575, 603, 604], "grouplassoprun": 293, "basicmagnitudeprun": [293, 295], "legaci": 294, "pruner_registri": 297, "clase": 297, "update_spars": 297, "parse_valid_pruner_typ": 298, "baseprun": 298, "show": [298, 513, 562, 567, 569, 584, 599, 603, 613], "mask_weights_gener": 298, "update_mask": 298, "basicprun": 298, "proce": 298, "regul": 298, "set_global_step": 298, "progressiveprun": 298, "grain": [298, 605], "improv": [298, 306, 514, 581, 598, 599, 603, 604, 607, 608, 613, 615], "interv": [298, 604], "check_progressive_valid": 298, "check_is_pruned_progressive_step": 298, "update_masks_progress": 298, "print_progressive_spars": 298, "register_reg": 300, "regulariz": 300, "get_reg_typ": 300, "get_reg": 300, "basereg": 300, "grouplasso": 300, "coeff": 300, "reg_term": 300, "coeffient": 300, "pruningschedul": 301, "init_ratio": 301, "init_sparsity_ratio": 301, "reset_none_to_default": 302, "update_param": [302, 351], "process_weight_config": 302, "default_config": 302, "pruners_info": 302, "process_yaml_config": 302, "check_key_valid": 302, "template_config": 302, "user_config": 302, "calib_func": 303, "entir": [303, 515, 603, 604], "auto": [304, 329, 515, 581, 584, 586, 588, 589], "automixedprecisiontunestrategi": 304, "rule": [304, 581, 603, 604], "tri": [304, 497, 613], "tune_config": [304, 305, 306, 307, 308, 309, 311, 312, 313, 314], "basictunestrategi": 305, "One": [305, 518, 562, 565, 569, 575, 603, 604, 605, 613], "bayesiantunestrategi": 306, "come": [306, 518, 613], "packag": [306, 337, 345, 351, 353, 354, 356, 357, 358, 361, 362, 365, 367, 386, 387, 391, 394, 400, 402, 405, 406, 412, 431, 433, 438, 441, 444, 445, 447, 450, 456, 461, 465, 499, 519, 562, 572, 576, 598, 599, 605, 609, 613], "discret": [306, 613], "gaussian": [306, 613], "posterior": [306, 613], "black": [306, 613], "maxim": [306, 603, 604, 613], "acq_max": 306, "ac": 306, "gp": 306, "y_max": 306, "n_warmup": 306, "n_iter": 306, "acquisit": 306, "relev": 306, "limit": [306, 329, 567, 603, 611], "acq": 306, "randomst": 306, "scipi": 306, "x_max": 306, "targetspac": 306, "pbound": 306, "9527": [306, 614], "params_to_arrai": 306, "array_to_param": 306, "amort": 306, "keyerror": 306, "get_target": 306, "num": [306, 329, 578], "_kei": 306, "bayesianoptim": 306, "promis": [306, 568, 603, 604], "gen_next_param": 306, "conservativetunestrategi": 307, "o0": 307, "who": [307, 513, 613], "quantifi": 307, "quant_queu": 307, "prioriti": [307, 613], "go": [307, 573, 593, 596, 606, 612], "fp16": [307, 579, 607], "trail": 307, "exhaustivetunestrategi": 308, "hawq_v2tunestrategi": 309, "impact": [309, 311, 312, 609, 613], "msetunestrategi": 311, "polici": [311, 513, 518, 602, 614], "mse_impact_lst": 311, "best_qmodel": 311, "current_best_model": 311, "ordered_op_name_typ": 311, "mse_v2tunestrategi": 312, "highest": [312, 613], "revert": [312, 613], "lowest": [312, 603, 604, 613], "until": [312, 516, 613], "randomtunestrategi": 313, "strategy_registri": [314, 613], "evaluation_result": [314, 569], "initial_tuning_cfg": 314, "quant_mode_wise_item": 314, "quant_mod": [314, 315, 317], "initial_op_tuning_cfg": [314, 315, 316], "op_item_dtype_dict": 314, "show_baseline_info": 314, "displai": [314, 315, 316, 317, 329, 400, 413, 598], "initial_best_acc": 314, "set_tuning_spac": 314, "setup_resum": 314, "set_q_func": 314, "update_best_op_tuning_cfg": 314, "op_tuning_cfg": 314, "deploy_config": 314, "deploy": [314, 566, 581, 598], "tuningsampl": [315, 316], "tuningspac": [315, 316, 317], "tuning_order_lst": [315, 316], "tuningord": [315, 316], "opwisetuningsampl": [315, 316], "tuning_items_prior": [315, 316], "op_dtype_dict": [315, 316], "get_opwise_candid": [315, 316], "optypewisetuningsampl": [315, 316], "optuningconfig": [315, 316, 318], "fallbacktuningsampl": [315, 316], "op_dtyp": [315, 316], "skip_first": [315, 316], "op_quant_mod": [315, 318], "get_stat": [315, 318], "from_stat": [315, 318], "tuningitem": [315, 317], "item_typ": [315, 317], "get_option_by_nam": [315, 317], "option_nam": [315, 317], "get_detail": [315, 317], "query_items_by_quant_mod": [315, 317], "query_quant_mode_item": [315, 317], "op_name_typ": [315, 317], "query_item_opt": [315, 317], "exit": [315, 317, 562, 579, 614], "set_deafult_config": [315, 317], "op_tuning_config": [315, 317], "modelwisetuningsampl": 316, "compressionmanag": 319, "uesd": 319, "deal": 319, "commpon": 319, "prepare_compress": [319, 515, 567, 568, 601, 603, 607], "compression_manag": [319, 515, 567, 568, 601, 603, 607], "train_loop": [319, 601], "path_to_sav": 319, "orchestr": [319, 518, 575], "layerhistogramcollector": [320, 323], "histogram": [320, 323, 329, 373, 376, 384, 611], "layer_tensor": [320, 323], "include_lay": [320, 323], "diverg": [320, 323, 324, 567, 613], "get_func_from_config": 322, "func_dict": 322, "get_preprocess": 322, "get_postprocess": 322, "get_algorithm": 322, "create_dataset": 322, "cfg_preprocess": 322, "cfg_filter": 322, "create_dataload": 322, "dataloader_cfg": 322, "create_eval_func": 322, "postprocess_cfg": 322, "create_train_func": 322, "Their": 322, "auxiliari": 323, "msg": [323, 326], "debug": [323, 326, 386, 387, 391, 562, 591, 595, 599, 613], "warn": [323, 326, 562], "warin": [323, 326], "alia": [323, 326, 583, 588], "fatal": [323, 326], "probabl": 324, "expand_quantized_bin": 324, "quantized_bin": 324, "reference_bin": 324, "expand": 324, "bin": [324, 329], "safe_entropi": 324, "reference_distr_p": 324, "p_sum": 324, "candidate_distr_q": 324, "q_sum": 324, "entropi": [324, 613], "get_threshold": 324, "hist_edg": 324, "min_val": 324, "max_val": 324, "quantized_typ": 324, "num_quantized_bin": 324, "255": [324, 607], "pretrain": [325, 581, 587], "optimizedmodel": 325, "from_pretrain": 325, "repositori": [325, 405, 410, 412, 465, 471, 512, 593, 596, 616], "hug": [325, 518, 605], "face": [325, 513, 518, 529, 581, 585, 605, 609], "hub": [325, 477, 518, 589], "host": [325, 569], "cache_dir": 325, "force_download": 325, "resume_download": 325, "delet": [325, 364, 370, 371, 376, 377, 378, 379, 380, 603, 604], "receiv": [325, 610], "commit": [325, 513, 514], "git": [325, 518, 562, 576], "artifact": 325, "co": [325, 604], "save_for_huggingface_upstream": 325, "output_dir": [325, 477, 586, 587], "get_logg": 326, "checkpoint_dir": 328, "history_cfg": 328, "best_configur": 328, "best_model_weight": 328, "pt": [328, 580, 605, 608], "snapshot": [328, 382, 503], "cfg_from_fil": 329, "yaml_fil": [329, 565, 569, 578], "lazyimport": 329, "lazi": 329, "till": [329, 613], "decorat": 329, "time_limit": 329, "get_siz": [329, 484], "fault_tolerant_fil": 329, "temporari": [329, 513], "equal_dict": 329, "d2": 329, "compare_kei": 329, "ignore_kei": 329, "ignor": [329, 565], "cpuinfo": 329, "vnni": [329, 518, 575, 606, 607], "cores_per_socket": 329, "get_number_of_socket": [329, 472], "dump_elapsed_tim": [329, 519], "customized_msg": 329, "elaps": 329, "combine_histogram": 329, "old_hist": 329, "get_tensor_histogram": 329, "2048": 329, "get_all_fp32_data": 329, "get_tuning_histori": 329, "tuning_history_path": [329, 453], "str2arrai": 329, "dequantizeweight": 329, "weight_tensor": 329, "scale_info": 329, "captureoutputtofil": 329, "tmp_file_path": 329, "stream": 329, "sy": [329, 584], "stderr": 329, "captur": 329, "statist": 329, "header": [329, 430, 509, 572], "field_nam": 329, "output_handl": 329, "printer": 329, "print_stat": 329, "global_st": 329, "load_data_from_pkl": 329, "pkl": 329, "dump_data_to_loc": 329, "set_resume_from": 329, "project_data": [330, 436, 437, 442, 446, 449, 452, 459], "benchmark_data": 330, "workdir": [330, 446, 459, 465, 469, 473, 481], "config_filenam": [330, 446, 459], "configuration_data": [330, 437, 442, 446, 449, 452], "generate_config": [330, 437, 442, 446, 449, 452, 459], "dataloaderinterfac": [330, 446, 459], "dataloader_data": [330, 342, 371, 376, 446, 459], "parse_arg": [331, 439, 443, 448, 451, 457], "benchmark_mod": [331, 476], "set_eager_execut": [331, 439, 443, 451], "request_id": [332, 435, 453, 454, 469, 477], "asd": [332, 454], "benchmark_id": [332, 349, 350, 360], "benchmark_result_upd": 332, "benchmark_result_update_pytorch_script": 332, "neural_coder_perform": 332, "neural_coder_tim": 332, "pytorch_script_bench_optim": 332, "command_line_of_script": 332, "pytorch_script_bench_original_model": 332, "execute_real_benchmark": 332, "project_detail": [332, 365, 435, 454], "benchmark_detail": 332, "benchmark_model": [333, 405, 465], "execute_benchmark": [333, 405, 465], "benchmarkconfiggener": 334, "configgener": [334, 335, 336, 338, 339, 340, 341], "generate_evaluation_config": [334, 336, 338, 340, 341], "generate_accuracy_config": 334, "generate_performance_config": 334, "workload_directori": 335, "configuration_path": 335, "jsonseri": [335, 389, 390, 395, 397, 398, 401, 411, 420, 446, 452, 472, 474, 482, 485, 486, 487, 488, 490, 491, 492, 493, 494], "get_predefined_config_path": [335, 484], "predefin": [335, 371, 375, 376, 484, 518], "generate_model_config": 335, "generate_dataloader_config": 335, "graphoptimizationconfiggener": 336, "generate_graph_optimization_config": 336, "benchmark_config_gener": [337, 405, 465], "graph_optimization_config_gener": [337, 405, 465], "mixed_precision_config_gener": [337, 405, 465], "profiling_config_gener": [337, 405, 465], "pruning_config_gener": [337, 405, 465], "quantization_config_gener": [337, 405, 465], "mixedprecisionconfiggener": 338, "generate_mixed_precision_config": 338, "profilingconfiggener": 339, "pruningconfiggener": 340, "generate_pruning_config": 340, "quantizationconfiggener": 341, "generate_tuning_config": 341, "generate_quantization_config": 341, "configurationpars": 342, "input_data": [342, 347, 564], "parse_evaluation_data": 342, "evaluation_data": 342, "parse_transform": 342, "transforms_data": [342, 371, 376], "parse_dataload": 342, "parse_metr": 342, "metric_data": 342, "get_param_typ": 342, "param_group": 342, "parse_valu": 342, "required_typ": 342, "parse_list_valu": 342, "parse_multidim_list": 342, "dimension": 342, "normalize_string_list": 342, "string_list": 342, "bracket": 342, "get_predefined_configur": 344, "update_config_to_machine_specif": 344, "configuration_pars": [345, 405, 465], "get_boundary_nod": [345, 405, 465], "get_configur": [345, 405, 465], "params_feed": [345, 405, 465], "pruning_config_pars": [345, 405, 465], "feeder": 346, "get_framework": [346, 419], "get_domain": 346, "get_model": [346, 419, 505], "get_dataload": 346, "get_transform": 346, "get_object": 346, "get_strategi": 346, "get_quantization_approach": 346, "get_possible_valu": 346, "pruningconfigpars": 347, "generate_tre": 347, "parse_entri": 347, "bench": [348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 377, 378, 379, 380, 435, 464, 581], "dbmanag": [348, 381], "database_loc": [348, 381], "log_level": [348, 381, 475], "initialize_databas": [348, 381], "create_sqlalchemy_engin": [348, 381], "create_al": [348, 381], "tabl": [348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 366, 367, 368, 369, 371, 372, 381], "project_id": [349, 352, 359, 360, 363, 365, 371, 375, 376], "model_id": [349, 359, 360, 363], "dataset_id": [349, 352, 360, 363, 371, 375, 376], "warmup_iter": 349, "number_of_inst": 349, "execution_command": [349, 360, 363], "benchark": 349, "delete_benchmark": [349, 370, 376], "benchmark_nam": 349, "update_statu": [349, 360, 363], "execution_statu": [349, 360, 363], "executionstatu": [349, 360, 363, 370, 376, 378, 379, 466, 483], "update_dur": [349, 360, 363], "update_execution_command": [349, 360, 363, 370, 376, 378, 379], "update_log_path": [349, 360, 363, 376, 379], "update_config_path": [349, 360], "update_dataset": [349, 360, 363], "update_batch_s": [349, 360], "update_mod": 349, "update_cores_per_inst": 349, "update_number_of_inst": 349, "clean_statu": [349, 360, 363, 370, 376, 378, 379, 483], "status_to_clean": [349, 360, 363, 370, 376, 378, 379, 483], "build_info": [349, 350, 352, 359, 360, 363, 364, 366, 369], "benchmark_result": [349, 357, 381, 405], "benchmarkresult": [349, 350], "update_accuraci": 350, "update_perform": 350, "list_by_framework": [351, 358, 367], "framework_id": [351, 358, 359, 367, 383], "query_to_list": [351, 358, 367], "dataloaders_queri": 351, "dataloader_id": 351, "fill_dictionari": [351, 353, 354, 356, 358, 361, 362, 367], "dataset_nam": [352, 371, 376], "template_path": 352, "delete_dataset": [352, 371, 376], "update_template_path": 352, "get_domain_id": 353, "domain_nam": 353, "domainflavour": [354, 466], "db": [354, 361, 362, 382, 383], "get_domain_flavour_id": 354, "domain_flavour_nam": 354, "flavour": [354, 374, 376, 434, 466], "get_framework_id": 356, "framework_nam": [356, 432, 472], "domain_flavour": [357, 381, 405, 411, 484], "optimization_typ": [357, 360, 381, 405], "profiling_result": [357, 363, 381, 405], "pruning_detail": [357, 360, 381, 405], "tuning_detail": [357, 360, 381, 405], "tuning_histori": [357, 360, 376, 378, 381, 405, 440, 465], "metrics_queri": 358, "precision_id": [359, 360, 361, 362], "domain_id": [359, 367], "domain_flavour_id": 359, "supports_profil": [359, 413, 421], "supports_graph": [359, 413], "supports_prun": [359, 413, 425], "delete_model": [359, 376, 377], "optimization_type_id": 360, "sampling_s": [360, 485, 614], "tuning_details_id": [360, 368], "pruning_details_id": [360, 366], "diagnosis_config": 360, "delete_optim": [360, 376, 378], "optimization_id": [360, 361, 376, 378, 435], "optimization_nam": [360, 361, 375, 376], "update_optimized_model": [360, 376, 378], "optimized_model_id": 360, "update_sampling_s": 360, "update_precis": 360, "update_tuning_detail": 360, "update_pruning_detail": 360, "pin_accuracy_benchmark": [360, 376, 378], "pin": [360, 376, 378, 591, 595], "pin_performance_benchmark": [360, 376, 378], "get_optimization_by_project_and_model": 360, "unpin_benchmark": 360, "db_connect": 360, "unpin": 360, "optimizationtyp": [360, 361, 466], "tuningdetail": [360, 368, 452], "tuninghistori": [360, 369, 453], "pruningdetail": [360, 366], "optimized_model": 360, "get_pinned_benchmark": 360, "list_for_precis": 361, "precision_nam": [361, 362], "get_optimization_type_for_precis": 361, "get_optimization_type_id": 361, "get_optimization_type_by_nam": 361, "get_optimization_type_by_id": 361, "get_precision_id": 362, "get_precision_by_nam": 362, "get_precision_by_id": 362, "num_thread": 363, "delete_profil": [363, 376, 379], "profiling_id": [363, 364, 376, 379, 454], "profiling_nam": 363, "update_num_thread": 363, "profilingresult": [363, 364], "total_execution_tim": 364, "accelerator_execution_tim": 364, "cpu_execution_tim": 364, "op_run": 364, "op_defin": 364, "get_result": 364, "bulk_add": 364, "params_interfac": [364, 370, 371, 373, 375, 376, 377, 378, 379, 381, 405, 465, 503], "profilingresultaddparamsinterfac": [364, 376, 379, 382], "bulk": [364, 376, 379], "delete_result": 364, "create_project": [365, 375, 376, 380], "delete_project": [365, 376, 380], "project_nam": [365, 371, 376], "get_model_by_nam": 365, "list_project": [365, 376, 380], "update_not": 365, "pruning_details_data": 366, "delete_pruning_detail": 366, "list_by_domain": 367, "transforms_queri": 367, "accuracy_criterion_typ": 368, "accuracy_criterion_threshold": 368, "exit_polici": [368, 614], "tuning_details_data": 368, "delete_tuning_detail": 368, "update_tuning_histori": 368, "tuning_history_id": 368, "minimal_accuraci": 369, "baseline_accuraci": 369, "baseline_perform": 369, "last_tune_accuraci": 369, "last_tune_perform": 369, "best_tune_accuraci": 369, "best_tune_perform": 369, "benchmarkapiinterfac": [370, 376], "get_benchmark_detail": [370, 376], "list_benchmark": [370, 376], "update_benchmark_accuraci": [370, 376], "update_benchmark_perform": [370, 376], "update_benchmark_statu": [370, 376], "update_benchmark_dur": [370, 376], "update_path": [370, 376, 378], "add_benchmark": [370, 376], "add_result": [370, 376, 379], "edit_benchmark": [370, 376], "edit": [370, 376, 378, 379, 382, 513], "parse_benchmark_data": [370, 376], "benchmarkaddparamsinterfac": [370, 376, 382], "parse_benchmark_edit_data": [370, 376], "benchmarkeditparamsinterfac": [370, 376, 382], "before_delete_benchmark_entri": 370, "sqlite3": 370, "db_model": [370, 381, 405, 465], "datasetapiinterfac": [371, 376], "get_dataset_detail": [371, 376], "list_dataset": [371, 376], "add_dataset": [371, 376], "set_template_path": [371, 376], "parsed_dataset_data": [371, 376], "datasetaddparamsinterfac": [371, 376, 382], "check_if_custom_metric_or_dataload": [371, 376], "dataset_data": [371, 376, 436, 437, 442, 446, 449, 452, 486], "generate_custom_templ": [371, 376], "dataloader_path": [371, 376], "generate_templ": [371, 376], "template_typ": [371, 376], "parse_dataset_data": [371, 376], "get_predefined_dataset": [371, 376], "prepare_predefined_dataload": [371, 376], "prepare_predefined_transform": [371, 376], "set_database_vers": [371, 372], "version_num": [371, 372], "alembic_vers": [371, 372], "initialize_associ": [371, 372], "initialize_precision_optimization_types_associ": [371, 372], "search_in_list_of_dict_for_unique_valu": [371, 372], "list_of_dict": [371, 372], "search_in_list_of_dict": [371, 372], "diagnosisapiinterfac": [373, 376], "get_op_list": [373, 376, 384], "get_op_detail": [373, 376, 384], "generate_optim": [373, 376], "model_wise_param": [373, 376], "parse_optimization_data": [373, 376, 378], "diagnosisoptimizationparamsinterfac": [373, 376, 382], "parse_op_wise_config": [373, 376], "op_wise_param": [373, 376], "parse_wise_paramet": [373, 376], "params_per_typ": [373, 376], "set_op_wise_pattern_precis": [373, 376], "parse_model_wise_config": [373, 376], "dictionariesapiinterfac": [374, 376], "dictonari": [374, 376], "list_domain": [374, 376], "list_domain_flavour": [374, 376], "list_optimization_typ": [374, 376], "list_optimization_types_for_precis": [374, 376], "list_precis": [374, 376], "list_dataload": [374, 376], "list_dataloaders_by_framework": [374, 376], "list_transform": [374, 376], "list_transforms_by_framework": [374, 376], "list_transforms_by_domain": [374, 376], "list_metr": [374, 376], "list_metrics_by_framework": [374, 376], "examplesapiinterfac": [375, 376], "get_optimization_data": [375, 376], "optimizationaddparamsinterfac": [375, 376, 378, 382], "benchmark_api_interfac": [376, 381, 405], "dataset_api_interfac": [376, 381, 405], "diagnosis_api_interfac": [376, 381, 405], "dictionaries_api_interfac": [376, 381, 405], "examples_api_interfac": [376, 381, 405], "model_api_interfac": [376, 381, 405], "optimization_api_interfac": [376, 381, 405], "profiling_api_interfac": [376, 381, 405], "project_api_interfac": [376, 381, 405], "modelapiinterfac": [376, 377], "add_model": [376, 377, 380], "get_model_detail": [376, 377], "list_model": [376, 377, 405, 431, 465], "parse_model_data": [376, 377], "modeladdparamsinterfac": [376, 377, 382], "optimizationapiinterfac": [376, 378], "get_optimization_detail": [376, 378], "list_optim": [376, 378], "update_optimization_statu": [376, 378], "update_optimization_dur": [376, 378], "add_optim": [376, 378], "add_quantization_optim": [376, 378], "optimization_data": [376, 378, 436, 437, 442, 446, 449, 452], "add_pruning_optim": [376, 378], "add_standard_optim": [376, 378], "edit_optim": [376, 378], "get_pruning_detail": [376, 378], "gat": [376, 378], "edit_tuning_detail": [376, 378], "parsed_optimization_data": [376, 378], "optimizationeditparamsinterfac": [376, 378, 382], "edit_pruning_detail": [376, 378], "pruning_data": [376, 378], "add_tuning_histori": [376, 378], "parse_tuning_histori": [376, 378], "tuninghistoryinterfac": [376, 378, 382, 503], "parse_optimization_edit_data": [376, 378], "load_pruning_details_config": [376, 378, 484], "profilingapiinterfac": [376, 379], "get_profiling_detail": [376, 379], "list_profil": [376, 379], "update_profiling_statu": [376, 379], "update_profiling_dur": [376, 379], "add_profil": [376, 379], "edit_profil": [376, 379], "bulk_add_result": [376, 379], "parse_profiling_data": [376, 379], "profilingaddparamsinterfac": [376, 379, 382], "parse_profiling_result_data": [376, 379], "parse_profiling_edit_data": [376, 379], "profilingeditparamsinterfac": [376, 379, 382], "projectapiinterfac": [376, 380], "get_project_detail": [376, 380], "add_dummy_dataset": [376, 380], "update_project_not": [376, 380], "db_oper": [381, 405, 465], "parse_nod": 382, "tuninghistoryiteminterfac": [382, 503], "update_dataloaders_param": 383, "dataloaders_to_upd": 383, "framework_dataloaders_config": 383, "get_framework_dataloaders_config": 383, "get_framework_transforms_config": 383, "get_tensors_info": [384, 413], "load_quantization_config": 384, "calculate_ms": 384, "input_model_tensor": 384, "optimized_model_tensor": 384, "op_detail": [384, 386, 405, 465], "opdetail": [384, 389], "get_histogram_data": 384, "draw": [384, 610, 613], "diagnosisfactori": 385, "get_diagnosi": 385, "onnx_diagnosi": [386, 405, 465], "onnxrt_diagnosi": [386, 387, 405], "tensorflow_diagnosi": [386, 405, 465], "op_entri": [386, 405, 465], "onnxrtdiagnosi": 388, "onnxrtmodel": [388, 416], "serialization_typ": [389, 390, 420, 472, 474, 486, 487, 491, 492], "oppattern": 389, "pattern_data": 389, "opweight": 389, "weights_data": 389, "opactiv": 389, "op_activ": 389, "opentri": 390, "activation_min": 390, "activation_max": 390, "tensorflowdiagnosi": 392, "browser": [393, 562, 591, 595], "get_directory_entri": 393, "get_requested_path": 393, "request": [393, 405, 406, 407, 428, 429, 432, 453, 465, 469, 496, 498, 500, 501, 505, 507, 508, 510, 562, 607], "get_non_hidden_directory_entri": 393, "create_dir_entri": 393, "direntri": 393, "create_file_entri": 393, "create_entri": 393, "is_directori": 393, "sort_entri": 393, "should_show_fil": 393, "should_show_only_model_fil": 393, "get_setting_valu": 393, "get_filter_valu": 393, "filter_requested_entri": 393, "filter_nam": 393, "is_directory_entri": 393, "is_model_or_directory_entri": 393, "shown": [393, 516, 562, 564, 567, 578, 592, 600, 601, 613], "is_dataset_or_directory_entri": 393, "brows": 394, "filesystem": [394, 484, 509], "attribute_typ": 395, "expanded_group": [396, 399], "add_edg": 398, "source_id": 398, "target_id": 398, "get_nod": 398, "highlight_pattern": 398, "highlight": [398, 401, 515, 562], "get_target_nod": 398, "reader": [399, 400, 405, 465], "graphread": 399, "find_pattern_in_graph": [399, 500], "onnxrt_read": [400, 402, 405], "tensorflow_read": [400, 402, 405], "collaps": [400, 405, 465, 562], "graph_read": [400, 405, 465], "groupnod": 401, "group_nam": 401, "onnxrtread": 403, "tensorflowread": 404, "jobs_control_queu": [405, 406, 465], "frozen_pb": [405, 412, 422], "meta_graph": [405, 412, 422], "model_type_gett": [405, 412, 465], "download_config": [405, 430, 431, 465], "download_model": [405, 430, 431, 465], "optimize_model": [405, 438, 440, 441, 444, 447], "neural_coder_optim": [405, 440, 465], "tune_model": [405, 440, 450], "execute_optim": [405, 440, 465], "tensorflow_profil": [405, 456, 465], "execute_profil": [405, 456, 465], "profile_model": [405, 456, 458, 462, 465], "job": [406, 480], "_jobscontrolqueu": 407, "queu": 407, "jobsmanag": 407, "_jobsmmanag": 408, "_job": 408, "get_default_path": 410, "shape_elements_ord": [413, 416, 425, 484], "get_input_nod": [413, 423, 424, 425], "get_output_nod": [413, 423, 424, 425], "ensure_supported_path": 413, "get_model_graph": [413, 416, 424, 425, 500], "supports_path": [413, 416, 418, 421, 423, 424, 426], "guard_requirements_instal": [413, 416, 418, 425], "instal": [413, 416, 418, 425, 432, 569, 572, 581, 583, 589, 593, 596, 598, 599, 602], "nc_model_inst": [416, 425], "filtered_input_nod": 416, "remove_number_of_samples_from_shap": 416, "pytorchscriptmodel": 418, "modelrepositori": 419, "get_framework_from_path": [419, 484], "get_supported_framework": 419, "is_model_path": 419, "trust": [420, 562], "frozenpbmodel": 421, "metagraphmodel": 424, "metagraph": 424, "savedmodelmodel": 426, "get_input_shap": 427, "fix_dynamic_shap": 427, "resourc": [430, 567, 603], "download_yaml_config": 430, "model_info": 430, "download_fil": 430, "download_path": 430, "report_progress": 430, "unpack_arch": 430, "archive_path": 430, "unpack": 430, "archiv": 430, "get_yaml_url": 430, "model_src_dir": 430, "yaml_relative_loc": 430, "get_available_model": 432, "check_vers": 432, "framework_vers": 432, "supported_vers": 432, "validate_model_list": 432, "model_list": 432, "get_framework_module_nam": 432, "get_installed_framework": 432, "mappingdirect": 434, "namesmapp": 434, "framework_map": 434, "domain_map": 434, "domain_flavour_map": 434, "precision_map": 434, "map_nam": 434, "parameter_typ": 434, "execute_optimization_pytorch_script": 435, "execute_optimization_regular": 435, "parse_model_data_to_bench_nam": 435, "parse_log": 435, "optimization_detail": 435, "check_if_collect_tuning_histori": 435, "optimizationfactori": 436, "get_optim": 436, "optimization_script": [437, 442, 446, 449, 452], "optimize_graph": [439, 443], "output_graph": [439, 443, 448, 451], "optimize_graph_config": [439, 443], "optimize_pt_script": 445, "output_model_nam": 446, "output_model_dir": 446, "optimizationinterfac": 446, "optimization_workdir": 453, "watcher": 453, "send": [453, 496, 501, 514, 518], "process_succeed": 453, "signal": [453, 484], "was_history_file_chang": 453, "history_file_modification_tim": 453, "modif": [453, 519, 564, 573, 586], "send_history_snapshot": 453, "execute_real_profil": 454, "profiling_detail": 454, "profilerfactori": [455, 460], "get_profil": [455, 460], "profiling_data": [455, 459, 460, 462, 482], "load_profiling_detail": 457, "json_path": 457, "config_path": 459, "initialize_graph": 462, "tf_modul": 462, "create_tf_config": 462, "num_warmup": 462, "get_node_by_nam": 462, "convert_nodes_to_list": 462, "build_dataload": 462, "delete_assign": 463, "wsgi": 464, "prepare_environ": 464, "app": [465, 499], "history_snapshot_pars": [465, 499, 504], "request_data_processor": [465, 499, 504], "response_gener": [465, 499, 504, 505, 507, 510], "status": [466, 478, 483], "ensure_workdir_exists_and_writ": 467, "clean_workloads_wip_statu": 467, "wip": [467, 615], "workloads_list": 467, "migrate_databas": 467, "latest": [467, 477, 576, 605, 609], "alemb": [467, 572, 576], "notfoundexcept": [468, 497, 498], "accessdeniedexcept": 468, "deni": 468, "clienterrorexcept": 468, "internalexcept": 468, "subject": [469, 496, 577], "send_respons": 469, "log_nam": 469, "additional_log_nam": [469, 477], "shell": [469, 477, 611], "process_dur": 469, "call_on": 469, "cwd": [469, 477], "universal_newlin": [469, 477], "startupinfo": [469, 477], "creationflag": [469, 477], "ignore_exit_cod": [469, 477], "pid": [469, 477], "env_arg": 469, "ncprocess": [469, 478], "refresh_workdir": 469, "is_multi_command": 469, "expir": 470, "expiringdictitem": 470, "expires_at": 470, "is_expir": 470, "expiringdict": 470, "initial_valu": 470, "ttl": 470, "120": 470, "userdict": 470, "githubinfo": 471, "releas": [471, 484, 518, 576, 587, 589, 591, 595, 597, 616], "hw": 472, "hwinfo": 472, "get_distribut": 472, "distibut": 472, "get_bios_vers": 472, "bio": [472, 602], "is_turbo_boost_en": 472, "turbo": [472, 602], "boost": [472, 579, 582, 598, 605], "get_kernel_vers": 472, "kernel": [472, 519, 602, 603, 613], "get_framework_info": 472, "get_framework_dependency_info": 472, "subdepend": 472, "serializ": 474, "serialize_item": 474, "datetim": 474, "throw": 474, "typeerror": 474, "2016": 474, "84913": 474, "04": [474, 518, 602, 615], "08t11": 474, "084913": 474, "change_log_level": 475, "optimizationpars": 476, "performancepars": 476, "update_parti": 476, "partial": [476, 607], "parsed_result": 476, "summarize_parti": 476, "summarize_valu": 476, "accuracypars": 476, "benchmarkparserfactori": 476, "get_pars": 476, "profilingpars": 476, "unify_tim": 476, "string_valu": 476, "micro": 476, "125": [476, 615], "6m": 476, "microsecond": 476, "cmd": [477, 599], "docker": 477, "aibt_tensorflow": 477, "cento": [477, 518], "7_3_mkldnn_tensorflow": 477, "111224": 477, "pull_imag": 477, "0c750a01": 477, "90e0": 477, "4aa8": 477, "99fe": 477, "a194d55a2046": 477, "time_start": 477, "2018": 477, "17t14": 477, "47": [477, 615], "352502": 477, "time_stop": 477, "25": [477, 615], "110410": 477, "info_path": 477, "runtim": [477, 519, 520, 564, 570, 573, 575, 583, 588, 589, 606], "tail": 477, "is_ok": [477, 478], "popen": 477, "remove_log": 477, "properli": 478, "rtype": 478, "return_code_al": 478, "remove_successful_log": 478, "success": [478, 496, 576], "get_status_update_funct": 480, "job_typ": 480, "sent": 482, "throughput": 482, "acc_input_model": 482, "acc_optimized_model": 482, "size_input_model": 482, "size_optimized_model": 482, "path_optimized_model": 482, "optimization_tim": 482, "insert_data": 482, "calculate_throughput": 482, "readi": 482, "ensure_working_path_exist": 483, "clean_log": 483, "workdir_path": 483, "is_hidden": 484, "get_dataset_path": 484, "get_file_extens": 484, "lead": [484, 567, 579, 603, 604], "is_dataset_fil": 484, "normalize_domain": 484, "underscor": 484, "normalize_framework": 484, "normalize_str": 484, "string_to_norm": 484, "get_model_zoo_config_path": 484, "model_dict": 484, "get_model_zoo_model_path": 484, "check_modul": 484, "get_module_vers": 484, "mb": 484, "add_unit": 484, "load_model_config": 484, "load_dataloader_config": 484, "load_transforms_config": 484, "load_transforms_filter_config": 484, "meaning": [484, 601], "load_precisions_config": 484, "get_default_pruning_config_path": 484, "load_model_wise_param": 484, "load_metrics_config": 484, "get_metrics_dict": 484, "load_help_nc_param": 484, "replace_with_valu": 484, "file_path": 484, "verify_file_path": 484, "determine_ip": 484, "ip": 484, "is_development_env": 484, "nc_mode": 484, "filter_transform": 484, "parse_bool_valu": 484, "release_tag": 484, "get_shape_from_transform": 484, "get_height_width_from_s": 484, "parse_to_string_list": 484, "parse_to_float_list": 484, "export_to_csv": 484, "parse_vers": 484, "string_vers": 484, "remove_dataload": 485, "datalad": 485, "remove_accuracy_metr": 485, "set_evaluation_dataload": 485, "udpat": 485, "set_evaluation_dataset_path": 485, "get_performance_config": 485, "set_performance_cores_per_inst": 485, "get_performance_cores_per_inst": 485, "set_performance_num_of_inst": 485, "get_performance_num_of_inst": 485, "set_accuracy_and_performance_batch_s": 485, "set_quantization_dataload": 485, "set_quantization_dataset_path": 485, "set_quantization_batch_s": 485, "set_accuracy_go": 485, "accuracy_go": 485, "set_accuracy_metr": 485, "set_transform": 485, "process_transform": 485, "set_quantization_approach": 485, "set_input": 485, "set_output": 485, "set_quantization_sampling_s": 485, "set_performance_warmup": 485, "set_performance_iter": 485, "set_optimization_precis": 485, "yaml_path": 485, "is_dummi": 486, "labelbal": [486, 564, 565], "set_transforms_from_list": 486, "transforms_list": 486, "set_dataset": 486, "postprocessschema": 487, "get_label_shift_valu": 487, "set_accuracy_postprocess_transform": 487, "set_precis": [488, 490], "sgdoptim": 492, "adamwoptim": 492, "adamoptim": 492, "crossentropylosscriterion": 492, "sparsecategoricalcrossentropycriterion": 492, "knowledgedistillationlosscriterion": 492, "set_postprocess_transform": 492, "weightcompressionapproach": 492, "initialize_prun": 492, "pruner_dict_list": 492, "serialize_prun": 492, "parse_dict_value_to_float": 492, "parse_dict_value_to_int": 492, "wiseconfigdetail": 493, "wiseconfig": 493, "acccriterion": 494, "exitpolici": 494, "set_timeout": 494, "set_max_tri": 494, "trial": [494, 613], "set_performance_onli": 494, "float_represent": 495, "dumper": 495, "pruner_represent": 495, "outsid": 496, "create_simple_respons": 496, "gui": [496, 497, 501, 562, 575, 576], "messagequeu": 496, "queue": [496, 501], "post_failur": 496, "failur": [496, 515], "post_success": 496, "post_error": 496, "wait": [496, 591, 595, 598], "global_config_directori": 497, "set_up": 497, "determine_values_from_environ": 497, "get_command_line_arg": 497, "determine_server_port": 497, "max_ports_tri": 497, "port_default": 497, "determine_gui_port": 497, "client": [497, 562], "server_port": 497, "unless": [497, 573], "is_port_taken": 497, "determine_log_level": 497, "determine_url_prefix": 497, "get_url": 497, "dump_token_to_fil": 497, "servicenotfoundexcept": 498, "unknown": 498, "connector": 500, "routingdefinit": 500, "rout": 500, "realtimeroutingdefinit": 500, "realtim": 500, "deferredroutingdefinit": 500, "deferredsubprocessroutingdefinit": 500, "spawn": 500, "get_system_info": 500, "endpoint": 501, "run_serv": 501, "webserv": 501, "get_tls_arg": 501, "tl": [501, 562], "block_ifram": 501, "werkzeug": [501, 509], "ifram": 501, "csp": 501, "block_snif": 501, "mime": 501, "snif": 501, "require_api_token": 501, "author": [501, 577], "j": [501, 514], "handle_api_cal": 501, "subpath": 501, "allow_api_cal": 501, "page_not_found": 501, "disable_cach": 501, "build_paramet": 501, "flask": [501, 562], "web_socket_publish": 501, "web_socket": 501, "flask_socketio": 501, "socketio": [501, 562], "benchmarkservic": 502, "workloadservic": [502, 506, 507, 510], "historysnapshotpars": 503, "history_snapshot": 503, "provide_perform": 503, "parse_history_snapshot": 503, "parse_history_item": 503, "history_item": 503, "extract_accuraci": 503, "extract_perform": 503, "modelservic": 505, "optimizationservic": 506, "profilingservic": 507, "generate_csv": 507, "processor": [508, 579, 602, 605, 607, 608, 615], "requestdataprocessor": 508, "get_string_valu": 508, "responsegener": 509, "serve_from_filesystem": 509, "mimetyp": 509, "as_attach": 509, "add_refresh": 509, "refresh_tim": 509, "refresh": [509, 591, 595], "from_except": 509, "get_status_code_for_except": 509, "get_code_templ": 510, "get_output": 510, "welcom": [512, 513, 514, 616], "interest": [513, 518, 611], "foster": 513, "particip": 513, "harass": 513, "everyon": 513, "bodi": 513, "ethnic": 513, "characterist": 513, "gender": 513, "educ": 513, "socio": 513, "econom": 513, "appear": [513, 562, 592, 598], "race": 513, "religion": 513, "sexual": 513, "orient": 513, "contribut": [513, 518], "inclus": 513, "Being": 513, "respect": [513, 573, 603, 604, 614], "viewpoint": 513, "gracefulli": 513, "critic": [513, 518], "focus": [513, 519], "empathi": 513, "toward": [513, 567], "unaccept": 513, "imageri": 513, "unwelcom": 513, "troll": 513, "insult": 513, "derogatori": 513, "comment": [513, 565, 578, 612], "polit": 513, "attack": 513, "publish": [513, 577, 579, 599], "electron": 513, "permiss": 513, "inappropri": 513, "profession": 513, "clarifi": 513, "appropri": 513, "fair": 513, "action": [513, 593, 596], "reject": 513, "wiki": 513, "issu": [513, 514, 517, 562, 576, 607, 611], "ban": 513, "temporarili": 513, "perman": 513, "deem": 513, "threaten": 513, "offens": 513, "harm": 513, "mail": 513, "social": 513, "media": 513, "appoint": 513, "event": [513, 611], "abus": 513, "report": [513, 514, 562, 610], "contact": [513, 609, 610], "complaint": 513, "review": [513, 514], "investig": 513, "circumst": [513, 606], "oblig": 513, "confidenti": [513, 562], "regard": [513, 608], "incid": 513, "good": [513, 607, 613], "faith": 513, "repercuss": 513, "leadership": 513, "faq": [513, 518], "page": [513, 514], "view": [514, 518, 562, 570, 589, 598, 609], "pylint": 514, "flake8": 514, "autopep8": 514, "cover": [514, 574, 605], "adopt": [514, 581], "certif": [514, 562], "agre": 514, "sign": [514, 562, 607, 610], "bug": 514, "jira": 514, "ticket": 514, "potenti": [514, 516], "risk": 514, "pr": [514, 578, 593, 596, 609], "reproduc": 514, "submit": 514, "intend": 514, "collabor": [514, 583, 589], "adher": 514, "toolkit": [515, 518, 576, 581, 589, 605], "tracer": 515, "resolv": [515, 517], "floatfunct": 515, "cat": [515, 584], "10004": [515, 516, 519, 564, 567, 568, 571, 573, 575, 579, 601, 606, 614], "neural_compressor": [515, 516, 518, 539, 563, 564, 565, 567, 568, 569, 571, 574, 578, 579, 580, 600, 601, 603, 606, 607, 608, 609, 610, 612, 613, 614], "conduct": [515, 586, 598], "imper": 515, "therefor": [515, 604, 607, 609], "lot": 515, "might": [515, 562, 613], "successfulli": [515, 569, 605], "proxi": 515, "tutori": [515, 589, 605], "prototyp": 515, "html": [515, 593, 596], "untrac": 515, "ssd": [515, 615], "resnet34": [515, 615], "ptq": [515, 569, 575, 607, 611, 613], "r34": 515, "bboxes_labels_scor": 515, "prob": 515, "max_output": 515, "zip": 515, "dbox": 515, "dlabel": 515, "dscore": 515, "decode_singl": 515, "autom": [516, 581, 598, 599], "artifici": 516, "ann": 516, "par": 516, "outperform": 516, "4x": [516, 607], "effici": [516, 518, 564, 567, 581, 601, 605], "figur": [516, 591, 592, 595, 603], "inner": 516, "evolutionari": 516, "cycl": 516, "conclud": 516, "simplest": [516, 584], "launcher": [516, 518, 567, 568, 589, 603], "agent": 516, "ofa_mbv3_d234_e346_k357_w1": 516, "250": 516, "results_csv_path": 516, "search_result": 516, "aim": [516, 581, 604, 613], "wmt": 516, "en": 516, "de": 516, "guidelin": [517, 518], "mainstream": 518, "formerli": 518, "deliv": [518, 605], "quickli": [518, 613], "ai": [518, 581, 605, 608], "oneapi": [518, 576, 605], "analyt": [518, 576, 605], "visit": [518, 615], "websit": [518, 576], "stabl": [518, 562, 576, 605], "pypi": [518, 562, 576, 593, 596], "pip": [518, 562, 569, 572, 576, 583, 591, 593, 595, 596, 609], "nightli": [518, 562, 576], "clone": [518, 562, 576, 591, 595], "cd": [518, 562, 569, 576], "wget": 518, "googleapi": 518, "v1_6": 518, "mobilenet_v1_1": 518, "0_224_frozen": 518, "jupyt": [518, 589, 591, 592, 595], "lab": [518, 591, 592, 593, 595, 596], "click": [518, 562, 575, 581, 582, 589, 592, 598, 605, 611], "vision": [518, 585], "resnet": [518, 569, 615], "xeon": [518, 577, 579, 602, 605, 607, 608, 615], "scalabl": [518, 579, 602, 605, 607, 608, 615], "skylak": 518, "cascad": 518, "lake": [518, 579, 605], "cooper": [518, 579, 605], "ic": [518, 603, 605], "sapphir": 518, "rapid": 518, "hbm": 518, "flex": 518, "arctic": 518, "sound": 518, "pont": 518, "vecchio": 518, "amd": [518, 575, 615], "arm": [518, 575, 615], "nvidia": [518, 575, 603, 607, 615], "ubuntu": [518, 602], "tf_enable_onednn_opt": [518, 562], "onednn": [518, 607], "10k": 518, "speedup": [518, 575, 607], "2x": [518, 575, 602], "overview": 518, "workflow": [518, 567, 576, 579, 593, 596, 611], "notebook": 518, "coder": [518, 575, 582, 583, 586, 589, 592, 605], "visual": [518, 589, 598, 610, 611, 613], "studio": [518, 589, 598], "topic": 518, "smoothquant": 518, "soon": 518, "neurip": 518, "fast": [518, 605], "dec": [518, 605], "quala": 518, "minilm": 518, "blog": 518, "mleffici": [518, 605], "acceler": [518, 567, 581, 589, 598, 603, 604, 605, 608, 613], "diffus": [518, 605], "legal": [518, 616], "secur": [518, 602, 605], "bridg": [519, 575], "vanilla": [519, 575], "abcadaptor": 519, "__init__": [519, 564, 565, 578, 613], "he": 519, "besid": [519, 567], "easili": [519, 582, 586, 598, 600, 603, 604], "past": 519, "effect": [519, 603, 604], "mainten": 519, "difficult": 519, "abil": [519, 565, 573], "fragment": 519, "semant": [519, 573], "look": [519, 573, 578, 614], "microsoft": 519, "mla": [519, 607], "explor": 519, "conda": [562, 572, 576, 584, 592, 609], "forg": [562, 572, 576], "setup": [562, 573, 576, 593, 596, 603], "ui": 562, "5000": 562, "338174d13706855fc6924cec7b3a8ae8": 562, "listen": 562, "firewal": 562, "8080": 562, "cert": 562, "path_to_cert": 562, "crt": 562, "path_to_private_kei": 562, "encrypt": 562, "insecur": 562, "expos": 562, "forfeit": 562, "threat": 562, "button": [562, 575, 592, 598], "pop": [562, 598], "recognit": [562, 569, 611], "few": [562, 605, 613], "finish": [562, 592], "synthet": 562, "plu": 562, "icon": 562, "section": [562, 567, 568, 598, 603, 606, 614], "unfold": 562, "On": [562, 607], "panel": [562, 593, 596, 598], "navig": 562, "trash": 562, "visibl": 562, "cursor": 562, "prompt": [562, 569], "confirm": 562, "pencil": 562, "light": [562, 568], "blue": 562, "color": 562, "row": [562, 603], "arrow": 562, "checkbox": 562, "chart": [562, 607, 610, 611], "offer": [562, 565], "conveni": 562, "variat": 562, "yellow": 562, "remind": 562, "dialog": 562, "cryptographi": 562, "linux": [563, 592, 598], "window": [563, 598, 599], "x86_64": 563, "aarch64": 563, "often": [564, 567, 601, 603, 604], "encount": 564, "consum": 564, "lack": 564, "faster": [564, 566, 605, 615], "hard": 564, "treat": 564, "manner": [564, 567, 580], "post_training_static_qu": [564, 565, 606, 613], "300": [564, 565], "output_model": [564, 611], "customis": [564, 565], "ensp": [565, 578, 612], "imagerecord": [565, 569, 614], "image_nam": 565, "cocorecord": 565, "gt": [565, 571, 612], "float16": 565, "int64": 565, "style_transf": 565, "content": 565, "tfrecorddataset": 565, "helloworld": [565, 612], "aid": 566, "increas": [566, 575, 581, 598, 613], "infrastructur": 566, "deploi": [567, 613], "power": [567, 592, 602], "mobil": [567, 615], "produc": 567, "softmax": 567, "l": [567, 611, 613], "kd": 567, "kullback": 567, "leibler": 567, "patient": 567, "compact": [567, 584, 603, 604], "ia": 567, "attach": 567, "shallow": 567, "deepest": 567, "deeper": 567, "10006": [567, 568], "training_func_for_nc": [567, 568], "distil_loss": 567, "lr": [567, 569], "huge": [568, 604], "bit": [568, 579, 605, 607], "heavi": 568, "booster": 568, "degrad": 568, "retrain": [568, 603, 604], "incorpor": [568, 613], "novel": [568, 581, 592, 598], "comb": 568, "distillation_criterion": [568, 601], "d_conf": [568, 601], "q_conf": 568, "horovod": 569, "builtin": 569, "program": [569, 577, 579, 581, 598], "addition": [569, 613], "enable_eager_execut": 569, "yaml_file_path": 569, "evaluation_time_cost": 569, "partit": 569, "distributedsampl": 569, "train_sampl": 569, "train_dataset": 569, "num_replica": 569, "train_load": 569, "train_kwarg": 569, "adadelta": 569, "distributedoptim": 569, "named_paramet": 569, "broadcast_paramet": 569, "root_rank": 569, "broadcast_optimizer_st": 569, "set_epoch": 569, "batch_idx": 569, "zero_grad": [569, 603], "nll_loss": 569, "log_interv": 569, "0f": 569, "tloss": 569, "6f": 569, "dry_run": 569, "test_func": 569, "num_of_process": 569, "002": 569, "ssh": [569, 598], "readm": 569, "exactli": [569, 582], "resnet50_v1": 569, "topk": [569, 578], "resizecropimagenet": [569, 612], "realiz": [569, 578, 600, 608, 610], "tow": 569, "situat": 569, "node1": 569, "node2": 569, "TO": [569, 583], "your_node1_nam": 569, "your_node2_nam": 569, "resnet50_fp32_pretrained_model": 569, "nc_resnet50_v1": 569, "wide": [570, 579, 604, 607], "varieti": [570, 606, 613], "demonstr": [570, 581, 603, 604, 611], "exchang": 571, "hope": 571, "briefli": [571, 603], "matur": 571, "major": [571, 574, 607], "reus": 571, "inc_model": [571, 580], "fp32_onnx_config": 571, "randn": 571, "int8_onnx_config": 571, "matmulintegertofloat": 571, "matmulinteg": 571, "incompat": 572, "88": [572, 610, 615], "80": [572, 611, 615], "pyobject": 572, "reinstal": 572, "importerror": 572, "libgl": 572, "apt": [572, 576, 584, 592], "yum": [572, 576], "opencv": [572, 592], "conflict": 572, "pend": 572, "27": [572, 576, 615], "quick": [573, 614], "friendli": [573, 614], "dive": 573, "let": [573, 586, 606, 614], "syntax": 573, "up1": 573, "up2": 573, "valid_mixed_precis": 573, "per_tensor": [573, 614], "grappler_optim": 573, "constfold": 573, "arithmet": 573, "debug_stripp": 573, "concept": [574, 610], "custom_metr": 574, "explicitli": 574, "refin": [574, 604], "These": 575, "broad": [575, 587], "420": 575, "geomean": 575, "snippet": 575, "upload": [575, 593, 596], "qintegerop": [575, 607], "plan": [575, 579], "uninstal": [576, 598], "frequent": 576, "ask": 576, "consolid": 576, "eas": [576, 583, 605], "streamlin": 576, "scienc": 576, "anaconda": 576, "suit": [576, 599, 611], "esri": 576, "apach": 577, "softwar": [577, 579, 602, 605, 609], "copyright": 577, "accompani": 577, "research": 577, "wish": 577, "bibtex": 577, "misc": 577, "feng": 577, "tian": 577, "hanwen": 577, "haihao": 577, "shen": 577, "suyu": 577, "chen": 577, "titl": [577, 599], "howpublish": 577, "year": 577, "logo": [577, 602], "atom": 577, "phi": 577, "pentium": 577, "vtune": 577, "corpor": [577, 602], "subsidiari": [577, 602], "brand": [577, 602], "claim": [577, 602], "popularli": 578, "industri": [578, 605], "label_map": 578, "decis": 578, "ap": 578, "curv": 578, "turn": [578, 592], "target_boxes_num": 578, "str_label": 578, "int_label": 578, "inturn": 578, "cocomap": 578, "vocmap": 578, "categor": 578, "multiclass": 578, "multilabel": 578, "multi_metr": 578, "newmetr": 578, "reflect": [578, 602, 612], "recent": 579, "growth": [579, 604], "complex": [579, 604], "significantli": [579, 603, 604], "bfloat16": [579, 581, 589, 608], "half": [579, 589], "sixteen": 579, "bandwidth": 579, "launch": [579, 599], "3rd": [579, 605, 607, 608], "gen": [579, 605, 608], "codenam": 579, "x86": 579, "avx512": [579, 607], "vcvtne2ps2bf16": 579, "vcvtneps2bf16": 579, "vdpbf16p": 579, "avx512_bf16": 579, "consequ": 579, "persist": 580, "brought": [580, 582, 589, 607], "tf2": 580, "h5": 580, "onnx_ml_pb2": 580, "hybridblock": 580, "0000": 580, "saved_result": 580, "cuda": [581, 583], "subsequ": [581, 598], "acquir": 581, "analysi": [581, 598, 610], "heurist": [581, 598], "great": 581, "facilit": 581, "enhanc": [581, 608], "autocast": 581, "simultan": [581, 601, 606], "my_model": 581, "no_grad": 581, "memory_format": 581, "112": [581, 615], "plugin": [581, 599], "jupyterlab": [581, 587, 589, 591, 595], "aw": [581, 589, 605, 615], "amazon": [581, 589], "sagemak": [581, 589], "inlin": [581, 586, 589], "neural_cod": [581, 583, 585, 586, 587, 589], "superbench": 581, "enjoi": [582, 586, 589], "reload": [582, 599], "modern": 583, "democrat": [583, 605], "programm": [583, 589, 598], "nano_bf16_channels_last": 583, "resnet18": [583, 615], "nano_bf16_ipex_channels_last": 583, "nano_bf16_ipex": 583, "nano_bf16": 583, "nano_fp32_channels_last": 583, "nano_fp32_ipex_channels_last": 583, "nano_fp32_ipex": 583, "nano_gpu_to_cpu": 583, "nano_int8": 583, "nano_jit_bf16_channels_last": 583, "nano_jit_bf16_ipex_channels_last": 583, "nano_jit_bf16_ipex": 583, "nano_jit_bf16": 583, "nano_jit_fp32_channels_last": 583, "nano_jit_fp32_ipex_channels_last": 583, "nano_jit_fp32_ipex": 583, "nano_jit_fp32": 583, "nano_onnxruntime_fp32": 583, "nano_onnxruntime_int8_qlinear": 583, "openvino": 583, "nano_openvino_fp32": 583, "nano_openvino_int8": 583, "bc": [584, 592], "conda_prefix": 584, "echo": 584, "tradit": [584, 604], "libjemalloc": 584, "libiomp5": 584, "home": 584, "lib": 584, "ld_preload": 584, "malloc_conf": 584, "oversize_threshold": 584, "background_thread": 584, "metadata_thp": 584, "dirty_decay_m": 584, "9000000000": 584, "muzzy_decay_m": 584, "kmp_affin": 584, "kmp_blocktim": 584, "dnnl_primitive_cache_capac": 584, "cpufreq": 584, "scaling_governor": 584, "powersav": 584, "sudo": 584, "tee": 584, "pytorch_jit_script": [585, 588], "pytorch_channels_last": [585, 588], "run_bench": 585, "patch": [585, 598], "patch_path": 585, "your_patch_path": 585, "sweep": 585, "sweep_object": 585, "bench_config": 585, "bench_featur": 585, "sai": 586, "run_glu": [586, 587], "task_nam": [586, 587], "do_ev": [586, 587], "run_glue_optim": 586, "opt": 586, "static_ipex": 586, "auto_qu": 587, "v4": [587, 615], "albert": [587, 615], "sst2": [587, 615], "alexnet": [587, 615], "pytorch_amp": 588, "optimize_for_infer": 588, "pytorch_jit_trac": 588, "pytorch_jit_script_ofi": 588, "pytorch_jit_trace_ofi": 588, "torchdynamo": 588, "pytorch_torchdynamo_jit_script": 588, "pytorch_torchdynamo_jit_trac": 588, "pytorch_torchdynamo_jit_script_ofi": 588, "pytorch_torchdynamo_jit_trace_ofi": 588, "pytorch_inc_bf16": 588, "pytorch_inc_static_quant_fx": 588, "pytorch_inc_static_quant_ipex": 588, "pytorch_inc_dynamic_qu": 588, "pytorch_ipex_fp32": 588, "pytorch_ipex_bf16": 588, "pytorch_ipex_int8_static_qu": 588, "pytorch_ipex_int8_dynamic_qu": 588, "alibaba": [588, 595, 596, 605], "blade": 588, "disc": 588, "pytorch_aliblad": 588, "lightn": 588, "pytorch_lightning_bf16_cpu": 588, "tensorflow_amp": 588, "keras_amp": 588, "tensorflow_inc": 588, "keras_inc": 588, "onnx_inc_static_quant_qlinear": 588, "onnx_inc_static_quant_qdq": 588, "onnx_inc_dynamic_qu": 588, "optimum": [588, 589], "pytorch_inc_huggingface_optimum_stat": 588, "pytorch_inc_huggingface_optimum_dynam": 588, "intel_extension_for_transform": 588, "bigdl": [588, 589], "nano": [588, 589], "nano_": 588, "inc_auto": 588, "delight": 589, "announc": 589, "trainer": 589, "500": 589, "speed": [589, 604, 605, 607], "innov": [589, 605], "isa": 589, "xpu": 589, "delta": 589, "acc_delta": 589, "int8_acc": 589, "fp32_acc": 589, "ext": [591, 593, 595, 596, 597], "nodej": [591, 595], "jlpm": [591, 595], "yarn": [591, 595], "npm": [591, 592, 595], "lieu": [591, 595], "labextens": [591, 592, 595], "typescript": [591, 595], "watch": [591, 595], "termin": [591, 592, 595], "immedi": [591, 595], "rebuilt": [591, 595], "dev": [591, 595], "symlink": [591, 595], "blank": 592, "cell": 592, "gain": [592, 601, 605], "mkl": 592, "jemalloc": 592, "pip3": 592, "headless": 592, "pyproject": [593, 596], "toml": [593, 596], "twine": [593, 596], "whl": [593, 596], "dist": [593, 596], "sdist": [593, 596], "bdist_wheel": [593, 596], "frontend": [593, 596], "login": [593, 596, 610], "cut": [593, 596], "fork": [593, 596], "admin_github_token": [593, 596], "pypi_token": [593, 596], "npm_token": [593, 596], "secret": [593, 596], "draft": [593, 596], "changelog": [593, 596, 597], "pkg": [593, 596], "bot": [593, 596], "pick": [593, 596, 599], "feedstock": [593, 596], "hatch": 596, "notabl": 597, "vscode": [597, 599], "daili": 598, "advantag": [598, 606], "remot": 598, "market": 598, "sidebar": 598, "hover": 598, "diff": 598, "manifest": 599, "declar": 599, "palett": 599, "veri": [599, 607, 613], "registercommand": 599, "amodio": 599, "tsl": 599, "dbaeumer": 599, "eslint": 599, "press": 599, "f5": 599, "ctrl": [599, 615], "hello": 599, "world": 599, "breakpoint": 599, "consol": 599, "relaunch": 599, "toolbar": 599, "node_modul": 599, "viewlet": 599, "dropdown": 599, "startup": 599, "bundl": 599, "marketplac": [599, 605], "multi_object": 600, "peak": 600, "arbitrari": 601, "benefit": [601, 603], "p_conf": 601, "platinum": [602, 615], "8358": 602, "manufactur": 602, "m50cyp2sbstd": 602, "se5c620": 602, "86b": 602, "0005": 602, "2202160810": 602, "microcod": 602, "0xd000332": 602, "irq": 602, "60ghz": 602, "6chz": 602, "perf": 602, "512gb": 602, "16x32gb": 602, "ddr4": 602, "3200": 602, "mt": 602, "nic": 602, "1x": 602, "ethernet": 602, "100mb": 602, "i350": 602, "gigabit": 602, "drive": 602, "intel_ssdsckkb48": 602, "447": 602, "1g": 602, "factor": [602, 615], "publicli": 602, "degre": 602, "mark": 602, "trademark": 602, "art": [603, 604], "increasingli": [603, 604], "crucial": [603, 604], "salient": [603, 604], "nonzero": [603, 604], "irregular": [603, 604], "anywher": [603, 604], "2in4": 603, "amper": 603, "oc": 603, "kh": 603, "kw": 603, "fastform": 603, "finetun": [603, 604, 615], "downstream": [603, 604], "formula": [603, 604], "exemplifi": 603, "complement": 603, "pruner1": 603, "layer1": 603, "layer3": 603, "rate": [603, 607], "pruner2": 603, "snip_momentum_progress": 603, "layer2": 603, "num_train_epoch": 603, "lr_schedul": 603, "mention": 603, "cv": [603, 604], "grown": 604, "unpreced": 604, "smooth": 604, "cube": 604, "discourag": 604, "idea": [604, 613], "penal": 604, "l2": 604, "parametr": 604, "namhoon": 604, "lee": 604, "thalaiyasingam": 604, "ajanthan": 604, "philip": 604, "torr": 604, "2019": 604, "tencent": 605, "deepen": 605, "cloud": 605, "foundat": 605, "intellig": 605, "applianc": 605, "bitnami": 605, "nov": 605, "signific": [605, 607], "sota": 605, "oct": 605, "plug": 605, "twitter": 605, "linkedin": 605, "zone": 605, "land": 605, "gcp": 605, "azur": 605, "pat": 605, "keynot": 605, "intelon": 605, "sep": 605, "chines": 605, "aug": 605, "purif": 605, "sacrif": 605, "jun": 605, "partner": 605, "apr": 605, "ecosystem": 605, "mar": 605, "feb": 605, "jan": 605, "bilibili": 605, "ml": 605, "doubl": 605, "mlperf": [605, 615], "reconstruct": 605, "abound": 605, "lpot": [605, 609], "cern": 605, "gan": 605, "3dgan": 605, "4th": 605, "iml": 605, "workshop": 605, "highli": 605, "intelcaff": 605, "aris": 606, "tell": 606, "henc": 606, "post_training_dynamic_qu": [606, 613], "quant_aware_train": 606, "initial_spars": [606, 614], "prune_typ": [606, 614], "basic_magnitud": [606, 614], "start_epoch": [606, 614], "end_epoch": [606, 614], "update_frequ": 606, "prune_domain": 606, "tile_pattern_1x1": 606, "graph_optimization_level": 606, "disable_al": 606, "invent": 607, "int4": 607, "cost": 607, "theoret": 607, "affin": 607, "zeropoint": 607, "asymmetr": [607, 613], "earli": [607, 613, 614], "overflow": 607, "solv": [607, 609], "fbgemm": 607, "unseen": 607, "enough": 607, "peopl": 607, "emul": 607, "mimic": 607, "fact": 607, "ultim": 607, "pain": 607, "lossi": 607, "understand": [607, 611], "philosophi": 607, "val_dataset": 607, "val_dataload": 607, "worker": 607, "ping_memori": 607, "val_load": 607, "avg": 607, "bf16wrapper": 608, "retrac": 608, "site": 609, "assist": 609, "comparison": [609, 611], "sed": 609, "your_script": 609, "hyperparamet": [610, 613], "backbon": 610, "interact": 610, "sigopt_api_token": [610, 613], "sigopt_project_id": [610, 613], "sigopt_experiment_id": 610, "nc": [610, 613], "certain": 610, "suffici": 610, "ordinari": 610, "capac": 610, "sigopt_experiment_nam": [610, 613], "mobilenet": [610, 615], "8266": 610, "8372": 610, "2132": 610, "83": [610, 615], "7495": 610, "8299": 610, "8294": 610, "85": [610, 615], "0837": 610, "8291": 610, "4469": 610, "discov": 611, "why": 611, "valuabl": 611, "instrument": 611, "writer": 611, "_pre_eval_hook": 611, "submodul": 611, "whitelist": 611, "_recordingobserv": 611, "output_tensors_dict": 611, "current_it": 611, "get_tensor_valu": 611, "_observer_forward_hook": 611, "activation_post_process": 611, "_add_observer_": 611, "named_children": 611, "leaf": 611, "add_modul": 611, "register_forward_hook": 611, "dump_tim": 611, "summarywrit": 611, "_acc": 611, "tune_": 611, "add_graph": 611, "get_observer_dict": 611, "observer_dict": 611, "is_quant": 611, "add_histogram": 611, "bind_al": 611, "logdir_spec": 611, "tune_0_acc0": 611, "tune_1": 611, "tune_1_acc0": 611, "79": [611, 615], "four": 611, "baseline_acc_0": 611, "776": 611, "tune_1_acc_0": 611, "095": 611, "runs_v3": 611, "image_recognit": 611, "run_tuning_dump_tensor": 611, "sh": 611, "inceptionv3": 611, "v0": 611, "cg": 611, "conv0": 611, "op_wis": [611, 614], "bash": 611, "run_tun": 611, "topologi": 611, "inception_v3": 611, "dataset_loc": 611, "inceptionv3_fp32_pretrained_model": 611, "nc_inceptionv3": 611, "inceptionv3_dump_tensor": 611, "poor": 611, "disappear": 611, "centercrop": 612, "randomresizedcrop": 612, "randomcrop": 612, "cropres": 612, "decodeimag": 612, "jpeg": 612, "encodejp": 612, "alignimagechannel": 612, "68": [612, 615], "116": 612, "78": [612, 615], "103": 612, "94": [612, 615], "017": 612, "bilinearimagenet": [612, 614], "totensor": 612, "topilimag": 612, "padding_mod": 612, "border": 612, "colorjitt": 612, "bright": 612, "satur": 612, "hue": 612, "jitter": 612, "tondarrai": 612, "human": 613, "post_training_auto_qu": 613, "ii": 613, "iii": 613, "classic": 613, "primari": 613, "spent": 613, "hawq_v2_loss": 613, "model_loss": 613, "compli": 613, "focu": 613, "short": 613, "never": 613, "loglevel": 613, "endlessli": 613, "perspect": 613, "smbo": 613, "appl": 613, "surrog": 613, "divid": 613, "quantil": 613, "x1": 613, "x2": 613, "densiti": 613, "parzen": 613, "greatest": 613, "hour": 613, "dai": 613, "abctunestrategi": 613, "overridden": 613, "mobilenet_v1": 614, "onnxrt_integ": 614, "onnxrt_qlinear": 614, "image_tensor": 614, "subsect": 614, "model_wis": 614, "conv1": 614, "hyper": 614, "40": [614, 615], "06": [614, 615], "beta_1": 614, "beta_2": 614, "999": 614, "sparsecategoricalcrossentropi": 614, "reduct": 614, "sum_over_batch_s": 614, "from_logit": 614, "54": [614, 615], "19": [614, 615], "90": [614, 615], "nesterov": 614, "weight_decai": 614, "overal": 614, "8380": 615, "performancethroughput": 615, "sec": 615, "efficientnet": 615, "76": 615, "74": 615, "91": 615, "43": 615, "69": 615, "32x": 615, "cnn": 615, "incept": 615, "37": 615, "65": 615, "38": 615, "77": 615, "53": 615, "62": 615, "57x": 615, "46": 615, "61": 615, "58x": 615, "resnet101": 615, "39": 615, "63": 615, "11x": 615, "71": 615, "51x": 615, "26": 615, "59": 615, "23": 615, "06x": 615, "25x": 615, "70": 615, "44": 615, "00": 615, "163": 615, "133": 615, "22x": 615, "73": 615, "97": 615, "49": 615, "111": 615, "20x": 615, "v3": 615, "67": 615, "43x": 615, "18": 615, "56": 615, "53x": 615, "36": 615, "33x": 615, "44x": 615, "374": 615, "226": 615, "66x": 615, "92": 615, "41x": 615, "fashion": 615, "359": 615, "244": 615, "47x": 615, "172": 615, "66": 615, "98x": 615, "153": 615, "76x": 615, "151": 615, "35x": 615, "26x": 615, "72": 615, "99": 615, "56x": 615, "82": 615, "93x": 615, "vgg16": 615, "89": 615, "178": 615, "14x": 615, "vgg19": 615, "156": 615, "18x": 615, "23x": 615, "barthez": 615, "81": 615, "86": 615, "82x": 615, "203": 615, "01x": 615, "216": 615, "102": 615, "10x": 615, "218": 615, "stsb": 615, "57": 615, "48": 615, "49x": 615, "93": 615, "70x": 615, "50x": 615, "40x": 615, "blendcnn": 615, "3878": 615, "3717": 615, "04x": 615, "camembert": 615, "188": 615, "91x": 615, "deberta": 615, "124": 615, "81x": 615, "347": 615, "73x": 615, "382": 615, "198": 615, "flaubert": 615, "561": 615, "35": 615, "370": 615, "52x": 615, "hubert": 615, "84": 615, "36x": 615, "409": 615, "181": 615, "longform": 615, "28x": 615, "mbart": 615, "16x": 615, "639": 615, "490": 615, "31x": 615, "lvwerra": 615, "pegasu": 615, "samsum": 615, "19x": 615, "peleenet": 615, "419": 615, "316": 615, "686": 615, "332": 615, "07x": 615, "611": 615, "333": 615, "83x": 615, "327": 615, "162": 615, "resnext101_32x8d": 615, "175": 615, "88x": 615, "197": 615, "99x": 615, "se_resnext50_32x4d": 615, "308": 615, "144": 615, "13x": 615, "squeezebert": 615, "186": 615, "155": 615, "78x": 615, "transfo": 615, "xl": 615, "37x": 615, "wave2vec2": 615, "60": 615, "58": 615, "21x": 615, "114": 615, "15x": 615, "yolo": 615, "29x": 615, "690": 615, "330": 615, "09x": 615, "614": 615, "334": 615, "84x": 615, "54x": 615, "410": 615, "168": 615, "resnext101_32x16d_wsl": 615, "1189": 615, "680": 615, "75x": 615, "677": 615, "381": 615, "59x": 615, "960": 615, "469": 615, "05x": 615, "962": 615, "466": 615, "arcfac": 615, "235": 615, "130": 615, "294": 615, "34x": 615, "604": 615, "51": 615, "80x": 615, "caffenet": 615, "1501": 615, "536": 615, "1493": 615, "533": 615, "1372": 615, "485": 615, "541": 615, "480": 615, "1250": 615, "753": 615, "1130": 615, "748": 615, "emot": 615, "ferplu": 615, "336": 615, "65x": 615, "fcn": 615, "googlenet": 615, "740": 615, "587": 615, "770": 615, "567": 615, "824": 615, "601": 615, "819": 615, "597": 615, "45x": 615, "613": 615, "506": 615, "2454": 615, "1543": 615, "2164": 615, "1564": 615, "38x": 615, "2147": 615, "1046": 615, "1877": 615, "1054": 615, "mobilenetv2": 615, "2751": 615, "1797": 615, "2656": 615, "1835": 615, "7615": 615, "7646": 615, "764": 615, "901": 615, "434": 615, "141": 615, "7614": 615, "575": 615, "952": 615, "433": 615, "7226": 615, "7229": 615, "761": 615, "432": 615, "615": 615, "722": 615, "032": 615, "894": 615, "885": 615, "454": 615, "95x": 615, "603": 615, "455": 615, "644": 615, "636": 615, "254": 615, "791": 615, "shufflenet": 615, "2298": 615, "55": 615, "1480": 615, "55x": 615, "1951": 615, "1490": 615, "squeezenet": 615, "2588": 615, "1605": 615, "61x": 615, "2566": 615, "1936": 615, "725": 615, "570": 615, "27x": 615, "666": 615, "539": 615, "641": 615, "519": 615, "633": 615, "492": 615, "542": 615, "401": 615, "68x": 615, "tini": 615, "yolov3": 615, "648": 615, "518": 615, "221": 615, "319": 615, "307": 615, "30x": 615, "yolov4": 615, "zfnet": 615, "459": 615, "261": 615, "460": 615, "264": 615, "74x": 615, "441": 615, "337": 615, "272": 615, "211": 615, "152": 615, "423": 615, "180": 615, "311": 615, "69x": 615, "taskdataset": 615, "accuracyspars": 615, "ratiospars": 615, "commentsbalanc": 615, "unbalanc": 615, "classificationimagenet": 615, "76top": 615, "13top": 615, "magnitudepost": 615, "magnitudequant": 615, "answeringsquad": 615, "34f1": 615, "2x1": 615, "lassounbalanc": 615, "classificationmnli": 615, "mm": 615, "allbalanc": 615, "classificationsst": 615, "32accuraci": 615, "sensitivitybalanc": 615, "classificationqqp": 615, "classificationqnli": 615, "54accuraci": 615, "em": 615, "87f1": 615, "momentumunbalanc": 615, "momentumbalanc": 615, "90f1": 615, "59f1": 615, "23f1": 615, "classificationmrpc": 615, "52f1": 615, "26f1": 615, "61accuraci": 615, "7965": 615, "wideresnet40": 615, "9522": 615, "8178": 615, "0213": 615, "8235": 615, "027": 615, "5494": 615, "7153": 615, "5540": 615, "0046": 615, "5523": 615, "0029": 615, "vgg": 615, "7022": 615, "7415": 615, "7025": 615, "0003": 615, "6739": 615, "7399": 615, "6845": 615, "0106": 615, "7034": 615, "8382": 615, "bilstm": 615, "sst": 615, "8314": 615, "9403": 615, "9048": 615, "0734": 615, "7323": 615, "8256": 615, "8084": 615, "8814": 615, "7442": 615, "8371": 615, "0119": 615, "0115": 615, "tinybert": 615, "8018": 615, "8044": 615, "8363": 615, "8411": 615, "8025": 615, "8074": 615, "0007": 615, "0030": 615, "8626": 615, "8213": 615, "9091": 615, "8782": 615, "8684": 615, "8259": 615, "0058": 615, "distilroberta": 615, "6057": 615, "6455": 615, "6187": 615, "0130": 615, "c6i": 615, "2xlarg": 615, "c6a": 615, "c6g": 615, "a100cuda": 615, "compressor1": 616}, "objects": {"": [[0, 0, 0, "-", "644ec953a7dc_pruning_support"], [1, 0, 0, "-", "6ece06672ed3_v1_14"], [2, 0, 0, "-", "6f0d0f71d92e_v1_13"], [3, 0, 0, "-", "9e89549a08c8_v1_11"], [4, 0, 0, "-", "block_mask"], [5, 0, 0, "-", "env"], [268, 0, 0, "-", "neural_compressor"]], "6ece06672ed3_v1_14": [[1, 1, 1, "ece06672ed3_v1_14.update_dataloaders", "update_dataloaders"], [1, 1, 1, "ece06672ed3_v1_14.update_transformations", "update_transformations"]], "env": [[5, 1, 1, "", "run_migrations_offline"], [5, 1, 1, "", "run_migrations_online"]], "neural_compressor": [[268, 2, 1, "", "Benchmark"], [268, 2, 1, "", "DistillationConfig"], [268, 2, 1, "", "PostTrainingQuantConfig"], [268, 2, 1, "", "QuantizationAwareTrainingConfig"], [268, 2, 1, "", "WeightPruningConfig"], [7, 0, 0, "-", "adaptor"], [144, 0, 0, "-", "algorithm"], [146, 0, 0, "-", "benchmark"], [149, 0, 0, "-", "conf"], [151, 0, 0, "-", "config"], [152, 0, 0, "-", "contrib"], [177, 0, 0, "-", "data"], [226, 0, 0, "-", "experimental"], [275, 0, 0, "-", "metric"], [277, 0, 0, "-", "mix_precision"], [279, 0, 0, "-", "model"], [287, 0, 0, "-", "objective"], [289, 0, 0, "-", "pruner"], [303, 0, 0, "-", "quantization"], [268, 1, 1, "", "set_random_seed"], [268, 1, 1, "", "set_tensorboard"], [268, 1, 1, "", "set_workspace"], [310, 0, 0, "-", "strategy"], [319, 0, 0, "-", "training"], [323, 0, 0, "-", "utils"], [465, 0, 0, "-", "ux"], [511, 0, 0, "-", "version"]], "neural_compressor.Benchmark": [[268, 3, 1, "", "dataloader"], [268, 3, 1, "", "metric"], [268, 3, 1, "", "postprocess"]], "neural_compressor.DistillationConfig": [[268, 4, 1, "", "criterion"], [268, 4, 1, "", "optimizer"], [268, 4, 1, "", "teacher_model"]], "neural_compressor.PostTrainingQuantConfig": [[268, 4, 1, "", "approach"], [268, 4, 1, "", "tuning_criterion"]], "neural_compressor.QuantizationAwareTrainingConfig": [[268, 4, 1, "", "approach"]], "neural_compressor.WeightPruningConfig": [[268, 4, 1, "", "weight_compression"]], "neural_compressor.adaptor": [[6, 0, 0, "-", "adaptor"], [8, 0, 0, "-", "keras"], [9, 0, 0, "-", "keras_utils"], [11, 0, 0, "-", "mxnet"], [12, 0, 0, "-", "mxnet_utils"], [14, 0, 0, "-", "onnxrt"], [16, 0, 0, "-", "ox_utils"], [39, 0, 0, "-", "pytorch"], [40, 0, 0, "-", "query"], [41, 0, 0, "-", "tensorflow"], [101, 0, 0, "-", "tf_utils"], [138, 0, 0, "-", "torch_utils"]], "neural_compressor.adaptor.adaptor": [[6, 2, 1, "", "Adaptor"], [6, 1, 1, "", "adaptor_registry"]], "neural_compressor.adaptor.adaptor.Adaptor": [[6, 3, 1, "", "convert"], [6, 3, 1, "", "evaluate"], [6, 3, 1, "", "inspect_tensor"], [6, 3, 1, "", "quantize"], [6, 3, 1, "", "quantize_input"], [6, 3, 1, "", "query_fused_patterns"], [6, 3, 1, "", "query_fw_capability"], [6, 3, 1, "", "save"], [6, 3, 1, "", "set_tensor"]], "neural_compressor.adaptor.keras": [[8, 2, 1, "", "KerasAdaptor"], [8, 2, 1, "", "KerasQuery"]], "neural_compressor.adaptor.keras.KerasAdaptor": [[8, 3, 1, "", "convert"], [8, 3, 1, "", "evaluate"], [8, 3, 1, "", "get_optype_wise_ability"], [8, 3, 1, "", "inspect_tensor"], [8, 3, 1, "", "quantize"], [8, 3, 1, "", "quantize_input"], [8, 3, 1, "", "query_fw_capability"], [8, 3, 1, "", "save"], [8, 3, 1, "", "set_tensor"]], "neural_compressor.adaptor.keras.KerasQuery": [[8, 3, 1, "", "get_op_types"], [8, 3, 1, "", "get_op_types_by_precision"], [8, 3, 1, "", "get_precisions"], [8, 3, 1, "", "get_quantization_capability"], [8, 3, 1, "", "get_version"]], "neural_compressor.adaptor.keras_utils": [[10, 0, 0, "-", "quantizer"]], "neural_compressor.adaptor.mxnet": [[11, 2, 1, "", "MxNetAdaptor"]], "neural_compressor.adaptor.mxnet.MxNetAdaptor": [[11, 3, 1, "", "evaluate"], [11, 3, 1, "", "inspect_tensor"], [11, 3, 1, "", "quantize"], [11, 3, 1, "", "query_fw_capability"], [11, 3, 1, "", "recover_tuned_model"], [11, 3, 1, "", "set_tensor"]], "neural_compressor.adaptor.mxnet_utils": [[13, 0, 0, "-", "util"]], "neural_compressor.adaptor.mxnet_utils.util": [[13, 2, 1, "", "CalibCollector"], [13, 2, 1, "", "CalibData"], [13, 2, 1, "", "CollectorBase"], [13, 2, 1, "", "DataIterLoader"], [13, 2, 1, "", "DataLoaderWrap"], [13, 2, 1, "", "NameCollector"], [13, 2, 1, "", "OpType"], [13, 2, 1, "", "TensorCollector"], [13, 1, 1, "", "amp_convert"], [13, 1, 1, "", "calib_model"], [13, 1, 1, "", "check_mx_version"], [13, 1, 1, "", "combine_capabilities"], [13, 1, 1, "", "create_data_example"], [13, 1, 1, "", "distribute_calib_tensors"], [13, 1, 1, "", "ensure_list"], [13, 1, 1, "", "fuse"], [13, 1, 1, "", "get_framework_name"], [13, 1, 1, "", "is_model_quantized"], [13, 1, 1, "", "isiterable"], [13, 1, 1, "", "make_module"], [13, 1, 1, "", "make_nc_model"], [13, 1, 1, "", "make_symbol_block"], [13, 1, 1, "", "ndarray_to_device"], [13, 1, 1, "", "parse_tune_config"], [13, 1, 1, "", "prepare_dataloader"], [13, 1, 1, "", "prepare_model"], [13, 1, 1, "", "prepare_model_data"], [13, 1, 1, "", "quantize_sym_model"], [13, 1, 1, "", "query_quantizable_nodes"], [13, 1, 1, "", "run_forward"]], "neural_compressor.adaptor.mxnet_utils.util.CalibCollector": [[13, 3, 1, "", "calc_kl_th_dict"], [13, 3, 1, "", "collect_gluon"]], "neural_compressor.adaptor.mxnet_utils.util.CalibData": [[13, 4, 1, "", "min_max_dict"], [13, 3, 1, "", "post_collect"]], "neural_compressor.adaptor.mxnet_utils.util.CollectorBase": [[13, 3, 1, "", "collect_gluon"], [13, 3, 1, "", "collect_module"], [13, 3, 1, "", "post_batch"], [13, 3, 1, "", "pre_batch"]], "neural_compressor.adaptor.mxnet_utils.util.NameCollector": [[13, 3, 1, "", "collect_gluon"]], "neural_compressor.adaptor.mxnet_utils.util.TensorCollector": [[13, 3, 1, "", "collect_gluon"], [13, 3, 1, "", "pre_batch"]], "neural_compressor.adaptor.onnxrt": [[14, 2, 1, "", "ONNXRTQuery"], [14, 2, 1, "", "ONNXRT_IntegerOpsAdaptor"], [14, 2, 1, "", "ONNXRT_QDQAdaptor"], [14, 2, 1, "", "ONNXRT_QLinearOpsAdaptor"], [14, 2, 1, "", "ONNXRUNTIMEAdaptor"]], "neural_compressor.adaptor.onnxrt.ONNXRTQuery": [[14, 3, 1, "", "get_graph_optimization"], [14, 3, 1, "", "get_op_types"], [14, 3, 1, "", "get_op_types_by_precision"], [14, 3, 1, "", "get_precisions"], [14, 3, 1, "", "get_quantization_capability"], [14, 3, 1, "", "get_version"]], "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor": [[14, 3, 1, "", "evaluate"], [14, 3, 1, "", "inspect_tensor"], [14, 3, 1, "", "quantize"], [14, 3, 1, "", "query_fw_capability"], [14, 3, 1, "", "recover"], [14, 3, 1, "", "save"], [14, 3, 1, "", "set_tensor"]], "neural_compressor.adaptor.ox_utils": [[15, 0, 0, "-", "calibration"], [28, 0, 0, "-", "operators"], [37, 0, 0, "-", "quantizer"], [38, 0, 0, "-", "util"]], "neural_compressor.adaptor.ox_utils.calibration": [[15, 2, 1, "", "ONNXRTAugment"]], "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment": [[15, 3, 1, "", "augment_graph"], [15, 3, 1, "", "calculate_quantization_params"], [15, 3, 1, "", "calculate_scale_zeropoint"], [15, 3, 1, "", "dump_calibration"], [15, 3, 1, "", "dump_minmax"], [15, 3, 1, "", "dump_tensor"], [15, 3, 1, "", "get_intermediate_outputs"]], "neural_compressor.adaptor.ox_utils.operators": [[17, 0, 0, "-", "activation"], [18, 0, 0, "-", "argmax"], [19, 0, 0, "-", "attention"], [20, 0, 0, "-", "binary_op"], [21, 0, 0, "-", "concat"], [22, 0, 0, "-", "conv"], [23, 0, 0, "-", "direct_q8"], [24, 0, 0, "-", "embed_layernorm"], [25, 0, 0, "-", "gather"], [26, 0, 0, "-", "gavgpool"], [27, 0, 0, "-", "gemm"], [29, 0, 0, "-", "lstm"], [30, 0, 0, "-", "matmul"], [31, 0, 0, "-", "maxpool"], [32, 0, 0, "-", "ops"], [33, 0, 0, "-", "pad"], [34, 0, 0, "-", "pooling"], [35, 0, 0, "-", "resize"], [36, 0, 0, "-", "split"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[17, 2, 1, "", "ActivationOperator"], [17, 2, 1, "", "QActivationOperator"], [17, 2, 1, "", "RemovableActivationOperator"]], "neural_compressor.adaptor.ox_utils.operators.activation.ActivationOperator": [[17, 3, 1, "", "convert"], [17, 3, 1, "", "convert_check"], [17, 3, 1, "", "quantize"], [17, 3, 1, "", "quantize_check"]], "neural_compressor.adaptor.ox_utils.operators.activation.QActivationOperator": [[17, 3, 1, "", "convert"]], "neural_compressor.adaptor.ox_utils.operators.activation.RemovableActivationOperator": [[17, 3, 1, "", "quantize"], [17, 3, 1, "", "quantize_check"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[18, 2, 1, "", "ArgMaxOperator"], [18, 2, 1, "", "QArgMaxOperator"]], "neural_compressor.adaptor.ox_utils.operators.argmax.ArgMaxOperator": [[18, 3, 1, "", "convert"], [18, 3, 1, "", "convert_check"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[19, 2, 1, "", "AttentionOperator"], [19, 2, 1, "", "QAttentionOperator"]], "neural_compressor.adaptor.ox_utils.operators.attention.AttentionOperator": [[19, 3, 1, "", "convert"], [19, 3, 1, "", "convert_check"], [19, 3, 1, "", "quantize"]], "neural_compressor.adaptor.ox_utils.operators.attention.QAttentionOperator": [[19, 3, 1, "", "convert"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[20, 2, 1, "", "BinaryOperator"], [20, 2, 1, "", "QBinaryOperator"]], "neural_compressor.adaptor.ox_utils.operators.binary_op.BinaryOperator": [[20, 3, 1, "", "convert"], [20, 3, 1, "", "convert_check"], [20, 3, 1, "", "quantize"], [20, 3, 1, "", "quantize_check"]], "neural_compressor.adaptor.ox_utils.operators.binary_op.QBinaryOperator": [[20, 3, 1, "", "convert"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[21, 2, 1, "", "ConcatOperator"], [21, 2, 1, "", "QConcatOperator"]], "neural_compressor.adaptor.ox_utils.operators.concat.ConcatOperator": [[21, 3, 1, "", "cast"], [21, 3, 1, "", "convert"], [21, 3, 1, "", "convert_check"], [21, 3, 1, "", "quantize"], [21, 3, 1, "", "quantize_check"]], "neural_compressor.adaptor.ox_utils.operators.concat.QConcatOperator": [[21, 3, 1, "", "convert"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[22, 2, 1, "", "ConvOperator"], [22, 2, 1, "", "QConvOperator"]], "neural_compressor.adaptor.ox_utils.operators.conv.ConvOperator": [[22, 3, 1, "", "convert"], [22, 3, 1, "", "convert_check"], [22, 3, 1, "", "quantize"]], "neural_compressor.adaptor.ox_utils.operators.conv.QConvOperator": [[22, 3, 1, "", "convert"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[23, 2, 1, "", "Direct8BitOperator"], [23, 2, 1, "", "DirectCastOperator"], [23, 2, 1, "", "QDirectOperator"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8.Direct8BitOperator": [[23, 3, 1, "", "cast"], [23, 3, 1, "", "convert"], [23, 3, 1, "", "convert_check"], [23, 3, 1, "", "quantize"], [23, 3, 1, "", "quantize_check"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8.DirectCastOperator": [[23, 3, 1, "", "cast"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[24, 2, 1, "", "EmbedLayerNormalizationOperator"], [24, 2, 1, "", "QEmbedLayerNormalizationOperator"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.EmbedLayerNormalizationOperator": [[24, 3, 1, "", "convert"], [24, 3, 1, "", "convert_check"], [24, 3, 1, "", "quantize"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.QEmbedLayerNormalizationOperator": [[24, 3, 1, "", "convert"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[25, 2, 1, "", "GatherOperator"], [25, 2, 1, "", "QGatherOperator"]], "neural_compressor.adaptor.ox_utils.operators.gather.GatherOperator": [[25, 3, 1, "", "convert"], [25, 3, 1, "", "convert_check"], [25, 3, 1, "", "quantize"], [25, 3, 1, "", "quantize_check"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[26, 2, 1, "", "GlobalAveragePoolOperator"], [26, 2, 1, "", "QGlobalAveragePoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool.GlobalAveragePoolOperator": [[26, 3, 1, "", "convert"], [26, 3, 1, "", "convert_check"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool.QGlobalAveragePoolOperator": [[26, 3, 1, "", "convert"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[27, 2, 1, "", "GemmOperator"], [27, 2, 1, "", "QGemmOperator"]], "neural_compressor.adaptor.ox_utils.operators.gemm.GemmOperator": [[27, 3, 1, "", "convert"], [27, 3, 1, "", "convert_check"], [27, 3, 1, "", "quantize"], [27, 3, 1, "", "quantize_check"]], "neural_compressor.adaptor.ox_utils.operators.gemm.QGemmOperator": [[27, 3, 1, "", "convert"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[29, 2, 1, "", "LSTMOperator"]], "neural_compressor.adaptor.ox_utils.operators.lstm.LSTMOperator": [[29, 3, 1, "", "convert"], [29, 3, 1, "", "convert_check"], [29, 3, 1, "", "quantize"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[30, 2, 1, "", "MatMulOperator"], [30, 2, 1, "", "QMatMulOperator"]], "neural_compressor.adaptor.ox_utils.operators.matmul.MatMulOperator": [[30, 3, 1, "", "convert"], [30, 3, 1, "", "convert_check"], [30, 3, 1, "", "quantize"]], "neural_compressor.adaptor.ox_utils.operators.matmul.QMatMulOperator": [[30, 3, 1, "", "convert"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[31, 2, 1, "", "MaxPoolOperator"], [31, 2, 1, "", "QMaxPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.maxpool.MaxPoolOperator": [[31, 3, 1, "", "convert"], [31, 3, 1, "", "convert_check"], [31, 3, 1, "", "quantize"], [31, 3, 1, "", "quantize_check"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[32, 2, 1, "", "Operator"], [32, 2, 1, "", "QOperator"], [32, 1, 1, "", "op_registry"], [32, 1, 1, "", "qop_registry"]], "neural_compressor.adaptor.ox_utils.operators.ops.Operator": [[32, 3, 1, "", "cast"], [32, 3, 1, "", "convert"], [32, 3, 1, "", "convert_check"], [32, 3, 1, "", "quantize"], [32, 3, 1, "", "quantize_check"]], "neural_compressor.adaptor.ox_utils.operators.ops.QOperator": [[32, 3, 1, "", "convert"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[33, 2, 1, "", "PadOperator"], [33, 2, 1, "", "QPadOperator"]], "neural_compressor.adaptor.ox_utils.operators.pad.PadOperator": [[33, 3, 1, "", "convert"], [33, 3, 1, "", "convert_check"], [33, 3, 1, "", "quantize"], [33, 3, 1, "", "quantize_check"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[34, 2, 1, "", "PoolOperator"], [34, 2, 1, "", "QPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.pooling.PoolOperator": [[34, 3, 1, "", "convert"], [34, 3, 1, "", "convert_check"], [34, 3, 1, "", "quantize"], [34, 3, 1, "", "quantize_check"]], "neural_compressor.adaptor.ox_utils.operators.pooling.QPoolOperator": [[34, 3, 1, "", "convert"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[35, 2, 1, "", "QResizeOperator"], [35, 2, 1, "", "ResizeOperator"]], "neural_compressor.adaptor.ox_utils.operators.resize.ResizeOperator": [[35, 3, 1, "", "convert"], [35, 3, 1, "", "convert_check"], [35, 3, 1, "", "quantize"], [35, 3, 1, "", "quantize_check"]], "neural_compressor.adaptor.ox_utils.operators.split": [[36, 2, 1, "", "QSplitOperator"], [36, 2, 1, "", "SplitOperator"]], "neural_compressor.adaptor.ox_utils.operators.split.QSplitOperator": [[36, 3, 1, "", "convert"]], "neural_compressor.adaptor.ox_utils.operators.split.SplitOperator": [[36, 3, 1, "", "cast"], [36, 3, 1, "", "convert"], [36, 3, 1, "", "convert_check"], [36, 3, 1, "", "quantize"]], "neural_compressor.adaptor.ox_utils.quantizer": [[37, 2, 1, "", "Quantizer"]], "neural_compressor.adaptor.ox_utils.quantizer.Quantizer": [[37, 3, 1, "", "check_opset_version"], [37, 3, 1, "", "convert_qdq_to_operator_oriented"], [37, 3, 1, "", "dequantize_tensor"], [37, 3, 1, "", "dtype_cast"], [37, 3, 1, "", "get_bias_add_nodes"], [37, 3, 1, "", "insert_qdq"], [37, 3, 1, "", "is_valid_quantize_weight"], [37, 3, 1, "", "merge_dedicated_qdq_pair"], [37, 3, 1, "", "quantize_bias"], [37, 3, 1, "", "quantize_bias_tensor"], [37, 3, 1, "", "quantize_inputs"], [37, 3, 1, "", "quantize_model"], [37, 3, 1, "", "quantize_outputs"], [37, 3, 1, "", "quantize_weight_per_channel"], [37, 3, 1, "", "quantize_weights_per_channel"], [37, 3, 1, "", "remove_redundant_pairs"], [37, 3, 1, "", "should_cast"], [37, 3, 1, "", "should_convert"], [37, 3, 1, "", "should_quantize"], [37, 3, 1, "", "tensor_proto_to_array"]], "neural_compressor.adaptor.ox_utils.util": [[38, 2, 1, "", "QuantFormat"], [38, 2, 1, "", "QuantType"], [38, 2, 1, "", "QuantizationMode"], [38, 2, 1, "", "QuantizedInitializer"], [38, 2, 1, "", "QuantizedValue"], [38, 2, 1, "", "QuantizedValueType"], [38, 2, 1, "", "ValueInfo"], [38, 1, 1, "", "attribute_to_kwarg"], [38, 1, 1, "", "calculate_scale_zp"], [38, 1, 1, "", "cast_tensor"], [38, 1, 1, "", "collate_preds"], [38, 1, 1, "", "dequantize_data"], [38, 1, 1, "", "dequantize_data_with_scale_zero"], [38, 1, 1, "", "dtype_to_name"], [38, 1, 1, "", "find_by_name"], [38, 1, 1, "", "is_B_transposed"], [38, 1, 1, "", "make_dquant_node"], [38, 1, 1, "", "make_quant_node"], [38, 1, 1, "", "quantize_data"], [38, 1, 1, "", "quantize_data_per_channel"], [38, 1, 1, "", "quantize_data_with_scale_zero"], [38, 1, 1, "", "quantize_nparray"], [38, 1, 1, "", "remove_init_from_model_input"], [38, 1, 1, "", "split_shared_bias"]], "neural_compressor.adaptor.pytorch": [[39, 2, 1, "", "PyTorchAdaptor"], [39, 2, 1, "", "PyTorchQuery"], [39, 2, 1, "", "PyTorch_FXAdaptor"], [39, 2, 1, "", "PyTorch_IPEXAdaptor"], [39, 2, 1, "", "TemplateAdaptor"], [39, 1, 1, "", "get_ops_recursively"]], "neural_compressor.adaptor.pytorch.PyTorchAdaptor": [[39, 3, 1, "", "evaluate"], [39, 3, 1, "", "get_non_quant_modules"], [39, 3, 1, "", "inspect_tensor"], [39, 3, 1, "", "is_fused_child"], [39, 3, 1, "", "is_fused_op"], [39, 3, 1, "", "is_last_fused_child"], [39, 3, 1, "", "quantize"], [39, 3, 1, "", "query_fw_capability"], [39, 3, 1, "", "save"], [39, 3, 1, "", "set_tensor"], [39, 3, 1, "", "train"]], "neural_compressor.adaptor.pytorch.PyTorchQuery": [[39, 3, 1, "", "get_op_types"], [39, 3, 1, "", "get_op_types_by_precision"], [39, 3, 1, "", "get_quantization_capability"]], "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor": [[39, 3, 1, "", "calculate_op_sensitivity"], [39, 3, 1, "", "convert_sub_graph"], [39, 3, 1, "", "evaluate"], [39, 3, 1, "", "fuse_fx_model"], [39, 3, 1, "", "prepare_sub_graph"], [39, 3, 1, "", "quantize"], [39, 3, 1, "", "query_fw_capability"], [39, 3, 1, "", "train"]], "neural_compressor.adaptor.pytorch.PyTorch_IPEXAdaptor": [[39, 3, 1, "", "evaluate"], [39, 3, 1, "", "inspect_tensor"], [39, 3, 1, "", "quantize"], [39, 3, 1, "", "query_fw_capability"], [39, 3, 1, "", "save"]], "neural_compressor.adaptor.pytorch.TemplateAdaptor": [[39, 3, 1, "", "calculate_hessian_trace"], [39, 3, 1, "", "is_fused_module"]], "neural_compressor.adaptor.query": [[40, 2, 1, "", "QueryBackendCapability"]], "neural_compressor.adaptor.query.QueryBackendCapability": [[40, 3, 1, "", "get_fuse_patterns"], [40, 3, 1, "", "get_mixed_precision_combination"], [40, 3, 1, "", "get_op_types"], [40, 3, 1, "", "get_precisions"], [40, 3, 1, "", "get_quantization_capability"], [40, 3, 1, "", "get_version"], [40, 3, 1, "", "set_quantization_config"]], "neural_compressor.adaptor.tensorflow": [[41, 2, 1, "", "TensorFlowAdaptor"], [41, 2, 1, "", "TensorflowQuery"], [41, 2, 1, "", "Tensorflow_ITEXAdaptor"]], "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor": [[41, 3, 1, "", "calculate_op_sensitivity"], [41, 3, 1, "", "convert"], [41, 3, 1, "", "diagnosis_helper"], [41, 3, 1, "", "evaluate"], [41, 3, 1, "", "fused_node_mapping"], [41, 3, 1, "", "get_optype_wise_ability"], [41, 3, 1, "", "get_output_op_names"], [41, 3, 1, "", "inspect_activation"], [41, 3, 1, "", "inspect_tensor"], [41, 3, 1, "", "inspect_weight_and_bias"], [41, 3, 1, "", "qat_convert"], [41, 3, 1, "", "quantize"], [41, 3, 1, "", "quantize_input"], [41, 3, 1, "", "query_fw_capability"], [41, 3, 1, "", "recover_tuned_model"], [41, 3, 1, "", "save"], [41, 3, 1, "", "set_tensor"], [41, 3, 1, "", "train"]], "neural_compressor.adaptor.tensorflow.TensorflowQuery": [[41, 3, 1, "", "generate_internal_patterns"], [41, 3, 1, "", "get_bf16_patterns"], [41, 3, 1, "", "get_eightbit_patterns"], [41, 3, 1, "", "get_fuse_patterns"], [41, 3, 1, "", "get_grappler_optimization_cfg"], [41, 3, 1, "", "get_mixed_precision_combination"], [41, 3, 1, "", "get_op_types"], [41, 3, 1, "", "get_op_types_by_precision"], [41, 3, 1, "", "get_precisions"], [41, 3, 1, "", "get_quantization_capability"], [41, 3, 1, "", "get_version"]], "neural_compressor.adaptor.tensorflow.Tensorflow_ITEXAdaptor": [[41, 3, 1, "", "quantize"]], "neural_compressor.adaptor.tf_utils": [[42, 0, 0, "-", "graph_converter"], [43, 0, 0, "-", "graph_converter_without_calib"], [82, 0, 0, "-", "graph_rewriter"], [100, 0, 0, "-", "graph_util"], [102, 0, 0, "-", "quantize_graph"], [129, 0, 0, "-", "quantize_graph_common"], [132, 0, 0, "-", "transform_graph"], [135, 0, 0, "-", "util"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[42, 2, 1, "", "GraphConverter"]], "neural_compressor.adaptor.tf_utils.graph_converter.GraphConverter": [[42, 3, 1, "", "bf16_convert"], [42, 3, 1, "", "convert"], [42, 3, 1, "", "quantize"], [42, 3, 1, "", "quantize_with_qdq_pattern"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[43, 2, 1, "", "GraphConverterWithoutCalib"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib.GraphConverterWithoutCalib": [[43, 3, 1, "", "bf16_convert"], [43, 3, 1, "", "convert_without_calib"], [43, 3, 1, "", "quantize_without_calib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[45, 0, 0, "-", "bf16"], [70, 0, 0, "-", "generic"], [81, 0, 0, "-", "graph_base"], [90, 0, 0, "-", "int8"], [96, 0, 0, "-", "qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[44, 0, 0, "-", "bf16_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[44, 2, 1, "", "BF16Convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert.BF16Convert": [[44, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[46, 0, 0, "-", "convert_add_to_biasadd"], [47, 0, 0, "-", "convert_layout"], [48, 0, 0, "-", "convert_leakyrelu"], [49, 0, 0, "-", "convert_nan_to_random"], [50, 0, 0, "-", "convert_placeholder_to_const"], [51, 0, 0, "-", "dequantize_cast_optimizer"], [52, 0, 0, "-", "dilated_contraction"], [53, 0, 0, "-", "dummy_biasadd"], [54, 0, 0, "-", "expanddims_optimizer"], [55, 0, 0, "-", "fetch_weight_from_reshape"], [56, 0, 0, "-", "fold_batch_norm"], [57, 0, 0, "-", "fold_constant"], [58, 0, 0, "-", "fuse_biasadd_add"], [59, 0, 0, "-", "fuse_column_wise_mul"], [60, 0, 0, "-", "fuse_conv_with_math"], [61, 0, 0, "-", "fuse_decomposed_bn"], [62, 0, 0, "-", "fuse_decomposed_in"], [63, 0, 0, "-", "fuse_gelu"], [64, 0, 0, "-", "fuse_layer_norm"], [65, 0, 0, "-", "fuse_pad_with_conv"], [66, 0, 0, "-", "fuse_pad_with_fp32_conv"], [67, 0, 0, "-", "fuse_reshape_transpose"], [68, 0, 0, "-", "graph_cse_optimizer"], [69, 0, 0, "-", "grappler_pass"], [71, 0, 0, "-", "insert_print_node"], [72, 0, 0, "-", "move_squeeze_after_relu"], [73, 0, 0, "-", "pre_optimize"], [74, 0, 0, "-", "remove_training_nodes"], [75, 0, 0, "-", "rename_batch_norm"], [76, 0, 0, "-", "split_shared_input"], [77, 0, 0, "-", "strip_equivalent_nodes"], [78, 0, 0, "-", "strip_unused_nodes"], [79, 0, 0, "-", "switch_optimizer"], [80, 0, 0, "-", "update_enter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[46, 2, 1, "", "ConvertAddToBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd.ConvertAddToBiasAddOptimizer": [[46, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[47, 2, 1, "", "ConvertLayoutOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout.ConvertLayoutOptimizer": [[47, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[48, 2, 1, "", "ConvertLeakyReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu.ConvertLeakyReluOptimizer": [[48, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[49, 2, 1, "", "ConvertNanToRandom"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random.ConvertNanToRandom": [[49, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[50, 2, 1, "", "ConvertPlaceholderToConst"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const.ConvertPlaceholderToConst": [[50, 3, 1, "", "do_transformation"], [50, 3, 1, "", "strtobool"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer": [[51, 2, 1, "", "DequantizeCastOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer.DequantizeCastOptimizer": [[51, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[52, 2, 1, "", "DilatedContraction"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction.DilatedContraction": [[52, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[53, 2, 1, "", "InjectDummyBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd.InjectDummyBiasAddOptimizer": [[53, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[54, 2, 1, "", "ExpandDimsOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer.ExpandDimsOptimizer": [[54, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[55, 2, 1, "", "FetchWeightFromReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape.FetchWeightFromReshapeOptimizer": [[55, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[56, 2, 1, "", "FoldBatchNormNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm.FoldBatchNormNodesOptimizer": [[56, 3, 1, "", "do_transformation"], [56, 3, 1, "", "scale_after_normalization"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[57, 2, 1, "", "GraphFoldConstantOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.GraphFoldConstantOptimizer": [[57, 3, 1, "", "check_all_folded"], [57, 3, 1, "", "check_const_inputs"], [57, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[58, 2, 1, "", "FuseBiasAddAndAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add.FuseBiasAddAndAddOptimizer": [[58, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[59, 2, 1, "", "FuseColumnWiseMulOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul.FuseColumnWiseMulOptimizer": [[59, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[60, 2, 1, "", "FuseConvWithMathOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math.FuseConvWithMathOptimizer": [[60, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[61, 2, 1, "", "FuseDecomposedBNOptimizer"], [61, 1, 1, "", "bypass_reshape"], [61, 1, 1, "", "get_const_dim_count"], [61, 1, 1, "", "node_from_map"], [61, 1, 1, "", "node_name_from_input"], [61, 1, 1, "", "valid_reshape_inputs"], [61, 1, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.FuseDecomposedBNOptimizer": [[61, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[62, 2, 1, "", "FuseDecomposedINOptimizer"], [62, 1, 1, "", "bypass_reshape"], [62, 1, 1, "", "get_const_dim_count"], [62, 1, 1, "", "node_from_map"], [62, 1, 1, "", "node_name_from_input"], [62, 1, 1, "", "valid_reshape_inputs"], [62, 1, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.FuseDecomposedINOptimizer": [[62, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[63, 2, 1, "", "FuseGeluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu.FuseGeluOptimizer": [[63, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[64, 2, 1, "", "FuseLayerNormOptimizer"], [64, 1, 1, "", "node_from_map"], [64, 1, 1, "", "node_name_from_input"], [64, 1, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.FuseLayerNormOptimizer": [[64, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[65, 2, 1, "", "FusePadWithConv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv.FusePadWithConv2DOptimizer": [[65, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[66, 2, 1, "", "FusePadWithFP32Conv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv.FusePadWithFP32Conv2DOptimizer": [[66, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[67, 2, 1, "", "FuseTransposeReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose.FuseTransposeReshapeOptimizer": [[67, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[68, 2, 1, "", "GraphCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer.GraphCseOptimizer": [[68, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[69, 2, 1, "", "GrapplerOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass.GrapplerOptimizer": [[69, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[71, 2, 1, "", "InsertPrintMinMaxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node.InsertPrintMinMaxNode": [[71, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[72, 2, 1, "", "MoveSqueezeAfterReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu.MoveSqueezeAfterReluOptimizer": [[72, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[73, 2, 1, "", "PreOptimization"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize.PreOptimization": [[73, 3, 1, "", "get_excluded_node_names"], [73, 3, 1, "", "get_matched_nodes"], [73, 3, 1, "", "get_optimized_model"], [73, 3, 1, "", "has_positive_input"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[74, 2, 1, "", "RemoveTrainingNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes.RemoveTrainingNodesOptimizer": [[74, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[75, 2, 1, "", "RenameBatchNormOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm.RenameBatchNormOptimizer": [[75, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[76, 2, 1, "", "SplitSharedInputOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input.SplitSharedInputOptimizer": [[76, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[77, 2, 1, "", "StripEquivalentNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes.StripEquivalentNodesOptimizer": [[77, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[78, 2, 1, "", "StripUnusedNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes.StripUnusedNodesOptimizer": [[78, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[79, 2, 1, "", "SwitchOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer.SwitchOptimizer": [[79, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter": [[80, 2, 1, "", "UpdateEnterOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter.UpdateEnterOptimizer": [[80, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[81, 2, 1, "", "GraphRewriterBase"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base.GraphRewriterBase": [[81, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[83, 0, 0, "-", "freeze_fake_quant"], [84, 0, 0, "-", "freeze_value"], [85, 0, 0, "-", "freeze_value_without_calib"], [86, 0, 0, "-", "fuse_conv_redundant_dequantize"], [87, 0, 0, "-", "fuse_conv_requantize"], [88, 0, 0, "-", "fuse_matmul_redundant_dequantize"], [89, 0, 0, "-", "fuse_matmul_requantize"], [91, 0, 0, "-", "meta_op_optimizer"], [92, 0, 0, "-", "post_hostconst_converter"], [93, 0, 0, "-", "post_quantized_op_cse"], [94, 0, 0, "-", "rnn_convert"], [95, 0, 0, "-", "scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[83, 2, 1, "", "FreezeFakeQuantOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant.FreezeFakeQuantOpOptimizer": [[83, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[84, 2, 1, "", "FreezeValueTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.FreezeValueTransformer": [[84, 3, 1, "", "do_transformation"], [84, 3, 1, "", "generate_output_graph"], [84, 3, 1, "", "generate_output_graph_ranges"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[85, 2, 1, "", "FreezeValueWithoutCalibTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.FreezeValueWithoutCalibTransformer": [[85, 3, 1, "", "do_transformation_without_calib"], [85, 3, 1, "", "generate_output_graph"], [85, 3, 1, "", "generate_output_graph_ranges"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[86, 2, 1, "", "FuseConvRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize.FuseConvRedundantDequantizeTransformer": [[86, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[87, 2, 1, "", "FuseConvRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize.FuseConvRequantizeTransformer": [[87, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[88, 2, 1, "", "FuseMatMulRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize.FuseMatMulRedundantDequantizeTransformer": [[88, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[89, 2, 1, "", "FuseMatMulRequantizeDequantizeNewAPITransformer"], [89, 2, 1, "", "FuseMatMulRequantizeDequantizeTransformer"], [89, 2, 1, "", "FuseMatMulRequantizeNewAPITransformer"], [89, 2, 1, "", "FuseMatMulRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeNewAPITransformer": [[89, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeTransformer": [[89, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeNewAPITransformer": [[89, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeTransformer": [[89, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[91, 2, 1, "", "MetaInfoChangingMemOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer.MetaInfoChangingMemOpOptimizer": [[91, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[92, 2, 1, "", "PostHostConstConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter.PostHostConstConverter": [[92, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[93, 2, 1, "", "PostCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse.PostCseOptimizer": [[93, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[94, 2, 1, "", "QuantizedRNNConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert.QuantizedRNNConverter": [[94, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[95, 2, 1, "", "ScaleProPagationTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation.ScaleProPagationTransformer": [[95, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[97, 0, 0, "-", "insert_qdq_pattern"], [98, 0, 0, "-", "merge_duplicated_qdq"], [99, 0, 0, "-", "share_qdq_y_pattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[97, 2, 1, "", "GenerateGraphWithQDQPattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern.GenerateGraphWithQDQPattern": [[97, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[98, 2, 1, "", "MergeDuplicatedQDQOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq.MergeDuplicatedQDQOptimizer": [[98, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[99, 2, 1, "", "ShareQDQForItexYPatternOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern.ShareQDQForItexYPatternOptimizer": [[99, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_util": [[100, 2, 1, "", "GraphAnalyzer"], [100, 2, 1, "", "GraphRewriterHelper"]], "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer": [[100, 3, 1, "", "add_node"], [100, 3, 1, "", "dump_graph"], [100, 3, 1, "", "get_frame_info"], [100, 3, 1, "", "get_graph_input_output"], [100, 4, 1, "", "graph"], [100, 3, 1, "", "has_positive_input"], [100, 3, 1, "", "parse_graph"], [100, 3, 1, "", "query_fusion_pattern_nodes"], [100, 3, 1, "", "remove_node"], [100, 3, 1, "", "remove_node_with_single_input_output"], [100, 3, 1, "", "replace_const_node"], [100, 3, 1, "", "replace_constant_graph_with_constant_node"], [100, 3, 1, "", "replace_node"], [100, 3, 1, "", "replace_single_node"]], "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper": [[100, 3, 1, "", "analysis_rnn_model"], [100, 3, 1, "", "compare_node_attr"], [100, 3, 1, "", "create_constant_node"], [100, 3, 1, "", "create_node"], [100, 3, 1, "", "gen_valid_sampling_log"], [100, 3, 1, "", "generate_int32_bias_for_conv"], [100, 3, 1, "", "generate_int32_bias_for_matmul"], [100, 3, 1, "", "node_name_from_input"], [100, 3, 1, "", "set_attr_bool"], [100, 3, 1, "", "set_attr_dtype"], [100, 3, 1, "", "set_attr_float"], [100, 3, 1, "", "set_attr_int"], [100, 3, 1, "", "set_attr_int_list"], [100, 3, 1, "", "set_attr_string"], [100, 3, 1, "", "set_attr_string_list"], [100, 3, 1, "", "set_attr_tensor"], [100, 3, 1, "", "set_attr_type_list"], [100, 3, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[104, 0, 0, "-", "qat"], [120, 0, 0, "-", "qdq"], [122, 0, 0, "-", "quantize_graph_base"], [123, 0, 0, "-", "quantize_graph_bn"], [124, 0, 0, "-", "quantize_graph_concatv2"], [125, 0, 0, "-", "quantize_graph_conv"], [126, 0, 0, "-", "quantize_graph_for_intel_cpu"], [127, 0, 0, "-", "quantize_graph_matmul"], [128, 0, 0, "-", "quantize_graph_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[103, 0, 0, "-", "fake_quantize"], [105, 0, 0, "-", "quantize_config"], [106, 0, 0, "-", "quantize_helper"], [107, 0, 0, "-", "quantize_layers"], [112, 0, 0, "-", "quantize_wrapper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[103, 2, 1, "", "FakeQuantize"], [103, 2, 1, "", "FakeQuantizeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantize": [[103, 3, 1, "", "get_config"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantizeBase": [[103, 3, 1, "", "from_config"], [103, 3, 1, "", "get_config"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[105, 2, 1, "", "QuantizeConfig"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig": [[105, 3, 1, "", "add_quantize_recipe"], [105, 3, 1, "", "clear_quantize_recipe"], [105, 3, 1, "", "get_quantize_recipe"], [105, 3, 1, "", "is_empty"], [105, 3, 1, "", "query_layer"], [105, 3, 1, "", "remove_layer"], [105, 3, 1, "", "remove_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[106, 1, 1, "", "init_quantize_config"], [106, 1, 1, "", "qat_clone_function"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[108, 0, 0, "-", "optimize_layer"], [109, 0, 0, "-", "quantize_layer_add"], [110, 0, 0, "-", "quantize_layer_base"], [111, 0, 0, "-", "quantize_layer_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[108, 1, 1, "", "config_quantizable_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[109, 2, 1, "", "QuantizeLayerAdd"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[110, 2, 1, "", "QuantizeLayerBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[111, 2, 1, "", "QuantizeLayerBatchNormalization"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[112, 2, 1, "", "QuantizeWrapper"], [112, 2, 1, "", "QuantizeWrapperBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapper": [[112, 3, 1, "", "build"], [112, 3, 1, "", "call"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase": [[112, 3, 1, "", "build"], [112, 3, 1, "", "call"], [112, 3, 1, "", "compute_output_shape"], [112, 3, 1, "", "from_config"], [112, 3, 1, "", "get_config"], [112, 4, 1, "", "losses"], [112, 4, 1, "", "non_trainable_weights"], [112, 3, 1, "", "query_input_index"], [112, 4, 1, "", "trainable"], [112, 4, 1, "", "trainable_weights"], [112, 4, 1, "", "updates"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[113, 0, 0, "-", "fuse_qdq_bn"], [114, 0, 0, "-", "fuse_qdq_concatv2"], [115, 0, 0, "-", "fuse_qdq_conv"], [116, 0, 0, "-", "fuse_qdq_deconv"], [117, 0, 0, "-", "fuse_qdq_in"], [118, 0, 0, "-", "fuse_qdq_matmul"], [119, 0, 0, "-", "fuse_qdq_pooling"], [121, 0, 0, "-", "optimize_qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[113, 2, 1, "", "FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.FuseNodeStartWithFusedBatchNormV3": [[113, 3, 1, "", "apply_newly_bn_leakyrelu_fusion"], [113, 3, 1, "", "apply_newly_bn_relu_fusion"], [113, 3, 1, "", "apply_the_transform"], [113, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[114, 2, 1, "", "FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2.FuseNodeStartWithConcatV2": [[114, 3, 1, "", "apply_the_transform"], [114, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[115, 2, 1, "", "FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d": [[115, 3, 1, "", "apply_conv3d_add_addn_fusion"], [115, 3, 1, "", "apply_conv3d_add_addn_relu_fusion"], [115, 3, 1, "", "apply_conv3d_add_fusion"], [115, 3, 1, "", "apply_conv3d_add_relu_fusion"], [115, 3, 1, "", "apply_conv3d_single_fusion"], [115, 3, 1, "", "apply_conv_biasadd_hardswish_fusion"], [115, 3, 1, "", "apply_newly_conv_biasadd_addn_fusion"], [115, 3, 1, "", "apply_newly_conv_biasadd_addn_relu_fusion"], [115, 3, 1, "", "apply_newly_conv_biasadd_fusion"], [115, 3, 1, "", "apply_newly_conv_biasadd_relu_fusion"], [115, 3, 1, "", "apply_newly_conv_biasadd_swishf32_fusion"], [115, 3, 1, "", "apply_newly_conv_single_fusion"], [115, 3, 1, "", "apply_the_transform"], [115, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[116, 2, 1, "", "FuseNodeStartWithDeconv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.FuseNodeStartWithDeconv2d": [[116, 3, 1, "", "apply_deconv2d_biasadd_fusion"], [116, 3, 1, "", "apply_deconv3d_biasadd_fusion"], [116, 3, 1, "", "apply_single_deconv2d_fusion"], [116, 3, 1, "", "apply_single_deconv3d_fusion"], [116, 3, 1, "", "apply_the_transform"], [116, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[117, 2, 1, "", "FuseNodeStartWithFusedInstanceNorm"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.FuseNodeStartWithFusedInstanceNorm": [[117, 3, 1, "", "apply_newly_in_relu_fusion"], [117, 3, 1, "", "apply_the_transform"], [117, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[118, 2, 1, "", "FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul": [[118, 3, 1, "", "apply_batchmatmulv2_fusion"], [118, 3, 1, "", "apply_batchmatmulv2_mul_add_fusion"], [118, 3, 1, "", "apply_matmul_biasadd_fusion"], [118, 3, 1, "", "apply_matmul_biasadd_relu_fusion"], [118, 3, 1, "", "apply_the_transform"], [118, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[119, 2, 1, "", "FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling.FuseNodeStartWithPooling": [[119, 3, 1, "", "apply_the_transform"], [119, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[121, 2, 1, "", "OptimizeQDQGraph"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq.OptimizeQDQGraph": [[121, 3, 1, "", "do_transform"], [121, 3, 1, "", "get_quantized_nodes"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[122, 2, 1, "", "QuantizeGraphBase"], [122, 2, 1, "", "QuantizeNodeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeGraphBase": [[122, 3, 1, "", "do_transform"], [122, 3, 1, "", "register_transformer"], [122, 3, 1, "", "remove_dead_nodes"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase": [[122, 3, 1, "", "add_output_graph_node"], [122, 3, 1, "", "apply_the_transform"], [122, 3, 1, "", "create_nodes_map"], [122, 3, 1, "", "eightbitize_single_input_tensor_node"], [122, 3, 1, "", "get_longest_fuse"], [122, 3, 1, "", "remove_redundant_quantization"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[123, 2, 1, "", "FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.FuseNodeStartWithFusedBatchNormV3": [[123, 3, 1, "", "apply_newly_bn_leakyrelu_fusion"], [123, 3, 1, "", "apply_newly_bn_relu_fusion"], [123, 3, 1, "", "apply_the_transform"], [123, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[124, 2, 1, "", "FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2.FuseNodeStartWithConcatV2": [[124, 3, 1, "", "apply_the_transform"], [124, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[125, 2, 1, "", "FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d": [[125, 3, 1, "", "apply_conv_biasadd_addn_relu_fusion"], [125, 3, 1, "", "apply_conv_biasadd_fusion"], [125, 3, 1, "", "apply_conv_biasadd_relu_fusion"], [125, 3, 1, "", "apply_conv_single_fusion"], [125, 3, 1, "", "apply_the_transform"], [125, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[126, 2, 1, "", "QuantizeGraphForIntel"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu.QuantizeGraphForIntel": [[126, 3, 1, "", "do_transform"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[127, 2, 1, "", "FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.FuseNodeStartWithMatmul": [[127, 3, 1, "", "apply_matmul_biasadd_fusion"], [127, 3, 1, "", "apply_matmul_biasadd_relu_fusion"], [127, 3, 1, "", "apply_the_transform"], [127, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[128, 2, 1, "", "FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling.FuseNodeStartWithPooling": [[128, 3, 1, "", "apply_the_transform"], [128, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[129, 2, 1, "", "QuantizeGraphHelper"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper": [[129, 3, 1, "", "copy_attr"], [129, 3, 1, "", "create_constant_node"], [129, 3, 1, "", "create_node"], [129, 3, 1, "", "ensure_tensor_name_has_port"], [129, 3, 1, "", "generate_quantized_weight_node"], [129, 3, 1, "", "get_sorted_graph"], [129, 3, 1, "", "node_name_from_input"], [129, 3, 1, "", "remove_training_nodes"], [129, 3, 1, "", "set_attr_bool"], [129, 3, 1, "", "set_attr_dtype"], [129, 3, 1, "", "set_attr_float"], [129, 3, 1, "", "set_attr_int"], [129, 3, 1, "", "set_attr_string"], [129, 3, 1, "", "set_attr_string_list"], [129, 3, 1, "", "set_attr_tensor"], [129, 3, 1, "", "set_attr_type_list"], [129, 3, 1, "", "split_shared_inputs"], [129, 3, 1, "", "unique_node_name_from_input"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[130, 0, 0, "-", "bias_correction"], [131, 0, 0, "-", "graph_transform_base"], [133, 0, 0, "-", "insert_logging"], [134, 0, 0, "-", "rerange_quantized_concat"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[130, 2, 1, "", "BiasCorrection"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction.BiasCorrection": [[130, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[131, 2, 1, "", "GraphTransformBase"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base.GraphTransformBase": [[131, 3, 1, "", "do_transformation"], [131, 3, 1, "", "generate_input_map"], [131, 3, 1, "", "get_node_name_from_input"], [131, 3, 1, "", "node_name_from_input"], [131, 3, 1, "", "parse_input_pb"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[133, 2, 1, "", "InsertLogging"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging.InsertLogging": [[133, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[134, 2, 1, "", "RerangeQuantizedConcat"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat.RerangeQuantizedConcat": [[134, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.util": [[135, 1, 1, "", "collate_tf_preds"], [135, 1, 1, "", "disable_random"], [135, 1, 1, "", "fix_ref_type_of_graph_def"], [135, 1, 1, "", "generate_feed_dict"], [135, 1, 1, "", "get_estimator_graph"], [135, 1, 1, "", "get_graph_def"], [135, 1, 1, "", "get_input_output_node_names"], [135, 1, 1, "", "get_model_input_shape"], [135, 1, 1, "", "get_tensor_by_name"], [135, 1, 1, "", "get_tensor_val_from_graph_node"], [135, 1, 1, "", "int8_node_name_reverse"], [135, 1, 1, "", "is_ckpt_format"], [135, 1, 1, "", "is_saved_model_format"], [135, 1, 1, "", "iterator_sess_run"], [135, 1, 1, "", "read_graph"], [135, 1, 1, "", "strip_equivalent_nodes"], [135, 1, 1, "", "strip_unused_nodes"], [135, 1, 1, "", "tf_diagnosis_helper"], [135, 1, 1, "", "version1_eq_version2"], [135, 1, 1, "", "version1_gt_version2"], [135, 1, 1, "", "version1_gte_version2"], [135, 1, 1, "", "version1_lt_version2"], [135, 1, 1, "", "version1_lte_version2"], [135, 1, 1, "", "write_graph"]], "neural_compressor.adaptor.torch_utils": [[136, 0, 0, "-", "bf16_convert"], [137, 0, 0, "-", "hawq_metric"], [139, 0, 0, "-", "onnx"], [140, 0, 0, "-", "symbolic_trace"], [141, 0, 0, "-", "util"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[136, 2, 1, "", "BF16ModuleWrapper"], [136, 1, 1, "", "Convert"], [136, 1, 1, "", "bf16_symbolic_trace"]], "neural_compressor.adaptor.torch_utils.bf16_convert.BF16ModuleWrapper": [[136, 3, 1, "", "forward"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[137, 2, 1, "", "HessianTrace"], [137, 2, 1, "", "Node_collector"], [137, 1, 1, "", "compare_weights"], [137, 1, 1, "", "hawq_top"]], "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace": [[137, 3, 1, "", "get_act_gap"], [137, 3, 1, "", "get_act_traces"], [137, 3, 1, "", "get_avg_traces"], [137, 3, 1, "", "get_device"], [137, 3, 1, "", "get_fused_mapping"], [137, 3, 1, "", "get_params"], [137, 3, 1, "", "get_vtHv_weight"], [137, 3, 1, "", "get_weight_traces"], [137, 3, 1, "", "is_fused_module"], [137, 3, 1, "", "mse_metric_gap"], [137, 3, 1, "", "register_act_grad_hooks"], [137, 3, 1, "", "reset_act_gradient_and_hooks"]], "neural_compressor.adaptor.torch_utils.hawq_metric.Node_collector": [[137, 3, 1, "", "hook_fn_act"], [137, 3, 1, "", "remove"]], "neural_compressor.adaptor.torch_utils.onnx": [[139, 2, 1, "", "DataReader"]], "neural_compressor.adaptor.torch_utils.onnx.DataReader": [[139, 3, 1, "", "get_next"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[140, 1, 1, "", "symbolic_trace"], [140, 1, 1, "", "trace_and_fuse_sub_graph"]], "neural_compressor.adaptor.torch_utils.util": [[141, 1, 1, "", "append_attr"], [141, 1, 1, "", "auto_copy"], [141, 1, 1, "", "check_cfg_and_qconfig"], [141, 1, 1, "", "collate_torch_preds"], [141, 1, 1, "", "fetch_module"], [141, 1, 1, "", "generate_activation_observer"], [141, 1, 1, "", "get_embedding_contiguous"], [141, 1, 1, "", "get_example_input"], [141, 1, 1, "", "get_fallback_order"], [141, 1, 1, "", "get_mse_order_per_fp32"], [141, 1, 1, "", "get_mse_order_per_int8"], [141, 1, 1, "", "get_quantizable_ops_from_cfgs"], [141, 1, 1, "", "get_torch_version"], [141, 1, 1, "", "input2tuple"], [141, 1, 1, "", "is_fused_module"], [141, 1, 1, "", "paser_cfgs"], [141, 1, 1, "", "set_module"], [141, 1, 1, "", "simple_inference"]], "neural_compressor.algorithm": [[144, 2, 1, "", "ALGORITHMS"], [144, 2, 1, "", "Algorithm"], [144, 2, 1, "", "AlgorithmScheduler"], [142, 0, 0, "-", "algorithm"], [144, 1, 1, "", "algorithm_registry"], [143, 0, 0, "-", "fast_bias_correction"], [145, 0, 0, "-", "weight_correction"]], "neural_compressor.algorithm.ALGORITHMS": [[144, 3, 1, "", "support_algorithms"]], "neural_compressor.algorithm.AlgorithmScheduler": [[144, 4, 1, "", "adaptor"], [144, 4, 1, "", "calib_iter"], [144, 4, 1, "", "dataloader"], [144, 4, 1, "", "origin_model"], [144, 4, 1, "", "q_model"]], "neural_compressor.algorithm.algorithm": [[142, 2, 1, "", "ALGORITHMS"], [142, 2, 1, "", "Algorithm"], [142, 2, 1, "", "AlgorithmScheduler"], [142, 1, 1, "", "algorithm_registry"]], "neural_compressor.algorithm.algorithm.ALGORITHMS": [[142, 3, 1, "", "support_algorithms"]], "neural_compressor.algorithm.algorithm.AlgorithmScheduler": [[142, 4, 1, "", "adaptor"], [142, 4, 1, "", "calib_iter"], [142, 4, 1, "", "dataloader"], [142, 4, 1, "", "origin_model"], [142, 4, 1, "", "q_model"]], "neural_compressor.algorithm.fast_bias_correction": [[143, 2, 1, "", "FastBiasCorrection"]], "neural_compressor.algorithm.weight_correction": [[145, 2, 1, "", "WeightCorrection"]], "neural_compressor.benchmark": [[146, 2, 1, "", "Benchmark"], [146, 1, 1, "", "fit"]], "neural_compressor.benchmark.Benchmark": [[146, 3, 1, "", "dataloader"], [146, 3, 1, "", "metric"], [146, 3, 1, "", "postprocess"]], "neural_compressor.conf": [[147, 0, 0, "-", "config"], [148, 0, 0, "-", "dotdict"], [150, 0, 0, "-", "pythonic_config"]], "neural_compressor.conf.config": [[147, 2, 1, "", "Benchmark_Conf"], [147, 2, 1, "", "Conf"], [147, 2, 1, "", "Distillation_Conf"], [147, 2, 1, "", "Graph_Optimization_Conf"], [147, 2, 1, "", "MixedPrecision_Conf"], [147, 2, 1, "", "NASConfig"], [147, 2, 1, "", "PrunerV2"], [147, 2, 1, "", "Pruning_Conf"], [147, 2, 1, "", "Quantization_Conf"]], "neural_compressor.conf.dotdict": [[148, 2, 1, "", "DotDict"], [148, 1, 1, "", "deep_get"], [148, 1, 1, "", "deep_set"]], "neural_compressor.config": [[151, 2, 1, "", "AccuracyCriterion"], [151, 2, 1, "", "BenchmarkConfig"], [151, 2, 1, "", "DistillationConfig"], [151, 2, 1, "", "ExportConfig"], [151, 2, 1, "", "IntermediateLayersKnowledgeDistillationLossConfig"], [151, 2, 1, "", "KnowledgeDistillationLossConfig"], [151, 2, 1, "", "MixedPrecisionConfig"], [151, 2, 1, "", "ONNXQlinear2QDQConfig"], [151, 2, 1, "", "Options"], [151, 2, 1, "", "PostTrainingQuantConfig"], [151, 2, 1, "", "QuantizationAwareTrainingConfig"], [151, 2, 1, "", "SelfKnowledgeDistillationLossConfig"], [151, 2, 1, "", "TF2ONNXConfig"], [151, 2, 1, "", "Torch2ONNXConfig"], [151, 2, 1, "", "TuningCriterion"], [151, 2, 1, "", "WeightPruningConfig"], [151, 1, 1, "", "check_value"]], "neural_compressor.config.AccuracyCriterion": [[151, 4, 1, "", "absolute"], [151, 4, 1, "", "criterion"], [151, 4, 1, "", "higher_is_better"], [151, 4, 1, "", "relative"], [151, 4, 1, "", "tolerable_loss"]], "neural_compressor.config.BenchmarkConfig": [[151, 4, 1, "", "backend"], [151, 4, 1, "", "cores_per_instance"], [151, 4, 1, "", "inputs"], [151, 4, 1, "", "inter_num_of_threads"], [151, 4, 1, "", "intra_num_of_threads"], [151, 4, 1, "", "iteration"], [151, 4, 1, "", "num_of_instance"], [151, 4, 1, "", "outputs"], [151, 4, 1, "", "warmup"]], "neural_compressor.config.DistillationConfig": [[151, 4, 1, "", "criterion"], [151, 4, 1, "", "optimizer"], [151, 4, 1, "", "teacher_model"]], "neural_compressor.config.ExportConfig": [[151, 4, 1, "", "dtype"], [151, 4, 1, "", "dynamic_axes"], [151, 4, 1, "", "example_inputs"], [151, 4, 1, "", "input_names"], [151, 4, 1, "", "opset_version"], [151, 4, 1, "", "output_names"], [151, 4, 1, "", "quant_format"]], "neural_compressor.config.Options": [[151, 4, 1, "", "random_seed"], [151, 4, 1, "", "resume_from"], [151, 4, 1, "", "tensorboard"], [151, 4, 1, "", "workspace"]], "neural_compressor.config.PostTrainingQuantConfig": [[151, 4, 1, "", "approach"], [151, 4, 1, "", "tuning_criterion"]], "neural_compressor.config.QuantizationAwareTrainingConfig": [[151, 4, 1, "", "approach"]], "neural_compressor.config.TuningCriterion": [[151, 4, 1, "", "max_trials"], [151, 4, 1, "", "objective"], [151, 4, 1, "", "strategy"], [151, 4, 1, "", "strategy_kwargs"], [151, 4, 1, "", "timeout"]], "neural_compressor.config.WeightPruningConfig": [[151, 4, 1, "", "weight_compression"]], "neural_compressor.contrib": [[153, 0, 0, "-", "strategy"]], "neural_compressor.contrib.strategy": [[154, 0, 0, "-", "sigopt"], [155, 0, 0, "-", "tpe"]], "neural_compressor.contrib.strategy.sigopt": [[154, 2, 1, "", "SigOptTuneStrategy"]], "neural_compressor.contrib.strategy.sigopt.SigOptTuneStrategy": [[154, 3, 1, "", "create_exp"], [154, 3, 1, "", "get_acc_target"], [154, 3, 1, "", "next_tune_cfg"], [154, 3, 1, "", "params_to_tune_configs"], [154, 3, 1, "", "traverse"]], "neural_compressor.contrib.strategy.tpe": [[155, 2, 1, "", "TpeTuneStrategy"]], "neural_compressor.contrib.strategy.tpe.TpeTuneStrategy": [[155, 3, 1, "", "add_loss_to_tuned_history_and_find_best"], [155, 3, 1, "", "calculate_loss"], [155, 3, 1, "", "object_evaluation"], [155, 3, 1, "", "stop"], [155, 3, 1, "", "traverse"]], "neural_compressor.data": [[177, 2, 1, "", "BaseTransform"], [177, 2, 1, "", "DataLoader"], [177, 2, 1, "", "Dataset"], [177, 2, 1, "", "Datasets"], [177, 2, 1, "", "FILTERS"], [177, 2, 1, "", "Filter"], [177, 2, 1, "", "IterableDataset"], [177, 2, 1, "", "Postprocess"], [177, 2, 1, "", "TRANSFORMS"], [160, 0, 0, "-", "dataloaders"], [177, 1, 1, "", "dataset_registry"], [172, 0, 0, "-", "datasets"], [177, 1, 1, "", "filter_registry"], [176, 0, 0, "-", "filters"], [177, 1, 1, "", "transform_registry"], [180, 0, 0, "-", "transforms"]], "neural_compressor.data.TRANSFORMS": [[177, 3, 1, "", "register"]], "neural_compressor.data.dataloaders": [[160, 2, 1, "", "DataLoader"], [156, 0, 0, "-", "base_dataloader"], [157, 0, 0, "-", "dataloader"], [158, 0, 0, "-", "default_dataloader"], [159, 0, 0, "-", "fetcher"], [161, 0, 0, "-", "mxnet_dataloader"], [162, 0, 0, "-", "onnxrt_dataloader"], [163, 0, 0, "-", "pytorch_dataloader"], [164, 0, 0, "-", "sampler"], [165, 0, 0, "-", "tensorflow_dataloader"]], "neural_compressor.data.dataloaders.base_dataloader": [[156, 2, 1, "", "BaseDataLoader"]], "neural_compressor.data.dataloaders.base_dataloader.BaseDataLoader": [[156, 3, 1, "", "batch"], [156, 4, 1, "", "batch_size"]], "neural_compressor.data.dataloaders.dataloader": [[157, 2, 1, "", "DataLoader"]], "neural_compressor.data.dataloaders.default_dataloader": [[158, 2, 1, "", "DefaultDataLoader"], [158, 1, 1, "", "default_collate"]], "neural_compressor.data.dataloaders.default_dataloader.DefaultDataLoader": [[158, 3, 1, "", "batch"], [158, 4, 1, "", "dataloader"]], "neural_compressor.data.dataloaders.fetcher": [[159, 2, 1, "", "Fetcher"], [159, 2, 1, "", "IndexFetcher"], [159, 2, 1, "", "IterableFetcher"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[161, 2, 1, "", "MXNetDataLoader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[162, 2, 1, "", "ONNXRTBertDataLoader"], [162, 2, 1, "", "ONNXRTDataLoader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[163, 2, 1, "", "PyTorchDataLoader"]], "neural_compressor.data.dataloaders.sampler": [[164, 2, 1, "", "BatchSampler"], [164, 2, 1, "", "IterableSampler"], [164, 2, 1, "", "Sampler"], [164, 2, 1, "", "SequentialSampler"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[165, 2, 1, "", "TFDataDataLoader"], [165, 2, 1, "", "TensorflowBertDataLoader"], [165, 2, 1, "", "TensorflowDataLoader"], [165, 2, 1, "", "TensorflowModelZooBertDataLoader"]], "neural_compressor.data.dataloaders.tensorflow_dataloader.TFDataDataLoader": [[165, 3, 1, "", "batch"]], "neural_compressor.data.datasets": [[172, 2, 1, "", "Dataset"], [172, 2, 1, "", "Datasets"], [172, 2, 1, "", "IterableDataset"], [166, 0, 0, "-", "bert_dataset"], [167, 0, 0, "-", "coco_dataset"], [168, 0, 0, "-", "dataset"], [172, 1, 1, "", "dataset_registry"], [169, 0, 0, "-", "dummy_dataset"], [170, 0, 0, "-", "dummy_dataset_v2"], [171, 0, 0, "-", "imagenet_dataset"], [173, 0, 0, "-", "style_transfer_dataset"]], "neural_compressor.data.datasets.bert_dataset": [[166, 2, 1, "", "InputFeatures"], [166, 2, 1, "", "ONNXRTBertDataset"], [166, 2, 1, "", "ParseDecodeBert"], [166, 2, 1, "", "PytorchBertDataset"], [166, 2, 1, "", "TensorflowBertDataset"], [166, 2, 1, "", "TensorflowModelZooBertDataset"], [166, 1, 1, "", "convert_examples_to_features"], [166, 1, 1, "", "load_and_cache_examples"]], "neural_compressor.data.datasets.bert_dataset.InputFeatures": [[166, 3, 1, "", "to_json_string"]], "neural_compressor.data.datasets.coco_dataset": [[167, 2, 1, "", "COCONpy"], [167, 2, 1, "", "COCORaw"], [167, 2, 1, "", "COCORecordDataset"], [167, 2, 1, "", "ParseDecodeCoco"]], "neural_compressor.data.datasets.dataset": [[168, 2, 1, "", "CIFAR10"], [168, 2, 1, "", "CIFAR100"], [168, 2, 1, "", "Dataset"], [168, 2, 1, "", "Datasets"], [168, 2, 1, "", "FashionMNIST"], [168, 2, 1, "", "ImageFolder"], [168, 2, 1, "", "IterableDataset"], [168, 2, 1, "", "MNIST"], [168, 2, 1, "", "MXNetCIFAR10"], [168, 2, 1, "", "MXNetCIFAR100"], [168, 2, 1, "", "MXNetDatasets"], [168, 2, 1, "", "MXNetFashionMNIST"], [168, 2, 1, "", "MXNetImageFolder"], [168, 2, 1, "", "MXNetMNIST"], [168, 2, 1, "", "ONNXRTITDatasets"], [168, 2, 1, "", "ONNXRTQLDatasets"], [168, 2, 1, "", "PyTorchDatasets"], [168, 2, 1, "", "PytorchCIFAR10"], [168, 2, 1, "", "PytorchCIFAR100"], [168, 2, 1, "", "PytorchFashionMNIST"], [168, 2, 1, "", "PytorchMNIST"], [168, 2, 1, "", "PytorchMxnetWrapDataset"], [168, 2, 1, "", "PytorchMxnetWrapFunction"], [168, 2, 1, "", "TensorflowCIFAR10"], [168, 2, 1, "", "TensorflowCIFAR100"], [168, 2, 1, "", "TensorflowDatasets"], [168, 2, 1, "", "TensorflowFashionMNIST"], [168, 2, 1, "", "TensorflowImageFolder"], [168, 2, 1, "", "TensorflowImageRecord"], [168, 2, 1, "", "TensorflowMNIST"], [168, 2, 1, "", "TensorflowTFRecordDataset"], [168, 2, 1, "", "TensorflowVOCRecord"], [168, 1, 1, "", "calculate_md5"], [168, 1, 1, "", "check_integrity"], [168, 1, 1, "", "dataset_registry"], [168, 1, 1, "", "download_url"], [168, 5, 1, "", "framework_datasets"], [168, 1, 1, "", "gen_bar_updater"]], "neural_compressor.data.datasets.dataset.CIFAR10": [[168, 3, 1, "", "download"], [168, 3, 1, "", "load_meta"]], "neural_compressor.data.datasets.dataset.FashionMNIST": [[168, 3, 1, "", "read_data"]], "neural_compressor.data.datasets.dataset.MNIST": [[168, 4, 1, "", "class_to_idx"], [168, 3, 1, "", "download"], [168, 3, 1, "", "read_data"]], "neural_compressor.data.datasets.dummy_dataset": [[169, 2, 1, "", "DummyDataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[170, 2, 1, "", "DummyDataset"], [170, 2, 1, "", "SparseDummyDataset"]], "neural_compressor.data.datasets.imagenet_dataset": [[171, 2, 1, "", "ImagenetRaw"], [171, 2, 1, "", "MXNetImagenetRaw"], [171, 2, 1, "", "ONNXRTImagenetDataset"], [171, 2, 1, "", "PytorchImagenetRaw"], [171, 2, 1, "", "TensorflowImagenetDataset"], [171, 2, 1, "", "TensorflowImagenetRaw"]], "neural_compressor.data.datasets.style_transfer_dataset": [[173, 2, 1, "", "StyleTransferDataset"]], "neural_compressor.data.filters": [[176, 2, 1, "", "FILTERS"], [176, 2, 1, "", "Filter"], [174, 0, 0, "-", "coco_filter"], [175, 0, 0, "-", "filter"], [176, 1, 1, "", "filter_registry"]], "neural_compressor.data.filters.coco_filter": [[174, 2, 1, "", "LabelBalanceCOCORawFilter"], [174, 2, 1, "", "LabelBalanceCOCORecordFilter"]], "neural_compressor.data.filters.filter": [[175, 2, 1, "", "FILTERS"], [175, 2, 1, "", "Filter"], [175, 2, 1, "", "MXNetFilters"], [175, 2, 1, "", "ONNXRTITFilters"], [175, 2, 1, "", "ONNXRTQLFilters"], [175, 2, 1, "", "PyTorchFilters"], [175, 2, 1, "", "TensorflowFilters"], [175, 1, 1, "", "filter_registry"]], "neural_compressor.data.transforms": [[180, 2, 1, "", "BaseTransform"], [180, 2, 1, "", "Postprocess"], [180, 2, 1, "", "TRANSFORMS"], [178, 0, 0, "-", "coco_transform"], [179, 0, 0, "-", "imagenet_transform"], [181, 0, 0, "-", "postprocess"], [182, 0, 0, "-", "tokenization"], [183, 0, 0, "-", "transform"], [180, 1, 1, "", "transform_registry"]], "neural_compressor.data.transforms.TRANSFORMS": [[180, 3, 1, "", "register"]], "neural_compressor.data.transforms.coco_transform": [[178, 2, 1, "", "ParseDecodeCocoTransform"]], "neural_compressor.data.transforms.imagenet_transform": [[179, 2, 1, "", "BilinearImagenetTransform"], [179, 2, 1, "", "LabelShift"], [179, 2, 1, "", "ONNXResizeCropImagenetTransform"], [179, 2, 1, "", "OnnxBilinearImagenetTransform"], [179, 2, 1, "", "ParseDecodeImagenet"], [179, 2, 1, "", "ParseDecodeImagenetTransform"], [179, 2, 1, "", "QuantizedInput"], [179, 2, 1, "", "ResizeWithAspectRatio"], [179, 2, 1, "", "TensorflowResizeCropImagenetTransform"]], "neural_compressor.data.transforms.postprocess": [[181, 2, 1, "", "Postprocess"]], "neural_compressor.data.transforms.tokenization": [[182, 2, 1, "", "BasicTokenizer"], [182, 2, 1, "", "FullTokenizer"], [182, 2, 1, "", "WordpieceTokenizer"], [182, 1, 1, "", "convert_by_vocab"], [182, 1, 1, "", "convert_to_unicode"], [182, 1, 1, "", "load_vocab"], [182, 1, 1, "", "whitespace_tokenize"]], "neural_compressor.data.transforms.tokenization.BasicTokenizer": [[182, 3, 1, "", "tokenize"]], "neural_compressor.data.transforms.tokenization.FullTokenizer": [[182, 3, 1, "", "convert_ids_to_tokens"], [182, 3, 1, "", "convert_tokens_to_ids"], [182, 3, 1, "", "tokenize"]], "neural_compressor.data.transforms.tokenization.WordpieceTokenizer": [[182, 3, 1, "", "tokenize"]], "neural_compressor.data.transforms.transform": [[183, 2, 1, "", "AlignImageChannelTransform"], [183, 2, 1, "", "BaseTransform"], [183, 2, 1, "", "CastONNXTransform"], [183, 2, 1, "", "CastPyTorchTransform"], [183, 2, 1, "", "CastTFTransform"], [183, 2, 1, "", "CenterCropTFTransform"], [183, 2, 1, "", "CenterCropTransform"], [183, 2, 1, "", "CollectTransform"], [183, 2, 1, "", "ComposeTransform"], [183, 2, 1, "", "CropResizeTFTransform"], [183, 2, 1, "", "CropResizeTransform"], [183, 2, 1, "", "CropToBoundingBox"], [183, 2, 1, "", "InputFeatures"], [183, 2, 1, "", "MXNetCropResizeTransform"], [183, 2, 1, "", "MXNetCropToBoundingBox"], [183, 2, 1, "", "MXNetNormalizeTransform"], [183, 2, 1, "", "MXNetTransforms"], [183, 2, 1, "", "MXNetTranspose"], [183, 2, 1, "", "NormalizeTFTransform"], [183, 2, 1, "", "NormalizeTransform"], [183, 2, 1, "", "ONNXRTCropToBoundingBox"], [183, 2, 1, "", "ONNXRTITTransforms"], [183, 2, 1, "", "ONNXRTQLTransforms"], [183, 2, 1, "", "PaddedCenterCropTransform"], [183, 2, 1, "", "ParseDecodeVocTransform"], [183, 2, 1, "", "PyTorchAlignImageChannel"], [183, 2, 1, "", "PyTorchCropResizeTransform"], [183, 2, 1, "", "PyTorchNormalizeTransform"], [183, 2, 1, "", "PyTorchTransforms"], [183, 2, 1, "", "PyTorchTranspose"], [183, 2, 1, "", "PytorchMxnetTransform"], [183, 2, 1, "", "PytorchMxnetWrapFunction"], [183, 2, 1, "", "RandomCropTFTransform"], [183, 2, 1, "", "RandomCropTransform"], [183, 2, 1, "", "RandomHorizontalFlip"], [183, 2, 1, "", "RandomResizedCropMXNetTransform"], [183, 2, 1, "", "RandomResizedCropPytorchTransform"], [183, 2, 1, "", "RandomResizedCropTFTransform"], [183, 2, 1, "", "RandomResizedCropTransform"], [183, 2, 1, "", "RandomVerticalFlip"], [183, 2, 1, "", "RescaleKerasPretrainTransform"], [183, 2, 1, "", "RescaleTFTransform"], [183, 2, 1, "", "RescaleTransform"], [183, 2, 1, "", "ResizeMXNetTransform"], [183, 2, 1, "", "ResizePytorchTransform"], [183, 2, 1, "", "ResizeTFTransform"], [183, 2, 1, "", "ResizeTransform"], [183, 2, 1, "", "ResizeWithRatio"], [183, 2, 1, "", "SquadExample"], [183, 2, 1, "", "TFModelZooCollectTransform"], [183, 2, 1, "", "TFSquadV1ModelZooPostTransform"], [183, 2, 1, "", "TFSquadV1PostTransform"], [183, 2, 1, "", "TRANSFORMS"], [183, 2, 1, "", "TensorflowCropToBoundingBox"], [183, 2, 1, "", "TensorflowRandomHorizontalFlip"], [183, 2, 1, "", "TensorflowRandomVerticalFlip"], [183, 2, 1, "", "TensorflowResizeWithRatio"], [183, 2, 1, "", "TensorflowTransform"], [183, 2, 1, "", "TensorflowTransforms"], [183, 2, 1, "", "TensorflowTranspose"], [183, 2, 1, "", "TensorflowWrapFunction"], [183, 2, 1, "", "ToArray"], [183, 2, 1, "", "ToNDArrayTransform"], [183, 2, 1, "", "Transforms"], [183, 2, 1, "", "Transpose"], [183, 1, 1, "", "convert_examples_to_features"], [183, 1, 1, "", "get_final_text"], [183, 1, 1, "", "get_torchvision_map"], [183, 1, 1, "", "read_squad_examples"], [183, 1, 1, "", "transform_registry"]], "neural_compressor.data.transforms.transform.RandomResizedCropTFTransform": [[183, 3, 1, "", "get_params"]], "neural_compressor.data.transforms.transform.RandomResizedCropTransform": [[183, 3, 1, "", "get_params"]], "neural_compressor.data.transforms.transform.TFSquadV1PostTransform": [[183, 3, 1, "", "get_postprocess_result"], [183, 3, 1, "", "process_result"]], "neural_compressor.data.transforms.transform.TRANSFORMS": [[183, 3, 1, "", "register"]], "neural_compressor.experimental": [[226, 2, 1, "", "Benchmark"], [226, 2, 1, "", "Component"], [226, 2, 1, "", "Distillation"], [226, 2, 1, "", "Graph_Optimization"], [226, 2, 1, "", "MixedPrecision"], [226, 2, 1, "", "ModelConversion"], [226, 2, 1, "", "NAS"], [226, 2, 1, "", "Pruning"], [226, 2, 1, "", "Quantization"], [184, 0, 0, "-", "benchmark"], [187, 0, 0, "-", "common"], [193, 0, 0, "-", "component"], [215, 0, 0, "-", "data"], [220, 0, 0, "-", "distillation"], [221, 0, 0, "-", "export"], [225, 0, 0, "-", "graph_optimization"], [233, 0, 0, "-", "metric"], [235, 0, 0, "-", "mixed_precision"], [236, 0, 0, "-", "model_conversion"], [249, 0, 0, "-", "nas"], [253, 0, 0, "-", "pruning"], [254, 0, 0, "-", "pruning_recipes"], [258, 0, 0, "-", "pruning_v2"], [259, 0, 0, "-", "pytorch_pruner"], [266, 0, 0, "-", "quantization"], [267, 0, 0, "-", "scheduler"]], "neural_compressor.experimental.Benchmark": [[226, 4, 1, "", "b_dataloader"], [226, 4, 1, "", "b_func"], [226, 3, 1, "", "config_instance"], [226, 3, 1, "", "generate_prefix"], [226, 4, 1, "", "metric"], [226, 4, 1, "", "model"], [226, 4, 1, "", "postprocess"], [226, 4, 1, "", "results"], [226, 3, 1, "", "run_instance"], [226, 3, 1, "", "summary_benchmark"]], "neural_compressor.experimental.Component": [[226, 4, 1, "", "eval_dataloader"], [226, 4, 1, "", "eval_func"], [226, 3, 1, "", "execute"], [226, 4, 1, "", "model"], [226, 3, 1, "", "on_after_compute_loss"], [226, 3, 1, "", "on_after_eval"], [226, 3, 1, "", "on_after_optimizer_step"], [226, 3, 1, "", "on_batch_begin"], [226, 3, 1, "", "on_batch_end"], [226, 3, 1, "", "on_before_eval"], [226, 3, 1, "", "on_before_optimizer_step"], [226, 3, 1, "", "on_epoch_begin"], [226, 3, 1, "", "on_epoch_end"], [226, 3, 1, "", "on_post_grad"], [226, 3, 1, "", "on_step_begin"], [226, 3, 1, "", "on_step_end"], [226, 3, 1, "", "on_train_begin"], [226, 3, 1, "", "on_train_end"], [226, 3, 1, "", "post_epoch_end"], [226, 3, 1, "", "post_process"], [226, 3, 1, "", "pre_epoch_begin"], [226, 3, 1, "", "pre_process"], [226, 3, 1, "", "prepare"], [226, 3, 1, "", "prepare_qat"], [226, 3, 1, "", "register_hook"], [226, 4, 1, "", "train_dataloader"], [226, 4, 1, "", "train_func"]], "neural_compressor.experimental.Distillation": [[226, 6, 1, "", "_epoch_ran"], [226, 6, 1, "", "best_model"], [226, 6, 1, "", "best_score"], [226, 3, 1, "", "create_criterion"], [226, 3, 1, "", "create_optimizer"], [226, 4, 1, "", "criterion"], [226, 6, 1, "", "eval_frequency"], [226, 4, 1, "", "evaluation_distributed"], [226, 3, 1, "", "execute"], [226, 3, 1, "", "generate_hooks"], [226, 3, 1, "", "init_train_cfg"], [226, 3, 1, "", "on_post_forward"], [226, 4, 1, "", "optimizer"], [226, 3, 1, "", "pre_process"], [226, 3, 1, "", "prepare"], [226, 4, 1, "", "student_model"], [226, 4, 1, "", "teacher_model"], [226, 4, 1, "", "train_cfg"], [226, 4, 1, "", "train_distributed"]], "neural_compressor.experimental.Graph_Optimization": [[226, 3, 1, "", "dataset"], [226, 4, 1, "", "eval_dataloader"], [226, 4, 1, "", "eval_func"], [226, 4, 1, "", "input"], [226, 4, 1, "", "metric"], [226, 4, 1, "", "model"], [226, 4, 1, "", "output"], [226, 4, 1, "", "postprocess"], [226, 4, 1, "", "precisions"], [226, 3, 1, "", "set_config_by_model"]], "neural_compressor.experimental.MixedPrecision": [[226, 4, 1, "", "precisions"], [226, 3, 1, "", "set_config_by_model"]], "neural_compressor.experimental.ModelConversion": [[226, 3, 1, "", "dataset"], [226, 4, 1, "", "destination"], [226, 4, 1, "", "eval_dataloader"], [226, 4, 1, "", "eval_func"], [226, 4, 1, "", "metric"], [226, 4, 1, "", "model"], [226, 4, 1, "", "postprocess"], [226, 4, 1, "", "source"]], "neural_compressor.experimental.Pruning": [[226, 6, 1, "", "conf"], [226, 4, 1, "", "evaluation_distributed"], [226, 3, 1, "", "execute"], [226, 3, 1, "", "generate_hooks"], [226, 3, 1, "", "generate_pruners"], [226, 3, 1, "", "get_sparsity_ratio"], [226, 3, 1, "", "pre_process"], [226, 3, 1, "", "prepare"], [226, 6, 1, "", "pruners"], [226, 4, 1, "", "pruning_func"], [226, 4, 1, "", "train_distributed"], [226, 3, 1, "", "update_items_for_all_pruners"]], "neural_compressor.experimental.Quantization": [[226, 4, 1, "", "calib_dataloader"], [226, 3, 1, "", "dataset"], [226, 3, 1, "", "execute"], [226, 4, 1, "", "metric"], [226, 4, 1, "", "model"], [226, 4, 1, "", "objective"], [226, 4, 1, "", "postprocess"], [226, 3, 1, "", "pre_process"], [226, 4, 1, "", "q_func"]], "neural_compressor.experimental.benchmark": [[184, 2, 1, "", "Benchmark"], [184, 1, 1, "", "get_architecture"], [184, 1, 1, "", "get_bounded_threads"], [184, 1, 1, "", "get_core_ids"], [184, 1, 1, "", "get_physical_ids"], [184, 1, 1, "", "get_threads"], [184, 1, 1, "", "get_threads_per_core"], [184, 1, 1, "", "set_all_env_var"], [184, 1, 1, "", "set_env_var"]], "neural_compressor.experimental.benchmark.Benchmark": [[184, 4, 1, "", "b_dataloader"], [184, 4, 1, "", "b_func"], [184, 3, 1, "", "config_instance"], [184, 3, 1, "", "generate_prefix"], [184, 4, 1, "", "metric"], [184, 4, 1, "", "model"], [184, 4, 1, "", "postprocess"], [184, 4, 1, "", "results"], [184, 3, 1, "", "run_instance"], [184, 3, 1, "", "summary_benchmark"]], "neural_compressor.experimental.common": [[187, 2, 1, "", "DataLoader"], [187, 2, 1, "", "Metric"], [187, 2, 1, "", "Model"], [187, 2, 1, "", "Postprocess"], [185, 0, 0, "-", "criterion"], [186, 0, 0, "-", "dataloader"], [188, 0, 0, "-", "metric"], [189, 0, 0, "-", "model"], [190, 0, 0, "-", "optimizer"], [191, 0, 0, "-", "postprocess"], [192, 0, 0, "-", "torch_utils"]], "neural_compressor.experimental.common.criterion": [[185, 2, 1, "", "Criterions"], [185, 2, 1, "", "IntermediateLayersKnowledgeDistillationLoss"], [185, 2, 1, "", "KnowledgeDistillationFramework"], [185, 2, 1, "", "KnowledgeDistillationLoss"], [185, 2, 1, "", "PyTorchCriterions"], [185, 2, 1, "", "PyTorchCrossEntropyLoss"], [185, 2, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLoss"], [185, 2, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"], [185, 2, 1, "", "PyTorchKnowledgeDistillationLoss"], [185, 2, 1, "", "PyTorchKnowledgeDistillationLossWrapper"], [185, 2, 1, "", "PyTorchSelfKnowledgeDistillationLoss"], [185, 2, 1, "", "PyTorchSelfKnowledgeDistillationLossWrapper"], [185, 2, 1, "", "SelfKnowledgeDistillationLoss"], [185, 2, 1, "", "TensorFlowCrossEntropyLoss"], [185, 2, 1, "", "TensorFlowSparseCategoricalCrossentropy"], [185, 2, 1, "", "TensorflowCriterions"], [185, 2, 1, "", "TensorflowKnowledgeDistillationLoss"], [185, 2, 1, "", "TensorflowKnowledgeDistillationLossExternal"], [185, 2, 1, "", "TensorflowKnowledgeDistillationLossWrapper"], [185, 1, 1, "", "criterion_registry"]], "neural_compressor.experimental.common.criterion.Criterions": [[185, 3, 1, "", "register"]], "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss": [[185, 3, 1, "", "clear_features"], [185, 3, 1, "", "init_feature_matcher"], [185, 3, 1, "", "init_loss_funcs"], [185, 3, 1, "", "loss_cal"], [185, 3, 1, "", "loss_cal_sloss"], [185, 3, 1, "", "teacher_model_forward"]], "neural_compressor.experimental.common.criterion.KnowledgeDistillationFramework": [[185, 4, 1, "", "student_model"], [185, 4, 1, "", "teacher_model"]], "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss": [[185, 3, 1, "", "loss_cal"], [185, 3, 1, "", "loss_cal_sloss"], [185, 3, 1, "", "student_targets_loss_cal"], [185, 3, 1, "", "teacher_model_forward"], [185, 3, 1, "", "teacher_student_loss_cal"]], "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss": [[185, 3, 1, "", "init_feature_matcher"], [185, 3, 1, "", "init_loss_funcs"], [185, 3, 1, "", "loss_cal"], [185, 3, 1, "", "loss_cal_sloss"], [185, 3, 1, "", "register_hooks_for_models"], [185, 3, 1, "", "remove_all_hooks"], [185, 3, 1, "", "teacher_model_forward"]], "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss": [[185, 3, 1, "", "KullbackLeiblerDivergence"], [185, 3, 1, "", "SoftCrossEntropy"], [185, 3, 1, "", "student_targets_loss_cal"], [185, 3, 1, "", "teacher_model_forward"], [185, 3, 1, "", "teacher_student_loss_cal"]], "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss": [[185, 3, 1, "", "KullbackLeiblerDivergence"], [185, 3, 1, "", "L2Divergence"], [185, 3, 1, "", "SoftCrossEntropy"], [185, 3, 1, "", "init_loss_funcs"], [185, 3, 1, "", "loss_cal"], [185, 3, 1, "", "teacher_model_forward"]], "neural_compressor.experimental.common.criterion.SelfKnowledgeDistillationLoss": [[185, 3, 1, "", "init_loss_funcs"], [185, 3, 1, "", "loss_cal"], [185, 3, 1, "", "loss_cal_sloss"], [185, 3, 1, "", "teacher_model_forward"]], "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLoss": [[185, 3, 1, "", "SoftCrossEntropy"], [185, 3, 1, "", "student_targets_loss_cal"], [185, 3, 1, "", "teacher_model_forward"], [185, 3, 1, "", "teacher_student_loss_cal"]], "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossExternal": [[185, 3, 1, "", "student_targets_loss_cal"], [185, 3, 1, "", "teacher_model_forward"], [185, 3, 1, "", "teacher_student_loss_cal"]], "neural_compressor.experimental.common.dataloader": [[186, 2, 1, "", "DataLoader"]], "neural_compressor.experimental.common.metric": [[188, 2, 1, "", "Metric"]], "neural_compressor.experimental.common.model": [[189, 2, 1, "", "Model"]], "neural_compressor.experimental.common.optimizer": [[190, 2, 1, "", "Optimizers"], [190, 2, 1, "", "PyTorchOptimizers"], [190, 2, 1, "", "PyTorchSGD"], [190, 2, 1, "", "TensorFlowAdam"], [190, 2, 1, "", "TensorFlowAdamW"], [190, 2, 1, "", "TensorFlowSGD"], [190, 2, 1, "", "TensorflowOptimizers"], [190, 1, 1, "", "optimizer_registry"]], "neural_compressor.experimental.common.optimizer.Optimizers": [[190, 3, 1, "", "register"]], "neural_compressor.experimental.common.postprocess": [[191, 2, 1, "", "Postprocess"]], "neural_compressor.experimental.common.torch_utils": [[192, 1, 1, "", "get_activation"], [192, 1, 1, "", "record_output"]], "neural_compressor.experimental.component": [[193, 2, 1, "", "Component"]], "neural_compressor.experimental.component.Component": [[193, 4, 1, "", "eval_dataloader"], [193, 4, 1, "", "eval_func"], [193, 3, 1, "", "execute"], [193, 4, 1, "", "model"], [193, 3, 1, "", "on_after_compute_loss"], [193, 3, 1, "", "on_after_eval"], [193, 3, 1, "", "on_after_optimizer_step"], [193, 3, 1, "", "on_batch_begin"], [193, 3, 1, "", "on_batch_end"], [193, 3, 1, "", "on_before_eval"], [193, 3, 1, "", "on_before_optimizer_step"], [193, 3, 1, "", "on_epoch_begin"], [193, 3, 1, "", "on_epoch_end"], [193, 3, 1, "", "on_post_grad"], [193, 3, 1, "", "on_step_begin"], [193, 3, 1, "", "on_step_end"], [193, 3, 1, "", "on_train_begin"], [193, 3, 1, "", "on_train_end"], [193, 3, 1, "", "post_epoch_end"], [193, 3, 1, "", "post_process"], [193, 3, 1, "", "pre_epoch_begin"], [193, 3, 1, "", "pre_process"], [193, 3, 1, "", "prepare"], [193, 3, 1, "", "prepare_qat"], [193, 3, 1, "", "register_hook"], [193, 4, 1, "", "train_dataloader"], [193, 4, 1, "", "train_func"]], "neural_compressor.experimental.data": [[215, 2, 1, "", "BaseTransform"], [215, 2, 1, "", "Dataset"], [215, 2, 1, "", "Datasets"], [215, 2, 1, "", "FILTERS"], [215, 2, 1, "", "Filter"], [215, 2, 1, "", "IterableDataset"], [215, 2, 1, "", "TRANSFORMS"], [198, 0, 0, "-", "dataloaders"], [215, 1, 1, "", "dataset_registry"], [210, 0, 0, "-", "datasets"], [215, 1, 1, "", "filter_registry"], [214, 0, 0, "-", "filters"], [215, 1, 1, "", "transform_registry"], [217, 0, 0, "-", "transforms"]], "neural_compressor.experimental.data.TRANSFORMS": [[215, 3, 1, "", "register"]], "neural_compressor.experimental.data.dataloaders": [[194, 0, 0, "-", "base_dataloader"], [195, 0, 0, "-", "dataloader"], [196, 0, 0, "-", "default_dataloader"], [197, 0, 0, "-", "fetcher"], [199, 0, 0, "-", "mxnet_dataloader"], [200, 0, 0, "-", "onnxrt_dataloader"], [201, 0, 0, "-", "pytorch_dataloader"], [202, 0, 0, "-", "sampler"], [203, 0, 0, "-", "tensorflow_dataloader"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[194, 2, 1, "", "BaseDataLoader"]], "neural_compressor.experimental.data.dataloaders.base_dataloader.BaseDataLoader": [[194, 3, 1, "", "batch"], [194, 4, 1, "", "batch_size"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[196, 2, 1, "", "DefaultDataLoader"], [196, 1, 1, "", "default_collate"]], "neural_compressor.experimental.data.dataloaders.default_dataloader.DefaultDataLoader": [[196, 3, 1, "", "batch"], [196, 4, 1, "", "dataloader"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[197, 2, 1, "", "Fetcher"], [197, 2, 1, "", "IndexFetcher"], [197, 2, 1, "", "IterableFetcher"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[199, 2, 1, "", "MXNetDataLoader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[200, 2, 1, "", "ONNXRTBertDataLoader"], [200, 2, 1, "", "ONNXRTDataLoader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[201, 2, 1, "", "PyTorchDataLoader"]], "neural_compressor.experimental.data.dataloaders.sampler": [[202, 2, 1, "", "BatchSampler"], [202, 2, 1, "", "IterableSampler"], [202, 2, 1, "", "Sampler"], [202, 2, 1, "", "SequentialSampler"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[203, 2, 1, "", "TFDataDataLoader"], [203, 2, 1, "", "TensorflowBertDataLoader"], [203, 2, 1, "", "TensorflowDataLoader"], [203, 2, 1, "", "TensorflowModelZooBertDataLoader"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TFDataDataLoader": [[203, 3, 1, "", "batch"]], "neural_compressor.experimental.data.datasets": [[210, 2, 1, "", "Dataset"], [210, 2, 1, "", "Datasets"], [210, 2, 1, "", "IterableDataset"], [204, 0, 0, "-", "bert_dataset"], [205, 0, 0, "-", "coco_dataset"], [206, 0, 0, "-", "dataset"], [210, 1, 1, "", "dataset_registry"], [207, 0, 0, "-", "dummy_dataset"], [208, 0, 0, "-", "dummy_dataset_v2"], [209, 0, 0, "-", "imagenet_dataset"], [211, 0, 0, "-", "style_transfer_dataset"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[204, 2, 1, "", "InputFeatures"], [204, 2, 1, "", "ONNXRTBertDataset"], [204, 2, 1, "", "ParseDecodeBert"], [204, 2, 1, "", "PytorchBertDataset"], [204, 2, 1, "", "TensorflowBertDataset"], [204, 2, 1, "", "TensorflowModelZooBertDataset"], [204, 1, 1, "", "convert_examples_to_features"], [204, 1, 1, "", "load_and_cache_examples"]], "neural_compressor.experimental.data.datasets.bert_dataset.InputFeatures": [[204, 3, 1, "", "to_json_string"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[205, 2, 1, "", "COCONpy"], [205, 2, 1, "", "COCORaw"], [205, 2, 1, "", "COCORecordDataset"], [205, 2, 1, "", "ParseDecodeCoco"]], "neural_compressor.experimental.data.datasets.dataset": [[206, 2, 1, "", "CIFAR10"], [206, 2, 1, "", "CIFAR100"], [206, 2, 1, "", "Dataset"], [206, 2, 1, "", "Datasets"], [206, 2, 1, "", "FashionMNIST"], [206, 2, 1, "", "ImageFolder"], [206, 2, 1, "", "IterableDataset"], [206, 2, 1, "", "MNIST"], [206, 2, 1, "", "MXNetCIFAR10"], [206, 2, 1, "", "MXNetCIFAR100"], [206, 2, 1, "", "MXNetDatasets"], [206, 2, 1, "", "MXNetFashionMNIST"], [206, 2, 1, "", "MXNetImageFolder"], [206, 2, 1, "", "MXNetMNIST"], [206, 2, 1, "", "ONNXRTITDatasets"], [206, 2, 1, "", "ONNXRTQLDatasets"], [206, 2, 1, "", "PyTorchDatasets"], [206, 2, 1, "", "PytorchCIFAR10"], [206, 2, 1, "", "PytorchCIFAR100"], [206, 2, 1, "", "PytorchFashionMNIST"], [206, 2, 1, "", "PytorchMNIST"], [206, 2, 1, "", "PytorchMxnetWrapDataset"], [206, 2, 1, "", "PytorchMxnetWrapFunction"], [206, 2, 1, "", "TensorflowCIFAR10"], [206, 2, 1, "", "TensorflowCIFAR100"], [206, 2, 1, "", "TensorflowDatasets"], [206, 2, 1, "", "TensorflowFashionMNIST"], [206, 2, 1, "", "TensorflowImageFolder"], [206, 2, 1, "", "TensorflowImageRecord"], [206, 2, 1, "", "TensorflowMNIST"], [206, 2, 1, "", "TensorflowTFRecordDataset"], [206, 2, 1, "", "TensorflowVOCRecord"], [206, 1, 1, "", "calculate_md5"], [206, 1, 1, "", "check_integrity"], [206, 1, 1, "", "dataset_registry"], [206, 1, 1, "", "download_url"], [206, 5, 1, "", "framework_datasets"], [206, 1, 1, "", "gen_bar_updater"]], "neural_compressor.experimental.data.datasets.dataset.CIFAR10": [[206, 3, 1, "", "download"], [206, 3, 1, "", "load_meta"]], "neural_compressor.experimental.data.datasets.dataset.FashionMNIST": [[206, 3, 1, "", "read_data"]], "neural_compressor.experimental.data.datasets.dataset.MNIST": [[206, 4, 1, "", "class_to_idx"], [206, 3, 1, "", "download"], [206, 3, 1, "", "read_data"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[207, 2, 1, "", "DummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[208, 2, 1, "", "DummyDataset"], [208, 2, 1, "", "SparseDummyDataset"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[209, 2, 1, "", "ImagenetRaw"], [209, 2, 1, "", "MXNetImagenetRaw"], [209, 2, 1, "", "ONNXRTImagenetDataset"], [209, 2, 1, "", "PytorchImagenetRaw"], [209, 2, 1, "", "TensorflowImagenetDataset"], [209, 2, 1, "", "TensorflowImagenetRaw"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[211, 2, 1, "", "StyleTransferDataset"]], "neural_compressor.experimental.data.filters": [[214, 2, 1, "", "FILTERS"], [214, 2, 1, "", "Filter"], [212, 0, 0, "-", "coco_filter"], [213, 0, 0, "-", "filter"], [214, 1, 1, "", "filter_registry"]], "neural_compressor.experimental.data.filters.coco_filter": [[212, 2, 1, "", "LabelBalanceCOCORawFilter"], [212, 2, 1, "", "LabelBalanceCOCORecordFilter"]], "neural_compressor.experimental.data.filters.filter": [[213, 2, 1, "", "FILTERS"], [213, 2, 1, "", "Filter"], [213, 2, 1, "", "MXNetFilters"], [213, 2, 1, "", "ONNXRTITFilters"], [213, 2, 1, "", "ONNXRTQLFilters"], [213, 2, 1, "", "PyTorchFilters"], [213, 2, 1, "", "TensorflowFilters"], [213, 1, 1, "", "filter_registry"]], "neural_compressor.experimental.data.transforms": [[217, 2, 1, "", "BaseTransform"], [217, 2, 1, "", "TRANSFORMS"], [216, 0, 0, "-", "imagenet_transform"], [218, 0, 0, "-", "tokenization"], [219, 0, 0, "-", "transform"], [217, 1, 1, "", "transform_registry"]], "neural_compressor.experimental.data.transforms.TRANSFORMS": [[217, 3, 1, "", "register"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[216, 2, 1, "", "BilinearImagenetTransform"], [216, 2, 1, "", "LabelShift"], [216, 2, 1, "", "ONNXResizeCropImagenetTransform"], [216, 2, 1, "", "OnnxBilinearImagenetTransform"], [216, 2, 1, "", "ParseDecodeImagenet"], [216, 2, 1, "", "ParseDecodeImagenetTransform"], [216, 2, 1, "", "QuantizedInput"], [216, 2, 1, "", "ResizeWithAspectRatio"], [216, 2, 1, "", "TensorflowResizeCropImagenetTransform"]], "neural_compressor.experimental.data.transforms.tokenization": [[218, 2, 1, "", "BasicTokenizer"], [218, 2, 1, "", "FullTokenizer"], [218, 2, 1, "", "WordpieceTokenizer"], [218, 1, 1, "", "convert_by_vocab"], [218, 1, 1, "", "convert_to_unicode"], [218, 1, 1, "", "load_vocab"], [218, 1, 1, "", "whitespace_tokenize"]], "neural_compressor.experimental.data.transforms.tokenization.BasicTokenizer": [[218, 3, 1, "", "tokenize"]], "neural_compressor.experimental.data.transforms.tokenization.FullTokenizer": [[218, 3, 1, "", "convert_ids_to_tokens"], [218, 3, 1, "", "convert_tokens_to_ids"], [218, 3, 1, "", "tokenize"]], "neural_compressor.experimental.data.transforms.tokenization.WordpieceTokenizer": [[218, 3, 1, "", "tokenize"]], "neural_compressor.experimental.data.transforms.transform": [[219, 2, 1, "", "AlignImageChannelTransform"], [219, 2, 1, "", "BaseTransform"], [219, 2, 1, "", "CastONNXTransform"], [219, 2, 1, "", "CastPyTorchTransform"], [219, 2, 1, "", "CastTFTransform"], [219, 2, 1, "", "CenterCropTFTransform"], [219, 2, 1, "", "CenterCropTransform"], [219, 2, 1, "", "CollectTransform"], [219, 2, 1, "", "ComposeTransform"], [219, 2, 1, "", "CropResizeTFTransform"], [219, 2, 1, "", "CropResizeTransform"], [219, 2, 1, "", "CropToBoundingBox"], [219, 2, 1, "", "InputFeatures"], [219, 2, 1, "", "MXNetCropResizeTransform"], [219, 2, 1, "", "MXNetCropToBoundingBox"], [219, 2, 1, "", "MXNetNormalizeTransform"], [219, 2, 1, "", "MXNetTransforms"], [219, 2, 1, "", "MXNetTranspose"], [219, 2, 1, "", "NormalizeTFTransform"], [219, 2, 1, "", "NormalizeTransform"], [219, 2, 1, "", "ONNXRTCropToBoundingBox"], [219, 2, 1, "", "ONNXRTITTransforms"], [219, 2, 1, "", "ONNXRTQLTransforms"], [219, 2, 1, "", "PaddedCenterCropTransform"], [219, 2, 1, "", "ParseDecodeVocTransform"], [219, 2, 1, "", "PyTorchAlignImageChannel"], [219, 2, 1, "", "PyTorchCropResizeTransform"], [219, 2, 1, "", "PyTorchNormalizeTransform"], [219, 2, 1, "", "PyTorchTransforms"], [219, 2, 1, "", "PyTorchTranspose"], [219, 2, 1, "", "PytorchMxnetTransform"], [219, 2, 1, "", "PytorchMxnetWrapFunction"], [219, 2, 1, "", "RandomCropTFTransform"], [219, 2, 1, "", "RandomCropTransform"], [219, 2, 1, "", "RandomHorizontalFlip"], [219, 2, 1, "", "RandomResizedCropMXNetTransform"], [219, 2, 1, "", "RandomResizedCropPytorchTransform"], [219, 2, 1, "", "RandomResizedCropTFTransform"], [219, 2, 1, "", "RandomResizedCropTransform"], [219, 2, 1, "", "RandomVerticalFlip"], [219, 2, 1, "", "RescaleKerasPretrainTransform"], [219, 2, 1, "", "RescaleTFTransform"], [219, 2, 1, "", "RescaleTransform"], [219, 2, 1, "", "ResizeMXNetTransform"], [219, 2, 1, "", "ResizePytorchTransform"], [219, 2, 1, "", "ResizeTFTransform"], [219, 2, 1, "", "ResizeTransform"], [219, 2, 1, "", "ResizeWithRatio"], [219, 2, 1, "", "SquadExample"], [219, 2, 1, "", "TFModelZooCollectTransform"], [219, 2, 1, "", "TFSquadV1ModelZooPostTransform"], [219, 2, 1, "", "TFSquadV1PostTransform"], [219, 2, 1, "", "TRANSFORMS"], [219, 2, 1, "", "TensorflowCropToBoundingBox"], [219, 2, 1, "", "TensorflowRandomHorizontalFlip"], [219, 2, 1, "", "TensorflowRandomVerticalFlip"], [219, 2, 1, "", "TensorflowResizeWithRatio"], [219, 2, 1, "", "TensorflowTransform"], [219, 2, 1, "", "TensorflowTransforms"], [219, 2, 1, "", "TensorflowTranspose"], [219, 2, 1, "", "TensorflowWrapFunction"], [219, 2, 1, "", "ToArray"], [219, 2, 1, "", "ToNDArrayTransform"], [219, 2, 1, "", "Transforms"], [219, 2, 1, "", "Transpose"], [219, 1, 1, "", "convert_examples_to_features"], [219, 1, 1, "", "get_final_text"], [219, 1, 1, "", "get_torchvision_map"], [219, 1, 1, "", "read_squad_examples"], [219, 1, 1, "", "transform_registry"]], "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTFTransform": [[219, 3, 1, "", "get_params"]], "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTransform": [[219, 3, 1, "", "get_params"]], "neural_compressor.experimental.data.transforms.transform.TFSquadV1PostTransform": [[219, 3, 1, "", "get_postprocess_result"], [219, 3, 1, "", "process_result"]], "neural_compressor.experimental.data.transforms.transform.TRANSFORMS": [[219, 3, 1, "", "register"]], "neural_compressor.experimental.distillation": [[220, 2, 1, "", "Distillation"]], "neural_compressor.experimental.distillation.Distillation": [[220, 6, 1, "", "_epoch_ran"], [220, 6, 1, "", "best_model"], [220, 6, 1, "", "best_score"], [220, 3, 1, "", "create_criterion"], [220, 3, 1, "", "create_optimizer"], [220, 4, 1, "", "criterion"], [220, 6, 1, "", "eval_frequency"], [220, 4, 1, "", "evaluation_distributed"], [220, 3, 1, "", "execute"], [220, 3, 1, "", "generate_hooks"], [220, 3, 1, "", "init_train_cfg"], [220, 3, 1, "", "on_post_forward"], [220, 4, 1, "", "optimizer"], [220, 3, 1, "", "pre_process"], [220, 3, 1, "", "prepare"], [220, 4, 1, "", "student_model"], [220, 4, 1, "", "teacher_model"], [220, 4, 1, "", "train_cfg"], [220, 4, 1, "", "train_distributed"]], "neural_compressor.experimental.export": [[221, 1, 1, "", "onnx_qlinear_to_qdq"], [222, 0, 0, "-", "qlinear2qdq"], [223, 0, 0, "-", "torch2onnx"], [221, 1, 1, "", "torch_to_fp32_onnx"], [221, 1, 1, "", "torch_to_int8_onnx"], [224, 0, 0, "-", "utils"]], "neural_compressor.experimental.export.qlinear2qdq": [[222, 1, 1, "", "check_model"], [222, 1, 1, "", "onnx_qlinear_to_qdq"]], "neural_compressor.experimental.export.torch2onnx": [[223, 1, 1, "", "build_scale_mapping"], [223, 1, 1, "", "get_node_mapping"], [223, 1, 1, "", "get_quantizable_onnx_ops"], [223, 1, 1, "", "qdq_fp32_bias"], [223, 1, 1, "", "qdq_fp32_bias_qdq"], [223, 1, 1, "", "qdq_int32_bias"], [223, 1, 1, "", "recalculate_bias"], [223, 1, 1, "", "remove_nodes_by_name"], [223, 1, 1, "", "set_data_type"], [223, 1, 1, "", "set_scale_info"], [223, 1, 1, "", "sub_graph_with_int32_bias"], [223, 1, 1, "", "torch_to_fp32_onnx"], [223, 1, 1, "", "torch_to_int8_onnx"], [223, 1, 1, "", "update_weight_bias"]], "neural_compressor.experimental.export.utils": [[224, 2, 1, "", "DummyDataReader"], [224, 1, 1, "", "ONNX2Numpy_dtype"]], "neural_compressor.experimental.export.utils.DummyDataReader": [[224, 3, 1, "", "get_next"]], "neural_compressor.experimental.graph_optimization": [[225, 2, 1, "", "Graph_Optimization"]], "neural_compressor.experimental.graph_optimization.Graph_Optimization": [[225, 3, 1, "", "dataset"], [225, 4, 1, "", "eval_dataloader"], [225, 4, 1, "", "eval_func"], [225, 4, 1, "", "input"], [225, 4, 1, "", "metric"], [225, 4, 1, "", "model"], [225, 4, 1, "", "output"], [225, 4, 1, "", "postprocess"], [225, 4, 1, "", "precisions"], [225, 3, 1, "", "set_config_by_model"]], "neural_compressor.experimental.metric": [[233, 2, 1, "", "BaseMetric"], [233, 2, 1, "", "METRICS"], [539, 0, 0, "-", "bleu"], [228, 0, 0, "-", "bleu_util"], [229, 0, 0, "-", "coco_label_map"], [230, 0, 0, "-", "coco_tools"], [231, 0, 0, "-", "evaluate_squad"], [232, 0, 0, "-", "f1"], [234, 0, 0, "-", "metric"], [233, 1, 1, "", "metric_registry"]], "neural_compressor.experimental.metric.BaseMetric": [[233, 4, 1, "", "hvd"], [233, 4, 1, "", "metric"], [233, 3, 1, "", "reset"], [233, 3, 1, "", "result"], [233, 3, 1, "", "update"]], "neural_compressor.experimental.metric.METRICS": [[233, 6, 1, "", "metrics"], [233, 3, 1, "", "register"]], "neural_compressor.experimental.metric.bleu": [[539, 2, 1, "", "BLEU"], [227, 2, 1, "", "UnicodeRegex"], [227, 1, 1, "", "bleu_tokenize"]], "neural_compressor.experimental.metric.bleu.BLEU": [[539, 6, 1, "", "labels"], [539, 6, 1, "", "predictions"], [539, 3, 1, "", "reset"], [539, 3, 1, "", "result"], [539, 3, 1, "", "update"]], "neural_compressor.experimental.metric.bleu.UnicodeRegex": [[227, 6, 1, "", "nondigit_punct_re"], [227, 3, 1, "", "property_chars"], [227, 6, 1, "", "punct_nondigit_re"], [227, 6, 1, "", "symbol_re"]], "neural_compressor.experimental.metric.bleu_util": [[228, 1, 1, "", "compute_bleu"]], "neural_compressor.experimental.metric.coco_tools": [[230, 2, 1, "", "COCOEvalWrapper"], [230, 2, 1, "", "COCOWrapper"], [230, 1, 1, "", "ExportSingleImageDetectionBoxesToCoco"], [230, 1, 1, "", "ExportSingleImageDetectionMasksToCoco"], [230, 1, 1, "", "ExportSingleImageGroundtruthToCoco"]], "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper": [[230, 3, 1, "", "ComputeMetrics"], [230, 3, 1, "", "GetAgnosticMode"], [230, 3, 1, "", "GetCategory"], [230, 3, 1, "", "GetCategoryIdList"], [230, 3, 1, "", "accumulate"]], "neural_compressor.experimental.metric.coco_tools.COCOWrapper": [[230, 3, 1, "", "LoadAnnotations"], [230, 6, 1, "", "dataset"], [230, 6, 1, "", "detection_type"]], "neural_compressor.experimental.metric.evaluate_squad": [[231, 1, 1, "", "evaluate"], [231, 1, 1, "", "exact_match_score"], [231, 1, 1, "", "f1_score"], [231, 1, 1, "", "metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.f1": [[232, 1, 1, "", "evaluate"], [232, 1, 1, "", "f1_score"], [232, 1, 1, "", "metric_max_over_ground_truths"], [232, 1, 1, "", "normalize_answer"]], "neural_compressor.experimental.metric.metric": [[234, 2, 1, "", "Accuracy"], [234, 2, 1, "", "BaseMetric"], [234, 2, 1, "", "COCOmAPv2"], [234, 2, 1, "", "F1"], [234, 2, 1, "", "GeneralTopK"], [234, 2, 1, "", "Loss"], [234, 2, 1, "", "MAE"], [234, 2, 1, "", "METRICS"], [234, 2, 1, "", "MSE"], [234, 2, 1, "", "MXNetMetrics"], [234, 2, 1, "", "ONNXRTGLUE"], [234, 2, 1, "", "ONNXRTITMetrics"], [234, 2, 1, "", "ONNXRTQLMetrics"], [234, 2, 1, "", "PyTorchLoss"], [234, 2, 1, "", "PyTorchMetrics"], [234, 2, 1, "", "RMSE"], [234, 2, 1, "", "ROC"], [234, 2, 1, "", "SquadF1"], [234, 2, 1, "", "TensorflowCOCOMAP"], [234, 2, 1, "", "TensorflowMAP"], [234, 2, 1, "", "TensorflowMetrics"], [234, 2, 1, "", "TensorflowTopK"], [234, 2, 1, "", "TensorflowVOCMAP"], [234, 2, 1, "", "WrapMXNetMetric"], [234, 2, 1, "", "WrapONNXRTMetric"], [234, 2, 1, "", "WrapPyTorchMetric"], [234, 2, 1, "", "mIOU"], [234, 1, 1, "", "metric_registry"]], "neural_compressor.experimental.metric.metric.Accuracy": [[234, 6, 1, "", "label_list"], [234, 6, 1, "", "pred_list"], [234, 3, 1, "", "reset"], [234, 3, 1, "", "result"], [234, 6, 1, "", "sample"], [234, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.BaseMetric": [[234, 4, 1, "", "hvd"], [234, 4, 1, "", "metric"], [234, 3, 1, "", "reset"], [234, 3, 1, "", "result"], [234, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.COCOmAPv2": [[234, 3, 1, "", "reset"], [234, 3, 1, "", "result"], [234, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.F1": [[234, 3, 1, "", "reset"], [234, 3, 1, "", "result"], [234, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.GeneralTopK": [[234, 6, 1, "", "k"], [234, 6, 1, "", "num_correct"], [234, 6, 1, "", "num_sample"], [234, 3, 1, "", "reset"], [234, 3, 1, "", "result"], [234, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.Loss": [[234, 3, 1, "", "reset"], [234, 3, 1, "", "result"], [234, 6, 1, "", "sample"], [234, 6, 1, "", "sum"], [234, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.MAE": [[234, 6, 1, "", "compare_label"], [234, 6, 1, "", "label_list"], [234, 6, 1, "", "pred_list"], [234, 3, 1, "", "reset"], [234, 3, 1, "", "result"], [234, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.METRICS": [[234, 6, 1, "", "metrics"], [234, 3, 1, "", "register"]], "neural_compressor.experimental.metric.metric.MSE": [[234, 6, 1, "", "compare_label"], [234, 6, 1, "", "label_list"], [234, 6, 1, "", "pred_list"], [234, 3, 1, "", "reset"], [234, 3, 1, "", "result"], [234, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.MXNetMetrics": [[234, 6, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.ONNXRTGLUE": [[234, 3, 1, "", "reset"], [234, 3, 1, "", "result"], [234, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.ONNXRTITMetrics": [[234, 6, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics": [[234, 6, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.PyTorchLoss": [[234, 3, 1, "", "compute"], [234, 3, 1, "", "reset"], [234, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.PyTorchMetrics": [[234, 6, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.RMSE": [[234, 6, 1, "", "mse"], [234, 3, 1, "", "reset"], [234, 3, 1, "", "result"], [234, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.ROC": [[234, 3, 1, "", "reset"], [234, 3, 1, "", "result"], [234, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.SquadF1": [[234, 3, 1, "", "reset"], [234, 3, 1, "", "result"], [234, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.TensorflowMAP": [[234, 3, 1, "", "reset"], [234, 3, 1, "", "result"], [234, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.TensorflowMetrics": [[234, 6, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.TensorflowTopK": [[234, 6, 1, "", "k"], [234, 6, 1, "", "num_correct"], [234, 6, 1, "", "num_sample"], [234, 3, 1, "", "reset"], [234, 3, 1, "", "result"], [234, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.WrapMXNetMetric": [[234, 3, 1, "", "reset"], [234, 3, 1, "", "result"], [234, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.WrapONNXRTMetric": [[234, 3, 1, "", "reset"], [234, 3, 1, "", "result"], [234, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.WrapPyTorchMetric": [[234, 3, 1, "", "reset"], [234, 3, 1, "", "result"], [234, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.mIOU": [[234, 3, 1, "", "reset"], [234, 3, 1, "", "result"], [234, 3, 1, "", "update"]], "neural_compressor.experimental.mixed_precision": [[235, 2, 1, "", "MixedPrecision"]], "neural_compressor.experimental.mixed_precision.MixedPrecision": [[235, 4, 1, "", "precisions"], [235, 3, 1, "", "set_config_by_model"]], "neural_compressor.experimental.model_conversion": [[236, 2, 1, "", "ModelConversion"]], "neural_compressor.experimental.model_conversion.ModelConversion": [[236, 3, 1, "", "dataset"], [236, 4, 1, "", "destination"], [236, 4, 1, "", "eval_dataloader"], [236, 4, 1, "", "eval_func"], [236, 4, 1, "", "metric"], [236, 4, 1, "", "model"], [236, 4, 1, "", "postprocess"], [236, 4, 1, "", "source"]], "neural_compressor.experimental.nas": [[249, 2, 1, "", "BasicNAS"], [249, 2, 1, "", "DyNAS"], [249, 2, 1, "", "NAS"], [237, 0, 0, "-", "basic_nas"], [238, 0, 0, "-", "dynas"], [243, 0, 0, "-", "dynast"], [250, 0, 0, "-", "nas"], [251, 0, 0, "-", "nas_utils"], [252, 0, 0, "-", "search_algorithms"]], "neural_compressor.experimental.nas.BasicNAS": [[249, 3, 1, "", "estimate"], [249, 3, 1, "", "execute"], [249, 3, 1, "", "init_by_cfg"], [249, 3, 1, "", "pre_process"]], "neural_compressor.experimental.nas.DyNAS": [[249, 3, 1, "", "create_acc_predictor"], [249, 3, 1, "", "create_latency_predictor"], [249, 3, 1, "", "create_macs_predictor"], [249, 3, 1, "", "estimate"], [249, 3, 1, "", "init_cfg"], [249, 3, 1, "", "init_for_search"], [249, 3, 1, "", "search"], [249, 3, 1, "", "select_model_arch"]], "neural_compressor.experimental.nas.basic_nas": [[237, 2, 1, "", "BasicNAS"]], "neural_compressor.experimental.nas.basic_nas.BasicNAS": [[237, 3, 1, "", "estimate"], [237, 3, 1, "", "execute"], [237, 3, 1, "", "init_by_cfg"], [237, 3, 1, "", "pre_process"]], "neural_compressor.experimental.nas.dynas": [[238, 2, 1, "", "DyNAS"]], "neural_compressor.experimental.nas.dynas.DyNAS": [[238, 3, 1, "", "create_acc_predictor"], [238, 3, 1, "", "create_latency_predictor"], [238, 3, 1, "", "create_macs_predictor"], [238, 3, 1, "", "estimate"], [238, 3, 1, "", "init_cfg"], [238, 3, 1, "", "init_for_search"], [238, 3, 1, "", "search"], [238, 3, 1, "", "select_model_arch"]], "neural_compressor.experimental.nas.dynast": [[239, 0, 0, "-", "dynas_manager"], [240, 0, 0, "-", "dynas_predictor"], [241, 0, 0, "-", "dynas_search"], [242, 0, 0, "-", "dynas_utils"], [244, 0, 0, "-", "supernetwork"]], "neural_compressor.experimental.nas.dynast.dynas_manager": [[239, 2, 1, "", "ParameterManager"], [239, 2, 1, "", "TransformerLTEncoding"]], "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager": [[239, 3, 1, "", "create_training_set"], [239, 3, 1, "", "import_csv"], [239, 3, 1, "", "onehot_generic"], [239, 3, 1, "", "process_param_dict"], [239, 3, 1, "", "random_sample"], [239, 3, 1, "", "random_samples"], [239, 3, 1, "", "set_seed"], [239, 3, 1, "", "translate2param"], [239, 3, 1, "", "translate2pymoo"]], "neural_compressor.experimental.nas.dynast.dynas_manager.TransformerLTEncoding": [[239, 3, 1, "", "create_training_set"], [239, 3, 1, "", "import_csv"]], "neural_compressor.experimental.nas.dynast.dynas_predictor": [[240, 2, 1, "", "Predictor"]], "neural_compressor.experimental.nas.dynast.dynas_predictor.Predictor": [[240, 3, 1, "", "get_metrics"], [240, 3, 1, "", "get_parameters"], [240, 3, 1, "", "load"], [240, 3, 1, "", "predict"], [240, 3, 1, "", "save"], [240, 3, 1, "", "train"]], "neural_compressor.experimental.nas.dynast.dynas_search": [[241, 2, 1, "", "ProblemMultiObjective"], [241, 2, 1, "", "SearchAlgoManager"]], "neural_compressor.experimental.nas.dynast.dynas_search.SearchAlgoManager": [[241, 3, 1, "", "configure_age"], [241, 3, 1, "", "configure_nsga2"], [241, 3, 1, "", "run_search"]], "neural_compressor.experimental.nas.dynast.dynas_utils": [[242, 2, 1, "", "EvaluationInterface"], [242, 2, 1, "", "EvaluationInterfaceMobileNetV3"], [242, 2, 1, "", "EvaluationInterfaceResNet50"], [242, 2, 1, "", "EvaluationInterfaceTransformerLT"], [242, 2, 1, "", "OFARunner"], [242, 2, 1, "", "Runner"], [242, 2, 1, "", "TorchVisionReference"], [242, 2, 1, "", "TransformerLTRunner"], [242, 1, 1, "", "get_macs"], [242, 1, 1, "", "get_torchvision_model"], [242, 1, 1, "", "measure_latency"]], "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterface": [[242, 3, 1, "", "clear_csv"], [242, 3, 1, "", "eval_subnet"]], "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterfaceMobileNetV3": [[242, 3, 1, "", "eval_subnet"]], "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterfaceResNet50": [[242, 3, 1, "", "eval_subnet"]], "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterfaceTransformerLT": [[242, 3, 1, "", "clear_csv"], [242, 3, 1, "", "eval_subnet"]], "neural_compressor.experimental.nas.dynast.dynas_utils.OFARunner": [[242, 3, 1, "", "estimate_accuracy_top1"], [242, 3, 1, "", "estimate_latency"], [242, 3, 1, "", "estimate_macs"], [242, 3, 1, "", "get_subnet"], [242, 3, 1, "", "measure_latency"], [242, 3, 1, "", "validate_macs"], [242, 3, 1, "", "validate_top1"]], "neural_compressor.experimental.nas.dynast.dynas_utils.TorchVisionReference": [[242, 3, 1, "", "measure_latency"], [242, 3, 1, "", "validate_macs"], [242, 3, 1, "", "validate_top1"]], "neural_compressor.experimental.nas.dynast.dynas_utils.TransformerLTRunner": [[242, 3, 1, "", "measure_latency"], [242, 3, 1, "", "validate_macs"]], "neural_compressor.experimental.nas.dynast.supernetwork": [[245, 0, 0, "-", "machine_translation"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation": [[246, 0, 0, "-", "modules_supernetwork"], [247, 0, 0, "-", "transformer_interface"], [248, 0, 0, "-", "transformer_supernetwork"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork": [[246, 2, 1, "", "MultiheadAttentionSuper"], [246, 1, 1, "", "get_incremental_state"], [246, 1, 1, "", "set_incremental_state"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork.MultiheadAttentionSuper": [[246, 3, 1, "", "forward"], [246, 3, 1, "", "reorder_incremental_state"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface": [[247, 1, 1, "", "compute_bleu"], [247, 1, 1, "", "compute_latency"], [247, 1, 1, "", "compute_macs"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork": [[248, 2, 1, "", "TransformerDecoder"], [248, 2, 1, "", "TransformerDecoderLayer"], [248, 2, 1, "", "TransformerEncoder"], [248, 2, 1, "", "TransformerEncoderLayer"], [248, 2, 1, "", "TransformerSuperNetwork"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerDecoder": [[248, 3, 1, "", "extract_features"], [248, 3, 1, "", "forward"], [248, 3, 1, "", "max_positions"], [248, 3, 1, "", "output_layer"], [248, 3, 1, "", "upgrade_state_dict_named"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerDecoderLayer": [[248, 3, 1, "", "forward"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerEncoder": [[248, 3, 1, "", "forward"], [248, 3, 1, "", "max_positions"], [248, 3, 1, "", "reorder_encoder_out"], [248, 3, 1, "", "upgrade_state_dict_named"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerEncoderLayer": [[248, 3, 1, "", "forward"], [248, 3, 1, "", "upgrade_state_dict_named"]], "neural_compressor.experimental.nas.nas": [[250, 2, 1, "", "NAS"], [250, 2, 1, "", "NASBase"]], "neural_compressor.experimental.nas.nas.NASBase": [[250, 3, 1, "", "count_model_parameters"], [250, 3, 1, "", "dump_search_results"], [250, 3, 1, "", "estimate"], [250, 3, 1, "", "find_best_model_archs"], [250, 3, 1, "", "init_search_cfg"], [250, 3, 1, "", "load_search_results"], [250, 3, 1, "", "metrics_conversion"], [250, 4, 1, "", "model_builder"], [250, 3, 1, "", "params_vec2params_dict"], [250, 3, 1, "", "search"], [250, 4, 1, "", "search_algorithm"], [250, 4, 1, "", "search_space"], [250, 3, 1, "", "select_model_arch"]], "neural_compressor.experimental.nas.nas_utils": [[251, 1, 1, "", "create_search_space_pool"], [251, 1, 1, "", "find_pareto_front"], [251, 1, 1, "", "nas_registry"]], "neural_compressor.experimental.nas.search_algorithms": [[252, 2, 1, "", "BayesianOptimizationSearcher"], [252, 2, 1, "", "GridSearcher"], [252, 2, 1, "", "RandomSearcher"], [252, 2, 1, "", "Searcher"]], "neural_compressor.experimental.nas.search_algorithms.BayesianOptimizationSearcher": [[252, 3, 1, "", "get_feedback"], [252, 3, 1, "", "indices2params_vec"], [252, 3, 1, "", "suggest"]], "neural_compressor.experimental.nas.search_algorithms.GridSearcher": [[252, 3, 1, "", "suggest"]], "neural_compressor.experimental.nas.search_algorithms.RandomSearcher": [[252, 3, 1, "", "suggest"]], "neural_compressor.experimental.nas.search_algorithms.Searcher": [[252, 3, 1, "", "get_feedback"], [252, 3, 1, "", "params_vec2params_dict"], [252, 3, 1, "", "suggest"]], "neural_compressor.experimental.pruning": [[253, 2, 1, "", "Pruning"], [253, 2, 1, "", "TfPruningCallback"]], "neural_compressor.experimental.pruning.Pruning": [[253, 6, 1, "", "conf"], [253, 4, 1, "", "evaluation_distributed"], [253, 3, 1, "", "execute"], [253, 3, 1, "", "generate_hooks"], [253, 3, 1, "", "generate_pruners"], [253, 3, 1, "", "get_sparsity_ratio"], [253, 3, 1, "", "pre_process"], [253, 3, 1, "", "prepare"], [253, 6, 1, "", "pruners"], [253, 4, 1, "", "pruning_func"], [253, 4, 1, "", "train_distributed"], [253, 3, 1, "", "update_items_for_all_pruners"]], "neural_compressor.experimental.pruning.TfPruningCallback": [[253, 3, 1, "", "on_after_compute_loss"], [253, 3, 1, "", "on_batch_begin"], [253, 3, 1, "", "on_batch_end"], [253, 3, 1, "", "on_epoch_begin"], [253, 3, 1, "", "on_epoch_end"], [253, 3, 1, "", "on_step_begin"], [253, 3, 1, "", "on_step_end"], [253, 3, 1, "", "on_train_begin"], [253, 3, 1, "", "on_train_end"], [253, 3, 1, "", "post_epoch_end"], [253, 3, 1, "", "pre_epoch_begin"]], "neural_compressor.experimental.pruning_recipes": [[254, 2, 1, "", "PATTERNS"], [255, 0, 0, "-", "patterns"]], "neural_compressor.experimental.pruning_recipes.PATTERNS": [[254, 6, 1, "", "patterns"], [254, 3, 1, "", "support_pattern"]], "neural_compressor.experimental.pruning_recipes.patterns": [[255, 2, 1, "", "PATTERNS"], [256, 0, 0, "-", "pattern"], [257, 0, 0, "-", "tile_pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.PATTERNS": [[255, 6, 1, "", "patterns"], [255, 3, 1, "", "support_pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[256, 2, 1, "", "PATTERNS"], [256, 2, 1, "", "PatternBase"], [256, 1, 1, "", "pattern_registry"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS": [[256, 6, 1, "", "patterns"], [256, 3, 1, "", "support_pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern.PatternBase": [[256, 3, 1, "", "compute_sparsity"], [256, 3, 1, "", "reduce"], [256, 3, 1, "", "reshape"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[257, 2, 1, "", "TilePatternBase"], [257, 2, 1, "", "TilePattern_1x1"], [257, 2, 1, "", "TilePattern_1x16"], [257, 2, 1, "", "TilePattern_1x2"], [257, 2, 1, "", "TilePattern_2x2"], [257, 2, 1, "", "TilePattern_4x1"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePatternBase": [[257, 3, 1, "", "compute_sparsity"], [257, 3, 1, "", "repeat_mask"]], "neural_compressor.experimental.pruning_v2": [[258, 2, 1, "", "Pruning"], [258, 2, 1, "", "TfPruningCallback"]], "neural_compressor.experimental.pruning_v2.Pruning": [[258, 6, 1, "", "conf"], [258, 4, 1, "", "evaluation_distributed"], [258, 3, 1, "", "execute"], [258, 3, 1, "", "generate_hooks"], [258, 3, 1, "", "get_sparsity_ratio"], [258, 3, 1, "", "pre_process"], [258, 3, 1, "", "prepare"], [258, 6, 1, "", "pruners"], [258, 4, 1, "", "pruning_func"], [258, 4, 1, "", "train_distributed"], [258, 3, 1, "", "update_config"]], "neural_compressor.experimental.pruning_v2.TfPruningCallback": [[258, 3, 1, "", "on_after_compute_loss"], [258, 3, 1, "", "on_batch_begin"], [258, 3, 1, "", "on_batch_end"], [258, 3, 1, "", "on_epoch_begin"], [258, 3, 1, "", "on_epoch_end"], [258, 3, 1, "", "on_step_begin"], [258, 3, 1, "", "on_step_end"], [258, 3, 1, "", "on_train_begin"], [258, 3, 1, "", "on_train_end"], [258, 3, 1, "", "post_epoch_end"], [258, 3, 1, "", "pre_epoch_begin"]], "neural_compressor.experimental.pytorch_pruner": [[260, 0, 0, "-", "logger"], [261, 0, 0, "-", "patterns"], [262, 0, 0, "-", "prune_utils"], [263, 0, 0, "-", "pruner"], [264, 0, 0, "-", "pruning"], [265, 0, 0, "-", "scheduler"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[261, 2, 1, "", "Pattern"], [261, 2, 1, "", "PatternNInM"], [261, 2, 1, "", "PatternNxM"], [261, 1, 1, "", "get_pattern"], [261, 1, 1, "", "register_pattern"]], "neural_compressor.experimental.pytorch_pruner.patterns.Pattern": [[261, 3, 1, "", "get_block_size_dict"], [261, 3, 1, "", "get_mask_single"], [261, 3, 1, "", "get_masks"], [261, 3, 1, "", "get_masks_global"], [261, 3, 1, "", "get_masks_local"], [261, 3, 1, "", "get_pattern_lock_masks"], [261, 3, 1, "", "get_sparsity_ratio"], [261, 6, 1, "", "is_global"], [261, 6, 1, "", "pattern"]], "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM": [[261, 6, 1, "", "M"], [261, 6, 1, "", "N"], [261, 3, 1, "", "get_masks_global"], [261, 3, 1, "", "get_pattern_lock_masks"], [261, 3, 1, "", "get_sparsity_ratio"]], "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM": [[261, 6, 1, "", "block_size"], [261, 3, 1, "", "get_block_size_dict"], [261, 3, 1, "", "get_masks_global"], [261, 3, 1, "", "get_pattern_lock_masks"], [261, 3, 1, "", "get_sparsity_ratio"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[262, 1, 1, "", "check_config"], [262, 1, 1, "", "parse_not_to_prune"], [262, 1, 1, "", "parse_to_prune"], [262, 1, 1, "", "process_and_check_config"], [262, 1, 1, "", "process_config"], [262, 1, 1, "", "reset_non_value_to_default"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[263, 2, 1, "", "MagnitudePruner"], [263, 2, 1, "", "PatternLockPruner"], [263, 2, 1, "", "Pruner"], [263, 2, 1, "", "SnipMomentumPruner"], [263, 2, 1, "", "SnipPruner"], [263, 1, 1, "", "get_pruner"], [263, 1, 1, "", "register_pruners"]], "neural_compressor.experimental.pytorch_pruner.pruner.MagnitudePruner": [[263, 3, 1, "", "update_scores"]], "neural_compressor.experimental.pytorch_pruner.pruner.PatternLockPruner": [[263, 3, 1, "", "on_after_optimizer_step"], [263, 3, 1, "", "on_step_begin"]], "neural_compressor.experimental.pytorch_pruner.pruner.Pruner": [[263, 3, 1, "", "check_is_pruned_step"], [263, 6, 1, "", "config"], [263, 6, 1, "", "current_sparsity_ratio"], [263, 6, 1, "", "end_step"], [263, 6, 1, "", "global_step"], [263, 3, 1, "", "mask_weights"], [263, 6, 1, "", "masks"], [263, 6, 1, "", "max_sparsity_ratio_per_layer"], [263, 6, 1, "", "modules"], [263, 3, 1, "", "on_after_eval"], [263, 3, 1, "", "on_after_optimizer_step"], [263, 3, 1, "", "on_before_eval"], [263, 3, 1, "", "on_before_optimizer_step"], [263, 3, 1, "", "on_epoch_begin"], [263, 3, 1, "", "on_epoch_end"], [263, 3, 1, "", "on_step_begin"], [263, 3, 1, "", "on_step_end"], [263, 3, 1, "", "on_train_begin"], [263, 3, 1, "", "on_train_end"], [263, 6, 1, "", "pattern"], [263, 6, 1, "", "scheduler"], [263, 6, 1, "", "scores"], [263, 6, 1, "", "start_step"], [263, 6, 1, "", "target_sparsity_ratio"], [263, 6, 1, "", "update_frequency_on_step"], [263, 3, 1, "", "update_scores"]], "neural_compressor.experimental.pytorch_pruner.pruner.SnipMomentumPruner": [[263, 3, 1, "", "on_after_optimizer_step"]], "neural_compressor.experimental.pytorch_pruner.pruner.SnipPruner": [[263, 3, 1, "", "on_after_optimizer_step"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[264, 2, 1, "", "Pruning"]], "neural_compressor.experimental.pytorch_pruner.pruning.Pruning": [[264, 6, 1, "", "config_file_path"], [264, 3, 1, "", "get_sparsity_ratio"], [264, 6, 1, "", "model"], [264, 3, 1, "", "on_after_eval"], [264, 3, 1, "", "on_after_optimizer_step"], [264, 3, 1, "", "on_before_eval"], [264, 3, 1, "", "on_before_optimizer_step"], [264, 3, 1, "", "on_epoch_begin"], [264, 3, 1, "", "on_epoch_end"], [264, 3, 1, "", "on_step_begin"], [264, 3, 1, "", "on_step_end"], [264, 3, 1, "", "on_train_begin"], [264, 3, 1, "", "on_train_end"], [264, 3, 1, "", "prepare"], [264, 6, 1, "", "pruner_info"], [264, 6, 1, "", "pruners"], [264, 3, 1, "", "update_items_for_all_pruners"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[265, 2, 1, "", "IterativeScheduler"], [265, 2, 1, "", "OneshotScheduler"], [265, 2, 1, "", "Scheduler"], [265, 1, 1, "", "get_scheduler"], [265, 1, 1, "", "register_scheduler"]], "neural_compressor.experimental.pytorch_pruner.scheduler.IterativeScheduler": [[265, 3, 1, "", "update_sparsity_ratio"]], "neural_compressor.experimental.pytorch_pruner.scheduler.OneshotScheduler": [[265, 3, 1, "", "update_sparsity_ratio"]], "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler": [[265, 6, 1, "", "config"], [265, 3, 1, "", "update_sparsity_ratio"]], "neural_compressor.experimental.quantization": [[266, 2, 1, "", "Quantization"]], "neural_compressor.experimental.quantization.Quantization": [[266, 4, 1, "", "calib_dataloader"], [266, 3, 1, "", "dataset"], [266, 3, 1, "", "execute"], [266, 4, 1, "", "metric"], [266, 4, 1, "", "model"], [266, 4, 1, "", "objective"], [266, 4, 1, "", "postprocess"], [266, 3, 1, "", "pre_process"], [266, 4, 1, "", "q_func"]], "neural_compressor.experimental.scheduler": [[267, 2, 1, "", "Scheduler"]], "neural_compressor.experimental.scheduler.Scheduler": [[267, 3, 1, "", "append"], [267, 3, 1, "", "combine"], [267, 4, 1, "", "eval_func"], [267, 4, 1, "", "model"], [267, 4, 1, "", "train_func"]], "neural_compressor.metric": [[275, 2, 1, "", "BaseMetric"], [275, 2, 1, "", "METRICS"], [275, 2, 1, "", "Metric"], [269, 0, 0, "-", "bleu"], [270, 0, 0, "-", "bleu_util"], [271, 0, 0, "-", "coco_label_map"], [272, 0, 0, "-", "coco_tools"], [273, 0, 0, "-", "evaluate_squad"], [274, 0, 0, "-", "f1"], [276, 0, 0, "-", "metric"], [275, 1, 1, "", "metric_registry"]], "neural_compressor.metric.BaseMetric": [[275, 4, 1, "", "hvd"], [275, 4, 1, "", "metric"], [275, 3, 1, "", "reset"], [275, 3, 1, "", "result"], [275, 3, 1, "", "update"]], "neural_compressor.metric.METRICS": [[275, 6, 1, "", "metrics"], [275, 3, 1, "", "register"]], "neural_compressor.metric.bleu": [[269, 2, 1, "", "BLEU"], [269, 2, 1, "", "UnicodeRegex"], [269, 1, 1, "", "bleu_tokenize"]], "neural_compressor.metric.bleu.BLEU": [[269, 6, 1, "", "labels"], [269, 6, 1, "", "predictions"], [269, 3, 1, "", "reset"], [269, 3, 1, "", "result"], [269, 3, 1, "", "update"]], "neural_compressor.metric.bleu.UnicodeRegex": [[269, 6, 1, "", "nondigit_punct_re"], [269, 3, 1, "", "property_chars"], [269, 6, 1, "", "punct_nondigit_re"], [269, 6, 1, "", "symbol_re"]], "neural_compressor.metric.bleu_util": [[270, 1, 1, "", "compute_bleu"]], "neural_compressor.metric.coco_tools": [[272, 2, 1, "", "COCOEvalWrapper"], [272, 2, 1, "", "COCOWrapper"], [272, 1, 1, "", "ExportSingleImageDetectionBoxesToCoco"], [272, 1, 1, "", "ExportSingleImageDetectionMasksToCoco"], [272, 1, 1, "", "ExportSingleImageGroundtruthToCoco"]], "neural_compressor.metric.coco_tools.COCOEvalWrapper": [[272, 3, 1, "", "ComputeMetrics"], [272, 3, 1, "", "GetAgnosticMode"], [272, 3, 1, "", "GetCategory"], [272, 3, 1, "", "GetCategoryIdList"], [272, 3, 1, "", "accumulate"]], "neural_compressor.metric.coco_tools.COCOWrapper": [[272, 3, 1, "", "LoadAnnotations"], [272, 6, 1, "", "dataset"], [272, 6, 1, "", "detection_type"]], "neural_compressor.metric.evaluate_squad": [[273, 1, 1, "", "evaluate"], [273, 1, 1, "", "exact_match_score"], [273, 1, 1, "", "f1_score"], [273, 1, 1, "", "metric_max_over_ground_truths"]], "neural_compressor.metric.f1": [[274, 1, 1, "", "evaluate"], [274, 1, 1, "", "f1_score"], [274, 1, 1, "", "metric_max_over_ground_truths"], [274, 1, 1, "", "normalize_answer"]], "neural_compressor.metric.metric": [[276, 2, 1, "", "Accuracy"], [276, 2, 1, "", "BaseMetric"], [276, 2, 1, "", "COCOmAPv2"], [276, 2, 1, "", "F1"], [276, 2, 1, "", "GeneralTopK"], [276, 2, 1, "", "Loss"], [276, 2, 1, "", "MAE"], [276, 2, 1, "", "METRICS"], [276, 2, 1, "", "MSE"], [276, 2, 1, "", "MXNetMetrics"], [276, 2, 1, "", "Metric"], [276, 2, 1, "", "ONNXRTGLUE"], [276, 2, 1, "", "ONNXRTITMetrics"], [276, 2, 1, "", "ONNXRTQLMetrics"], [276, 2, 1, "", "PyTorchLoss"], [276, 2, 1, "", "PyTorchMetrics"], [276, 2, 1, "", "RMSE"], [276, 2, 1, "", "ROC"], [276, 2, 1, "", "SquadF1"], [276, 2, 1, "", "TensorflowCOCOMAP"], [276, 2, 1, "", "TensorflowMAP"], [276, 2, 1, "", "TensorflowMetrics"], [276, 2, 1, "", "TensorflowTopK"], [276, 2, 1, "", "TensorflowVOCMAP"], [276, 2, 1, "", "WrapMXNetMetric"], [276, 2, 1, "", "WrapONNXRTMetric"], [276, 2, 1, "", "WrapPyTorchMetric"], [276, 2, 1, "", "mIOU"], [276, 1, 1, "", "metric_registry"]], "neural_compressor.metric.metric.Accuracy": [[276, 6, 1, "", "label_list"], [276, 6, 1, "", "pred_list"], [276, 3, 1, "", "reset"], [276, 3, 1, "", "result"], [276, 6, 1, "", "sample"], [276, 3, 1, "", "update"]], "neural_compressor.metric.metric.BaseMetric": [[276, 4, 1, "", "hvd"], [276, 4, 1, "", "metric"], [276, 3, 1, "", "reset"], [276, 3, 1, "", "result"], [276, 3, 1, "", "update"]], "neural_compressor.metric.metric.COCOmAPv2": [[276, 3, 1, "", "reset"], [276, 3, 1, "", "result"], [276, 3, 1, "", "update"]], "neural_compressor.metric.metric.F1": [[276, 3, 1, "", "reset"], [276, 3, 1, "", "result"], [276, 3, 1, "", "update"]], "neural_compressor.metric.metric.GeneralTopK": [[276, 6, 1, "", "k"], [276, 6, 1, "", "num_correct"], [276, 6, 1, "", "num_sample"], [276, 3, 1, "", "reset"], [276, 3, 1, "", "result"], [276, 3, 1, "", "update"]], "neural_compressor.metric.metric.Loss": [[276, 3, 1, "", "reset"], [276, 3, 1, "", "result"], [276, 6, 1, "", "sample"], [276, 6, 1, "", "sum"], [276, 3, 1, "", "update"]], "neural_compressor.metric.metric.MAE": [[276, 6, 1, "", "compare_label"], [276, 6, 1, "", "label_list"], [276, 6, 1, "", "pred_list"], [276, 3, 1, "", "reset"], [276, 3, 1, "", "result"], [276, 3, 1, "", "update"]], "neural_compressor.metric.metric.METRICS": [[276, 6, 1, "", "metrics"], [276, 3, 1, "", "register"]], "neural_compressor.metric.metric.MSE": [[276, 6, 1, "", "compare_label"], [276, 6, 1, "", "label_list"], [276, 6, 1, "", "pred_list"], [276, 3, 1, "", "reset"], [276, 3, 1, "", "result"], [276, 3, 1, "", "update"]], "neural_compressor.metric.metric.MXNetMetrics": [[276, 6, 1, "", "metrics"]], "neural_compressor.metric.metric.ONNXRTGLUE": [[276, 3, 1, "", "reset"], [276, 3, 1, "", "result"], [276, 3, 1, "", "update"]], "neural_compressor.metric.metric.ONNXRTITMetrics": [[276, 6, 1, "", "metrics"]], "neural_compressor.metric.metric.ONNXRTQLMetrics": [[276, 6, 1, "", "metrics"]], "neural_compressor.metric.metric.PyTorchLoss": [[276, 3, 1, "", "compute"], [276, 3, 1, "", "reset"], [276, 3, 1, "", "update"]], "neural_compressor.metric.metric.PyTorchMetrics": [[276, 6, 1, "", "metrics"]], "neural_compressor.metric.metric.RMSE": [[276, 6, 1, "", "mse"], [276, 3, 1, "", "reset"], [276, 3, 1, "", "result"], [276, 3, 1, "", "update"]], "neural_compressor.metric.metric.ROC": [[276, 3, 1, "", "reset"], [276, 3, 1, "", "result"], [276, 3, 1, "", "update"]], "neural_compressor.metric.metric.SquadF1": [[276, 3, 1, "", "reset"], [276, 3, 1, "", "result"], [276, 3, 1, "", "update"]], "neural_compressor.metric.metric.TensorflowMAP": [[276, 3, 1, "", "reset"], [276, 3, 1, "", "result"], [276, 3, 1, "", "update"]], "neural_compressor.metric.metric.TensorflowMetrics": [[276, 6, 1, "", "metrics"]], "neural_compressor.metric.metric.TensorflowTopK": [[276, 6, 1, "", "k"], [276, 6, 1, "", "num_correct"], [276, 6, 1, "", "num_sample"], [276, 3, 1, "", "reset"], [276, 3, 1, "", "result"], [276, 3, 1, "", "update"]], "neural_compressor.metric.metric.WrapMXNetMetric": [[276, 3, 1, "", "reset"], [276, 3, 1, "", "result"], [276, 3, 1, "", "update"]], "neural_compressor.metric.metric.WrapONNXRTMetric": [[276, 3, 1, "", "reset"], [276, 3, 1, "", "result"], [276, 3, 1, "", "update"]], "neural_compressor.metric.metric.WrapPyTorchMetric": [[276, 3, 1, "", "reset"], [276, 3, 1, "", "result"], [276, 3, 1, "", "update"]], "neural_compressor.metric.metric.mIOU": [[276, 3, 1, "", "reset"], [276, 3, 1, "", "result"], [276, 3, 1, "", "update"]], "neural_compressor.mix_precision": [[277, 1, 1, "", "fit"]], "neural_compressor.model": [[279, 2, 1, "", "BaseModel"], [279, 2, 1, "", "Model"], [278, 0, 0, "-", "base_model"], [280, 0, 0, "-", "keras_model"], [281, 0, 0, "-", "model"], [282, 0, 0, "-", "mxnet_model"], [283, 0, 0, "-", "nets_factory"], [284, 0, 0, "-", "onnx_model"], [285, 0, 0, "-", "tensorflow_model"], [286, 0, 0, "-", "torch_model"]], "neural_compressor.model.BaseModel": [[279, 3, 1, "", "export"], [279, 3, 1, "", "framework"], [279, 4, 1, "", "graph_info"], [279, 4, 1, "", "model"], [279, 3, 1, "", "save"]], "neural_compressor.model.base_model": [[278, 2, 1, "", "BaseModel"]], "neural_compressor.model.base_model.BaseModel": [[278, 3, 1, "", "export"], [278, 3, 1, "", "framework"], [278, 4, 1, "", "graph_info"], [278, 4, 1, "", "model"], [278, 3, 1, "", "save"]], "neural_compressor.model.keras_model": [[280, 2, 1, "", "KerasModel"]], "neural_compressor.model.keras_model.KerasModel": [[280, 3, 1, "", "framework"], [280, 4, 1, "", "graph_info"], [280, 4, 1, "", "model"], [280, 4, 1, "", "q_config"], [280, 3, 1, "", "save"]], "neural_compressor.model.model": [[281, 2, 1, "", "Model"], [281, 1, 1, "", "get_model_fwk_name"]], "neural_compressor.model.mxnet_model": [[282, 2, 1, "", "MXNetModel"]], "neural_compressor.model.mxnet_model.MXNetModel": [[282, 3, 1, "", "framework"], [282, 4, 1, "", "model"], [282, 3, 1, "", "save"]], "neural_compressor.model.nets_factory": [[283, 2, 1, "", "TFSlimNetsFactory"]], "neural_compressor.model.nets_factory.TFSlimNetsFactory": [[283, 3, 1, "", "register"]], "neural_compressor.model.onnx_model": [[284, 2, 1, "", "ONNXModel"]], "neural_compressor.model.onnx_model.ONNXModel": [[284, 3, 1, "", "add_initializer"], [284, 3, 1, "", "add_initializers"], [284, 3, 1, "", "add_node"], [284, 3, 1, "", "add_nodes"], [284, 3, 1, "", "export"], [284, 3, 1, "", "find_node_by_name"], [284, 3, 1, "", "find_nodes_by_initializer"], [284, 3, 1, "", "framework"], [284, 3, 1, "", "get_children"], [284, 3, 1, "", "get_initializer"], [284, 3, 1, "", "get_nodes_chain"], [284, 3, 1, "", "get_parent"], [284, 3, 1, "", "get_parents"], [284, 3, 1, "", "get_scale_zero"], [284, 3, 1, "", "graph"], [284, 4, 1, "", "graph_info"], [284, 3, 1, "", "initializer"], [284, 3, 1, "", "input"], [284, 4, 1, "", "input_name_to_nodes"], [284, 3, 1, "", "ir_version"], [284, 4, 1, "", "large_size"], [284, 4, 1, "", "model"], [284, 4, 1, "", "model_path"], [284, 3, 1, "", "nodes"], [284, 3, 1, "", "opset_import"], [284, 3, 1, "", "output"], [284, 4, 1, "", "output_name_to_node"], [284, 4, 1, "", "q_config"], [284, 3, 1, "", "remove_initializer"], [284, 3, 1, "", "remove_initializers"], [284, 3, 1, "", "remove_node"], [284, 3, 1, "", "remove_nodes"], [284, 3, 1, "", "remove_unused_constant"], [284, 3, 1, "", "replace_input_of_all_nodes"], [284, 3, 1, "", "replace_node_input"], [284, 3, 1, "", "replace_node_output"], [284, 3, 1, "", "replace_output_of_all_nodes"], [284, 3, 1, "", "save"], [284, 3, 1, "", "save_model_to_file"], [284, 3, 1, "", "set_initializer"], [284, 3, 1, "", "topological_sort"], [284, 3, 1, "", "update"]], "neural_compressor.model.tensorflow_model": [[285, 2, 1, "", "TensorflowBaseModel"], [285, 2, 1, "", "TensorflowCheckpointModel"], [285, 2, 1, "", "TensorflowModel"], [285, 2, 1, "", "TensorflowQATModel"], [285, 2, 1, "", "TensorflowSavedModelModel"], [285, 1, 1, "", "checkpoint_session"], [285, 1, 1, "", "estimator_session"], [285, 1, 1, "", "frozen_pb_session"], [285, 1, 1, "", "get_model_type"], [285, 1, 1, "", "graph_def_session"], [285, 1, 1, "", "graph_session"], [285, 1, 1, "", "keras_session"], [285, 1, 1, "", "load_saved_model"], [285, 1, 1, "", "saved_model_session"], [285, 1, 1, "", "slim_session"], [285, 1, 1, "", "validate_and_inference_input_output"], [285, 1, 1, "", "validate_graph_node"]], "neural_compressor.model.tensorflow_model.TensorflowBaseModel": [[285, 3, 1, "", "framework"], [285, 4, 1, "", "graph"], [285, 4, 1, "", "graph_def"], [285, 4, 1, "", "graph_info"], [285, 4, 1, "", "input_node_names"], [285, 4, 1, "", "input_tensor"], [285, 4, 1, "", "input_tensor_names"], [285, 4, 1, "", "iter_op"], [285, 4, 1, "", "model"], [285, 4, 1, "", "model_type"], [285, 4, 1, "", "name"], [285, 4, 1, "", "output_node_names"], [285, 4, 1, "", "output_tensor"], [285, 4, 1, "", "output_tensor_names"], [285, 4, 1, "", "q_config"], [285, 3, 1, "", "save"], [285, 4, 1, "", "sess"], [285, 4, 1, "", "weights"], [285, 4, 1, "", "workspace_path"]], "neural_compressor.model.tensorflow_model.TensorflowCheckpointModel": [[285, 4, 1, "", "graph_def"]], "neural_compressor.model.tensorflow_model.TensorflowQATModel": [[285, 4, 1, "", "model"], [285, 3, 1, "", "save"]], "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel": [[285, 3, 1, "", "build_saved_model"], [285, 3, 1, "", "get_all_weight_names"], [285, 3, 1, "", "get_weight"], [285, 4, 1, "", "model"], [285, 3, 1, "", "report_sparsity"], [285, 3, 1, "", "save"], [285, 3, 1, "", "update_weights"]], "neural_compressor.model.torch_model": [[286, 2, 1, "", "IPEXModel"], [286, 2, 1, "", "PyTorchBaseModel"], [286, 2, 1, "", "PyTorchFXModel"], [286, 2, 1, "", "PyTorchModel"]], "neural_compressor.model.torch_model.IPEXModel": [[286, 3, 1, "", "save"], [286, 4, 1, "", "workspace_path"]], "neural_compressor.model.torch_model.PyTorchBaseModel": [[286, 3, 1, "", "forward"], [286, 4, 1, "", "fp32_model"], [286, 3, 1, "", "framework"], [286, 3, 1, "", "generate_forward_pre_hook"], [286, 3, 1, "", "get_all_weight_names"], [286, 3, 1, "", "get_gradient"], [286, 3, 1, "", "get_inputs"], [286, 3, 1, "", "get_weight"], [286, 4, 1, "", "model"], [286, 3, 1, "", "prune_weights_"], [286, 3, 1, "", "register_forward_pre_hook"], [286, 3, 1, "", "remove_hooks"], [286, 3, 1, "", "report_sparsity"], [286, 3, 1, "", "update_gradient"], [286, 3, 1, "", "update_weights"]], "neural_compressor.model.torch_model.PyTorchModel": [[286, 3, 1, "", "export"], [286, 3, 1, "", "export_to_bf16_onnx"], [286, 3, 1, "", "export_to_fp32_onnx"], [286, 3, 1, "", "export_to_int8_onnx"], [286, 3, 1, "", "export_to_jit"], [286, 4, 1, "", "graph_info"], [286, 3, 1, "", "load_quantized_state_dict"], [286, 3, 1, "", "quantized_state_dict"], [286, 3, 1, "", "save"], [286, 4, 1, "", "workspace_path"]], "neural_compressor.objective": [[287, 2, 1, "", "Accuracy"], [287, 2, 1, "", "Footprint"], [287, 2, 1, "", "ModelSize"], [287, 2, 1, "", "MultiObjective"], [287, 2, 1, "", "Objective"], [287, 2, 1, "", "Performance"], [287, 1, 1, "", "objective_custom_registry"], [287, 1, 1, "", "objective_registry"]], "neural_compressor.objective.Accuracy": [[287, 3, 1, "", "end"], [287, 3, 1, "", "start"]], "neural_compressor.objective.Footprint": [[287, 3, 1, "", "end"], [287, 3, 1, "", "start"]], "neural_compressor.objective.ModelSize": [[287, 3, 1, "", "end"], [287, 3, 1, "", "start"]], "neural_compressor.objective.MultiObjective": [[287, 3, 1, "", "accuracy_meets"], [287, 4, 1, "", "accuracy_target"], [287, 4, 1, "", "baseline"], [287, 3, 1, "", "best_result"], [287, 3, 1, "", "compare"], [287, 3, 1, "", "end"], [287, 3, 1, "", "evaluate"], [287, 3, 1, "", "reset"], [287, 3, 1, "", "result"], [287, 3, 1, "", "set_model"], [287, 3, 1, "", "start"]], "neural_compressor.objective.Objective": [[287, 3, 1, "", "end"], [287, 4, 1, "", "model"], [287, 3, 1, "", "reset"], [287, 3, 1, "", "result"], [287, 3, 1, "", "result_list"], [287, 3, 1, "", "start"]], "neural_compressor.objective.Performance": [[287, 3, 1, "", "end"], [287, 3, 1, "", "start"]], "neural_compressor.pruner": [[288, 0, 0, "-", "criteria"], [290, 0, 0, "-", "logger"], [291, 0, 0, "-", "patterns"], [294, 0, 0, "-", "pruner_legacy"], [298, 0, 0, "-", "pruners"], [299, 0, 0, "-", "pruning"], [300, 0, 0, "-", "regs"], [301, 0, 0, "-", "schedulers"], [302, 0, 0, "-", "utils"]], "neural_compressor.pruner.criteria": [[288, 2, 1, "", "GradientCriterion"], [288, 2, 1, "", "MagnitudeCriterion"], [288, 2, 1, "", "PruningCriterion"], [288, 2, 1, "", "SnipCriterion"], [288, 2, 1, "", "SnipMomentumCriterion"], [288, 1, 1, "", "get_criterion"], [288, 1, 1, "", "register_criterion"]], "neural_compressor.pruner.criteria.GradientCriterion": [[288, 3, 1, "", "on_before_optimizer_step"], [288, 6, 1, "", "scores"]], "neural_compressor.pruner.criteria.MagnitudeCriterion": [[288, 3, 1, "", "on_step_begin"], [288, 6, 1, "", "scores"]], "neural_compressor.pruner.criteria.PruningCriterion": [[288, 3, 1, "", "on_after_optimizer_step"], [288, 3, 1, "", "on_before_optimizer_step"], [288, 3, 1, "", "on_step_begin"], [288, 6, 1, "", "scores"]], "neural_compressor.pruner.criteria.SnipCriterion": [[288, 3, 1, "", "on_before_optimizer_step"], [288, 6, 1, "", "scores"]], "neural_compressor.pruner.criteria.SnipMomentumCriterion": [[288, 3, 1, "", "on_before_optimizer_step"], [288, 6, 1, "", "scores"]], "neural_compressor.pruner.patterns": [[291, 2, 1, "", "BasePattern"], [291, 2, 1, "", "PatternNInM"], [291, 2, 1, "", "PatternNxM"], [291, 1, 1, "", "get_pattern"], [291, 1, 1, "", "register_pattern"]], "neural_compressor.pruner.patterns.BasePattern": [[291, 3, 1, "", "adjust_ratio"], [291, 3, 1, "", "check_layer_validity"], [291, 6, 1, "", "config"], [291, 3, 1, "", "get_block_size_dict"], [291, 3, 1, "", "get_masks"], [291, 3, 1, "", "get_masks_global"], [291, 3, 1, "", "get_masks_local"], [291, 3, 1, "", "get_pattern_lock_masks"], [291, 3, 1, "", "get_reduced_masks_from_data"], [291, 3, 1, "", "get_single_mask_per_target_ratio"], [291, 3, 1, "", "get_sparsity_ratio"], [291, 3, 1, "", "get_sparsity_ratio_each_layer"], [291, 6, 1, "", "invalid_layers"], [291, 6, 1, "", "is_global"], [291, 6, 1, "", "keep_mask_layers"], [291, 6, 1, "", "max_sparsity_ratio_per_op"], [291, 6, 1, "", "min_sparsity_ratio_per_op"], [291, 6, 1, "", "modules"], [291, 6, 1, "", "pattern"], [291, 3, 1, "", "reduce_tensor"], [291, 6, 1, "", "target_sparsity"], [291, 3, 1, "", "update_residual_cnt"]], "neural_compressor.pruner.patterns.PatternNInM": [[291, 6, 1, "", "M"], [291, 6, 1, "", "N"], [291, 3, 1, "", "check_layer_validity"], [291, 3, 1, "", "get_ele_mask_per_threshold"], [291, 3, 1, "", "get_least_ninm_mask_from_data"], [291, 3, 1, "", "get_masks_global"], [291, 3, 1, "", "get_pattern_lock_masks"], [291, 3, 1, "", "get_reduced_masks_from_data"], [291, 3, 1, "", "get_sparsity_ratio"], [291, 3, 1, "", "reduce_scores"], [291, 3, 1, "", "reshape_orig_to_pattern"], [291, 3, 1, "", "reshape_reduced_to_orig"]], "neural_compressor.pruner.patterns.PatternNxM": [[291, 6, 1, "", "block_size"], [291, 3, 1, "", "check_layer_validity"], [291, 3, 1, "", "count_new_masked_cnts"], [291, 3, 1, "", "get_block_size_dict"], [291, 3, 1, "", "get_mask_per_threshold"], [291, 3, 1, "", "get_masks_global"], [291, 3, 1, "", "get_pattern_lock_masks"], [291, 3, 1, "", "get_reduced_masks_from_data"], [291, 3, 1, "", "get_sparsity_ratio"], [291, 3, 1, "", "get_sparsity_ratio_progressive"], [291, 3, 1, "", "reduce_scores"], [291, 3, 1, "", "reshape_orig_to_pattern"], [291, 3, 1, "", "reshape_reduced_to_orig"], [291, 3, 1, "", "update_new_added_masks"], [291, 3, 1, "", "update_progressive_masks"], [291, 3, 1, "", "update_progressive_masks_global"], [291, 3, 1, "", "update_progressive_masks_linear"], [291, 3, 1, "", "update_progressive_masks_local"], [291, 3, 1, "", "update_progressive_masks_scores"]], "neural_compressor.pruner.pruner_legacy": [[292, 0, 0, "-", "gradient_sensitivity"], [293, 0, 0, "-", "group_lasso"], [295, 0, 0, "-", "magnitude"], [296, 0, 0, "-", "pattern_lock"], [297, 0, 0, "-", "pruner"]], "neural_compressor.pruner.pruner_legacy.gradient_sensitivity": [[292, 2, 1, "", "GradientSensitivityPruner"]], "neural_compressor.pruner.pruner_legacy.gradient_sensitivity.GradientSensitivityPruner": [[292, 3, 1, "", "compute_mask"], [292, 3, 1, "", "on_epoch_begin"], [292, 3, 1, "", "on_epoch_end"], [292, 3, 1, "", "on_step_begin"], [292, 3, 1, "", "on_step_end"], [292, 3, 1, "", "parse_weight_name"], [292, 3, 1, "", "prune_by_importance"], [292, 3, 1, "", "prune_weight"], [292, 3, 1, "", "update_importance_abs"], [292, 3, 1, "", "update_importance_elementwise"], [292, 3, 1, "", "update_importance_weighted"]], "neural_compressor.pruner.pruner_legacy.group_lasso": [[293, 2, 1, "", "GroupLassoPruner"]], "neural_compressor.pruner.pruner_legacy.group_lasso.GroupLassoPruner": [[293, 3, 1, "", "on_before_optimizer_step"]], "neural_compressor.pruner.pruner_legacy.magnitude": [[295, 2, 1, "", "BasicMagnitudePruner"]], "neural_compressor.pruner.pruner_legacy.magnitude.BasicMagnitudePruner": [[295, 3, 1, "", "compute_mask"], [295, 3, 1, "", "on_epoch_begin"], [295, 3, 1, "", "on_epoch_end"], [295, 3, 1, "", "on_step_begin"], [295, 3, 1, "", "on_step_end"]], "neural_compressor.pruner.pruner_legacy.pattern_lock": [[296, 2, 1, "", "PatternLockPruner"]], "neural_compressor.pruner.pruner_legacy.pattern_lock.PatternLockPruner": [[296, 3, 1, "", "compute_mask"], [296, 3, 1, "", "on_epoch_begin"], [296, 3, 1, "", "on_epoch_end"], [296, 3, 1, "", "on_step_begin"], [296, 3, 1, "", "on_step_end"], [296, 3, 1, "", "update_weights"]], "neural_compressor.pruner.pruner_legacy.pruner": [[297, 2, 1, "", "Pruner"], [297, 1, 1, "", "pruner_registry"]], "neural_compressor.pruner.pruner_legacy.pruner.Pruner": [[297, 3, 1, "", "on_before_optimizer_step"], [297, 3, 1, "", "on_epoch_begin"], [297, 3, 1, "", "on_epoch_end"], [297, 3, 1, "", "on_step_begin"], [297, 3, 1, "", "on_step_end"], [297, 3, 1, "", "on_train_begin"], [297, 3, 1, "", "on_train_end"], [297, 3, 1, "", "update_sparsity"]], "neural_compressor.pruner.pruners": [[298, 2, 1, "", "BasePruner"], [298, 2, 1, "", "BasicPruner"], [298, 2, 1, "", "PatternLockPruner"], [298, 2, 1, "", "ProgressivePruner"], [298, 1, 1, "", "get_pruner"], [298, 1, 1, "", "parse_valid_pruner_types"], [298, 1, 1, "", "register_pruner"]], "neural_compressor.pruner.pruners.BasePruner": [[298, 3, 1, "", "check_is_pruned_step"], [298, 6, 1, "", "config"], [298, 6, 1, "", "current_sparsity_ratio"], [298, 6, 1, "", "end_step"], [298, 6, 1, "", "global_step"], [298, 3, 1, "", "mask_weights"], [298, 3, 1, "", "mask_weights_general"], [298, 6, 1, "", "masks"], [298, 6, 1, "", "max_sparsity_ratio_per_op"], [298, 6, 1, "", "modules"], [298, 3, 1, "", "on_after_eval"], [298, 3, 1, "", "on_after_optimizer_step"], [298, 3, 1, "", "on_before_eval"], [298, 3, 1, "", "on_before_optimizer_step"], [298, 3, 1, "", "on_epoch_begin"], [298, 3, 1, "", "on_epoch_end"], [298, 3, 1, "", "on_step_begin"], [298, 3, 1, "", "on_step_end"], [298, 3, 1, "", "on_train_begin"], [298, 3, 1, "", "on_train_end"], [298, 6, 1, "", "pattern"], [298, 6, 1, "", "pruning_frequency"], [298, 6, 1, "", "scheduler"], [298, 6, 1, "", "scores"], [298, 6, 1, "", "start_step"], [298, 6, 1, "", "target_sparsity_ratio"], [298, 3, 1, "", "update_masks"]], "neural_compressor.pruner.pruners.BasicPruner": [[298, 6, 1, "", "criterion"], [298, 3, 1, "", "on_after_optimizer_step"], [298, 3, 1, "", "on_before_optimizer_step"], [298, 6, 1, "", "pattern"], [298, 6, 1, "", "reg"], [298, 6, 1, "", "scheduler"], [298, 3, 1, "", "set_global_step"], [298, 3, 1, "", "update_masks"]], "neural_compressor.pruner.pruners.PatternLockPruner": [[298, 3, 1, "", "on_after_optimizer_step"], [298, 3, 1, "", "update_masks"]], "neural_compressor.pruner.pruners.ProgressivePruner": [[298, 3, 1, "", "check_is_pruned_progressive_step"], [298, 3, 1, "", "check_progressive_validity"], [298, 3, 1, "", "on_after_optimizer_step"], [298, 3, 1, "", "on_before_optimizer_step"], [298, 3, 1, "", "on_step_begin"], [298, 3, 1, "", "print_progressive_sparsity"], [298, 3, 1, "", "update_masks_progressive"]], "neural_compressor.pruner.pruning": [[299, 2, 1, "", "Pruning"]], "neural_compressor.pruner.pruning.Pruning": [[299, 6, 1, "", "config_file_path"], [299, 3, 1, "", "get_sparsity_ratio"], [299, 4, 1, "id0", "model"], [299, 3, 1, "", "on_after_eval"], [299, 3, 1, "", "on_after_optimizer_step"], [299, 3, 1, "", "on_before_eval"], [299, 3, 1, "", "on_before_optimizer_step"], [299, 3, 1, "", "on_epoch_begin"], [299, 3, 1, "", "on_epoch_end"], [299, 3, 1, "", "on_step_begin"], [299, 3, 1, "", "on_step_end"], [299, 3, 1, "", "on_train_begin"], [299, 3, 1, "", "on_train_end"], [299, 6, 1, "", "pruner_info"], [299, 6, 1, "", "pruners"], [299, 3, 1, "", "update_config"]], "neural_compressor.pruner.regs": [[300, 2, 1, "", "BaseReg"], [300, 2, 1, "", "GroupLasso"], [300, 1, 1, "", "get_reg"], [300, 1, 1, "", "get_reg_type"], [300, 1, 1, "", "register_reg"]], "neural_compressor.pruner.regs.BaseReg": [[300, 3, 1, "", "on_after_optimizer_step"], [300, 3, 1, "", "on_before_optimizer_step"]], "neural_compressor.pruner.regs.GroupLasso": [[300, 6, 1, "", "alpha"], [300, 3, 1, "", "on_after_optimizer_step"], [300, 3, 1, "", "on_before_optimizer_step"], [300, 6, 1, "", "reg_terms"]], "neural_compressor.pruner.schedulers": [[301, 2, 1, "", "IterativeScheduler"], [301, 2, 1, "", "OneshotScheduler"], [301, 2, 1, "", "PruningScheduler"], [301, 1, 1, "", "get_scheduler"], [301, 1, 1, "", "register_scheduler"]], "neural_compressor.pruner.schedulers.IterativeScheduler": [[301, 3, 1, "", "update_sparsity_ratio"]], "neural_compressor.pruner.schedulers.OneshotScheduler": [[301, 3, 1, "", "update_sparsity_ratio"]], "neural_compressor.pruner.schedulers.PruningScheduler": [[301, 6, 1, "", "config"], [301, 3, 1, "", "update_sparsity_ratio"]], "neural_compressor.pruner.utils": [[302, 1, 1, "", "check_config"], [302, 1, 1, "", "check_key_validity"], [302, 1, 1, "", "parse_to_prune"], [302, 1, 1, "", "process_and_check_config"], [302, 1, 1, "", "process_config"], [302, 1, 1, "", "process_weight_config"], [302, 1, 1, "", "process_yaml_config"], [302, 1, 1, "", "reset_none_to_default"], [302, 1, 1, "", "update_params"]], "neural_compressor.quantization": [[303, 1, 1, "", "fit"]], "neural_compressor.strategy": [[304, 0, 0, "-", "auto_mixed_precision"], [305, 0, 0, "-", "basic"], [306, 0, 0, "-", "bayesian"], [307, 0, 0, "-", "conservative"], [308, 0, 0, "-", "exhaustive"], [309, 0, 0, "-", "hawq_v2"], [311, 0, 0, "-", "mse"], [312, 0, 0, "-", "mse_v2"], [313, 0, 0, "-", "random"], [314, 0, 0, "-", "strategy"], [315, 0, 0, "-", "utils"]], "neural_compressor.strategy.auto_mixed_precision": [[304, 2, 1, "", "AutoMixedPrecisionTuneStrategy"]], "neural_compressor.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy": [[304, 3, 1, "", "next_tune_cfg"], [304, 3, 1, "", "traverse"]], "neural_compressor.strategy.basic": [[305, 2, 1, "", "BasicTuneStrategy"]], "neural_compressor.strategy.basic.BasicTuneStrategy": [[305, 3, 1, "", "next_tune_cfg"]], "neural_compressor.strategy.bayesian": [[306, 2, 1, "", "BayesianOptimization"], [306, 2, 1, "", "BayesianTuneStrategy"], [306, 2, 1, "", "TargetSpace"], [306, 1, 1, "", "acq_max"]], "neural_compressor.strategy.bayesian.BayesianOptimization": [[306, 3, 1, "", "gen_next_params"], [306, 4, 1, "", "max"], [306, 4, 1, "", "res"], [306, 4, 1, "", "space"], [306, 3, 1, "", "suggest"]], "neural_compressor.strategy.bayesian.BayesianTuneStrategy": [[306, 3, 1, "", "next_tune_cfg"]], "neural_compressor.strategy.bayesian.TargetSpace": [[306, 3, 1, "", "array_to_params"], [306, 4, 1, "", "bounds"], [306, 4, 1, "", "dim"], [306, 4, 1, "", "empty"], [306, 3, 1, "", "get_target"], [306, 4, 1, "", "keys"], [306, 3, 1, "", "max"], [306, 4, 1, "", "params"], [306, 3, 1, "", "params_to_array"], [306, 3, 1, "", "random_sample"], [306, 3, 1, "", "register"], [306, 3, 1, "", "res"], [306, 4, 1, "", "target"]], "neural_compressor.strategy.conservative": [[307, 2, 1, "", "ConservativeTuneStrategy"]], "neural_compressor.strategy.conservative.ConservativeTuneStrategy": [[307, 3, 1, "", "next_tune_cfg"], [307, 3, 1, "", "stop"], [307, 3, 1, "", "traverse"]], "neural_compressor.strategy.exhaustive": [[308, 2, 1, "", "ExhaustiveTuneStrategy"]], "neural_compressor.strategy.exhaustive.ExhaustiveTuneStrategy": [[308, 3, 1, "", "next_tune_cfg"]], "neural_compressor.strategy.hawq_v2": [[309, 2, 1, "", "HAWQ_V2TuneStrategy"]], "neural_compressor.strategy.hawq_v2.HAWQ_V2TuneStrategy": [[309, 3, 1, "", "next_tune_cfg"]], "neural_compressor.strategy.mse": [[311, 2, 1, "", "MSETuneStrategy"]], "neural_compressor.strategy.mse.MSETuneStrategy": [[311, 3, 1, "", "mse_impact_lst"], [311, 3, 1, "", "next_tune_cfg"]], "neural_compressor.strategy.mse_v2": [[312, 2, 1, "", "MSE_V2TuneStrategy"]], "neural_compressor.strategy.mse_v2.MSE_V2TuneStrategy": [[312, 3, 1, "", "next_tune_cfg"]], "neural_compressor.strategy.random": [[313, 2, 1, "", "RandomTuneStrategy"]], "neural_compressor.strategy.random.RandomTuneStrategy": [[313, 3, 1, "", "next_tune_cfg"]], "neural_compressor.strategy.strategy": [[314, 2, 1, "", "TuneStrategy"], [314, 1, 1, "", "strategy_registry"]], "neural_compressor.strategy.strategy.TuneStrategy": [[314, 3, 1, "", "deploy_config"], [314, 4, 1, "", "evaluation_result"], [314, 3, 1, "", "initial_best_acc"], [314, 3, 1, "", "initial_tuning_cfg"], [314, 3, 1, "", "next_tune_cfg"], [314, 3, 1, "", "set_q_func"], [314, 3, 1, "", "set_tuning_space"], [314, 3, 1, "", "setup_resume"], [314, 3, 1, "", "show_baseline_info"], [314, 3, 1, "", "stop"], [314, 3, 1, "", "traverse"], [314, 3, 1, "", "update_best_op_tuning_cfg"]], "neural_compressor.strategy.utils": [[315, 2, 1, "", "FallbackTuningSampler"], [315, 2, 1, "", "OpTuningConfig"], [315, 2, 1, "", "OpTypeWiseTuningSampler"], [315, 2, 1, "", "OpWiseTuningSampler"], [315, 2, 1, "", "TuningItem"], [315, 2, 1, "", "TuningSampler"], [315, 2, 1, "", "TuningSpace"], [316, 0, 0, "-", "tuning_sampler"], [317, 0, 0, "-", "tuning_space"], [318, 0, 0, "-", "tuning_structs"]], "neural_compressor.strategy.utils.OpTuningConfig": [[315, 3, 1, "", "from_state"], [315, 3, 1, "", "get_state"]], "neural_compressor.strategy.utils.OpWiseTuningSampler": [[315, 3, 1, "", "get_opwise_candidate"]], "neural_compressor.strategy.utils.TuningItem": [[315, 3, 1, "", "append"], [315, 3, 1, "", "get_details"], [315, 3, 1, "", "get_option_by_name"], [315, 4, 1, "", "options"], [315, 3, 1, "", "remove"]], "neural_compressor.strategy.utils.TuningSpace": [[315, 3, 1, "", "query_item_option"], [315, 3, 1, "", "query_items_by_quant_mode"], [315, 3, 1, "", "query_quant_mode_item"], [315, 3, 1, "", "set_deafult_config"]], "neural_compressor.strategy.utils.tuning_sampler": [[316, 2, 1, "", "FallbackTuningSampler"], [316, 2, 1, "", "ModelWiseTuningSampler"], [316, 2, 1, "", "OpTypeWiseTuningSampler"], [316, 2, 1, "", "OpWiseTuningSampler"], [316, 2, 1, "", "TuningOrder"], [316, 2, 1, "", "TuningSampler"]], "neural_compressor.strategy.utils.tuning_sampler.OpWiseTuningSampler": [[316, 3, 1, "", "get_opwise_candidate"]], "neural_compressor.strategy.utils.tuning_space": [[317, 2, 1, "", "TuningItem"], [317, 2, 1, "", "TuningSpace"]], "neural_compressor.strategy.utils.tuning_space.TuningItem": [[317, 3, 1, "", "append"], [317, 3, 1, "", "get_details"], [317, 3, 1, "", "get_option_by_name"], [317, 4, 1, "", "options"], [317, 3, 1, "", "remove"]], "neural_compressor.strategy.utils.tuning_space.TuningSpace": [[317, 3, 1, "", "query_item_option"], [317, 3, 1, "", "query_items_by_quant_mode"], [317, 3, 1, "", "query_quant_mode_item"], [317, 3, 1, "", "set_deafult_config"]], "neural_compressor.strategy.utils.tuning_structs": [[318, 2, 1, "", "OpTuningConfig"]], "neural_compressor.strategy.utils.tuning_structs.OpTuningConfig": [[318, 3, 1, "", "from_state"], [318, 3, 1, "", "get_state"]], "neural_compressor.training": [[319, 2, 1, "", "CompressionManager"], [319, 1, 1, "", "prepare_compression"]], "neural_compressor.training.CompressionManager": [[319, 2, 1, "", "CallBacks"], [319, 3, 1, "", "export"], [319, 3, 1, "", "save"]], "neural_compressor.training.CompressionManager.CallBacks": [[319, 3, 1, "", "on_after_compute_loss"], [319, 3, 1, "", "on_after_optimizer_step"], [319, 3, 1, "", "on_before_optimizer_step"], [319, 3, 1, "", "on_epoch_begin"], [319, 3, 1, "", "on_epoch_end"], [319, 3, 1, "", "on_step_begin"], [319, 3, 1, "", "on_step_end"], [319, 3, 1, "", "on_train_begin"], [319, 3, 1, "", "on_train_end"]], "neural_compressor.utils": [[323, 2, 1, "", "LayerHistogramCollector"], [320, 0, 0, "-", "collect_layer_histogram"], [321, 0, 0, "-", "constant"], [322, 0, 0, "-", "create_obj_from_config"], [323, 1, 1, "", "debug"], [323, 1, 1, "", "error"], [323, 1, 1, "", "fatal"], [323, 1, 1, "", "info"], [324, 0, 0, "-", "kl_divergence"], [325, 0, 0, "-", "load_huggingface"], [323, 1, 1, "", "log"], [326, 0, 0, "-", "logger"], [327, 0, 0, "-", "options"], [328, 0, 0, "-", "pytorch"], [329, 0, 0, "-", "utility"], [323, 1, 1, "", "warn"], [323, 1, 1, "", "warning"]], "neural_compressor.utils.LayerHistogramCollector": [[323, 3, 1, "", "collect"]], "neural_compressor.utils.collect_layer_histogram": [[320, 2, 1, "", "LayerHistogramCollector"]], "neural_compressor.utils.collect_layer_histogram.LayerHistogramCollector": [[320, 3, 1, "", "collect"]], "neural_compressor.utils.create_obj_from_config": [[322, 1, 1, "", "create_dataloader"], [322, 1, 1, "", "create_dataset"], [322, 1, 1, "", "create_eval_func"], [322, 1, 1, "", "create_train_func"], [322, 1, 1, "", "get_algorithm"], [322, 1, 1, "", "get_func_from_config"], [322, 1, 1, "", "get_metrics"], [322, 1, 1, "", "get_postprocess"], [322, 1, 1, "", "get_preprocess"]], "neural_compressor.utils.kl_divergence": [[324, 2, 1, "", "KL_Divergence"]], "neural_compressor.utils.kl_divergence.KL_Divergence": [[324, 3, 1, "", "expand_quantized_bins"], [324, 3, 1, "", "get_threshold"], [324, 3, 1, "", "safe_entropy"]], "neural_compressor.utils.load_huggingface": [[325, 2, 1, "", "OptimizedModel"], [325, 1, 1, "", "save_for_huggingface_upstream"]], "neural_compressor.utils.load_huggingface.OptimizedModel": [[325, 3, 1, "", "from_pretrained"]], "neural_compressor.utils.logger": [[326, 2, 1, "", "Logger"], [326, 1, 1, "", "debug"], [326, 1, 1, "", "error"], [326, 1, 1, "", "fatal"], [326, 1, 1, "", "info"], [326, 1, 1, "", "log"], [326, 1, 1, "", "warn"], [326, 1, 1, "", "warning"]], "neural_compressor.utils.logger.Logger": [[326, 3, 1, "", "get_logger"]], "neural_compressor.utils.options": [[327, 2, 1, "", "onnxrt"]], "neural_compressor.utils.pytorch": [[328, 1, 1, "", "load"]], "neural_compressor.utils.utility": [[329, 2, 1, "", "CaptureOutputToFile"], [329, 2, 1, "", "CpuInfo"], [329, 1, 1, "", "Dequantize"], [329, 1, 1, "", "DequantizeWeight"], [329, 2, 1, "", "GLOBAL_STATE"], [329, 2, 1, "", "LazyImport"], [329, 2, 1, "", "MODE"], [329, 2, 1, "", "Statistics"], [329, 1, 1, "", "combine_histogram"], [329, 1, 1, "", "compute_sparsity"], [329, 1, 1, "", "dump_data_to_local"], [329, 1, 1, "", "dump_elapsed_time"], [329, 1, 1, "", "equal_dicts"], [329, 1, 1, "", "fault_tolerant_file"], [329, 1, 1, "", "get_all_fp32_data"], [329, 1, 1, "", "get_size"], [329, 1, 1, "", "get_tensor_histogram"], [329, 1, 1, "", "get_tuning_history"], [329, 1, 1, "", "load_data_from_pkl"], [329, 1, 1, "", "recover"], [329, 1, 1, "", "set_random_seed"], [329, 1, 1, "", "set_resume_from"], [329, 1, 1, "", "set_tensorboard"], [329, 1, 1, "", "set_workspace"], [329, 1, 1, "", "singleton"], [329, 1, 1, "", "str2array"], [329, 1, 1, "", "time_limit"], [329, 1, 1, "", "version1_eq_version2"], [329, 1, 1, "", "version1_gt_version2"], [329, 1, 1, "", "version1_gte_version2"], [329, 1, 1, "", "version1_lt_version2"], [329, 1, 1, "", "version1_lte_version2"]], "neural_compressor.utils.utility.CpuInfo": [[329, 4, 1, "", "bf16"], [329, 4, 1, "", "cores_per_socket"], [329, 3, 1, "", "get_number_of_sockets"], [329, 4, 1, "", "vnni"]], "neural_compressor.utils.utility.Statistics": [[329, 3, 1, "", "print_stat"]], "neural_compressor.ux": [[405, 0, 0, "-", "components"], [464, 0, 0, "-", "inc_bench"], [473, 0, 0, "-", "utils"], [499, 0, 0, "-", "web"]], "neural_compressor.ux.components": [[333, 0, 0, "-", "benchmark"], [337, 0, 0, "-", "config_generator"], [345, 0, 0, "-", "configuration_wizard"], [381, 0, 0, "-", "db_manager"], [386, 0, 0, "-", "diagnosis"], [394, 0, 0, "-", "file_browser"], [400, 0, 0, "-", "graph"], [406, 0, 0, "-", "jobs_management"], [410, 0, 0, "-", "manage_workspace"], [412, 0, 0, "-", "model"], [431, 0, 0, "-", "model_zoo"], [433, 0, 0, "-", "names_mapper"], [440, 0, 0, "-", "optimization"], [456, 0, 0, "-", "profiling"]], "neural_compressor.ux.components.benchmark": [[333, 2, 1, "", "Benchmarks"], [330, 0, 0, "-", "benchmark"], [331, 0, 0, "-", "benchmark_model"], [332, 0, 0, "-", "execute_benchmark"]], "neural_compressor.ux.components.benchmark.benchmark": [[330, 2, 1, "", "Benchmark"], [330, 2, 1, "", "DataloaderInterface"]], "neural_compressor.ux.components.benchmark.benchmark.Benchmark": [[330, 4, 1, "", "config_filename"], [330, 4, 1, "", "configuration_data"], [330, 3, 1, "", "execute"], [330, 3, 1, "", "generate_config"], [330, 4, 1, "", "workdir"]], "neural_compressor.ux.components.benchmark.benchmark_model": [[331, 1, 1, "", "benchmark_model"], [331, 1, 1, "", "parse_args"], [331, 1, 1, "", "set_eager_execution"]], "neural_compressor.ux.components.benchmark.execute_benchmark": [[332, 1, 1, "", "benchmark_result_update"], [332, 1, 1, "", "benchmark_result_update_pytorch_script"], [332, 1, 1, "", "execute_benchmark"], [332, 1, 1, "", "execute_real_benchmark"], [332, 1, 1, "", "pytorch_script_bench_optimizations"], [332, 1, 1, "", "pytorch_script_bench_original_model"]], "neural_compressor.ux.components.config_generator": [[334, 0, 0, "-", "benchmark_config_generator"], [335, 0, 0, "-", "config_generator"], [336, 0, 0, "-", "graph_optimization_config_generator"], [338, 0, 0, "-", "mixed_precision_config_generator"], [339, 0, 0, "-", "profiling_config_generator"], [340, 0, 0, "-", "pruning_config_generator"], [341, 0, 0, "-", "quantization_config_generator"]], "neural_compressor.ux.components.config_generator.benchmark_config_generator": [[334, 2, 1, "", "BenchmarkConfigGenerator"]], "neural_compressor.ux.components.config_generator.benchmark_config_generator.BenchmarkConfigGenerator": [[334, 3, 1, "", "generate"], [334, 3, 1, "", "generate_accuracy_config"], [334, 3, 1, "", "generate_evaluation_config"], [334, 3, 1, "", "generate_performance_config"]], "neural_compressor.ux.components.config_generator.config_generator": [[335, 2, 1, "", "ConfigGenerator"]], "neural_compressor.ux.components.config_generator.config_generator.ConfigGenerator": [[335, 3, 1, "", "generate"], [335, 3, 1, "", "generate_dataloader_config"], [335, 3, 1, "", "generate_model_config"], [335, 3, 1, "", "get_predefined_config_path"]], "neural_compressor.ux.components.config_generator.graph_optimization_config_generator": [[336, 2, 1, "", "GraphOptimizationConfigGenerator"]], "neural_compressor.ux.components.config_generator.graph_optimization_config_generator.GraphOptimizationConfigGenerator": [[336, 3, 1, "", "generate"], [336, 3, 1, "", "generate_evaluation_config"], [336, 3, 1, "", "generate_graph_optimization_config"]], "neural_compressor.ux.components.config_generator.mixed_precision_config_generator": [[338, 2, 1, "", "MixedPrecisionConfigGenerator"]], "neural_compressor.ux.components.config_generator.mixed_precision_config_generator.MixedPrecisionConfigGenerator": [[338, 3, 1, "", "generate"], [338, 3, 1, "", "generate_evaluation_config"], [338, 3, 1, "", "generate_mixed_precision_config"]], "neural_compressor.ux.components.config_generator.profiling_config_generator": [[339, 2, 1, "", "ProfilingConfigGenerator"]], "neural_compressor.ux.components.config_generator.profiling_config_generator.ProfilingConfigGenerator": [[339, 3, 1, "", "generate"]], "neural_compressor.ux.components.config_generator.pruning_config_generator": [[340, 2, 1, "", "PruningConfigGenerator"]], "neural_compressor.ux.components.config_generator.pruning_config_generator.PruningConfigGenerator": [[340, 3, 1, "", "generate"], [340, 3, 1, "", "generate_evaluation_config"], [340, 3, 1, "", "generate_pruning_config"]], "neural_compressor.ux.components.config_generator.quantization_config_generator": [[341, 2, 1, "", "QuantizationConfigGenerator"]], "neural_compressor.ux.components.config_generator.quantization_config_generator.QuantizationConfigGenerator": [[341, 3, 1, "", "generate"], [341, 3, 1, "", "generate_evaluation_config"], [341, 3, 1, "", "generate_quantization_config"], [341, 3, 1, "", "generate_tuning_config"]], "neural_compressor.ux.components.configuration_wizard": [[342, 0, 0, "-", "configuration_parser"], [343, 0, 0, "-", "get_boundary_nodes"], [344, 0, 0, "-", "get_configuration"], [346, 0, 0, "-", "params_feeder"], [347, 0, 0, "-", "pruning_config_parser"]], "neural_compressor.ux.components.configuration_wizard.configuration_parser": [[342, 2, 1, "", "ConfigurationParser"], [342, 1, 1, "", "normalize_string_list"], [342, 1, 1, "", "parse_list_value"], [342, 1, 1, "", "parse_multidim_list"]], "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser": [[342, 3, 1, "", "get_param_type"], [342, 3, 1, "", "parse"], [342, 3, 1, "", "parse_dataloader"], [342, 3, 1, "", "parse_evaluation_data"], [342, 3, 1, "", "parse_metric"], [342, 3, 1, "", "parse_transforms"], [342, 3, 1, "", "parse_value"]], "neural_compressor.ux.components.configuration_wizard.get_boundary_nodes": [[343, 1, 1, "", "get_boundary_nodes"]], "neural_compressor.ux.components.configuration_wizard.get_configuration": [[344, 1, 1, "", "get_predefined_configuration"], [344, 1, 1, "", "update_config_to_machine_specification"]], "neural_compressor.ux.components.configuration_wizard.params_feeder": [[346, 2, 1, "", "Feeder"], [346, 1, 1, "", "get_possible_values"]], "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder": [[346, 3, 1, "", "feed"], [346, 3, 1, "", "get_dataloaders"], [346, 3, 1, "", "get_domains"], [346, 3, 1, "", "get_frameworks"], [346, 3, 1, "", "get_metrics"], [346, 3, 1, "", "get_models"], [346, 3, 1, "", "get_objectives"], [346, 3, 1, "", "get_precisions"], [346, 3, 1, "", "get_quantization_approaches"], [346, 3, 1, "", "get_strategies"], [346, 3, 1, "", "get_transforms"]], "neural_compressor.ux.components.configuration_wizard.pruning_config_parser": [[347, 2, 1, "", "PruningConfigParser"]], "neural_compressor.ux.components.configuration_wizard.pruning_config_parser.PruningConfigParser": [[347, 3, 1, "", "generate_tree"], [347, 3, 1, "", "parse"], [347, 3, 1, "", "parse_entry"]], "neural_compressor.ux.components.db_manager": [[381, 2, 1, "", "DBManager"], [348, 0, 0, "-", "db_manager"], [357, 0, 0, "-", "db_models"], [376, 0, 0, "-", "db_operations"], [382, 0, 0, "-", "params_interfaces"], [383, 0, 0, "-", "utils"]], "neural_compressor.ux.components.db_manager.DBManager": [[381, 3, 1, "", "create_all"], [381, 3, 1, "", "create_sqlalchemy_engine"], [381, 4, 1, "", "engine"], [381, 3, 1, "", "initialize_database"]], "neural_compressor.ux.components.db_manager.db_manager": [[348, 2, 1, "", "DBManager"]], "neural_compressor.ux.components.db_manager.db_manager.DBManager": [[348, 3, 1, "", "create_all"], [348, 3, 1, "", "create_sqlalchemy_engine"], [348, 4, 1, "", "engine"], [348, 3, 1, "", "initialize_database"]], "neural_compressor.ux.components.db_manager.db_models": [[349, 0, 0, "-", "benchmark"], [350, 0, 0, "-", "benchmark_result"], [351, 0, 0, "-", "dataloader"], [352, 0, 0, "-", "dataset"], [353, 0, 0, "-", "domain"], [354, 0, 0, "-", "domain_flavour"], [355, 0, 0, "-", "example"], [356, 0, 0, "-", "framework"], [358, 0, 0, "-", "metric"], [359, 0, 0, "-", "model"], [360, 0, 0, "-", "optimization"], [361, 0, 0, "-", "optimization_type"], [362, 0, 0, "-", "precision"], [363, 0, 0, "-", "profiling"], [364, 0, 0, "-", "profiling_result"], [365, 0, 0, "-", "project"], [366, 0, 0, "-", "pruning_details"], [367, 0, 0, "-", "transform"], [368, 0, 0, "-", "tuning_details"], [369, 0, 0, "-", "tuning_history"]], "neural_compressor.ux.components.db_manager.db_models.benchmark": [[349, 2, 1, "", "Benchmark"]], "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark": [[349, 3, 1, "", "add"], [349, 3, 1, "", "build_info"], [349, 3, 1, "", "clean_status"], [349, 3, 1, "", "delete_benchmark"], [349, 3, 1, "", "details"], [349, 3, 1, "", "list"], [349, 3, 1, "", "update_batch_size"], [349, 3, 1, "", "update_config_path"], [349, 3, 1, "", "update_cores_per_instance"], [349, 3, 1, "", "update_dataset"], [349, 3, 1, "", "update_duration"], [349, 3, 1, "", "update_execution_command"], [349, 3, 1, "", "update_log_path"], [349, 3, 1, "", "update_mode"], [349, 3, 1, "", "update_number_of_instance"], [349, 3, 1, "", "update_status"]], "neural_compressor.ux.components.db_manager.db_models.benchmark_result": [[350, 2, 1, "", "BenchmarkResult"]], "neural_compressor.ux.components.db_manager.db_models.benchmark_result.BenchmarkResult": [[350, 3, 1, "", "add"], [350, 3, 1, "", "build_info"], [350, 3, 1, "", "update_accuracy"], [350, 3, 1, "", "update_performance"]], "neural_compressor.ux.components.db_manager.db_models.dataloader": [[351, 2, 1, "", "Dataloader"], [351, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.dataloader.Dataloader": [[351, 3, 1, "", "list"], [351, 3, 1, "", "list_by_framework"], [351, 3, 1, "", "query_to_list"], [351, 3, 1, "", "update_params"]], "neural_compressor.ux.components.db_manager.db_models.dataset": [[352, 2, 1, "", "Dataset"]], "neural_compressor.ux.components.db_manager.db_models.dataset.Dataset": [[352, 3, 1, "", "add"], [352, 3, 1, "", "build_info"], [352, 3, 1, "", "delete_dataset"], [352, 3, 1, "", "details"], [352, 3, 1, "", "list"], [352, 3, 1, "", "update_template_path"]], "neural_compressor.ux.components.db_manager.db_models.domain": [[353, 2, 1, "", "Domain"], [353, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.domain.Domain": [[353, 3, 1, "", "get_domain_id"], [353, 3, 1, "", "list"]], "neural_compressor.ux.components.db_manager.db_models.domain_flavour": [[354, 2, 1, "", "DomainFlavour"], [354, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.domain_flavour.DomainFlavour": [[354, 3, 1, "", "get_domain_flavour_id"], [354, 3, 1, "", "list"]], "neural_compressor.ux.components.db_manager.db_models.example": [[355, 2, 1, "", "Example"]], "neural_compressor.ux.components.db_manager.db_models.framework": [[356, 2, 1, "", "Framework"], [356, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.framework.Framework": [[356, 3, 1, "", "get_framework_id"]], "neural_compressor.ux.components.db_manager.db_models.metric": [[358, 2, 1, "", "Metric"], [358, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.metric.Metric": [[358, 3, 1, "", "list"], [358, 3, 1, "", "list_by_framework"], [358, 3, 1, "", "query_to_list"]], "neural_compressor.ux.components.db_manager.db_models.model": [[359, 2, 1, "", "Model"]], "neural_compressor.ux.components.db_manager.db_models.model.Model": [[359, 3, 1, "", "add"], [359, 3, 1, "", "build_info"], [359, 3, 1, "", "delete_model"], [359, 3, 1, "", "details"], [359, 3, 1, "", "list"]], "neural_compressor.ux.components.db_manager.db_models.optimization": [[360, 2, 1, "", "Optimization"]], "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization": [[360, 3, 1, "", "add"], [360, 3, 1, "", "build_info"], [360, 3, 1, "", "clean_status"], [360, 3, 1, "", "delete_optimization"], [360, 3, 1, "", "details"], [360, 3, 1, "", "get_optimization_by_project_and_model"], [360, 3, 1, "", "get_pinned_benchmarks"], [360, 3, 1, "", "list"], [360, 3, 1, "", "pin_accuracy_benchmark"], [360, 3, 1, "", "pin_performance_benchmark"], [360, 3, 1, "", "unpin_benchmark"], [360, 3, 1, "", "update_batch_size"], [360, 3, 1, "", "update_config_path"], [360, 3, 1, "", "update_dataset"], [360, 3, 1, "", "update_duration"], [360, 3, 1, "", "update_execution_command"], [360, 3, 1, "", "update_log_path"], [360, 3, 1, "", "update_optimized_model"], [360, 3, 1, "", "update_precision"], [360, 3, 1, "", "update_pruning_details"], [360, 3, 1, "", "update_sampling_size"], [360, 3, 1, "", "update_status"], [360, 3, 1, "", "update_tuning_details"]], "neural_compressor.ux.components.db_manager.db_models.optimization_type": [[361, 2, 1, "", "OptimizationType"], [361, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType": [[361, 3, 1, "", "add"], [361, 3, 1, "", "get_optimization_type_by_id"], [361, 3, 1, "", "get_optimization_type_by_name"], [361, 3, 1, "", "get_optimization_type_for_precision"], [361, 3, 1, "", "get_optimization_type_id"], [361, 3, 1, "", "list"], [361, 3, 1, "", "list_for_precision"]], "neural_compressor.ux.components.db_manager.db_models.precision": [[362, 2, 1, "", "Precision"], [362, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.precision.Precision": [[362, 3, 1, "", "add"], [362, 3, 1, "", "get_precision_by_id"], [362, 3, 1, "", "get_precision_by_name"], [362, 3, 1, "", "get_precision_id"], [362, 3, 1, "", "list"]], "neural_compressor.ux.components.db_manager.db_models.profiling": [[363, 2, 1, "", "Profiling"]], "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling": [[363, 3, 1, "", "add"], [363, 3, 1, "", "build_info"], [363, 3, 1, "", "clean_status"], [363, 3, 1, "", "delete_profiling"], [363, 3, 1, "", "details"], [363, 3, 1, "", "list"], [363, 3, 1, "", "update_dataset"], [363, 3, 1, "", "update_duration"], [363, 3, 1, "", "update_execution_command"], [363, 3, 1, "", "update_log_path"], [363, 3, 1, "", "update_num_threads"], [363, 3, 1, "", "update_status"]], "neural_compressor.ux.components.db_manager.db_models.profiling_result": [[364, 2, 1, "", "ProfilingResult"]], "neural_compressor.ux.components.db_manager.db_models.profiling_result.ProfilingResult": [[364, 3, 1, "", "add"], [364, 3, 1, "", "build_info"], [364, 3, 1, "", "bulk_add"], [364, 3, 1, "", "delete_results"], [364, 3, 1, "", "get_results"]], "neural_compressor.ux.components.db_manager.db_models.project": [[365, 2, 1, "", "Project"]], "neural_compressor.ux.components.db_manager.db_models.project.Project": [[365, 3, 1, "", "create_project"], [365, 3, 1, "", "delete_project"], [365, 3, 1, "", "get_model_by_name"], [365, 3, 1, "", "list_projects"], [365, 3, 1, "", "project_details"], [365, 3, 1, "", "update_notes"]], "neural_compressor.ux.components.db_manager.db_models.pruning_details": [[366, 2, 1, "", "PruningDetails"]], "neural_compressor.ux.components.db_manager.db_models.pruning_details.PruningDetails": [[366, 3, 1, "", "add"], [366, 3, 1, "", "build_info"], [366, 3, 1, "", "delete_pruning_details"], [366, 3, 1, "", "update"]], "neural_compressor.ux.components.db_manager.db_models.transform": [[367, 2, 1, "", "Transform"], [367, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.transform.Transform": [[367, 3, 1, "", "list"], [367, 3, 1, "", "list_by_domain"], [367, 3, 1, "", "list_by_framework"], [367, 3, 1, "", "query_to_list"]], "neural_compressor.ux.components.db_manager.db_models.tuning_details": [[368, 2, 1, "", "TuningDetails"]], "neural_compressor.ux.components.db_manager.db_models.tuning_details.TuningDetails": [[368, 3, 1, "", "add"], [368, 3, 1, "", "delete_tuning_details"], [368, 3, 1, "", "update"], [368, 3, 1, "", "update_tuning_history"]], "neural_compressor.ux.components.db_manager.db_models.tuning_history": [[369, 2, 1, "", "TuningHistory"]], "neural_compressor.ux.components.db_manager.db_models.tuning_history.TuningHistory": [[369, 3, 1, "", "add"], [369, 3, 1, "", "build_info"]], "neural_compressor.ux.components.db_manager.db_operations": [[376, 2, 1, "", "BenchmarkAPIInterface"], [376, 2, 1, "", "DatasetAPIInterface"], [376, 2, 1, "", "DiagnosisAPIInterface"], [376, 2, 1, "", "DictionariesAPIInterface"], [376, 2, 1, "", "ExamplesAPIInterface"], [376, 2, 1, "", "ModelAPIInterface"], [376, 2, 1, "", "OptimizationAPIInterface"], [376, 2, 1, "", "ProfilingAPIInterface"], [376, 2, 1, "", "ProjectAPIInterface"], [370, 0, 0, "-", "benchmark_api_interface"], [371, 0, 0, "-", "dataset_api_interface"], [372, 0, 0, "-", "db_operations"], [373, 0, 0, "-", "diagnosis_api_interface"], [374, 0, 0, "-", "dictionaries_api_interface"], [375, 0, 0, "-", "examples_api_interface"], [377, 0, 0, "-", "model_api_interface"], [378, 0, 0, "-", "optimization_api_interface"], [379, 0, 0, "-", "profiling_api_interface"], [380, 0, 0, "-", "project_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface": [[376, 3, 1, "", "add_benchmark"], [376, 3, 1, "", "add_result"], [376, 3, 1, "", "clean_status"], [376, 3, 1, "", "delete_benchmark"], [376, 3, 1, "", "edit_benchmark"], [376, 3, 1, "", "get_benchmark_details"], [376, 3, 1, "", "list_benchmarks"], [376, 3, 1, "", "parse_benchmark_data"], [376, 3, 1, "", "parse_benchmark_edit_data"], [376, 3, 1, "", "update_benchmark_accuracy"], [376, 3, 1, "", "update_benchmark_duration"], [376, 3, 1, "", "update_benchmark_performance"], [376, 3, 1, "", "update_benchmark_status"], [376, 3, 1, "", "update_execution_command"], [376, 3, 1, "", "update_paths"]], "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface": [[376, 3, 1, "", "add_dataset"], [376, 3, 1, "", "check_if_custom_metric_or_dataloader"], [376, 3, 1, "", "dataloader_path"], [376, 3, 1, "", "delete_dataset"], [376, 3, 1, "", "generate_custom_template"], [376, 3, 1, "", "generate_template"], [376, 3, 1, "", "get_dataset_details"], [376, 3, 1, "", "get_predefined_dataset"], [376, 3, 1, "", "list_datasets"], [376, 3, 1, "", "parse_dataset_data"], [376, 3, 1, "", "prepare_predefined_dataloader"], [376, 3, 1, "", "prepare_predefined_transform"], [376, 3, 1, "", "set_template_path"]], "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface": [[376, 3, 1, "", "generate_optimization"], [376, 3, 1, "", "get_op_details"], [376, 3, 1, "", "get_op_list"], [376, 3, 1, "", "histogram"], [376, 3, 1, "", "model_wise_params"], [376, 3, 1, "", "parse_model_wise_config"], [376, 3, 1, "", "parse_op_wise_config"], [376, 3, 1, "", "parse_optimization_data"], [376, 3, 1, "", "parse_wise_parameters"], [376, 3, 1, "", "set_op_wise_pattern_precision"]], "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface": [[376, 3, 1, "", "list_dataloaders"], [376, 3, 1, "", "list_dataloaders_by_framework"], [376, 3, 1, "", "list_domain_flavours"], [376, 3, 1, "", "list_domains"], [376, 3, 1, "", "list_metrics"], [376, 3, 1, "", "list_metrics_by_framework"], [376, 3, 1, "", "list_optimization_types"], [376, 3, 1, "", "list_optimization_types_for_precision"], [376, 3, 1, "", "list_precisions"], [376, 3, 1, "", "list_transforms"], [376, 3, 1, "", "list_transforms_by_domain"], [376, 3, 1, "", "list_transforms_by_framework"]], "neural_compressor.ux.components.db_manager.db_operations.ExamplesAPIInterface": [[376, 3, 1, "", "create_project"], [376, 3, 1, "", "get_optimization_data"]], "neural_compressor.ux.components.db_manager.db_operations.ModelAPIInterface": [[376, 3, 1, "", "add_model"], [376, 3, 1, "", "delete_model"], [376, 3, 1, "", "get_model_details"], [376, 3, 1, "", "list_models"], [376, 3, 1, "", "parse_model_data"]], "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface": [[376, 3, 1, "", "add_optimization"], [376, 3, 1, "", "add_pruning_optimization"], [376, 3, 1, "", "add_quantization_optimization"], [376, 3, 1, "", "add_standard_optimization"], [376, 3, 1, "", "add_tuning_history"], [376, 3, 1, "", "clean_status"], [376, 3, 1, "", "delete_optimization"], [376, 3, 1, "", "edit_optimization"], [376, 3, 1, "", "edit_pruning_details"], [376, 3, 1, "", "edit_tuning_details"], [376, 3, 1, "", "get_optimization_details"], [376, 3, 1, "", "get_pruning_details"], [376, 3, 1, "", "list_optimizations"], [376, 3, 1, "", "load_pruning_details_config"], [376, 3, 1, "", "parse_optimization_data"], [376, 3, 1, "", "parse_optimization_edit_data"], [376, 3, 1, "", "parse_tuning_history"], [376, 3, 1, "", "pin_accuracy_benchmark"], [376, 3, 1, "", "pin_performance_benchmark"], [376, 3, 1, "", "update_execution_command"], [376, 3, 1, "", "update_optimization_duration"], [376, 3, 1, "", "update_optimization_status"], [376, 3, 1, "", "update_optimized_model"], [376, 3, 1, "", "update_paths"]], "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface": [[376, 3, 1, "", "add_profiling"], [376, 3, 1, "", "add_result"], [376, 3, 1, "", "bulk_add_results"], [376, 3, 1, "", "clean_status"], [376, 3, 1, "", "delete_profiling"], [376, 3, 1, "", "edit_profiling"], [376, 3, 1, "", "get_profiling_details"], [376, 3, 1, "", "list_profilings"], [376, 3, 1, "", "parse_profiling_data"], [376, 3, 1, "", "parse_profiling_edit_data"], [376, 3, 1, "", "parse_profiling_result_data"], [376, 3, 1, "", "update_execution_command"], [376, 3, 1, "", "update_log_path"], [376, 3, 1, "", "update_profiling_duration"], [376, 3, 1, "", "update_profiling_status"]], "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface": [[376, 3, 1, "", "add_dummy_dataset"], [376, 3, 1, "", "add_model"], [376, 3, 1, "", "create_project"], [376, 3, 1, "", "delete_project"], [376, 3, 1, "", "get_project_details"], [376, 3, 1, "", "list_projects"], [376, 3, 1, "", "update_project_notes"]], "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface": [[370, 2, 1, "", "BenchmarkAPIInterface"], [370, 1, 1, "", "before_delete_benchmark_entry"]], "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface": [[370, 3, 1, "", "add_benchmark"], [370, 3, 1, "", "add_result"], [370, 3, 1, "", "clean_status"], [370, 3, 1, "", "delete_benchmark"], [370, 3, 1, "", "edit_benchmark"], [370, 3, 1, "", "get_benchmark_details"], [370, 3, 1, "", "list_benchmarks"], [370, 3, 1, "", "parse_benchmark_data"], [370, 3, 1, "", "parse_benchmark_edit_data"], [370, 3, 1, "", "update_benchmark_accuracy"], [370, 3, 1, "", "update_benchmark_duration"], [370, 3, 1, "", "update_benchmark_performance"], [370, 3, 1, "", "update_benchmark_status"], [370, 3, 1, "", "update_execution_command"], [370, 3, 1, "", "update_paths"]], "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface": [[371, 2, 1, "", "DatasetAPIInterface"], [371, 1, 1, "", "initialize_associations"], [371, 1, 1, "", "initialize_precision_optimization_types_association"], [371, 1, 1, "", "search_in_list_of_dict"], [371, 1, 1, "", "search_in_list_of_dict_for_unique_value"], [371, 1, 1, "", "set_database_version"]], "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface": [[371, 3, 1, "", "add_dataset"], [371, 3, 1, "", "check_if_custom_metric_or_dataloader"], [371, 3, 1, "", "dataloader_path"], [371, 3, 1, "", "delete_dataset"], [371, 3, 1, "", "generate_custom_template"], [371, 3, 1, "", "generate_template"], [371, 3, 1, "", "get_dataset_details"], [371, 3, 1, "", "get_predefined_dataset"], [371, 3, 1, "", "list_datasets"], [371, 3, 1, "", "parse_dataset_data"], [371, 3, 1, "", "prepare_predefined_dataloader"], [371, 3, 1, "", "prepare_predefined_transform"], [371, 3, 1, "", "set_template_path"]], "neural_compressor.ux.components.db_manager.db_operations.db_operations": [[372, 1, 1, "", "initialize_associations"], [372, 1, 1, "", "initialize_precision_optimization_types_association"], [372, 1, 1, "", "search_in_list_of_dict"], [372, 1, 1, "", "search_in_list_of_dict_for_unique_value"], [372, 1, 1, "", "set_database_version"]], "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface": [[373, 2, 1, "", "DiagnosisAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface": [[373, 3, 1, "", "generate_optimization"], [373, 3, 1, "", "get_op_details"], [373, 3, 1, "", "get_op_list"], [373, 3, 1, "", "histogram"], [373, 3, 1, "", "model_wise_params"], [373, 3, 1, "", "parse_model_wise_config"], [373, 3, 1, "", "parse_op_wise_config"], [373, 3, 1, "", "parse_optimization_data"], [373, 3, 1, "", "parse_wise_parameters"], [373, 3, 1, "", "set_op_wise_pattern_precision"]], "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface": [[374, 2, 1, "", "DictionariesAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface": [[374, 3, 1, "", "list_dataloaders"], [374, 3, 1, "", "list_dataloaders_by_framework"], [374, 3, 1, "", "list_domain_flavours"], [374, 3, 1, "", "list_domains"], [374, 3, 1, "", "list_metrics"], [374, 3, 1, "", "list_metrics_by_framework"], [374, 3, 1, "", "list_optimization_types"], [374, 3, 1, "", "list_optimization_types_for_precision"], [374, 3, 1, "", "list_precisions"], [374, 3, 1, "", "list_transforms"], [374, 3, 1, "", "list_transforms_by_domain"], [374, 3, 1, "", "list_transforms_by_framework"]], "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface": [[375, 2, 1, "", "ExamplesAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface.ExamplesAPIInterface": [[375, 3, 1, "", "create_project"], [375, 3, 1, "", "get_optimization_data"]], "neural_compressor.ux.components.db_manager.db_operations.model_api_interface": [[377, 2, 1, "", "ModelAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.model_api_interface.ModelAPIInterface": [[377, 3, 1, "", "add_model"], [377, 3, 1, "", "delete_model"], [377, 3, 1, "", "get_model_details"], [377, 3, 1, "", "list_models"], [377, 3, 1, "", "parse_model_data"]], "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface": [[378, 2, 1, "", "OptimizationAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface": [[378, 3, 1, "", "add_optimization"], [378, 3, 1, "", "add_pruning_optimization"], [378, 3, 1, "", "add_quantization_optimization"], [378, 3, 1, "", "add_standard_optimization"], [378, 3, 1, "", "add_tuning_history"], [378, 3, 1, "", "clean_status"], [378, 3, 1, "", "delete_optimization"], [378, 3, 1, "", "edit_optimization"], [378, 3, 1, "", "edit_pruning_details"], [378, 3, 1, "", "edit_tuning_details"], [378, 3, 1, "", "get_optimization_details"], [378, 3, 1, "", "get_pruning_details"], [378, 3, 1, "", "list_optimizations"], [378, 3, 1, "", "load_pruning_details_config"], [378, 3, 1, "", "parse_optimization_data"], [378, 3, 1, "", "parse_optimization_edit_data"], [378, 3, 1, "", "parse_tuning_history"], [378, 3, 1, "", "pin_accuracy_benchmark"], [378, 3, 1, "", "pin_performance_benchmark"], [378, 3, 1, "", "update_execution_command"], [378, 3, 1, "", "update_optimization_duration"], [378, 3, 1, "", "update_optimization_status"], [378, 3, 1, "", "update_optimized_model"], [378, 3, 1, "", "update_paths"]], "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface": [[379, 2, 1, "", "ProfilingAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface": [[379, 3, 1, "", "add_profiling"], [379, 3, 1, "", "add_result"], [379, 3, 1, "", "bulk_add_results"], [379, 3, 1, "", "clean_status"], [379, 3, 1, "", "delete_profiling"], [379, 3, 1, "", "edit_profiling"], [379, 3, 1, "", "get_profiling_details"], [379, 3, 1, "", "list_profilings"], [379, 3, 1, "", "parse_profiling_data"], [379, 3, 1, "", "parse_profiling_edit_data"], [379, 3, 1, "", "parse_profiling_result_data"], [379, 3, 1, "", "update_execution_command"], [379, 3, 1, "", "update_log_path"], [379, 3, 1, "", "update_profiling_duration"], [379, 3, 1, "", "update_profiling_status"]], "neural_compressor.ux.components.db_manager.db_operations.project_api_interface": [[380, 2, 1, "", "ProjectAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface": [[380, 3, 1, "", "add_dummy_dataset"], [380, 3, 1, "", "add_model"], [380, 3, 1, "", "create_project"], [380, 3, 1, "", "delete_project"], [380, 3, 1, "", "get_project_details"], [380, 3, 1, "", "list_projects"], [380, 3, 1, "", "update_project_notes"]], "neural_compressor.ux.components.db_manager.params_interfaces": [[382, 2, 1, "", "BenchmarkAddParamsInterface"], [382, 2, 1, "", "BenchmarkEditParamsInterface"], [382, 2, 1, "", "DatasetAddParamsInterface"], [382, 2, 1, "", "DiagnosisOptimizationParamsInterface"], [382, 2, 1, "", "ModelAddParamsInterface"], [382, 2, 1, "", "OptimizationAddParamsInterface"], [382, 2, 1, "", "OptimizationEditParamsInterface"], [382, 2, 1, "", "ProfilingAddParamsInterface"], [382, 2, 1, "", "ProfilingEditParamsInterface"], [382, 2, 1, "", "ProfilingResultAddParamsInterface"], [382, 2, 1, "", "TuningHistoryInterface"], [382, 2, 1, "", "TuningHistoryItemInterface"]], "neural_compressor.ux.components.db_manager.params_interfaces.ModelAddParamsInterface": [[382, 3, 1, "", "parse_nodes"]], "neural_compressor.ux.components.db_manager.params_interfaces.TuningHistoryInterface": [[382, 3, 1, "", "serialize"]], "neural_compressor.ux.components.db_manager.params_interfaces.TuningHistoryItemInterface": [[382, 3, 1, "", "serialize"]], "neural_compressor.ux.components.db_manager.utils": [[383, 1, 1, "", "get_framework_dataloaders_config"], [383, 1, 1, "", "get_framework_transforms_config"], [383, 1, 1, "", "update_dataloaders_params"]], "neural_compressor.ux.components.diagnosis": [[384, 0, 0, "-", "diagnosis"], [385, 0, 0, "-", "factory"], [387, 0, 0, "-", "onnx_diagnosis"], [389, 0, 0, "-", "op_details"], [390, 0, 0, "-", "op_entry"], [391, 0, 0, "-", "tensorflow_diagnosis"]], "neural_compressor.ux.components.diagnosis.diagnosis": [[384, 2, 1, "", "Diagnosis"]], "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis": [[384, 3, 1, "", "calculate_mse"], [384, 3, 1, "", "get_histogram_data"], [384, 3, 1, "", "get_op_details"], [384, 3, 1, "", "get_op_list"], [384, 3, 1, "", "get_tensors_info"], [384, 3, 1, "", "load_quantization_config"], [384, 3, 1, "", "mse_metric_gap"]], "neural_compressor.ux.components.diagnosis.factory": [[385, 2, 1, "", "DiagnosisFactory"]], "neural_compressor.ux.components.diagnosis.factory.DiagnosisFactory": [[385, 3, 1, "", "get_diagnosis"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis": [[388, 0, 0, "-", "onnxrt_diagnosis"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis": [[388, 2, 1, "", "OnnxRtDiagnosis"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis.OnnxRtDiagnosis": [[388, 4, 1, "", "model"]], "neural_compressor.ux.components.diagnosis.op_details": [[389, 2, 1, "", "OpActivation"], [389, 2, 1, "", "OpDetails"], [389, 2, 1, "", "OpPattern"], [389, 2, 1, "", "OpWeights"]], "neural_compressor.ux.components.diagnosis.op_details.OpDetails": [[389, 3, 1, "", "serialize"]], "neural_compressor.ux.components.diagnosis.op_entry": [[390, 2, 1, "", "OpEntry"]], "neural_compressor.ux.components.diagnosis.op_entry.OpEntry": [[390, 3, 1, "", "serialize"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis": [[392, 0, 0, "-", "tensorflow_diagnosis"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis": [[392, 2, 1, "", "TensorflowDiagnosis"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis.TensorflowDiagnosis": [[392, 4, 1, "", "model"]], "neural_compressor.ux.components.file_browser": [[393, 0, 0, "-", "file_browser"]], "neural_compressor.ux.components.file_browser.file_browser": [[393, 1, 1, "", "create_dir_entry"], [393, 1, 1, "", "create_entry"], [393, 1, 1, "", "create_file_entry"], [393, 1, 1, "", "filter_requested_entries"], [393, 1, 1, "", "get_directory_entries"], [393, 1, 1, "", "get_filter_value"], [393, 1, 1, "", "get_non_hidden_directory_entries"], [393, 1, 1, "", "get_requested_path"], [393, 1, 1, "", "get_setting_value"], [393, 1, 1, "", "is_dataset_or_directory_entry"], [393, 1, 1, "", "is_directory_entry"], [393, 1, 1, "", "is_model_or_directory_entry"], [393, 1, 1, "", "should_show_files"], [393, 1, 1, "", "should_show_only_model_files"], [393, 1, 1, "", "sort_entries"]], "neural_compressor.ux.components.graph": [[395, 0, 0, "-", "attribute"], [396, 0, 0, "-", "collapser"], [397, 0, 0, "-", "edge"], [398, 0, 0, "-", "graph"], [399, 0, 0, "-", "graph_reader"], [401, 0, 0, "-", "node"], [402, 0, 0, "-", "reader"]], "neural_compressor.ux.components.graph.attribute": [[395, 2, 1, "", "Attribute"]], "neural_compressor.ux.components.graph.collapser": [[396, 2, 1, "", "Collapser"]], "neural_compressor.ux.components.graph.collapser.Collapser": [[396, 3, 1, "", "collapse"]], "neural_compressor.ux.components.graph.edge": [[397, 2, 1, "", "Edge"]], "neural_compressor.ux.components.graph.edge.Edge": [[397, 4, 1, "", "source"], [397, 4, 1, "", "target"]], "neural_compressor.ux.components.graph.graph": [[398, 2, 1, "", "Graph"]], "neural_compressor.ux.components.graph.graph.Graph": [[398, 3, 1, "", "add_edge"], [398, 3, 1, "", "add_node"], [398, 4, 1, "", "edges"], [398, 3, 1, "", "get_node"], [398, 3, 1, "", "get_target_nodes"], [398, 3, 1, "", "highlight_pattern"], [398, 4, 1, "", "nodes"]], "neural_compressor.ux.components.graph.graph_reader": [[399, 2, 1, "", "GraphReader"]], "neural_compressor.ux.components.graph.graph_reader.GraphReader": [[399, 3, 1, "", "find_pattern_in_graph"], [399, 3, 1, "", "read"]], "neural_compressor.ux.components.graph.node": [[401, 2, 1, "", "GroupNode"], [401, 2, 1, "", "Node"]], "neural_compressor.ux.components.graph.reader": [[403, 0, 0, "-", "onnxrt_reader"], [404, 0, 0, "-", "tensorflow_reader"]], "neural_compressor.ux.components.graph.reader.onnxrt_reader": [[403, 2, 1, "", "OnnxrtReader"]], "neural_compressor.ux.components.graph.reader.onnxrt_reader.OnnxrtReader": [[403, 3, 1, "", "read"]], "neural_compressor.ux.components.graph.reader.tensorflow_reader": [[404, 2, 1, "", "TensorflowReader"]], "neural_compressor.ux.components.graph.reader.tensorflow_reader.TensorflowReader": [[404, 3, 1, "", "read"]], "neural_compressor.ux.components.jobs_management": [[407, 0, 0, "-", "jobs_control_queue"], [408, 0, 0, "-", "jobs_manager"], [409, 0, 0, "-", "request"]], "neural_compressor.ux.components.manage_workspace": [[410, 1, 1, "", "get_default_path"]], "neural_compressor.ux.components.model": [[411, 0, 0, "-", "domain"], [413, 0, 0, "-", "model"], [414, 0, 0, "-", "model_type_getter"], [415, 0, 0, "-", "onnxrt"], [417, 0, 0, "-", "pytorch"], [419, 0, 0, "-", "repository"], [420, 0, 0, "-", "shape"], [422, 0, 0, "-", "tensorflow"]], "neural_compressor.ux.components.model.domain": [[411, 2, 1, "", "Domain"]], "neural_compressor.ux.components.model.model": [[413, 2, 1, "", "Model"]], "neural_compressor.ux.components.model.model.Model": [[413, 4, 1, "", "domain"], [413, 3, 1, "", "ensure_supported_path"], [413, 3, 1, "", "get_framework_name"], [413, 3, 1, "", "get_input_nodes"], [413, 3, 1, "", "get_model_graph"], [413, 3, 1, "", "get_output_nodes"], [413, 3, 1, "", "get_tensors_info"], [413, 3, 1, "", "guard_requirements_installed"], [413, 4, 1, "", "input_shape"], [413, 4, 1, "", "shape_elements_order"], [413, 4, 1, "", "supports_graph"], [413, 3, 1, "", "supports_path"], [413, 4, 1, "", "supports_profiling"], [413, 4, 1, "", "supports_pruning"]], "neural_compressor.ux.components.model.model_type_getter": [[414, 1, 1, "", "get_model_type"]], "neural_compressor.ux.components.model.onnxrt": [[416, 0, 0, "-", "model"]], "neural_compressor.ux.components.model.onnxrt.model": [[416, 2, 1, "", "OnnxrtModel"], [416, 1, 1, "", "remove_number_of_samples_from_shape"]], "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel": [[416, 4, 1, "", "domain"], [416, 4, 1, "", "filtered_input_nodes"], [416, 3, 1, "", "get_framework_name"], [416, 3, 1, "", "get_model_graph"], [416, 3, 1, "", "guard_requirements_installed"], [416, 4, 1, "", "input_shape"], [416, 4, 1, "", "nc_model_instance"], [416, 4, 1, "", "shape_elements_order"], [416, 3, 1, "", "supports_path"]], "neural_compressor.ux.components.model.pytorch": [[418, 0, 0, "-", "model"]], "neural_compressor.ux.components.model.pytorch.model": [[418, 2, 1, "", "PyTorchScriptModel"]], "neural_compressor.ux.components.model.pytorch.model.PyTorchScriptModel": [[418, 3, 1, "", "get_framework_name"], [418, 3, 1, "", "guard_requirements_installed"], [418, 3, 1, "", "supports_path"]], "neural_compressor.ux.components.model.repository": [[419, 2, 1, "", "ModelRepository"]], "neural_compressor.ux.components.model.repository.ModelRepository": [[419, 3, 1, "", "get_framework_from_path"], [419, 3, 1, "", "get_frameworks"], [419, 3, 1, "", "get_model"], [419, 3, 1, "", "get_supported_frameworks"], [419, 3, 1, "", "is_model_path"]], "neural_compressor.ux.components.model.shape": [[420, 2, 1, "", "Shape"]], "neural_compressor.ux.components.model.shape.Shape": [[420, 3, 1, "", "serialize"]], "neural_compressor.ux.components.model.tensorflow": [[421, 0, 0, "-", "frozen_pb"], [423, 0, 0, "-", "keras"], [424, 0, 0, "-", "meta_graph"], [425, 0, 0, "-", "model"], [426, 0, 0, "-", "saved_model"], [427, 0, 0, "-", "utils"]], "neural_compressor.ux.components.model.tensorflow.frozen_pb": [[421, 2, 1, "", "FrozenPbModel"]], "neural_compressor.ux.components.model.tensorflow.frozen_pb.FrozenPbModel": [[421, 3, 1, "", "supports_path"], [421, 4, 1, "", "supports_profiling"]], "neural_compressor.ux.components.model.tensorflow.keras": [[423, 2, 1, "", "KerasModel"]], "neural_compressor.ux.components.model.tensorflow.keras.KerasModel": [[423, 3, 1, "", "get_input_nodes"], [423, 3, 1, "", "get_output_nodes"], [423, 3, 1, "", "supports_path"]], "neural_compressor.ux.components.model.tensorflow.meta_graph": [[424, 2, 1, "", "MetaGraphModel"]], "neural_compressor.ux.components.model.tensorflow.meta_graph.MetaGraphModel": [[424, 3, 1, "", "get_input_nodes"], [424, 3, 1, "", "get_model_graph"], [424, 3, 1, "", "get_output_nodes"], [424, 3, 1, "", "supports_path"]], "neural_compressor.ux.components.model.tensorflow.model": [[425, 2, 1, "", "TensorflowModel"]], "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel": [[425, 3, 1, "", "get_framework_name"], [425, 3, 1, "", "get_input_nodes"], [425, 3, 1, "", "get_model_graph"], [425, 3, 1, "", "get_output_nodes"], [425, 3, 1, "", "guard_requirements_installed"], [425, 4, 1, "", "input_shape"], [425, 4, 1, "", "nc_model_instance"], [425, 4, 1, "", "shape_elements_order"], [425, 4, 1, "", "supports_pruning"]], "neural_compressor.ux.components.model.tensorflow.saved_model": [[426, 2, 1, "", "SavedModelModel"]], "neural_compressor.ux.components.model.tensorflow.saved_model.SavedModelModel": [[426, 3, 1, "", "supports_path"]], "neural_compressor.ux.components.model.tensorflow.utils": [[427, 1, 1, "", "get_input_shape"]], "neural_compressor.ux.components.model_zoo": [[428, 0, 0, "-", "download_config"], [429, 0, 0, "-", "download_model"], [430, 0, 0, "-", "downloader"], [432, 0, 0, "-", "list_models"]], "neural_compressor.ux.components.model_zoo.download_config": [[428, 1, 1, "", "download_config"]], "neural_compressor.ux.components.model_zoo.download_model": [[429, 1, 1, "", "download_model"]], "neural_compressor.ux.components.model_zoo.downloader": [[430, 2, 1, "", "Downloader"]], "neural_compressor.ux.components.model_zoo.downloader.Downloader": [[430, 3, 1, "", "download"], [430, 3, 1, "", "download_config"], [430, 3, 1, "", "download_file"], [430, 3, 1, "", "download_model"], [430, 3, 1, "", "download_yaml_config"], [430, 3, 1, "", "get_yaml_url"], [430, 3, 1, "", "unpack_archive"]], "neural_compressor.ux.components.model_zoo.list_models": [[432, 1, 1, "", "check_version"], [432, 1, 1, "", "get_available_models"], [432, 1, 1, "", "get_framework_module_name"], [432, 1, 1, "", "get_installed_frameworks"], [432, 1, 1, "", "list_models"], [432, 1, 1, "", "validate_model_list"]], "neural_compressor.ux.components.names_mapper": [[434, 0, 0, "-", "names_mapper"]], "neural_compressor.ux.components.names_mapper.names_mapper": [[434, 2, 1, "", "MappingDirection"], [434, 2, 1, "", "NamesMapper"]], "neural_compressor.ux.components.names_mapper.names_mapper.NamesMapper": [[434, 4, 1, "", "domain_flavour_mappings"], [434, 4, 1, "", "domain_mappings"], [434, 4, 1, "", "framework_mappings"], [434, 3, 1, "", "map_name"], [434, 4, 1, "", "precision_mappings"]], "neural_compressor.ux.components.optimization": [[440, 2, 1, "", "Optimizations"], [435, 0, 0, "-", "execute_optimization"], [436, 0, 0, "-", "factory"], [438, 0, 0, "-", "graph_optimizer"], [441, 0, 0, "-", "mixed_precision"], [444, 0, 0, "-", "neural_coder_optimization"], [446, 0, 0, "-", "optimization"], [447, 0, 0, "-", "pruning"], [450, 0, 0, "-", "tune"], [453, 0, 0, "-", "tuning_history"]], "neural_compressor.ux.components.optimization.execute_optimization": [[435, 1, 1, "", "check_if_collect_tuning_history"], [435, 1, 1, "", "execute_optimization"], [435, 1, 1, "", "execute_optimization_pytorch_script"], [435, 1, 1, "", "execute_optimization_regular"], [435, 1, 1, "", "parse_logs"], [435, 1, 1, "", "parse_model_data_to_bench_names"]], "neural_compressor.ux.components.optimization.factory": [[436, 2, 1, "", "OptimizationFactory"]], "neural_compressor.ux.components.optimization.factory.OptimizationFactory": [[436, 3, 1, "", "get_optimization"]], "neural_compressor.ux.components.optimization.graph_optimizer": [[437, 0, 0, "-", "graph_optimization"], [439, 0, 0, "-", "optimize_model"]], "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization": [[437, 2, 1, "", "GraphOptimization"]], "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.GraphOptimization": [[437, 4, 1, "", "configuration_data"], [437, 3, 1, "", "execute"], [437, 3, 1, "", "generate_config"], [437, 4, 1, "", "optimization_script"], [437, 4, 1, "", "parameters"]], "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model": [[439, 1, 1, "", "optimize_graph"], [439, 1, 1, "", "optimize_graph_config"], [439, 1, 1, "", "parse_args"], [439, 1, 1, "", "set_eager_execution"]], "neural_compressor.ux.components.optimization.mixed_precision": [[442, 0, 0, "-", "mixed_precision"], [443, 0, 0, "-", "optimize_model"]], "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision": [[442, 2, 1, "", "MixedPrecision"]], "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.MixedPrecision": [[442, 4, 1, "", "configuration_data"], [442, 3, 1, "", "execute"], [442, 3, 1, "", "generate_config"], [442, 4, 1, "", "optimization_script"], [442, 4, 1, "", "parameters"]], "neural_compressor.ux.components.optimization.mixed_precision.optimize_model": [[443, 1, 1, "", "optimize_graph"], [443, 1, 1, "", "optimize_graph_config"], [443, 1, 1, "", "parse_args"], [443, 1, 1, "", "set_eager_execution"]], "neural_compressor.ux.components.optimization.neural_coder_optimization": [[445, 0, 0, "-", "optimize_model"]], "neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model": [[445, 1, 1, "", "optimize_pt_script"]], "neural_compressor.ux.components.optimization.optimization": [[446, 2, 1, "", "DataloaderInterface"], [446, 2, 1, "", "Optimization"], [446, 2, 1, "", "OptimizationInterface"]], "neural_compressor.ux.components.optimization.optimization.Optimization": [[446, 4, 1, "", "command"], [446, 4, 1, "", "config_filename"], [446, 4, 1, "", "configuration_data"], [446, 3, 1, "", "execute"], [446, 3, 1, "", "generate_config"], [446, 4, 1, "", "optimization_script"], [446, 4, 1, "", "output_model_dir"], [446, 4, 1, "", "output_model_name"], [446, 4, 1, "", "parameters"], [446, 4, 1, "", "workdir"]], "neural_compressor.ux.components.optimization.pruning": [[448, 0, 0, "-", "optimize_model"], [449, 0, 0, "-", "pruning"]], "neural_compressor.ux.components.optimization.pruning.optimize_model": [[448, 1, 1, "", "optimize_model"], [448, 1, 1, "", "parse_args"]], "neural_compressor.ux.components.optimization.pruning.pruning": [[449, 2, 1, "", "Pruning"]], "neural_compressor.ux.components.optimization.pruning.pruning.Pruning": [[449, 4, 1, "", "configuration_data"], [449, 3, 1, "", "execute"], [449, 3, 1, "", "generate_config"], [449, 4, 1, "", "optimization_script"], [449, 4, 1, "", "parameters"]], "neural_compressor.ux.components.optimization.tune": [[451, 0, 0, "-", "tune_model"], [452, 0, 0, "-", "tuning"]], "neural_compressor.ux.components.optimization.tune.tune_model": [[451, 1, 1, "", "parse_args"], [451, 1, 1, "", "set_eager_execution"], [451, 1, 1, "", "tune_model"]], "neural_compressor.ux.components.optimization.tune.tuning": [[452, 2, 1, "", "AccuracyCriterion"], [452, 2, 1, "", "Tuning"], [452, 2, 1, "", "TuningDetails"]], "neural_compressor.ux.components.optimization.tune.tuning.Tuning": [[452, 4, 1, "", "configuration_data"], [452, 3, 1, "", "execute"], [452, 3, 1, "", "generate_config"], [452, 4, 1, "", "optimization_script"], [452, 4, 1, "", "parameters"]], "neural_compressor.ux.components.optimization.tuning_history": [[453, 2, 1, "", "TuningHistory"], [453, 2, 1, "", "Watcher"], [453, 1, 1, "", "tuning_history"], [453, 1, 1, "", "tuning_history_path"]], "neural_compressor.ux.components.optimization.tuning_history.TuningHistory": [[453, 3, 1, "", "send_history_snapshot"]], "neural_compressor.ux.components.optimization.tuning_history.Watcher": [[453, 3, 1, "", "history_file_modification_time"], [453, 3, 1, "", "stop"], [453, 3, 1, "", "was_history_file_changed"]], "neural_compressor.ux.components.profiling": [[454, 0, 0, "-", "execute_profiling"], [455, 0, 0, "-", "factory"], [457, 0, 0, "-", "profile_model"], [458, 0, 0, "-", "profiler"], [459, 0, 0, "-", "profiling"], [461, 0, 0, "-", "tensorflow_profiler"]], "neural_compressor.ux.components.profiling.execute_profiling": [[454, 1, 1, "", "execute_profiling"], [454, 1, 1, "", "execute_real_profiling"]], "neural_compressor.ux.components.profiling.factory": [[455, 2, 1, "", "ProfilerFactory"]], "neural_compressor.ux.components.profiling.factory.ProfilerFactory": [[455, 3, 1, "", "get_profiler"]], "neural_compressor.ux.components.profiling.profile_model": [[457, 1, 1, "", "load_profiling_details"], [457, 1, 1, "", "parse_args"]], "neural_compressor.ux.components.profiling.profiler": [[458, 2, 1, "", "Profiler"]], "neural_compressor.ux.components.profiling.profiler.Profiler": [[458, 3, 1, "", "profile_model"]], "neural_compressor.ux.components.profiling.profiling": [[459, 2, 1, "", "DataloaderInterface"], [459, 2, 1, "", "Profiling"]], "neural_compressor.ux.components.profiling.profiling.Profiling": [[459, 4, 1, "", "config_filename"], [459, 4, 1, "", "config_path"], [459, 3, 1, "", "execute"], [459, 3, 1, "", "generate_config"], [459, 4, 1, "", "profiling_data"], [459, 4, 1, "", "workdir"]], "neural_compressor.ux.components.profiling.tensorflow_profiler": [[460, 0, 0, "-", "factory"], [462, 0, 0, "-", "profiler"], [463, 0, 0, "-", "utils"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.factory": [[460, 2, 1, "", "ProfilerFactory"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.factory.ProfilerFactory": [[460, 3, 1, "", "get_profiler"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler": [[462, 2, 1, "", "Profiler"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.Profiler": [[462, 3, 1, "", "build_dataloader"], [462, 3, 1, "", "convert_nodes_to_list"], [462, 3, 1, "", "create_tf_config"], [462, 3, 1, "", "get_node_by_name"], [462, 3, 1, "", "initialize_graph"], [462, 3, 1, "", "profile_model"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.utils": [[463, 1, 1, "", "delete_assign"]], "neural_compressor.ux.inc_bench": [[464, 1, 1, "", "main"], [464, 1, 1, "", "prepare_environment"]], "neural_compressor.ux.utils": [[466, 0, 0, "-", "consts"], [467, 0, 0, "-", "environment"], [468, 0, 0, "-", "exceptions"], [469, 0, 0, "-", "executor"], [470, 0, 0, "-", "expiring_dict"], [471, 0, 0, "-", "github_info"], [472, 0, 0, "-", "hw_info"], [474, 0, 0, "-", "json_serializer"], [475, 0, 0, "-", "logger"], [476, 0, 0, "-", "parser"], [477, 0, 0, "-", "proc"], [478, 0, 0, "-", "processes"], [479, 0, 0, "-", "singleton"], [480, 0, 0, "-", "status_updates"], [481, 0, 0, "-", "templates"], [484, 0, 0, "-", "utils"], [489, 0, 0, "-", "workload"], [495, 0, 0, "-", "yaml_utils"]], "neural_compressor.ux.utils.consts": [[466, 2, 1, "", "DomainFlavours"], [466, 2, 1, "", "Domains"], [466, 2, 1, "", "ExecutionStatus"], [466, 2, 1, "", "Frameworks"], [466, 2, 1, "", "OptimizationTypes"], [466, 2, 1, "", "Precisions"], [466, 2, 1, "", "Strategies"]], "neural_compressor.ux.utils.environment": [[467, 2, 1, "", "Environment"]], "neural_compressor.ux.utils.environment.Environment": [[467, 3, 1, "", "clean_workloads_wip_status"], [467, 3, 1, "", "ensure_workdir_exists_and_writeable"], [467, 3, 1, "", "migrate_database"]], "neural_compressor.ux.utils.exceptions": [[468, 7, 1, "", "AccessDeniedException"], [468, 7, 1, "", "ClientErrorException"], [468, 7, 1, "", "InternalException"], [468, 7, 1, "", "NotFoundException"]], "neural_compressor.ux.utils.executor": [[469, 2, 1, "", "Executor"]], "neural_compressor.ux.utils.executor.Executor": [[469, 4, 1, "", "additional_log_names"], [469, 3, 1, "", "call"], [469, 3, 1, "", "call_one"], [469, 3, 1, "", "is_multi_commands"], [469, 4, 1, "", "log_name"], [469, 4, 1, "", "process_duration"], [469, 3, 1, "", "refresh_workdir"], [469, 4, 1, "", "request_id"], [469, 4, 1, "", "workdir"]], "neural_compressor.ux.utils.expiring_dict": [[470, 2, 1, "", "ExpiringDict"], [470, 2, 1, "", "ExpiringDictItem"]], "neural_compressor.ux.utils.expiring_dict.ExpiringDictItem": [[470, 3, 1, "", "is_expired"]], "neural_compressor.ux.utils.github_info": [[471, 2, 1, "", "GithubInfo"]], "neural_compressor.ux.utils.github_info.GithubInfo": [[471, 3, 1, "", "tag"]], "neural_compressor.ux.utils.hw_info": [[472, 2, 1, "", "HWInfo"], [472, 1, 1, "", "get_bios_version"], [472, 1, 1, "", "get_distribution"], [472, 1, 1, "", "get_framework_dependency_info"], [472, 1, 1, "", "get_framework_info"], [472, 1, 1, "", "get_kernel_version"], [472, 1, 1, "", "get_number_of_sockets"], [472, 1, 1, "", "is_turbo_boost_enabled"]], "neural_compressor.ux.utils.hw_info.HWInfo": [[472, 3, 1, "", "initialize"], [472, 3, 1, "", "serialize"]], "neural_compressor.ux.utils.json_serializer": [[474, 2, 1, "", "JsonSerializer"]], "neural_compressor.ux.utils.json_serializer.JsonSerializer": [[474, 3, 1, "", "serialize"], [474, 3, 1, "", "serialize_item"]], "neural_compressor.ux.utils.logger": [[475, 1, 1, "", "change_log_level"]], "neural_compressor.ux.utils.parser": [[476, 2, 1, "", "AccuracyParser"], [476, 2, 1, "", "BenchmarkParserFactory"], [476, 2, 1, "", "OptimizationParser"], [476, 2, 1, "", "Parser"], [476, 2, 1, "", "PerformanceParser"], [476, 2, 1, "", "ProfilingParser"]], "neural_compressor.ux.utils.parser.AccuracyParser": [[476, 4, 1, "", "patterns"], [476, 3, 1, "", "process"]], "neural_compressor.ux.utils.parser.BenchmarkParserFactory": [[476, 3, 1, "", "get_parser"]], "neural_compressor.ux.utils.parser.OptimizationParser": [[476, 4, 1, "", "patterns"], [476, 3, 1, "", "process"]], "neural_compressor.ux.utils.parser.Parser": [[476, 4, 1, "", "patterns"], [476, 3, 1, "", "process"]], "neural_compressor.ux.utils.parser.PerformanceParser": [[476, 4, 1, "", "patterns"], [476, 3, 1, "", "process"], [476, 3, 1, "", "summarize_partial"], [476, 3, 1, "", "summarize_value"], [476, 3, 1, "", "update_partial"]], "neural_compressor.ux.utils.parser.ProfilingParser": [[476, 4, 1, "", "patterns"], [476, 3, 1, "", "process"], [476, 3, 1, "", "unify_time"]], "neural_compressor.ux.utils.proc": [[477, 2, 1, "", "Proc"]], "neural_compressor.ux.utils.proc.Proc": [[477, 4, 1, "", "info"], [477, 4, 1, "", "info_path"], [477, 4, 1, "", "is_ok"], [477, 4, 1, "", "output"], [477, 4, 1, "", "output_path"], [477, 3, 1, "", "remove_logs"], [477, 3, 1, "", "run"], [477, 4, 1, "", "tail"]], "neural_compressor.ux.utils.processes": [[478, 2, 1, "", "NCProcesses"]], "neural_compressor.ux.utils.processes.NCProcesses": [[478, 4, 1, "", "is_ok"], [478, 3, 1, "", "remove_successful_logs"], [478, 3, 1, "", "return_code_all"]], "neural_compressor.ux.utils.singleton": [[479, 2, 1, "", "Singleton"]], "neural_compressor.ux.utils.status_updates": [[480, 1, 1, "", "get_status_update_function"]], "neural_compressor.ux.utils.templates": [[482, 0, 0, "-", "metric"], [483, 0, 0, "-", "workdir"]], "neural_compressor.ux.utils.templates.metric": [[482, 2, 1, "", "Metric"]], "neural_compressor.ux.utils.templates.metric.Metric": [[482, 4, 1, "", "acc_input_model"], [482, 4, 1, "", "acc_optimized_model"], [482, 4, 1, "", "accuracy"], [482, 3, 1, "", "calculate_throughput"], [482, 3, 1, "", "insert_data"], [482, 4, 1, "", "latency"], [482, 4, 1, "", "optimization_time"], [482, 4, 1, "", "path_optimized_model"], [482, 4, 1, "", "profiling_data"], [482, 4, 1, "", "size_input_model"], [482, 4, 1, "", "size_optimized_model"], [482, 4, 1, "", "throughput"]], "neural_compressor.ux.utils.templates.workdir": [[483, 2, 1, "", "Workdir"]], "neural_compressor.ux.utils.templates.workdir.Workdir": [[483, 3, 1, "", "clean_logs"], [483, 3, 1, "", "clean_status"], [483, 3, 1, "", "ensure_working_path_exists"]], "neural_compressor.ux.utils.utils": [[484, 1, 1, "", "check_module"], [484, 1, 1, "", "deprecated"], [484, 1, 1, "", "determine_ip"], [484, 1, 1, "", "export_to_csv"], [484, 1, 1, "", "filter_transforms"], [484, 1, 1, "", "get_dataset_path"], [484, 1, 1, "", "get_default_pruning_config_path"], [484, 1, 1, "", "get_file_extension"], [484, 1, 1, "", "get_framework_from_path"], [484, 1, 1, "", "get_height_width_from_size"], [484, 1, 1, "", "get_metrics_dict"], [484, 1, 1, "", "get_model_zoo_config_path"], [484, 1, 1, "", "get_model_zoo_model_path"], [484, 1, 1, "", "get_module_version"], [484, 1, 1, "", "get_predefined_config_path"], [484, 1, 1, "", "get_shape_from_transforms"], [484, 1, 1, "", "get_size"], [484, 1, 1, "", "is_dataset_file"], [484, 1, 1, "", "is_development_env"], [484, 1, 1, "", "is_hidden"], [484, 1, 1, "", "load_dataloader_config"], [484, 1, 1, "", "load_help_nc_params"], [484, 1, 1, "", "load_metrics_config"], [484, 1, 1, "", "load_model_config"], [484, 1, 1, "", "load_model_wise_params"], [484, 1, 1, "", "load_precisions_config"], [484, 1, 1, "", "load_pruning_details_config"], [484, 1, 1, "", "load_transforms_config"], [484, 1, 1, "", "load_transforms_filter_config"], [484, 1, 1, "", "normalize_domain"], [484, 1, 1, "", "normalize_framework"], [484, 1, 1, "", "normalize_string"], [484, 1, 1, "", "parse_bool_value"], [484, 1, 1, "", "parse_to_float_list"], [484, 1, 1, "", "parse_to_string_list"], [484, 1, 1, "", "parse_version"], [484, 1, 1, "", "release_tag"], [484, 1, 1, "", "replace_with_values"], [484, 1, 1, "", "verify_file_path"]], "neural_compressor.ux.utils.workload": [[485, 0, 0, "-", "config"], [486, 0, 0, "-", "dataloader"], [487, 0, 0, "-", "evaluation"], [488, 0, 0, "-", "graph_optimization"], [490, 0, 0, "-", "mixed_precision"], [491, 0, 0, "-", "model"], [492, 0, 0, "-", "pruning"], [493, 0, 0, "-", "quantization"], [494, 0, 0, "-", "tuning"]], "neural_compressor.ux.utils.workload.config": [[485, 2, 1, "", "Config"]], "neural_compressor.ux.utils.workload.config.Config": [[485, 3, 1, "", "dump"], [485, 3, 1, "", "get_performance_configs"], [485, 3, 1, "", "get_performance_cores_per_instance"], [485, 3, 1, "", "get_performance_num_of_instance"], [485, 3, 1, "", "initialize"], [485, 3, 1, "", "load"], [485, 3, 1, "", "process_transform"], [485, 3, 1, "", "remove_accuracy_metric"], [485, 3, 1, "", "remove_dataloader"], [485, 3, 1, "", "set_accuracy_and_performance_batch_sizes"], [485, 3, 1, "", "set_accuracy_goal"], [485, 3, 1, "", "set_accuracy_metric"], [485, 3, 1, "", "set_evaluation_dataloader"], [485, 3, 1, "", "set_evaluation_dataset_path"], [485, 3, 1, "", "set_inputs"], [485, 3, 1, "", "set_optimization_precision"], [485, 3, 1, "", "set_outputs"], [485, 3, 1, "", "set_performance_cores_per_instance"], [485, 3, 1, "", "set_performance_iterations"], [485, 3, 1, "", "set_performance_num_of_instance"], [485, 3, 1, "", "set_performance_warmup"], [485, 3, 1, "", "set_quantization_approach"], [485, 3, 1, "", "set_quantization_batch_size"], [485, 3, 1, "", "set_quantization_dataloader"], [485, 3, 1, "", "set_quantization_dataset_path"], [485, 3, 1, "", "set_quantization_sampling_size"], [485, 3, 1, "", "set_transform"], [485, 3, 1, "", "set_workspace"]], "neural_compressor.ux.utils.workload.dataloader": [[486, 2, 1, "", "Dataloader"], [486, 2, 1, "", "Dataset"], [486, 2, 1, "", "Filter"], [486, 2, 1, "", "LabelBalance"], [486, 2, 1, "", "Transform"]], "neural_compressor.ux.utils.workload.dataloader.Dataloader": [[486, 3, 1, "", "serialize"], [486, 3, 1, "", "set_dataset"], [486, 3, 1, "", "set_transforms_from_list"]], "neural_compressor.ux.utils.workload.dataloader.Dataset": [[486, 3, 1, "", "is_dummy"], [486, 3, 1, "", "serialize"]], "neural_compressor.ux.utils.workload.dataloader.Transform": [[486, 3, 1, "", "serialize"]], "neural_compressor.ux.utils.workload.evaluation": [[487, 2, 1, "", "Accuracy"], [487, 2, 1, "", "Configs"], [487, 2, 1, "", "Evaluation"], [487, 2, 1, "", "Metric"], [487, 2, 1, "", "Performance"], [487, 2, 1, "", "Postprocess"], [487, 2, 1, "", "PostprocessSchema"]], "neural_compressor.ux.utils.workload.evaluation.Evaluation": [[487, 3, 1, "", "set_accuracy_postprocess_transforms"]], "neural_compressor.ux.utils.workload.evaluation.Metric": [[487, 4, 1, "", "name"], [487, 4, 1, "", "param"], [487, 3, 1, "", "serialize"]], "neural_compressor.ux.utils.workload.evaluation.PostprocessSchema": [[487, 3, 1, "", "get_label_shift_value"]], "neural_compressor.ux.utils.workload.graph_optimization": [[488, 2, 1, "", "GraphOptimization"]], "neural_compressor.ux.utils.workload.graph_optimization.GraphOptimization": [[488, 3, 1, "", "set_precisions"]], "neural_compressor.ux.utils.workload.mixed_precision": [[490, 2, 1, "", "MixedPrecision"]], "neural_compressor.ux.utils.workload.mixed_precision.MixedPrecision": [[490, 3, 1, "", "set_precisions"]], "neural_compressor.ux.utils.workload.model": [[491, 2, 1, "", "Model"]], "neural_compressor.ux.utils.workload.model.Model": [[491, 4, 1, "", "inputs"], [491, 4, 1, "", "outputs"], [491, 3, 1, "", "serialize"]], "neural_compressor.ux.utils.workload.pruning": [[492, 2, 1, "", "AdamOptimizer"], [492, 2, 1, "", "AdamWOptimizer"], [492, 2, 1, "", "Approach"], [492, 2, 1, "", "Criterion"], [492, 2, 1, "", "CrossEntropyLossCriterion"], [492, 2, 1, "", "IntermediateLayersKnowledgeDistillationLoss"], [492, 2, 1, "", "KnowledgeDistillationLossCriterion"], [492, 2, 1, "", "Optimizer"], [492, 2, 1, "", "Pruning"], [492, 2, 1, "", "SGDOptimizer"], [492, 2, 1, "", "SelfKnowledgeDistillationLoss"], [492, 2, 1, "", "SparseCategoricalCrossentropyCriterion"], [492, 2, 1, "", "Train"], [492, 2, 1, "", "WeightCompressionApproach"], [492, 1, 1, "", "parse_dict_value_to_float"], [492, 1, 1, "", "parse_dict_value_to_int"]], "neural_compressor.ux.utils.workload.pruning.Train": [[492, 3, 1, "", "serialize"], [492, 3, 1, "", "set_postprocess_transforms"]], "neural_compressor.ux.utils.workload.pruning.WeightCompressionApproach": [[492, 3, 1, "", "initialize_pruners"], [492, 3, 1, "", "serialize"], [492, 3, 1, "", "serialize_pruner"]], "neural_compressor.ux.utils.workload.quantization": [[493, 2, 1, "", "Advance"], [493, 2, 1, "", "Calibration"], [493, 2, 1, "", "Quantization"], [493, 2, 1, "", "WiseConfig"], [493, 2, 1, "", "WiseConfigDetails"]], "neural_compressor.ux.utils.workload.tuning": [[494, 2, 1, "", "AccCriterion"], [494, 2, 1, "", "Diagnosis"], [494, 2, 1, "", "ExitPolicy"], [494, 2, 1, "", "MultiObjectives"], [494, 2, 1, "", "Strategy"], [494, 2, 1, "", "Tuning"], [494, 2, 1, "", "Workspace"]], "neural_compressor.ux.utils.workload.tuning.MultiObjectives": [[494, 4, 1, "", "objective"], [494, 4, 1, "", "weight"]], "neural_compressor.ux.utils.workload.tuning.Tuning": [[494, 3, 1, "", "set_max_trials"], [494, 3, 1, "", "set_performance_only"], [494, 3, 1, "", "set_random_seed"], [494, 3, 1, "", "set_timeout"], [494, 3, 1, "", "set_workspace"]], "neural_compressor.ux.utils.yaml_utils": [[495, 1, 1, "", "float_representer"], [495, 1, 1, "", "pruner_representer"]], "neural_compressor.ux.web": [[496, 0, 0, "-", "communication"], [497, 0, 0, "-", "configuration"], [498, 0, 0, "-", "exceptions"], [500, 0, 0, "-", "router"], [501, 0, 0, "-", "server"], [504, 0, 0, "-", "service"]], "neural_compressor.ux.web.communication": [[496, 2, 1, "", "Message"], [496, 2, 1, "", "MessageQueue"], [496, 2, 1, "", "Request"], [496, 2, 1, "", "Response"], [496, 1, 1, "", "create_simple_response"]], "neural_compressor.ux.web.communication.Message": [[496, 4, 1, "", "data"], [496, 4, 1, "", "status"], [496, 4, 1, "", "subject"]], "neural_compressor.ux.web.communication.MessageQueue": [[496, 3, 1, "", "get"], [496, 3, 1, "", "post_error"], [496, 3, 1, "", "post_failure"], [496, 3, 1, "", "post_success"]], "neural_compressor.ux.web.configuration": [[497, 2, 1, "", "Configuration"]], "neural_compressor.ux.web.configuration.Configuration": [[497, 3, 1, "", "determine_gui_port"], [497, 3, 1, "", "determine_log_level"], [497, 3, 1, "", "determine_server_port"], [497, 3, 1, "", "determine_url_prefix"], [497, 3, 1, "", "determine_values_from_environment"], [497, 3, 1, "", "dump_token_to_file"], [497, 3, 1, "", "get_command_line_args"], [497, 3, 1, "", "get_url"], [497, 4, 1, "", "global_config_directory"], [497, 3, 1, "", "is_port_taken"], [497, 3, 1, "", "set_up"]], "neural_compressor.ux.web.exceptions": [[498, 2, 1, "", "ServiceNotFoundException"]], "neural_compressor.ux.web.router": [[500, 2, 1, "", "DeferredRoutingDefinition"], [500, 2, 1, "", "DeferredSubprocessRoutingDefinition"], [500, 2, 1, "", "RealtimeRoutingDefinition"], [500, 2, 1, "", "Router"], [500, 2, 1, "", "RoutingDefinition"], [500, 1, 1, "", "find_pattern_in_graph"], [500, 1, 1, "", "get_model_graph"], [500, 1, 1, "", "get_system_info"]], "neural_compressor.ux.web.router.Router": [[500, 3, 1, "", "handle"]], "neural_compressor.ux.web.server": [[501, 1, 1, "", "allow_api_call"], [501, 1, 1, "", "block_iframe"], [501, 1, 1, "", "block_sniffing"], [501, 1, 1, "", "build_parameters"], [501, 1, 1, "", "disable_cache"], [501, 1, 1, "", "get_tls_args"], [501, 1, 1, "", "handle_api_call"], [501, 1, 1, "", "page_not_found"], [501, 1, 1, "", "require_api_token"], [501, 1, 1, "", "root"], [501, 1, 1, "", "run_server"], [501, 1, 1, "", "web_socket_publisher"]], "neural_compressor.ux.web.service": [[502, 0, 0, "-", "benchmark"], [503, 0, 0, "-", "history_snapshot_parser"], [505, 0, 0, "-", "model"], [506, 0, 0, "-", "optimization"], [507, 0, 0, "-", "profiling"], [508, 0, 0, "-", "request_data_processor"], [509, 0, 0, "-", "response_generator"], [510, 0, 0, "-", "workload"]], "neural_compressor.ux.web.service.benchmark": [[502, 2, 1, "", "BenchmarkService"]], "neural_compressor.ux.web.service.history_snapshot_parser": [[503, 2, 1, "", "HistorySnapshotParser"]], "neural_compressor.ux.web.service.history_snapshot_parser.HistorySnapshotParser": [[503, 3, 1, "", "extract_accuracy"], [503, 3, 1, "", "extract_performance"], [503, 3, 1, "", "parse_history_item"], [503, 3, 1, "", "parse_history_snapshot"]], "neural_compressor.ux.web.service.model": [[505, 2, 1, "", "ModelService"]], "neural_compressor.ux.web.service.model.ModelService": [[505, 3, 1, "", "get_model"]], "neural_compressor.ux.web.service.optimization": [[506, 2, 1, "", "OptimizationService"]], "neural_compressor.ux.web.service.profiling": [[507, 2, 1, "", "ProfilingService"]], "neural_compressor.ux.web.service.profiling.ProfilingService": [[507, 3, 1, "", "generate_csv"]], "neural_compressor.ux.web.service.request_data_processor": [[508, 2, 1, "", "RequestDataProcessor"]], "neural_compressor.ux.web.service.request_data_processor.RequestDataProcessor": [[508, 3, 1, "", "get_string_value"]], "neural_compressor.ux.web.service.response_generator": [[509, 2, 1, "", "ResponseGenerator"]], "neural_compressor.ux.web.service.response_generator.ResponseGenerator": [[509, 3, 1, "", "add_refresh"], [509, 3, 1, "", "from_exception"], [509, 3, 1, "", "get_status_code_for_exception"], [509, 3, 1, "", "serve_from_filesystem"]], "neural_compressor.ux.web.service.workload": [[510, 2, 1, "", "WorkloadService"]], "neural_compressor.ux.web.service.workload.WorkloadService": [[510, 3, 1, "", "get_code_template"], [510, 3, 1, "", "get_config"], [510, 3, 1, "", "get_output"]]}, "objtypes": {"0": "py:module", "1": "py:function", "2": "py:class", "3": "py:method", "4": "py:property", "5": "py:data", "6": "py:attribute", "7": "py:exception"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "function", "Python function"], "2": ["py", "class", "Python class"], "3": ["py", "method", "Python method"], "4": ["py", "property", "Python property"], "5": ["py", "data", "Python data"], "6": ["py", "attribute", "Python attribute"], "7": ["py", "exception", "Python exception"]}, "titleterms": {"644ec953a7dc_pruning_support": 0, "6ece06672ed3_v1_14": 1, "modul": [1, 5, 6, 8, 11, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95, 97, 98, 99, 100, 103, 105, 106, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 134, 135, 136, 137, 139, 140, 141, 142, 143, 145, 146, 147, 148, 151, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 174, 175, 178, 179, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 196, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 216, 218, 219, 220, 222, 223, 224, 225, 227, 228, 230, 231, 232, 234, 235, 236, 237, 238, 239, 240, 241, 242, 246, 247, 248, 250, 251, 252, 253, 256, 257, 258, 261, 262, 263, 264, 265, 266, 267, 269, 270, 272, 273, 274, 276, 277, 278, 280, 281, 282, 283, 284, 285, 286, 287, 288, 291, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 314, 316, 317, 318, 319, 320, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 338, 339, 340, 341, 342, 343, 344, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 377, 378, 379, 380, 382, 383, 384, 385, 388, 389, 390, 392, 393, 395, 396, 397, 398, 399, 401, 403, 404, 410, 411, 413, 414, 416, 418, 419, 420, 421, 423, 424, 425, 426, 427, 428, 429, 430, 432, 434, 435, 436, 437, 439, 442, 443, 445, 446, 448, 449, 451, 452, 453, 454, 455, 457, 458, 459, 460, 462, 463, 464, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 482, 483, 484, 485, 486, 487, 488, 490, 491, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 503, 505, 506, 507, 508, 509, 510, 539], "content": [1, 5, 6, 7, 8, 11, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95, 97, 98, 99, 100, 103, 105, 106, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 134, 135, 136, 137, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 151, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 344, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 388, 389, 390, 392, 393, 395, 396, 397, 398, 399, 401, 403, 404, 410, 411, 413, 414, 416, 418, 419, 420, 421, 423, 424, 425, 426, 427, 428, 429, 430, 432, 434, 435, 436, 437, 439, 440, 442, 443, 445, 446, 448, 449, 451, 452, 453, 454, 455, 457, 458, 459, 460, 462, 463, 464, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 482, 483, 484, 485, 486, 487, 488, 490, 491, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 503, 505, 506, 507, 508, 509, 510, 518, 539, 552, 562], "function": [1, 5, 6, 13, 32, 38, 39, 61, 62, 64, 106, 108, 135, 136, 137, 140, 141, 142, 144, 146, 148, 151, 158, 166, 168, 172, 175, 176, 177, 180, 182, 183, 184, 185, 187, 190, 192, 196, 204, 206, 210, 213, 214, 215, 217, 218, 219, 221, 222, 223, 224, 227, 228, 230, 231, 232, 233, 234, 242, 246, 247, 251, 256, 261, 262, 263, 265, 268, 269, 270, 272, 273, 274, 275, 276, 277, 281, 285, 287, 288, 291, 297, 298, 300, 301, 302, 303, 306, 314, 319, 322, 323, 325, 326, 328, 329, 331, 332, 342, 343, 344, 346, 351, 353, 354, 356, 358, 361, 362, 367, 370, 371, 372, 383, 393, 410, 414, 416, 427, 428, 429, 432, 435, 439, 443, 445, 448, 451, 453, 454, 457, 463, 464, 472, 475, 480, 484, 492, 495, 496, 500, 501, 569], "6f0d0f71d92e_v1_13": 2, "9e89549a08c8_v1_11": 3, "block_mask": 4, "env": 5, "neural_compressor": [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511], "adaptor": [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 519, 520], "class": [6, 8, 11, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95, 97, 98, 99, 100, 103, 105, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 134, 136, 137, 139, 142, 143, 144, 145, 146, 147, 148, 151, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 196, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 224, 225, 226, 227, 230, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 246, 248, 249, 250, 252, 253, 254, 255, 256, 257, 258, 261, 263, 264, 265, 266, 267, 268, 269, 272, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 291, 292, 293, 295, 296, 297, 298, 299, 300, 301, 304, 305, 306, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 323, 324, 325, 326, 327, 329, 330, 333, 334, 335, 336, 338, 339, 340, 341, 342, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 384, 385, 388, 389, 390, 392, 395, 396, 397, 398, 399, 401, 403, 404, 411, 413, 416, 418, 419, 420, 421, 423, 424, 425, 426, 430, 434, 436, 437, 440, 442, 446, 449, 452, 453, 455, 458, 459, 460, 462, 466, 467, 469, 470, 471, 472, 474, 476, 477, 478, 479, 482, 483, 485, 486, 487, 488, 490, 491, 492, 493, 494, 496, 497, 498, 500, 502, 503, 505, 506, 507, 508, 509, 510, 519, 539, 552], "subpackag": [7, 16, 82, 101, 102, 104, 152, 177, 215, 226, 243, 244, 249, 254, 268, 289, 310, 381, 386, 400, 405, 412, 440, 456, 465, 473, 499], "submodul": [7, 12, 16, 28, 45, 70, 82, 90, 96, 101, 102, 104, 107, 120, 132, 138, 144, 153, 160, 172, 176, 180, 187, 198, 210, 214, 217, 221, 226, 233, 243, 245, 249, 255, 259, 268, 275, 279, 289, 294, 310, 315, 323, 333, 337, 345, 357, 376, 381, 386, 387, 391, 394, 400, 402, 405, 406, 412, 415, 417, 422, 431, 433, 438, 440, 441, 444, 447, 450, 456, 461, 465, 473, 481, 489, 499, 504], "packag": [7, 28, 144, 160, 172, 176, 177, 180, 187, 198, 210, 214, 215, 217, 221, 226, 233, 249, 254, 255, 268, 275, 279, 294, 310, 315, 323, 333, 376, 381, 440, 552, 591, 593, 595, 596], "kera": [8, 423], "keras_util": [9, 10], "quantiz": [10, 37, 266, 303, 493, 515, 518, 535, 554, 568, 587, 598, 606, 607, 608, 615], "mxnet": [11, 565, 578, 607, 612, 615], "mxnet_util": [12, 13], "util": [13, 38, 135, 141, 224, 302, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 383, 427, 463, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 522, 527, 561], "onnxrt": [14, 415, 416, 565, 578, 612], "ox_util": [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38], "calibr": 15, "oper": [17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36], "activ": 17, "argmax": 18, "attent": 19, "binary_op": 20, "concat": 21, "conv": 22, "direct_q8": 23, "embed_layernorm": 24, "gather": 25, "gavgpool": 26, "gemm": 27, "lstm": 29, "matmul": 30, "maxpool": 31, "op": 32, "pad": 33, "pool": 34, "resiz": 35, "split": 36, "pytorch": [39, 328, 417, 418, 565, 569, 578, 607, 608, 611, 612, 615], "queri": [40, 519], "tensorflow": [41, 421, 422, 423, 424, 425, 426, 427, 565, 569, 578, 607, 608, 611, 612, 615], "tf_util": [42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135], "graph_convert": 42, "graph_converter_without_calib": 43, "graph_rewrit": [44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], "bf16": [44, 45, 523], "bf16_convert": [44, 136], "gener": [46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80], "convert_add_to_biasadd": 46, "convert_layout": 47, "convert_leakyrelu": 48, "convert_nan_to_random": 49, "convert_placeholder_to_const": 50, "dequantize_cast_optim": 51, "dilated_contract": 52, "dummy_biasadd": 53, "expanddims_optim": 54, "fetch_weight_from_reshap": 55, "fold_batch_norm": 56, "fold_const": 57, "fuse_biasadd_add": 58, "fuse_column_wise_mul": 59, "fuse_conv_with_math": 60, "fuse_decomposed_bn": 61, "fuse_decomposed_in": 62, "fuse_gelu": 63, "fuse_layer_norm": 64, "fuse_pad_with_conv": 65, "fuse_pad_with_fp32_conv": 66, "fuse_reshape_transpos": 67, "graph_cse_optim": 68, "grappler_pass": 69, "insert_print_nod": 71, "move_squeeze_after_relu": 72, "pre_optim": 73, "remove_training_nod": 74, "rename_batch_norm": 75, "split_shared_input": 76, "strip_equivalent_nod": 77, "strip_unused_nod": 78, "switch_optim": 79, "update_ent": 80, "graph_bas": 81, "int8": [83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 571, 615], "freeze_fake_qu": 83, "freeze_valu": 84, "freeze_value_without_calib": 85, "fuse_conv_redundant_dequant": 86, "fuse_conv_requant": 87, "fuse_matmul_redundant_dequant": 88, "fuse_matmul_requant": 89, "meta_op_optim": 91, "post_hostconst_convert": 92, "post_quantized_op_cs": 93, "rnn_convert": 94, "scale_propag": 95, "qdq": [96, 97, 98, 99, 113, 114, 115, 116, 117, 118, 119, 120, 121, 615], "insert_qdq_pattern": 97, "merge_duplicated_qdq": 98, "share_qdq_y_pattern": 99, "graph_util": 100, "quantize_graph": [102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128], "qat": [103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 615], "fake_quant": 103, "quantize_config": 105, "quantize_help": 106, "quantize_lay": [107, 108, 109, 110, 111], "optimize_lay": 108, "quantize_layer_add": 109, "quantize_layer_bas": 110, "quantize_layer_bn": 111, "quantize_wrapp": 112, "fuse_qdq_bn": 113, "fuse_qdq_concatv2": 114, "fuse_qdq_conv": 115, "fuse_qdq_deconv": 116, "fuse_qdq_in": 117, "fuse_qdq_matmul": 118, "fuse_qdq_pool": 119, "optimize_qdq": 121, "quantize_graph_bas": 122, "quantize_graph_bn": 123, "quantize_graph_concatv2": 124, "quantize_graph_conv": 125, "quantize_graph_for_intel_cpu": 126, "quantize_graph_matmul": 127, "quantize_graph_pool": 128, "quantize_graph_common": 129, "transform_graph": [130, 131, 132, 133, 134], "bias_correct": 130, "graph_transform_bas": 131, "insert_log": 133, "rerange_quantized_concat": 134, "torch_util": [136, 137, 138, 139, 140, 141, 192], "hawq_metr": 137, "onnx": [139, 518, 521, 525, 607, 615], "symbolic_trac": 140, "algorithm": [142, 143, 144, 145, 528], "fast_bias_correct": 143, "weight_correct": 145, "benchmark": [146, 184, 330, 331, 332, 333, 349, 502, 531, 538, 562, 563, 606], "conf": [147, 148, 149, 150], "config": [147, 151, 485, 532, 564, 565, 600], "dotdict": 148, "pythonic_config": 150, "contrib": [152, 153, 154, 155, 556], "strategi": [153, 154, 155, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 559, 560, 610, 613], "sigopt": [154, 610, 613], "tpe": [155, 613], "data": [156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 541], "dataload": [156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 186, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 351, 486, 542, 564, 565], "base_dataload": [156, 194], "default_dataload": [158, 196], "fetcher": [159, 197], "attribut": [160, 168, 177, 206, 215, 226, 254, 279, 395, 513], "mxnet_dataload": [161, 199], "onnxrt_dataload": [162, 200], "pytorch_dataload": [163, 201], "sampler": [164, 202], "tensorflow_dataload": [165, 203], "dataset": [166, 167, 168, 169, 170, 171, 172, 173, 204, 205, 206, 207, 208, 209, 210, 211, 352, 543, 562, 565, 574], "bert_dataset": [166, 204], "coco_dataset": [167, 205], "dummy_dataset": [169, 207], "dummy_dataset_v2": [170, 208], "imagenet_dataset": [171, 209], "style_transfer_dataset": [173, 211], "filter": [174, 175, 176, 212, 213, 214], "coco_filt": [174, 212], "transform": [178, 179, 180, 181, 182, 183, 216, 217, 218, 219, 367, 544, 574, 612], "coco_transform": 178, "imagenet_transform": [179, 216], "postprocess": [181, 191], "token": [182, 218], "experiment": [184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267], "common": [185, 186, 187, 188, 189, 190, 191, 192, 515, 537, 572], "criterion": [185, 540], "metric": [188, 227, 228, 229, 230, 231, 232, 233, 234, 269, 270, 271, 272, 273, 274, 275, 276, 358, 482, 524, 545, 574, 578], "model": [189, 278, 279, 280, 281, 282, 283, 284, 285, 286, 359, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 491, 505, 518, 546, 557, 562, 571, 580, 587, 615], "optim": [190, 360, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 506, 547, 562, 588, 598, 601], "compon": [193, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 548], "distil": [220, 549, 567, 568, 606, 615], "export": [221, 222, 223, 224, 571], "qlinear2qdq": 222, "torch2onnx": 223, "graph_optim": [225, 437, 438, 439, 488], "bleu": [227, 269, 539], "bleu_util": [228, 270], "coco_label_map": [229, 271], "coco_tool": [230, 272], "evaluate_squad": [231, 273], "f1": [232, 274], "mixed_precis": [235, 441, 442, 443, 490], "model_convers": 236, "na": [237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 516, 552, 606], "basic_na": 237, "dyna": 238, "dynast": [239, 240, 241, 242, 243, 244, 245, 246, 247, 248], "dynas_manag": 239, "dynas_predictor": 240, "dynas_search": 241, "dynas_util": 242, "supernetwork": [244, 245, 246, 247, 248], "machine_transl": [245, 246, 247, 248], "modules_supernetwork": 246, "transformer_interfac": 247, "transformer_supernetwork": 248, "nas_util": 251, "search_algorithm": 252, "prune": [253, 264, 299, 447, 448, 449, 492, 553, 562, 603, 604, 606, 615], "pruning_recip": [254, 255, 256, 257], "pattern": [255, 256, 257, 261, 291, 603, 604], "tile_pattern": 257, "pruning_v2": 258, "pytorch_prun": [259, 260, 261, 262, 263, 264, 265], "logger": [260, 290, 326, 475], "prune_util": 262, "pruner": [263, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302], "schedul": [265, 267, 301, 555, 603, 604], "mix_precis": 277, "base_model": 278, "keras_model": 280, "mxnet_model": 282, "nets_factori": 283, "onnx_model": 284, "tensorflow_model": 285, "torch_model": 286, "object": [287, 534, 600], "criteria": [288, 603, 604, 613], "pruner_legaci": [292, 293, 294, 295, 296, 297], "gradient_sensit": 292, "group_lasso": 293, "magnitud": 295, "pattern_lock": 296, "reg": 300, "auto_mixed_precis": 304, "basic": [305, 516, 613], "bayesian": [306, 613], "conserv": 307, "exhaust": [308, 613], "hawq_v2": [309, 613], "mse": [311, 613], "mse_v2": [312, 613], "random": [313, 613], "tuning_sampl": 316, "tuning_spac": 317, "tuning_struct": 318, "train": [319, 515, 536, 569, 607], "collect_layer_histogram": 320, "constant": 321, "create_obj_from_config": 322, "kl_diverg": 324, "load_huggingfac": 325, "option": [327, 562, 569, 576, 586], "ux": [330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510], "benchmark_model": 331, "execute_benchmark": 332, "config_gener": [334, 335, 336, 337, 338, 339, 340, 341], "benchmark_config_gener": 334, "graph_optimization_config_gener": 336, "mixed_precision_config_gener": 338, "profiling_config_gener": 339, "pruning_config_gener": 340, "quantization_config_gener": 341, "configuration_wizard": [342, 343, 344, 345, 346, 347], "configuration_pars": 342, "get_boundary_nod": 343, "get_configur": 344, "params_feed": 346, "pruning_config_pars": 347, "db_manag": [348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383], "db_model": [349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369], "benchmark_result": 350, "domain": [353, 411], "domain_flavour": 354, "exampl": [355, 515, 516, 519, 563, 564, 565, 567, 568, 569, 570, 571, 579, 580, 583, 587, 600, 601, 603, 604, 607, 611, 615], "framework": [356, 564, 565, 571, 573, 580, 606], "optimization_typ": 361, "precis": [362, 533, 579, 608], "profil": [363, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 507, 562], "profiling_result": 364, "project": [365, 562], "pruning_detail": 366, "tuning_detail": 368, "tuning_histori": [369, 453], "db_oper": [370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380], "benchmark_api_interfac": 370, "dataset_api_interfac": 371, "diagnosis_api_interfac": 373, "dictionaries_api_interfac": 374, "examples_api_interfac": 375, "model_api_interfac": 377, "optimization_api_interfac": 378, "profiling_api_interfac": 379, "project_api_interfac": 380, "params_interfac": 382, "diagnosi": [384, 385, 386, 387, 388, 389, 390, 391, 392, 562], "factori": [385, 436, 455, 460], "onnx_diagnosi": [387, 388], "onnxrt_diagnosi": 388, "op_detail": 389, "op_entri": 390, "tensorflow_diagnosi": [391, 392], "file_brows": [393, 394], "graph": [395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 562], "collaps": 396, "edg": 397, "graph_read": 399, "node": 401, "reader": [402, 403, 404], "onnxrt_read": 403, "tensorflow_read": 404, "jobs_manag": [406, 407, 408, 409], "jobs_control_queu": 407, "request": [409, 514], "manage_workspac": 410, "model_type_gett": 414, "repositori": 419, "shape": 420, "frozen_pb": 421, "meta_graph": 424, "saved_model": 426, "model_zoo": [428, 429, 430, 431, 432], "download_config": 428, "download_model": 429, "download": 430, "list_model": 432, "names_mapp": [433, 434], "execute_optim": 435, "optimize_model": [439, 443, 445, 448], "neural_coder_optim": [444, 445], "tune": [450, 451, 452, 494, 607, 613], "tune_model": 451, "execute_profil": 454, "profile_model": 457, "tensorflow_profil": [460, 461, 462, 463], "inc_bench": 464, "const": 466, "environ": [467, 518, 584], "except": [468, 498], "executor": 469, "expiring_dict": 470, "github_info": 471, "hw_info": 472, "json_seri": 474, "parser": 476, "proc": 477, "process": 478, "singleton": 479, "status_upd": 480, "templat": [481, 482, 483, 514], "workdir": 483, "workload": [485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 510], "evalu": [487, 569], "yaml_util": 495, "web": [496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510], "commun": 496, "configur": [497, 569, 573, 602, 606, 610, 614], "router": 500, "server": 501, "servic": [502, 503, 504, 505, 506, 507, 508, 509, 510], "history_snapshot_pars": 503, "request_data_processor": 508, "response_gener": 509, "version": 511, "intel": [512, 518, 562, 575, 584, 592, 598, 615, 616], "neural": [512, 515, 516, 518, 552, 562, 575, 581, 585, 587, 592, 598, 603, 604, 610, 616], "compressor": [512, 515, 518, 562, 575, 592, 598, 610, 616], "document": [512, 518, 616], "section": [512, 616], "contributor": [513, 514], "coven": [513, 514], "code": [513, 514, 516, 599], "conduct": [513, 514], "our": 513, "pledg": 513, "standard": 513, "respons": 513, "scope": [513, 604], "enforc": 513, "contribut": [514, 591, 595], "guidelin": 514, "pull": 514, "checklist": 514, "support": [514, 515, 516, 518, 519, 563, 564, 565, 567, 568, 569, 571, 573, 575, 578, 579, 580, 582, 583, 587, 588, 600, 601, 603, 606, 607, 611, 612, 614], "fx": 515, "introduct": [515, 516, 519, 562, 563, 564, 565, 567, 568, 569, 571, 573, 575, 578, 579, 580, 598, 600, 601, 603, 604, 606, 607, 610, 611, 612, 613, 614], "mode": [515, 615], "matrix": [515, 516, 519, 563, 564, 565, 567, 568, 569, 571, 573, 575, 578, 579, 580, 583, 600, 601, 603, 606, 607, 611, 614], "get": [515, 516, 518, 519, 563, 564, 565, 567, 568, 569, 573, 578, 579, 581, 592, 599, 600, 601, 603, 606, 607, 611, 614], "start": [515, 516, 518, 519, 562, 563, 564, 565, 567, 568, 569, 573, 578, 579, 581, 582, 586, 592, 600, 601, 603, 606, 607, 611, 614], "post": [515, 607], "static": [515, 607], "dynam": [515, 516, 607], "awar": [515, 607], "note": [515, 609], "detail": [515, 562, 604], "problem": 515, "architectur": [516, 518, 552, 566, 575], "search": [516, 552, 598], "api": [516, 518, 519, 529, 530, 548, 563, 564, 565, 567, 568, 569, 574, 578, 579, 581, 585, 599, 600, 601, 603, 606], "usag": [516, 587, 598, 611, 613], "1": [516, 562, 569, 572, 574, 576, 598, 615], "python": [516, 518, 558, 578, 581, 585, 586, 593, 596, 606], "yaml": [516, 564, 565, 569, 573, 614], "2": [516, 548, 562, 569, 572, 574, 576, 598, 615], "onli": 516, "advanc": 516, "custom": [516, 562, 578, 613], "secur": [517, 562, 569], "polici": [517, 613], "report": 517, "vulner": 517, "compressor1": 518, "instal": [518, 562, 576, 582, 584, 591, 592, 595], "prerequisit": [518, 576], "linux": [518, 576], "jupyterlab": [518, 592], "extens": [518, 581, 591, 592, 595, 598, 599, 615], "gui": 518, "system": [518, 562, 602], "requir": [518, 591, 595], "valid": [518, 615], "hardwar": [518, 615], "cpu": [518, 584, 615], "base": 518, "64": 518, "compat": 518, "processor": 518, "gpu": 518, "built": [518, 574, 578], "": [518, 599], "xe": 518, "multipl": [518, 600, 615], "vendor": 518, "through": [518, 615], "runtim": [518, 521, 607, 615], "softwar": 518, "select": [518, 592], "public": [518, 605], "event": [518, 605], "addit": 518, "hire": 518, "work": [519, 607], "flow": [519, 607], "background": [519, 598], "ad": 519, "new": [519, 562, 593, 596, 613], "backend": 519, "capabl": 519, "implement": 519, "onnxrtadaptor": 519, "torch": [522, 615], "convert": 523, "hawq": 524, "symbol": 526, "trace": 526, "user": [530, 564, 565, 569, 574, 606, 614], "face": [530, 574], "mix": [533, 579, 608], "basedataload": 542, "experiement": 548, "deprec": 548, "0": [548, 615], "mixedprecis": 550, "modelconvers": 551, "bench": [562, 585], "tabl": 562, "from": [562, 576], "binari": [562, 576], "sourc": [562, 576], "home": 562, "screen": 562, "creat": [562, 564], "predefin": 562, "displai": 562, "list": [562, 612], "remov": 562, "develop": [562, 591, 595], "tab": 562, "wizard": 562, "edit": 562, "entri": 562, "inform": [562, 577], "file": [564, 565, 573, 614], "specif": [564, 565], "design": [566, 613], "workflow": 566, "knowledg": [567, 615], "intermedi": 567, "layer": 567, "self": 567, "distribut": [569, 587], "infer": 569, "featur": [569, 573, 575, 587, 588, 592, 606, 607, 611, 614], "pure": 569, "defin": 569, "horovodrun": 569, "execut": 569, "fp32": 571, "appendix": 571, "frequent": 572, "ask": 572, "question": 572, "build": [572, 578], "issu": [572, 609], "3": [572, 576, 582, 598], "incompat": [574, 609], "chang": [574, 597, 599, 609], "between": 574, "v1": 574, "infrastructur": 575, "ai": 576, "kit": 576, "window": 576, "legal": 577, "licens": 577, "citat": 577, "trademark": 577, "singl": [578, 600], "multi": 578, "coder": [581, 585, 587, 598], "what": [581, 599], "do": 581, "we": 581, "offer": 581, "jupyt": [581, 582, 593, 596], "lab": [581, 582], "launcher": [581, 586], "contact": 581, "aw": 582, "amazon": 582, "sagemak": 582, "For": 582, "studio": 582, "notebook": 582, "instanc": 582, "guid": 582, "bigdl": 583, "nano": 583, "platform": [584, 610], "best": [584, 592], "perform": [584, 610], "set": [584, 598], "mkl": 584, "openmp": 584, "jemalloc": 584, "numa": 584, "control": 584, "variabl": 584, "frequenc": 584, "govern": 584, "enabl": [585, 592, 598], "superbench": 585, "quick": 586, "argument": 586, "pypi": 587, "v0": 589, "4": [589, 598, 605], "highlight": 589, "other": 589, "changelog": [590, 594], "neural_compressor_ext_lab": [591, 593], "uninstal": [591, 595], "auto": [592, 598, 608], "Or": 592, "let": 592, "u": 592, "help": 592, "you": 592, "pre": 592, "requisit": 592, "make": [593, 596, 599], "releas": [593, 596, 609], "manual": [593, 596], "npm": [593, 596], "autom": [593, 596], "publish": [593, 596], "conda": [593, 596], "forg": [593, 596], "neural_compressor_ext_lab_alibaba": [595, 596], "log": 597, "unreleas": 597, "vscode": 598, "open": 598, "icon": 598, "5": 598, "welcom": 599, "your": 599, "v": 599, "folder": 599, "setup": 599, "up": 599, "run": 599, "straight": 599, "awai": 599, "explor": 599, "test": 599, "go": 599, "further": 599, "orchestr": 601, "One": 601, "shot": 601, "network": [603, 604], "type": 604, "sparsiti": 604, "decai": 604, "regular": 604, "refer": [604, 607], "full": 605, "52": 605, "2022": 605, "34": 605, "2021": 605, "14": 605, "2018": 605, "2020": 605, "style": 606, "access": 606, "fundament": 607, "scheme": 607, "ipex": 607, "approach": 607, "accuraci": [607, 613], "turn": 608, "ON": 608, "dure": 608, "known": 609, "prepar": 610, "benefit": 610, "comparison": 610, "differ": 610, "tensorboard": 611, "space": 613, "exit": 613, "travers": 613, "logic": 613, "o0": 613, "10": 615, "12": 615, "ptq": 615, "11": 615, "7": 615}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 57}, "alltitles": {"644ec953a7dc_pruning_support": [[0, "module-644ec953a7dc_pruning_support"]], "6ece06672ed3_v1_14": [[1, "module-6ece06672ed3_v1_14"]], "Module Contents": [[1, "module-contents"], [5, "module-contents"], [6, "module-contents"], [8, "module-contents"], [11, "module-contents"], [13, "module-contents"], [14, "module-contents"], [15, "module-contents"], [17, "module-contents"], [18, "module-contents"], [19, "module-contents"], [20, "module-contents"], [21, "module-contents"], [22, "module-contents"], [23, "module-contents"], [24, "module-contents"], [25, "module-contents"], [26, "module-contents"], [27, "module-contents"], [29, "module-contents"], [30, "module-contents"], [31, "module-contents"], [32, "module-contents"], [33, "module-contents"], [34, "module-contents"], [35, "module-contents"], [36, "module-contents"], [37, "module-contents"], [38, "module-contents"], [39, "module-contents"], [40, "module-contents"], [41, "module-contents"], [42, "module-contents"], [43, "module-contents"], [44, "module-contents"], [46, "module-contents"], [47, "module-contents"], [48, "module-contents"], [49, "module-contents"], [50, "module-contents"], [51, "module-contents"], [52, "module-contents"], [53, "module-contents"], [54, "module-contents"], [55, "module-contents"], [56, "module-contents"], [57, "module-contents"], [58, "module-contents"], [59, "module-contents"], [60, "module-contents"], [61, "module-contents"], [62, "module-contents"], [63, "module-contents"], [64, "module-contents"], [65, "module-contents"], [66, "module-contents"], [67, "module-contents"], [68, "module-contents"], [69, "module-contents"], [71, "module-contents"], [72, "module-contents"], [73, "module-contents"], [74, "module-contents"], [75, "module-contents"], [76, "module-contents"], [77, "module-contents"], [78, "module-contents"], [79, "module-contents"], [80, "module-contents"], [81, "module-contents"], [83, "module-contents"], [84, "module-contents"], [85, "module-contents"], [86, "module-contents"], [87, "module-contents"], [88, "module-contents"], [89, "module-contents"], [91, "module-contents"], [92, "module-contents"], [93, "module-contents"], [94, "module-contents"], [95, "module-contents"], [97, "module-contents"], [98, "module-contents"], [99, "module-contents"], [100, "module-contents"], [103, "module-contents"], [105, "module-contents"], [106, "module-contents"], [108, "module-contents"], [109, "module-contents"], [110, "module-contents"], [111, "module-contents"], [112, "module-contents"], [113, "module-contents"], [114, "module-contents"], [115, "module-contents"], [116, "module-contents"], [117, "module-contents"], [118, "module-contents"], [119, "module-contents"], [121, "module-contents"], [122, "module-contents"], [123, "module-contents"], [124, "module-contents"], [125, "module-contents"], [126, "module-contents"], [127, "module-contents"], [128, "module-contents"], [129, "module-contents"], [130, "module-contents"], [131, "module-contents"], [133, "module-contents"], [134, "module-contents"], [135, "module-contents"], [136, "module-contents"], [137, "module-contents"], [139, "module-contents"], [140, "module-contents"], [141, "module-contents"], [142, "module-contents"], [143, "module-contents"], [145, "module-contents"], [146, "module-contents"], [147, "module-contents"], [148, "module-contents"], [151, "module-contents"], [154, "module-contents"], [155, "module-contents"], [156, "module-contents"], [157, "module-contents"], [158, "module-contents"], [159, "module-contents"], [161, "module-contents"], [162, "module-contents"], [163, "module-contents"], [164, "module-contents"], [165, "module-contents"], [166, "module-contents"], [167, "module-contents"], [168, "module-contents"], [169, "module-contents"], [170, "module-contents"], [171, "module-contents"], [173, "module-contents"], [174, "module-contents"], [175, "module-contents"], [178, "module-contents"], [179, "module-contents"], [181, "module-contents"], [182, "module-contents"], [183, "module-contents"], [184, "module-contents"], [185, "module-contents"], [186, "module-contents"], [188, "module-contents"], [189, "module-contents"], [190, "module-contents"], [191, "module-contents"], [192, "module-contents"], [193, "module-contents"], [194, "module-contents"], [196, "module-contents"], [197, "module-contents"], [199, "module-contents"], [200, "module-contents"], [201, "module-contents"], [202, "module-contents"], [203, "module-contents"], [204, "module-contents"], [205, "module-contents"], [206, "module-contents"], [207, "module-contents"], [208, "module-contents"], [209, "module-contents"], [211, "module-contents"], [212, "module-contents"], [213, "module-contents"], [216, "module-contents"], [218, "module-contents"], [219, "module-contents"], [220, "module-contents"], [222, "module-contents"], [223, "module-contents"], [224, "module-contents"], [225, "module-contents"], [227, "module-contents"], [228, "module-contents"], [230, "module-contents"], [231, "module-contents"], [232, "module-contents"], [234, "module-contents"], [235, "module-contents"], [236, "module-contents"], [237, "module-contents"], [238, "module-contents"], [239, "module-contents"], [240, "module-contents"], [241, "module-contents"], [242, "module-contents"], [246, "module-contents"], [247, "module-contents"], [248, "module-contents"], [250, "module-contents"], [251, "module-contents"], [252, "module-contents"], [253, "module-contents"], [256, "module-contents"], [257, "module-contents"], [258, "module-contents"], [261, "module-contents"], [262, "module-contents"], [263, "module-contents"], [264, "module-contents"], [265, "module-contents"], [266, "module-contents"], [267, "module-contents"], [269, "module-contents"], [270, "module-contents"], [272, "module-contents"], [273, "module-contents"], [274, "module-contents"], [276, "module-contents"], [277, "module-contents"], [278, "module-contents"], [280, "module-contents"], [281, "module-contents"], [282, "module-contents"], [283, "module-contents"], [284, "module-contents"], [285, "module-contents"], [286, "module-contents"], [287, "module-contents"], [288, "module-contents"], [291, "module-contents"], [292, "module-contents"], [293, "module-contents"], [295, "module-contents"], [296, "module-contents"], [297, "module-contents"], [298, "module-contents"], [299, "module-contents"], [300, "module-contents"], [301, "module-contents"], [302, "module-contents"], [303, "module-contents"], [304, "module-contents"], [305, "module-contents"], [306, "module-contents"], [307, "module-contents"], [308, "module-contents"], [309, "module-contents"], [311, "module-contents"], [312, "module-contents"], [313, "module-contents"], [314, "module-contents"], [316, "module-contents"], [317, "module-contents"], [318, "module-contents"], [319, "module-contents"], [320, "module-contents"], [322, "module-contents"], [324, "module-contents"], [325, "module-contents"], [326, "module-contents"], [327, "module-contents"], [328, "module-contents"], [329, "module-contents"], [330, "module-contents"], [331, "module-contents"], [332, "module-contents"], [334, "module-contents"], [335, "module-contents"], [336, "module-contents"], [338, "module-contents"], [339, "module-contents"], [340, "module-contents"], [341, "module-contents"], [342, "module-contents"], [343, "module-contents"], [344, "module-contents"], [346, "module-contents"], [347, "module-contents"], [348, "module-contents"], [349, "module-contents"], [350, "module-contents"], [351, "module-contents"], [352, "module-contents"], [353, "module-contents"], [354, "module-contents"], [355, "module-contents"], [356, "module-contents"], [358, "module-contents"], [359, "module-contents"], [360, "module-contents"], [361, "module-contents"], [362, "module-contents"], [363, "module-contents"], [364, "module-contents"], [365, "module-contents"], [366, "module-contents"], [367, "module-contents"], [368, "module-contents"], [369, "module-contents"], [370, "module-contents"], [371, "module-contents"], [372, "module-contents"], [373, "module-contents"], [374, "module-contents"], [375, "module-contents"], [377, "module-contents"], [378, "module-contents"], [379, "module-contents"], [380, "module-contents"], [382, "module-contents"], [383, "module-contents"], [384, "module-contents"], [385, "module-contents"], [388, "module-contents"], [389, "module-contents"], [390, "module-contents"], [392, "module-contents"], [393, "module-contents"], [395, "module-contents"], [396, "module-contents"], [397, "module-contents"], [398, "module-contents"], [399, "module-contents"], [401, "module-contents"], [403, "module-contents"], [404, "module-contents"], [410, "module-contents"], [411, "module-contents"], [413, "module-contents"], [414, "module-contents"], [416, "module-contents"], [418, "module-contents"], [419, "module-contents"], [420, "module-contents"], [421, "module-contents"], [423, "module-contents"], [424, "module-contents"], [425, "module-contents"], [426, "module-contents"], [427, "module-contents"], [428, "module-contents"], [429, "module-contents"], [430, "module-contents"], [432, "module-contents"], [434, "module-contents"], [435, "module-contents"], [436, "module-contents"], [437, "module-contents"], [439, "module-contents"], [442, "module-contents"], [443, "module-contents"], [445, "module-contents"], [446, "module-contents"], [448, "module-contents"], [449, "module-contents"], [451, "module-contents"], [452, "module-contents"], [453, "module-contents"], [454, "module-contents"], [455, "module-contents"], [457, "module-contents"], [458, "module-contents"], [459, "module-contents"], [460, "module-contents"], [462, "module-contents"], [463, "module-contents"], [464, "module-contents"], [466, "module-contents"], [467, "module-contents"], [468, "module-contents"], [469, "module-contents"], [470, "module-contents"], [471, "module-contents"], [472, "module-contents"], [474, "module-contents"], [475, "module-contents"], [476, "module-contents"], [477, "module-contents"], [478, "module-contents"], [479, "module-contents"], [480, "module-contents"], [482, "module-contents"], [483, "module-contents"], [484, "module-contents"], [485, "module-contents"], [486, "module-contents"], [487, "module-contents"], [488, "module-contents"], [490, "module-contents"], [491, "module-contents"], [492, "module-contents"], [493, "module-contents"], [494, "module-contents"], [495, "module-contents"], [496, "module-contents"], [497, "module-contents"], [498, "module-contents"], [500, "module-contents"], [501, "module-contents"], [502, "module-contents"], [503, "module-contents"], [505, "module-contents"], [506, "module-contents"], [507, "module-contents"], [508, "module-contents"], [509, "module-contents"], [510, "module-contents"], [539, "module-contents"]], "Functions": [[1, "functions"], [5, "functions"], [6, "functions"], [13, "functions"], [32, "functions"], [38, "functions"], [39, "functions"], [61, "functions"], [62, "functions"], [64, "functions"], [106, "functions"], [108, "functions"], [135, "functions"], [136, "functions"], [137, "functions"], [140, "functions"], [141, "functions"], [142, "functions"], [144, "functions"], [146, "functions"], [148, "functions"], [151, "functions"], [158, "functions"], [166, "functions"], [168, "functions"], [172, "functions"], [175, "functions"], [176, "functions"], [177, "functions"], [180, "functions"], [182, "functions"], [183, "functions"], [184, "functions"], [185, "functions"], [187, "functions"], [190, "functions"], [192, "functions"], [196, "functions"], [204, "functions"], [206, "functions"], [210, "functions"], [213, "functions"], [214, "functions"], [215, "functions"], [217, "functions"], [218, "functions"], [219, "functions"], [221, "functions"], [222, "functions"], [223, "functions"], [224, "functions"], [227, "functions"], [228, "functions"], [230, "functions"], [231, "functions"], [232, "functions"], [233, "functions"], [234, "functions"], [242, "functions"], [246, "functions"], [247, "functions"], [251, "functions"], [256, "functions"], [261, "functions"], [262, "functions"], [263, "functions"], [265, "functions"], [268, "functions"], [269, "functions"], [270, "functions"], [272, "functions"], [273, "functions"], [274, "functions"], [275, "functions"], [276, "functions"], [277, "functions"], [281, "functions"], [285, "functions"], [287, "functions"], [288, "functions"], [291, "functions"], [297, "functions"], [298, "functions"], [300, "functions"], [301, "functions"], [302, "functions"], [303, "functions"], [306, "functions"], [314, "functions"], [319, "functions"], [322, "functions"], [323, "functions"], [325, "functions"], [326, "functions"], [328, "functions"], [329, "functions"], [331, "functions"], [332, "functions"], [342, "functions"], [343, "functions"], [344, "functions"], [346, "functions"], [351, "functions"], [353, "functions"], [354, "functions"], [356, "functions"], [358, "functions"], [361, "functions"], [362, "functions"], [367, "functions"], [370, "functions"], [371, "functions"], [372, "functions"], [383, "functions"], [393, "functions"], [410, "functions"], [414, "functions"], [416, "functions"], [427, "functions"], [428, "functions"], [429, "functions"], [432, "functions"], [435, "functions"], [439, "functions"], [443, "functions"], [445, "functions"], [448, "functions"], [451, "functions"], [453, "functions"], [454, "functions"], [457, "functions"], [463, "functions"], [464, "functions"], [472, "functions"], [475, "functions"], [480, "functions"], [484, "functions"], [492, "functions"], [495, "functions"], [496, "functions"], [500, "functions"], [501, "functions"]], "6f0d0f71d92e_v1_13": [[2, "module-6f0d0f71d92e_v1_13"]], "9e89549a08c8_v1_11": [[3, "module-9e89549a08c8_v1_11"]], "block_mask": [[4, "module-block_mask"]], "env": [[5, "module-env"]], "neural_compressor.adaptor.adaptor": [[6, "module-neural_compressor.adaptor.adaptor"]], "Classes": [[6, "classes"], [8, "classes"], [11, "classes"], [13, "classes"], [14, "classes"], [15, "classes"], [17, "classes"], [18, "classes"], [19, "classes"], [20, "classes"], [21, "classes"], [22, "classes"], [23, "classes"], [24, "classes"], [25, "classes"], [26, "classes"], [27, "classes"], [29, "classes"], [30, "classes"], [31, "classes"], [32, "classes"], [33, "classes"], [34, "classes"], [35, "classes"], [36, "classes"], [37, "classes"], [38, "classes"], [39, "classes"], [40, "classes"], [41, "classes"], [42, "classes"], [43, "classes"], [44, "classes"], [46, "classes"], [47, "classes"], [48, "classes"], [49, "classes"], [50, "classes"], [51, "classes"], [52, "classes"], [53, "classes"], [54, "classes"], [55, "classes"], [56, "classes"], [57, "classes"], [58, "classes"], [59, "classes"], [60, "classes"], [61, "classes"], [62, "classes"], [63, "classes"], [64, "classes"], [65, "classes"], [66, "classes"], [67, "classes"], [68, "classes"], [69, "classes"], [71, "classes"], [72, "classes"], [73, "classes"], [74, "classes"], [75, "classes"], [76, "classes"], [77, "classes"], [78, "classes"], [79, "classes"], [80, "classes"], [81, "classes"], [83, "classes"], [84, "classes"], [85, "classes"], [86, "classes"], [87, "classes"], [88, "classes"], [89, "classes"], [91, "classes"], [92, "classes"], [93, "classes"], [94, "classes"], [95, "classes"], [97, "classes"], [98, "classes"], [99, "classes"], [100, "classes"], [103, "classes"], [105, "classes"], [109, "classes"], [110, "classes"], [111, "classes"], [112, "classes"], [113, "classes"], [114, "classes"], [115, "classes"], [116, "classes"], [117, "classes"], [118, "classes"], [119, "classes"], [121, "classes"], [122, "classes"], [123, "classes"], [124, "classes"], [125, "classes"], [126, "classes"], [127, "classes"], [128, "classes"], [129, "classes"], [130, "classes"], [131, "classes"], [133, "classes"], [134, "classes"], [136, "classes"], [137, "classes"], [139, "classes"], [142, "classes"], [143, "classes"], [144, "classes"], [145, "classes"], [146, "classes"], [147, "classes"], [148, "classes"], [151, "classes"], [154, "classes"], [155, "classes"], [156, "classes"], [157, "classes"], [158, "classes"], [159, "classes"], [160, "classes"], [161, "classes"], [162, "classes"], [163, "classes"], [164, "classes"], [165, "classes"], [166, "classes"], [167, "classes"], [168, "classes"], [169, "classes"], [170, "classes"], [171, "classes"], [172, "classes"], [173, "classes"], [174, "classes"], [175, "classes"], [176, "classes"], [177, "classes"], [178, "classes"], [179, "classes"], [180, "classes"], [181, "classes"], [182, "classes"], [183, "classes"], [184, "classes"], [185, "classes"], [186, "classes"], [187, "classes"], [188, "classes"], [189, "classes"], [190, "classes"], [191, "classes"], [193, "classes"], [194, "classes"], [196, "classes"], [197, "classes"], [199, "classes"], [200, "classes"], [201, "classes"], [202, "classes"], [203, "classes"], [204, "classes"], [205, "classes"], [206, "classes"], [207, "classes"], [208, "classes"], [209, "classes"], [210, "classes"], [211, "classes"], [212, "classes"], [213, "classes"], [214, "classes"], [215, "classes"], [216, "classes"], [217, "classes"], [218, "classes"], [219, "classes"], [220, "classes"], [224, "classes"], [225, "classes"], [226, "classes"], [227, "classes"], [230, "classes"], [233, "classes"], [234, "classes"], [235, "classes"], [236, "classes"], [237, "classes"], [238, "classes"], [239, "classes"], [240, "classes"], [241, "classes"], [242, "classes"], [246, "classes"], [248, "classes"], [249, "classes"], [250, "classes"], [252, "classes"], [253, "classes"], [254, "classes"], [255, "classes"], [256, "classes"], [257, "classes"], [258, "classes"], [261, "classes"], [263, "classes"], [264, "classes"], [265, "classes"], [266, "classes"], [267, "classes"], [268, "classes"], [269, "classes"], [272, "classes"], [275, "classes"], [276, "classes"], [278, "classes"], [279, "classes"], [280, "classes"], [281, "classes"], [282, "classes"], [283, "classes"], [284, "classes"], [285, "classes"], [286, "classes"], [287, "classes"], [288, "classes"], [291, "classes"], [292, "classes"], [293, "classes"], [295, "classes"], [296, "classes"], [297, "classes"], [298, "classes"], [299, "classes"], [300, "classes"], [301, "classes"], [304, "classes"], [305, "classes"], [306, "classes"], [307, "classes"], [308, "classes"], [309, "classes"], [311, "classes"], [312, "classes"], [313, "classes"], [314, "classes"], [315, "classes"], [316, "classes"], [317, "classes"], [318, "classes"], [319, "classes"], [320, "classes"], [323, "classes"], [324, "classes"], [325, "classes"], [326, "classes"], [327, "classes"], [329, "classes"], [330, "classes"], [333, "classes"], [334, "classes"], [335, "classes"], [336, "classes"], [338, "classes"], [339, "classes"], [340, "classes"], [341, "classes"], [342, "classes"], [346, "classes"], [347, "classes"], [348, "classes"], [349, "classes"], [350, "classes"], [351, "classes"], [352, "classes"], [353, "classes"], [354, "classes"], [355, "classes"], [356, "classes"], [358, "classes"], [359, "classes"], [360, "classes"], [361, "classes"], [362, "classes"], [363, "classes"], [364, "classes"], [365, "classes"], [366, "classes"], [367, "classes"], [368, "classes"], [369, "classes"], [370, "classes"], [371, "classes"], [373, "classes"], [374, "classes"], [375, "classes"], [376, "classes"], [377, "classes"], [378, "classes"], [379, "classes"], [380, "classes"], [381, "classes"], [382, "classes"], [384, "classes"], [385, "classes"], [388, "classes"], [389, "classes"], [390, "classes"], [392, "classes"], [395, "classes"], [396, "classes"], [397, "classes"], [398, "classes"], [399, "classes"], [401, "classes"], [403, "classes"], [404, "classes"], [411, "classes"], [413, "classes"], [416, "classes"], [418, "classes"], [419, "classes"], [420, "classes"], [421, "classes"], [423, "classes"], [424, "classes"], [425, "classes"], [426, "classes"], [430, "classes"], [434, "classes"], [436, "classes"], [437, "classes"], [440, "classes"], [442, "classes"], [446, "classes"], [449, "classes"], [452, "classes"], [453, "classes"], [455, "classes"], [458, "classes"], [459, "classes"], [460, "classes"], [462, "classes"], [466, "classes"], [467, "classes"], [469, "classes"], [470, "classes"], [471, "classes"], [472, "classes"], [474, "classes"], [476, "classes"], [477, "classes"], [478, "classes"], [479, "classes"], [482, "classes"], [483, "classes"], [485, "classes"], [486, "classes"], [487, "classes"], [488, "classes"], [490, "classes"], [491, "classes"], [492, "classes"], [493, "classes"], [494, "classes"], [496, "classes"], [497, "classes"], [498, "classes"], [500, "classes"], [502, "classes"], [503, "classes"], [505, "classes"], [506, "classes"], [507, "classes"], [508, "classes"], [509, "classes"], [510, "classes"], [539, "classes"], [552, "classes"]], "neural_compressor.adaptor": [[7, "module-neural_compressor.adaptor"]], "Subpackages": [[7, "subpackages"], [16, "subpackages"], [82, "subpackages"], [101, "subpackages"], [102, "subpackages"], [104, "subpackages"], [152, "subpackages"], [177, "subpackages"], [215, "subpackages"], [226, "subpackages"], [243, "subpackages"], [244, "subpackages"], [249, "subpackages"], [254, "subpackages"], [268, "subpackages"], [289, "subpackages"], [310, "subpackages"], [381, "subpackages"], [386, "subpackages"], [400, "subpackages"], [405, "subpackages"], [412, "subpackages"], [440, "subpackages"], [456, "subpackages"], [465, "subpackages"], [473, "subpackages"], [499, "subpackages"]], "Submodules": [[7, "submodules"], [12, "submodules"], [16, "submodules"], [28, "submodules"], [45, "submodules"], [70, "submodules"], [82, "submodules"], [90, "submodules"], [96, "submodules"], [101, "submodules"], [102, "submodules"], [104, "submodules"], [107, "submodules"], [120, "submodules"], [132, "submodules"], [138, "submodules"], [144, "submodules"], [153, "submodules"], [160, "submodules"], [172, "submodules"], [176, "submodules"], [180, "submodules"], [187, "submodules"], [198, "submodules"], [210, "submodules"], [214, "submodules"], [217, "submodules"], [221, "submodules"], [226, "submodules"], [233, "submodules"], [243, "submodules"], [245, "submodules"], [249, "submodules"], [255, "submodules"], [259, "submodules"], [268, "submodules"], [275, "submodules"], [279, "submodules"], [289, "submodules"], [294, "submodules"], [310, "submodules"], [315, "submodules"], [323, "submodules"], [333, "submodules"], [337, "submodules"], [345, "submodules"], [357, "submodules"], [376, "submodules"], [381, "submodules"], [386, "submodules"], [387, "submodules"], [391, "submodules"], [394, "submodules"], [400, "submodules"], [402, "submodules"], [405, "submodules"], [406, "submodules"], [412, "submodules"], [415, "submodules"], [417, "submodules"], [422, "submodules"], [431, "submodules"], [433, "submodules"], [438, "submodules"], [440, "submodules"], [441, "submodules"], [444, "submodules"], [447, "submodules"], [450, "submodules"], [456, "submodules"], [461, "submodules"], [465, "submodules"], [473, "submodules"], [481, "submodules"], [489, "submodules"], [499, "submodules"], [504, "submodules"]], "Package Contents": [[7, "package-contents"], [28, "package-contents"], [144, "package-contents"], [160, "package-contents"], [172, "package-contents"], [176, "package-contents"], [177, "package-contents"], [180, "package-contents"], [187, "package-contents"], [198, "package-contents"], [210, "package-contents"], [214, "package-contents"], [215, "package-contents"], [217, "package-contents"], [221, "package-contents"], [226, "package-contents"], [233, "package-contents"], [249, "package-contents"], [254, "package-contents"], [255, "package-contents"], [268, "package-contents"], [275, "package-contents"], [279, "package-contents"], [294, "package-contents"], [310, "package-contents"], [315, "package-contents"], [323, "package-contents"], [333, "package-contents"], [376, "package-contents"], [381, "package-contents"], [440, "package-contents"], [552, "package-contents"]], "neural_compressor.adaptor.keras": [[8, "module-neural_compressor.adaptor.keras"]], "neural_compressor.adaptor.keras_utils": [[9, "module-neural_compressor.adaptor.keras_utils"]], "neural_compressor.adaptor.keras_utils.quantizer": [[10, "module-neural_compressor.adaptor.keras_utils.quantizer"]], "neural_compressor.adaptor.mxnet": [[11, "module-neural_compressor.adaptor.mxnet"]], "neural_compressor.adaptor.mxnet_utils": [[12, "module-neural_compressor.adaptor.mxnet_utils"]], "neural_compressor.adaptor.mxnet_utils.util": [[13, "module-neural_compressor.adaptor.mxnet_utils.util"]], "neural_compressor.adaptor.onnxrt": [[14, "module-neural_compressor.adaptor.onnxrt"]], "neural_compressor.adaptor.ox_utils.calibration": [[15, "module-neural_compressor.adaptor.ox_utils.calibration"]], "neural_compressor.adaptor.ox_utils": [[16, "module-neural_compressor.adaptor.ox_utils"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[17, "module-neural_compressor.adaptor.ox_utils.operators.activation"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[18, "module-neural_compressor.adaptor.ox_utils.operators.argmax"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[19, "module-neural_compressor.adaptor.ox_utils.operators.attention"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[20, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[21, "module-neural_compressor.adaptor.ox_utils.operators.concat"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[22, "module-neural_compressor.adaptor.ox_utils.operators.conv"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[23, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[24, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[25, "module-neural_compressor.adaptor.ox_utils.operators.gather"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[26, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[27, "module-neural_compressor.adaptor.ox_utils.operators.gemm"]], "neural_compressor.adaptor.ox_utils.operators": [[28, "module-neural_compressor.adaptor.ox_utils.operators"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[29, "module-neural_compressor.adaptor.ox_utils.operators.lstm"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[30, "module-neural_compressor.adaptor.ox_utils.operators.matmul"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[31, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[32, "module-neural_compressor.adaptor.ox_utils.operators.ops"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[33, "module-neural_compressor.adaptor.ox_utils.operators.pad"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[34, "module-neural_compressor.adaptor.ox_utils.operators.pooling"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[35, "module-neural_compressor.adaptor.ox_utils.operators.resize"]], "neural_compressor.adaptor.ox_utils.operators.split": [[36, "module-neural_compressor.adaptor.ox_utils.operators.split"]], "neural_compressor.adaptor.ox_utils.quantizer": [[37, "module-neural_compressor.adaptor.ox_utils.quantizer"]], "neural_compressor.adaptor.ox_utils.util": [[38, "module-neural_compressor.adaptor.ox_utils.util"]], "neural_compressor.adaptor.pytorch": [[39, "module-neural_compressor.adaptor.pytorch"]], "neural_compressor.adaptor.query": [[40, "module-neural_compressor.adaptor.query"]], "neural_compressor.adaptor.tensorflow": [[41, "module-neural_compressor.adaptor.tensorflow"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[42, "module-neural_compressor.adaptor.tf_utils.graph_converter"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[43, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[44, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[45, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[46, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[47, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[48, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[49, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[50, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer": [[51, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[52, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[53, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[54, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[55, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[56, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[57, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[58, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[59, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[60, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[61, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[62, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[63, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[64, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[65, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[66, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[67, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[68, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[69, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[70, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[71, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[72, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[73, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[74, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[75, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter": [[80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[96, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[97, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[98, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[99, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"]], "neural_compressor.adaptor.tf_utils.graph_util": [[100, "module-neural_compressor.adaptor.tf_utils.graph_util"]], "neural_compressor.adaptor.tf_utils": [[101, "module-neural_compressor.adaptor.tf_utils"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[102, "module-neural_compressor.adaptor.tf_utils.quantize_graph"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[103, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[104, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[105, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[106, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[107, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[108, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[109, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[110, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[111, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[112, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[113, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[114, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[115, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[116, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[117, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[118, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[119, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[120, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[121, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[122, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[123, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[124, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[125, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[126, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[127, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[128, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[129, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[130, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[131, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[132, "module-neural_compressor.adaptor.tf_utils.transform_graph"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[133, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[134, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"]], "neural_compressor.adaptor.tf_utils.util": [[135, "module-neural_compressor.adaptor.tf_utils.util"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[136, "module-neural_compressor.adaptor.torch_utils.bf16_convert"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[137, "module-neural_compressor.adaptor.torch_utils.hawq_metric"]], "neural_compressor.adaptor.torch_utils": [[138, "module-neural_compressor.adaptor.torch_utils"]], "neural_compressor.adaptor.torch_utils.onnx": [[139, "module-neural_compressor.adaptor.torch_utils.onnx"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[140, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"]], "neural_compressor.adaptor.torch_utils.util": [[141, "module-neural_compressor.adaptor.torch_utils.util"]], "neural_compressor.algorithm.algorithm": [[142, "module-neural_compressor.algorithm.algorithm"]], "neural_compressor.algorithm.fast_bias_correction": [[143, "module-neural_compressor.algorithm.fast_bias_correction"]], "neural_compressor.algorithm": [[144, "module-neural_compressor.algorithm"]], "neural_compressor.algorithm.weight_correction": [[145, "module-neural_compressor.algorithm.weight_correction"]], "neural_compressor.benchmark": [[146, "module-neural_compressor.benchmark"]], "neural_compressor.conf.config": [[147, "module-neural_compressor.conf.config"]], "neural_compressor.conf.dotdict": [[148, "module-neural_compressor.conf.dotdict"]], "neural_compressor.conf": [[149, "module-neural_compressor.conf"]], "neural_compressor.conf.pythonic_config": [[150, "module-neural_compressor.conf.pythonic_config"]], "neural_compressor.config": [[151, "module-neural_compressor.config"]], "neural_compressor.contrib": [[152, "module-neural_compressor.contrib"]], "neural_compressor.contrib.strategy": [[153, "module-neural_compressor.contrib.strategy"]], "neural_compressor.contrib.strategy.sigopt": [[154, "module-neural_compressor.contrib.strategy.sigopt"]], "neural_compressor.contrib.strategy.tpe": [[155, "module-neural_compressor.contrib.strategy.tpe"]], "neural_compressor.data.dataloaders.base_dataloader": [[156, "module-neural_compressor.data.dataloaders.base_dataloader"]], "neural_compressor.data.dataloaders.dataloader": [[157, "module-neural_compressor.data.dataloaders.dataloader"]], "neural_compressor.data.dataloaders.default_dataloader": [[158, "module-neural_compressor.data.dataloaders.default_dataloader"]], "neural_compressor.data.dataloaders.fetcher": [[159, "module-neural_compressor.data.dataloaders.fetcher"]], "neural_compressor.data.dataloaders": [[160, "module-neural_compressor.data.dataloaders"]], "Attributes": [[160, "attributes"], [168, "attributes"], [177, "attributes"], [206, "attributes"], [215, "attributes"], [226, "attributes"], [254, "attributes"], [279, "attributes"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[161, "module-neural_compressor.data.dataloaders.mxnet_dataloader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[162, "module-neural_compressor.data.dataloaders.onnxrt_dataloader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[163, "module-neural_compressor.data.dataloaders.pytorch_dataloader"]], "neural_compressor.data.dataloaders.sampler": [[164, "module-neural_compressor.data.dataloaders.sampler"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[165, "module-neural_compressor.data.dataloaders.tensorflow_dataloader"]], "neural_compressor.data.datasets.bert_dataset": [[166, "module-neural_compressor.data.datasets.bert_dataset"]], "neural_compressor.data.datasets.coco_dataset": [[167, "module-neural_compressor.data.datasets.coco_dataset"]], "neural_compressor.data.datasets.dataset": [[168, "module-neural_compressor.data.datasets.dataset"]], "neural_compressor.data.datasets.dummy_dataset": [[169, "module-neural_compressor.data.datasets.dummy_dataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[170, "module-neural_compressor.data.datasets.dummy_dataset_v2"]], "neural_compressor.data.datasets.imagenet_dataset": [[171, "module-neural_compressor.data.datasets.imagenet_dataset"]], "neural_compressor.data.datasets": [[172, "module-neural_compressor.data.datasets"]], "neural_compressor.data.datasets.style_transfer_dataset": [[173, "module-neural_compressor.data.datasets.style_transfer_dataset"]], "neural_compressor.data.filters.coco_filter": [[174, "module-neural_compressor.data.filters.coco_filter"]], "neural_compressor.data.filters.filter": [[175, "module-neural_compressor.data.filters.filter"]], "neural_compressor.data.filters": [[176, "module-neural_compressor.data.filters"]], "neural_compressor.data": [[177, "module-neural_compressor.data"]], "neural_compressor.data.transforms.coco_transform": [[178, "module-neural_compressor.data.transforms.coco_transform"]], "neural_compressor.data.transforms.imagenet_transform": [[179, "module-neural_compressor.data.transforms.imagenet_transform"]], "neural_compressor.data.transforms": [[180, "module-neural_compressor.data.transforms"]], "neural_compressor.data.transforms.postprocess": [[181, "module-neural_compressor.data.transforms.postprocess"]], "neural_compressor.data.transforms.tokenization": [[182, "module-neural_compressor.data.transforms.tokenization"]], "neural_compressor.data.transforms.transform": [[183, "module-neural_compressor.data.transforms.transform"]], "neural_compressor.experimental.benchmark": [[184, "module-neural_compressor.experimental.benchmark"]], "neural_compressor.experimental.common.criterion": [[185, "module-neural_compressor.experimental.common.criterion"]], "neural_compressor.experimental.common.dataloader": [[186, "module-neural_compressor.experimental.common.dataloader"]], "neural_compressor.experimental.common": [[187, "module-neural_compressor.experimental.common"]], "neural_compressor.experimental.common.metric": [[188, "module-neural_compressor.experimental.common.metric"]], "neural_compressor.experimental.common.model": [[189, "module-neural_compressor.experimental.common.model"]], "neural_compressor.experimental.common.optimizer": [[190, "module-neural_compressor.experimental.common.optimizer"]], "neural_compressor.experimental.common.postprocess": [[191, "module-neural_compressor.experimental.common.postprocess"]], "neural_compressor.experimental.common.torch_utils": [[192, "module-neural_compressor.experimental.common.torch_utils"]], "neural_compressor.experimental.component": [[193, "module-neural_compressor.experimental.component"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[194, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"]], "neural_compressor.experimental.data.dataloaders.dataloader": [[195, "module-neural_compressor.experimental.data.dataloaders.dataloader"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[196, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[197, "module-neural_compressor.experimental.data.dataloaders.fetcher"]], "neural_compressor.experimental.data.dataloaders": [[198, "module-neural_compressor.experimental.data.dataloaders"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[199, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[200, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[201, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"]], "neural_compressor.experimental.data.dataloaders.sampler": [[202, "module-neural_compressor.experimental.data.dataloaders.sampler"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[203, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[204, "module-neural_compressor.experimental.data.datasets.bert_dataset"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[205, "module-neural_compressor.experimental.data.datasets.coco_dataset"]], "neural_compressor.experimental.data.datasets.dataset": [[206, "module-neural_compressor.experimental.data.datasets.dataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[207, "module-neural_compressor.experimental.data.datasets.dummy_dataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[208, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[209, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"]], "neural_compressor.experimental.data.datasets": [[210, "module-neural_compressor.experimental.data.datasets"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[211, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"]], "neural_compressor.experimental.data.filters.coco_filter": [[212, "module-neural_compressor.experimental.data.filters.coco_filter"]], "neural_compressor.experimental.data.filters.filter": [[213, "module-neural_compressor.experimental.data.filters.filter"]], "neural_compressor.experimental.data.filters": [[214, "module-neural_compressor.experimental.data.filters"]], "neural_compressor.experimental.data": [[215, "module-neural_compressor.experimental.data"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[216, "module-neural_compressor.experimental.data.transforms.imagenet_transform"]], "neural_compressor.experimental.data.transforms": [[217, "module-neural_compressor.experimental.data.transforms"]], "neural_compressor.experimental.data.transforms.tokenization": [[218, "module-neural_compressor.experimental.data.transforms.tokenization"]], "neural_compressor.experimental.data.transforms.transform": [[219, "module-neural_compressor.experimental.data.transforms.transform"]], "neural_compressor.experimental.distillation": [[220, "module-neural_compressor.experimental.distillation"]], "neural_compressor.experimental.export": [[221, "module-neural_compressor.experimental.export"]], "neural_compressor.experimental.export.qlinear2qdq": [[222, "module-neural_compressor.experimental.export.qlinear2qdq"]], "neural_compressor.experimental.export.torch2onnx": [[223, "module-neural_compressor.experimental.export.torch2onnx"]], "neural_compressor.experimental.export.utils": [[224, "module-neural_compressor.experimental.export.utils"]], "neural_compressor.experimental.graph_optimization": [[225, "module-neural_compressor.experimental.graph_optimization"]], "neural_compressor.experimental": [[226, "module-neural_compressor.experimental"]], "neural_compressor.experimental.metric.bleu": [[227, "module-neural_compressor.experimental.metric.bleu"]], "neural_compressor.experimental.metric.bleu_util": [[228, "module-neural_compressor.experimental.metric.bleu_util"]], "neural_compressor.experimental.metric.coco_label_map": [[229, "module-neural_compressor.experimental.metric.coco_label_map"]], "neural_compressor.experimental.metric.coco_tools": [[230, "module-neural_compressor.experimental.metric.coco_tools"]], "neural_compressor.experimental.metric.evaluate_squad": [[231, "module-neural_compressor.experimental.metric.evaluate_squad"]], "neural_compressor.experimental.metric.f1": [[232, "module-neural_compressor.experimental.metric.f1"]], "neural_compressor.experimental.metric": [[233, "module-neural_compressor.experimental.metric"]], "neural_compressor.experimental.metric.metric": [[234, "module-neural_compressor.experimental.metric.metric"]], "neural_compressor.experimental.mixed_precision": [[235, "module-neural_compressor.experimental.mixed_precision"]], "neural_compressor.experimental.model_conversion": [[236, "module-neural_compressor.experimental.model_conversion"]], "neural_compressor.experimental.nas.basic_nas": [[237, "module-neural_compressor.experimental.nas.basic_nas"]], "neural_compressor.experimental.nas.dynas": [[238, "module-neural_compressor.experimental.nas.dynas"]], "neural_compressor.experimental.nas.dynast.dynas_manager": [[239, "module-neural_compressor.experimental.nas.dynast.dynas_manager"]], "neural_compressor.experimental.nas.dynast.dynas_predictor": [[240, "module-neural_compressor.experimental.nas.dynast.dynas_predictor"]], "neural_compressor.experimental.nas.dynast.dynas_search": [[241, "module-neural_compressor.experimental.nas.dynast.dynas_search"]], "neural_compressor.experimental.nas.dynast.dynas_utils": [[242, "module-neural_compressor.experimental.nas.dynast.dynas_utils"]], "neural_compressor.experimental.nas.dynast": [[243, "module-neural_compressor.experimental.nas.dynast"]], "neural_compressor.experimental.nas.dynast.supernetwork": [[244, "module-neural_compressor.experimental.nas.dynast.supernetwork"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation": [[245, "module-neural_compressor.experimental.nas.dynast.supernetwork.machine_translation"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork": [[246, "module-neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface": [[247, "module-neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork": [[248, "module-neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork"]], "neural_compressor.experimental.nas": [[249, "module-neural_compressor.experimental.nas"]], "neural_compressor.experimental.nas.nas": [[250, "module-neural_compressor.experimental.nas.nas"]], "neural_compressor.experimental.nas.nas_utils": [[251, "module-neural_compressor.experimental.nas.nas_utils"]], "neural_compressor.experimental.nas.search_algorithms": [[252, "module-neural_compressor.experimental.nas.search_algorithms"]], "neural_compressor.experimental.pruning": [[253, "module-neural_compressor.experimental.pruning"]], "neural_compressor.experimental.pruning_recipes": [[254, "module-neural_compressor.experimental.pruning_recipes"]], "neural_compressor.experimental.pruning_recipes.patterns": [[255, "module-neural_compressor.experimental.pruning_recipes.patterns"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[256, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[257, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"]], "neural_compressor.experimental.pruning_v2": [[258, "module-neural_compressor.experimental.pruning_v2"]], "neural_compressor.experimental.pytorch_pruner": [[259, "module-neural_compressor.experimental.pytorch_pruner"]], "neural_compressor.experimental.pytorch_pruner.logger": [[260, "module-neural_compressor.experimental.pytorch_pruner.logger"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[261, "module-neural_compressor.experimental.pytorch_pruner.patterns"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[262, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[263, "module-neural_compressor.experimental.pytorch_pruner.pruner"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[264, "module-neural_compressor.experimental.pytorch_pruner.pruning"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[265, "module-neural_compressor.experimental.pytorch_pruner.scheduler"]], "neural_compressor.experimental.quantization": [[266, "module-neural_compressor.experimental.quantization"]], "neural_compressor.experimental.scheduler": [[267, "module-neural_compressor.experimental.scheduler"]], "neural_compressor": [[268, "module-neural_compressor"]], "neural_compressor.metric.bleu": [[269, "module-neural_compressor.metric.bleu"]], "neural_compressor.metric.bleu_util": [[270, "module-neural_compressor.metric.bleu_util"]], "neural_compressor.metric.coco_label_map": [[271, "module-neural_compressor.metric.coco_label_map"]], "neural_compressor.metric.coco_tools": [[272, "module-neural_compressor.metric.coco_tools"]], "neural_compressor.metric.evaluate_squad": [[273, "module-neural_compressor.metric.evaluate_squad"]], "neural_compressor.metric.f1": [[274, "module-neural_compressor.metric.f1"]], "neural_compressor.metric": [[275, "module-neural_compressor.metric"]], "neural_compressor.metric.metric": [[276, "module-neural_compressor.metric.metric"]], "neural_compressor.mix_precision": [[277, "module-neural_compressor.mix_precision"]], "neural_compressor.model.base_model": [[278, "module-neural_compressor.model.base_model"]], "neural_compressor.model": [[279, "module-neural_compressor.model"]], "neural_compressor.model.keras_model": [[280, "module-neural_compressor.model.keras_model"]], "neural_compressor.model.model": [[281, "module-neural_compressor.model.model"]], "neural_compressor.model.mxnet_model": [[282, "module-neural_compressor.model.mxnet_model"]], "neural_compressor.model.nets_factory": [[283, "module-neural_compressor.model.nets_factory"]], "neural_compressor.model.onnx_model": [[284, "module-neural_compressor.model.onnx_model"]], "neural_compressor.model.tensorflow_model": [[285, "module-neural_compressor.model.tensorflow_model"]], "neural_compressor.model.torch_model": [[286, "module-neural_compressor.model.torch_model"]], "neural_compressor.objective": [[287, "module-neural_compressor.objective"]], "neural_compressor.pruner.criteria": [[288, "module-neural_compressor.pruner.criteria"]], "neural_compressor.pruner": [[289, "module-neural_compressor.pruner"]], "neural_compressor.pruner.logger": [[290, "module-neural_compressor.pruner.logger"]], "neural_compressor.pruner.patterns": [[291, "module-neural_compressor.pruner.patterns"]], "neural_compressor.pruner.pruner_legacy.gradient_sensitivity": [[292, "module-neural_compressor.pruner.pruner_legacy.gradient_sensitivity"]], "neural_compressor.pruner.pruner_legacy.group_lasso": [[293, "module-neural_compressor.pruner.pruner_legacy.group_lasso"]], "neural_compressor.pruner.pruner_legacy": [[294, "module-neural_compressor.pruner.pruner_legacy"]], "neural_compressor.pruner.pruner_legacy.magnitude": [[295, "module-neural_compressor.pruner.pruner_legacy.magnitude"]], "neural_compressor.pruner.pruner_legacy.pattern_lock": [[296, "module-neural_compressor.pruner.pruner_legacy.pattern_lock"]], "neural_compressor.pruner.pruner_legacy.pruner": [[297, "module-neural_compressor.pruner.pruner_legacy.pruner"]], "neural_compressor.pruner.pruners": [[298, "module-neural_compressor.pruner.pruners"]], "neural_compressor.pruner.pruning": [[299, "module-neural_compressor.pruner.pruning"]], "neural_compressor.pruner.regs": [[300, "module-neural_compressor.pruner.regs"]], "neural_compressor.pruner.schedulers": [[301, "module-neural_compressor.pruner.schedulers"]], "neural_compressor.pruner.utils": [[302, "module-neural_compressor.pruner.utils"]], "neural_compressor.quantization": [[303, "module-neural_compressor.quantization"]], "neural_compressor.strategy.auto_mixed_precision": [[304, "module-neural_compressor.strategy.auto_mixed_precision"]], "neural_compressor.strategy.basic": [[305, "module-neural_compressor.strategy.basic"]], "neural_compressor.strategy.bayesian": [[306, "module-neural_compressor.strategy.bayesian"]], "neural_compressor.strategy.conservative": [[307, "module-neural_compressor.strategy.conservative"]], "neural_compressor.strategy.exhaustive": [[308, "module-neural_compressor.strategy.exhaustive"]], "neural_compressor.strategy.hawq_v2": [[309, "module-neural_compressor.strategy.hawq_v2"]], "neural_compressor.strategy": [[310, "module-neural_compressor.strategy"]], "neural_compressor.strategy.mse": [[311, "module-neural_compressor.strategy.mse"]], "neural_compressor.strategy.mse_v2": [[312, "module-neural_compressor.strategy.mse_v2"]], "neural_compressor.strategy.random": [[313, "module-neural_compressor.strategy.random"]], "neural_compressor.strategy.strategy": [[314, "module-neural_compressor.strategy.strategy"]], "neural_compressor.strategy.utils": [[315, "module-neural_compressor.strategy.utils"]], "neural_compressor.strategy.utils.tuning_sampler": [[316, "module-neural_compressor.strategy.utils.tuning_sampler"]], "neural_compressor.strategy.utils.tuning_space": [[317, "module-neural_compressor.strategy.utils.tuning_space"]], "neural_compressor.strategy.utils.tuning_structs": [[318, "module-neural_compressor.strategy.utils.tuning_structs"]], "neural_compressor.training": [[319, "module-neural_compressor.training"]], "neural_compressor.utils.collect_layer_histogram": [[320, "module-neural_compressor.utils.collect_layer_histogram"]], "neural_compressor.utils.constant": [[321, "module-neural_compressor.utils.constant"]], "neural_compressor.utils.create_obj_from_config": [[322, "module-neural_compressor.utils.create_obj_from_config"]], "neural_compressor.utils": [[323, "module-neural_compressor.utils"]], "neural_compressor.utils.kl_divergence": [[324, "module-neural_compressor.utils.kl_divergence"]], "neural_compressor.utils.load_huggingface": [[325, "module-neural_compressor.utils.load_huggingface"]], "neural_compressor.utils.logger": [[326, "module-neural_compressor.utils.logger"]], "neural_compressor.utils.options": [[327, "module-neural_compressor.utils.options"]], "neural_compressor.utils.pytorch": [[328, "module-neural_compressor.utils.pytorch"]], "neural_compressor.utils.utility": [[329, "module-neural_compressor.utils.utility"]], "neural_compressor.ux.components.benchmark.benchmark": [[330, "module-neural_compressor.ux.components.benchmark.benchmark"]], "neural_compressor.ux.components.benchmark.benchmark_model": [[331, "module-neural_compressor.ux.components.benchmark.benchmark_model"]], "neural_compressor.ux.components.benchmark.execute_benchmark": [[332, "module-neural_compressor.ux.components.benchmark.execute_benchmark"]], "neural_compressor.ux.components.benchmark": [[333, "module-neural_compressor.ux.components.benchmark"]], "neural_compressor.ux.components.config_generator.benchmark_config_generator": [[334, "module-neural_compressor.ux.components.config_generator.benchmark_config_generator"]], "neural_compressor.ux.components.config_generator.config_generator": [[335, "module-neural_compressor.ux.components.config_generator.config_generator"]], "neural_compressor.ux.components.config_generator.graph_optimization_config_generator": [[336, "module-neural_compressor.ux.components.config_generator.graph_optimization_config_generator"]], "neural_compressor.ux.components.config_generator": [[337, "module-neural_compressor.ux.components.config_generator"]], "neural_compressor.ux.components.config_generator.mixed_precision_config_generator": [[338, "module-neural_compressor.ux.components.config_generator.mixed_precision_config_generator"]], "neural_compressor.ux.components.config_generator.profiling_config_generator": [[339, "module-neural_compressor.ux.components.config_generator.profiling_config_generator"]], "neural_compressor.ux.components.config_generator.pruning_config_generator": [[340, "module-neural_compressor.ux.components.config_generator.pruning_config_generator"]], "neural_compressor.ux.components.config_generator.quantization_config_generator": [[341, "module-neural_compressor.ux.components.config_generator.quantization_config_generator"]], "neural_compressor.ux.components.configuration_wizard.configuration_parser": [[342, "module-neural_compressor.ux.components.configuration_wizard.configuration_parser"]], "neural_compressor.ux.components.configuration_wizard.get_boundary_nodes": [[343, "module-neural_compressor.ux.components.configuration_wizard.get_boundary_nodes"]], "neural_compressor.ux.components.configuration_wizard.get_configuration": [[344, "module-neural_compressor.ux.components.configuration_wizard.get_configuration"]], "neural_compressor.ux.components.configuration_wizard": [[345, "module-neural_compressor.ux.components.configuration_wizard"]], "neural_compressor.ux.components.configuration_wizard.params_feeder": [[346, "module-neural_compressor.ux.components.configuration_wizard.params_feeder"]], "neural_compressor.ux.components.configuration_wizard.pruning_config_parser": [[347, "module-neural_compressor.ux.components.configuration_wizard.pruning_config_parser"]], "neural_compressor.ux.components.db_manager.db_manager": [[348, "module-neural_compressor.ux.components.db_manager.db_manager"]], "neural_compressor.ux.components.db_manager.db_models.benchmark": [[349, "module-neural_compressor.ux.components.db_manager.db_models.benchmark"]], "neural_compressor.ux.components.db_manager.db_models.benchmark_result": [[350, "module-neural_compressor.ux.components.db_manager.db_models.benchmark_result"]], "neural_compressor.ux.components.db_manager.db_models.dataloader": [[351, "module-neural_compressor.ux.components.db_manager.db_models.dataloader"]], "neural_compressor.ux.components.db_manager.db_models.dataset": [[352, "module-neural_compressor.ux.components.db_manager.db_models.dataset"]], "neural_compressor.ux.components.db_manager.db_models.domain": [[353, "module-neural_compressor.ux.components.db_manager.db_models.domain"]], "neural_compressor.ux.components.db_manager.db_models.domain_flavour": [[354, "module-neural_compressor.ux.components.db_manager.db_models.domain_flavour"]], "neural_compressor.ux.components.db_manager.db_models.example": [[355, "module-neural_compressor.ux.components.db_manager.db_models.example"]], "neural_compressor.ux.components.db_manager.db_models.framework": [[356, "module-neural_compressor.ux.components.db_manager.db_models.framework"]], "neural_compressor.ux.components.db_manager.db_models": [[357, "module-neural_compressor.ux.components.db_manager.db_models"]], "neural_compressor.ux.components.db_manager.db_models.metric": [[358, "module-neural_compressor.ux.components.db_manager.db_models.metric"]], "neural_compressor.ux.components.db_manager.db_models.model": [[359, "module-neural_compressor.ux.components.db_manager.db_models.model"]], "neural_compressor.ux.components.db_manager.db_models.optimization": [[360, "module-neural_compressor.ux.components.db_manager.db_models.optimization"]], "neural_compressor.ux.components.db_manager.db_models.optimization_type": [[361, "module-neural_compressor.ux.components.db_manager.db_models.optimization_type"]], "neural_compressor.ux.components.db_manager.db_models.precision": [[362, "module-neural_compressor.ux.components.db_manager.db_models.precision"]], "neural_compressor.ux.components.db_manager.db_models.profiling": [[363, "module-neural_compressor.ux.components.db_manager.db_models.profiling"]], "neural_compressor.ux.components.db_manager.db_models.profiling_result": [[364, "module-neural_compressor.ux.components.db_manager.db_models.profiling_result"]], "neural_compressor.ux.components.db_manager.db_models.project": [[365, "module-neural_compressor.ux.components.db_manager.db_models.project"]], "neural_compressor.ux.components.db_manager.db_models.pruning_details": [[366, "module-neural_compressor.ux.components.db_manager.db_models.pruning_details"]], "neural_compressor.ux.components.db_manager.db_models.transform": [[367, "module-neural_compressor.ux.components.db_manager.db_models.transform"]], "neural_compressor.ux.components.db_manager.db_models.tuning_details": [[368, "module-neural_compressor.ux.components.db_manager.db_models.tuning_details"]], "neural_compressor.ux.components.db_manager.db_models.tuning_history": [[369, "module-neural_compressor.ux.components.db_manager.db_models.tuning_history"]], "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface": [[370, "module-neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface": [[371, "module-neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.db_operations": [[372, "module-neural_compressor.ux.components.db_manager.db_operations.db_operations"]], "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface": [[373, "module-neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface": [[374, "module-neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface": [[375, "module-neural_compressor.ux.components.db_manager.db_operations.examples_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations": [[376, "module-neural_compressor.ux.components.db_manager.db_operations"]], "neural_compressor.ux.components.db_manager.db_operations.model_api_interface": [[377, "module-neural_compressor.ux.components.db_manager.db_operations.model_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface": [[378, "module-neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface": [[379, "module-neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.project_api_interface": [[380, "module-neural_compressor.ux.components.db_manager.db_operations.project_api_interface"]], "neural_compressor.ux.components.db_manager": [[381, "module-neural_compressor.ux.components.db_manager"]], "neural_compressor.ux.components.db_manager.params_interfaces": [[382, "module-neural_compressor.ux.components.db_manager.params_interfaces"]], "neural_compressor.ux.components.db_manager.utils": [[383, "module-neural_compressor.ux.components.db_manager.utils"]], "neural_compressor.ux.components.diagnosis.diagnosis": [[384, "module-neural_compressor.ux.components.diagnosis.diagnosis"]], "neural_compressor.ux.components.diagnosis.factory": [[385, "module-neural_compressor.ux.components.diagnosis.factory"]], "neural_compressor.ux.components.diagnosis": [[386, "module-neural_compressor.ux.components.diagnosis"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis": [[387, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis": [[388, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis"]], "neural_compressor.ux.components.diagnosis.op_details": [[389, "module-neural_compressor.ux.components.diagnosis.op_details"]], "neural_compressor.ux.components.diagnosis.op_entry": [[390, "module-neural_compressor.ux.components.diagnosis.op_entry"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis": [[391, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis": [[392, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis"]], "neural_compressor.ux.components.file_browser.file_browser": [[393, "module-neural_compressor.ux.components.file_browser.file_browser"]], "neural_compressor.ux.components.file_browser": [[394, "module-neural_compressor.ux.components.file_browser"]], "neural_compressor.ux.components.graph.attribute": [[395, "module-neural_compressor.ux.components.graph.attribute"]], "neural_compressor.ux.components.graph.collapser": [[396, "module-neural_compressor.ux.components.graph.collapser"]], "neural_compressor.ux.components.graph.edge": [[397, "module-neural_compressor.ux.components.graph.edge"]], "neural_compressor.ux.components.graph.graph": [[398, "module-neural_compressor.ux.components.graph.graph"]], "neural_compressor.ux.components.graph.graph_reader": [[399, "module-neural_compressor.ux.components.graph.graph_reader"]], "neural_compressor.ux.components.graph": [[400, "module-neural_compressor.ux.components.graph"]], "neural_compressor.ux.components.graph.node": [[401, "module-neural_compressor.ux.components.graph.node"]], "neural_compressor.ux.components.graph.reader": [[402, "module-neural_compressor.ux.components.graph.reader"]], "neural_compressor.ux.components.graph.reader.onnxrt_reader": [[403, "module-neural_compressor.ux.components.graph.reader.onnxrt_reader"]], "neural_compressor.ux.components.graph.reader.tensorflow_reader": [[404, "module-neural_compressor.ux.components.graph.reader.tensorflow_reader"]], "neural_compressor.ux.components": [[405, "module-neural_compressor.ux.components"]], "neural_compressor.ux.components.jobs_management": [[406, "module-neural_compressor.ux.components.jobs_management"]], "neural_compressor.ux.components.jobs_management.jobs_control_queue": [[407, "module-neural_compressor.ux.components.jobs_management.jobs_control_queue"]], "neural_compressor.ux.components.jobs_management.jobs_manager": [[408, "module-neural_compressor.ux.components.jobs_management.jobs_manager"]], "neural_compressor.ux.components.jobs_management.request": [[409, "module-neural_compressor.ux.components.jobs_management.request"]], "neural_compressor.ux.components.manage_workspace": [[410, "module-neural_compressor.ux.components.manage_workspace"]], "neural_compressor.ux.components.model.domain": [[411, "module-neural_compressor.ux.components.model.domain"]], "neural_compressor.ux.components.model": [[412, "module-neural_compressor.ux.components.model"]], "neural_compressor.ux.components.model.model": [[413, "module-neural_compressor.ux.components.model.model"]], "neural_compressor.ux.components.model.model_type_getter": [[414, "module-neural_compressor.ux.components.model.model_type_getter"]], "neural_compressor.ux.components.model.onnxrt": [[415, "module-neural_compressor.ux.components.model.onnxrt"]], "neural_compressor.ux.components.model.onnxrt.model": [[416, "module-neural_compressor.ux.components.model.onnxrt.model"]], "neural_compressor.ux.components.model.pytorch": [[417, "module-neural_compressor.ux.components.model.pytorch"]], "neural_compressor.ux.components.model.pytorch.model": [[418, "module-neural_compressor.ux.components.model.pytorch.model"]], "neural_compressor.ux.components.model.repository": [[419, "module-neural_compressor.ux.components.model.repository"]], "neural_compressor.ux.components.model.shape": [[420, "module-neural_compressor.ux.components.model.shape"]], "neural_compressor.ux.components.model.tensorflow.frozen_pb": [[421, "module-neural_compressor.ux.components.model.tensorflow.frozen_pb"]], "neural_compressor.ux.components.model.tensorflow": [[422, "module-neural_compressor.ux.components.model.tensorflow"]], "neural_compressor.ux.components.model.tensorflow.keras": [[423, "module-neural_compressor.ux.components.model.tensorflow.keras"]], "neural_compressor.ux.components.model.tensorflow.meta_graph": [[424, "module-neural_compressor.ux.components.model.tensorflow.meta_graph"]], "neural_compressor.ux.components.model.tensorflow.model": [[425, "module-neural_compressor.ux.components.model.tensorflow.model"]], "neural_compressor.ux.components.model.tensorflow.saved_model": [[426, "module-neural_compressor.ux.components.model.tensorflow.saved_model"]], "neural_compressor.ux.components.model.tensorflow.utils": [[427, "module-neural_compressor.ux.components.model.tensorflow.utils"]], "neural_compressor.ux.components.model_zoo.download_config": [[428, "module-neural_compressor.ux.components.model_zoo.download_config"]], "neural_compressor.ux.components.model_zoo.download_model": [[429, "module-neural_compressor.ux.components.model_zoo.download_model"]], "neural_compressor.ux.components.model_zoo.downloader": [[430, "module-neural_compressor.ux.components.model_zoo.downloader"]], "neural_compressor.ux.components.model_zoo": [[431, "module-neural_compressor.ux.components.model_zoo"]], "neural_compressor.ux.components.model_zoo.list_models": [[432, "module-neural_compressor.ux.components.model_zoo.list_models"]], "neural_compressor.ux.components.names_mapper": [[433, "module-neural_compressor.ux.components.names_mapper"]], "neural_compressor.ux.components.names_mapper.names_mapper": [[434, "module-neural_compressor.ux.components.names_mapper.names_mapper"]], "neural_compressor.ux.components.optimization.execute_optimization": [[435, "module-neural_compressor.ux.components.optimization.execute_optimization"]], "neural_compressor.ux.components.optimization.factory": [[436, "module-neural_compressor.ux.components.optimization.factory"]], "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization": [[437, "module-neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization"]], "neural_compressor.ux.components.optimization.graph_optimizer": [[438, "module-neural_compressor.ux.components.optimization.graph_optimizer"]], "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model": [[439, "module-neural_compressor.ux.components.optimization.graph_optimizer.optimize_model"]], "neural_compressor.ux.components.optimization": [[440, "module-neural_compressor.ux.components.optimization"]], "neural_compressor.ux.components.optimization.mixed_precision": [[441, "module-neural_compressor.ux.components.optimization.mixed_precision"]], "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision": [[442, "module-neural_compressor.ux.components.optimization.mixed_precision.mixed_precision"]], "neural_compressor.ux.components.optimization.mixed_precision.optimize_model": [[443, "module-neural_compressor.ux.components.optimization.mixed_precision.optimize_model"]], "neural_compressor.ux.components.optimization.neural_coder_optimization": [[444, "module-neural_compressor.ux.components.optimization.neural_coder_optimization"]], "neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model": [[445, "module-neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model"]], "neural_compressor.ux.components.optimization.optimization": [[446, "module-neural_compressor.ux.components.optimization.optimization"]], "neural_compressor.ux.components.optimization.pruning": [[447, "module-neural_compressor.ux.components.optimization.pruning"]], "neural_compressor.ux.components.optimization.pruning.optimize_model": [[448, "module-neural_compressor.ux.components.optimization.pruning.optimize_model"]], "neural_compressor.ux.components.optimization.pruning.pruning": [[449, "module-neural_compressor.ux.components.optimization.pruning.pruning"]], "neural_compressor.ux.components.optimization.tune": [[450, "module-neural_compressor.ux.components.optimization.tune"]], "neural_compressor.ux.components.optimization.tune.tune_model": [[451, "module-neural_compressor.ux.components.optimization.tune.tune_model"]], "neural_compressor.ux.components.optimization.tune.tuning": [[452, "module-neural_compressor.ux.components.optimization.tune.tuning"]], "neural_compressor.ux.components.optimization.tuning_history": [[453, "module-neural_compressor.ux.components.optimization.tuning_history"]], "neural_compressor.ux.components.profiling.execute_profiling": [[454, "module-neural_compressor.ux.components.profiling.execute_profiling"]], "neural_compressor.ux.components.profiling.factory": [[455, "module-neural_compressor.ux.components.profiling.factory"]], "neural_compressor.ux.components.profiling": [[456, "module-neural_compressor.ux.components.profiling"]], "neural_compressor.ux.components.profiling.profile_model": [[457, "module-neural_compressor.ux.components.profiling.profile_model"]], "neural_compressor.ux.components.profiling.profiler": [[458, "module-neural_compressor.ux.components.profiling.profiler"]], "neural_compressor.ux.components.profiling.profiling": [[459, "module-neural_compressor.ux.components.profiling.profiling"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.factory": [[460, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.factory"]], "neural_compressor.ux.components.profiling.tensorflow_profiler": [[461, "module-neural_compressor.ux.components.profiling.tensorflow_profiler"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler": [[462, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.profiler"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.utils": [[463, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.utils"]], "neural_compressor.ux.inc_bench": [[464, "module-neural_compressor.ux.inc_bench"]], "neural_compressor.ux": [[465, "module-neural_compressor.ux"]], "neural_compressor.ux.utils.consts": [[466, "module-neural_compressor.ux.utils.consts"]], "neural_compressor.ux.utils.environment": [[467, "module-neural_compressor.ux.utils.environment"]], "neural_compressor.ux.utils.exceptions": [[468, "module-neural_compressor.ux.utils.exceptions"]], "neural_compressor.ux.utils.executor": [[469, "module-neural_compressor.ux.utils.executor"]], "neural_compressor.ux.utils.expiring_dict": [[470, "module-neural_compressor.ux.utils.expiring_dict"]], "neural_compressor.ux.utils.github_info": [[471, "module-neural_compressor.ux.utils.github_info"]], "neural_compressor.ux.utils.hw_info": [[472, "module-neural_compressor.ux.utils.hw_info"]], "neural_compressor.ux.utils": [[473, "module-neural_compressor.ux.utils"]], "neural_compressor.ux.utils.json_serializer": [[474, "module-neural_compressor.ux.utils.json_serializer"]], "neural_compressor.ux.utils.logger": [[475, "module-neural_compressor.ux.utils.logger"]], "neural_compressor.ux.utils.parser": [[476, "module-neural_compressor.ux.utils.parser"]], "neural_compressor.ux.utils.proc": [[477, "module-neural_compressor.ux.utils.proc"]], "neural_compressor.ux.utils.processes": [[478, "module-neural_compressor.ux.utils.processes"]], "neural_compressor.ux.utils.singleton": [[479, "module-neural_compressor.ux.utils.singleton"]], "neural_compressor.ux.utils.status_updates": [[480, "module-neural_compressor.ux.utils.status_updates"]], "neural_compressor.ux.utils.templates": [[481, "module-neural_compressor.ux.utils.templates"]], "neural_compressor.ux.utils.templates.metric": [[482, "module-neural_compressor.ux.utils.templates.metric"]], "neural_compressor.ux.utils.templates.workdir": [[483, "module-neural_compressor.ux.utils.templates.workdir"]], "neural_compressor.ux.utils.utils": [[484, "module-neural_compressor.ux.utils.utils"]], "neural_compressor.ux.utils.workload.config": [[485, "module-neural_compressor.ux.utils.workload.config"]], "neural_compressor.ux.utils.workload.dataloader": [[486, "module-neural_compressor.ux.utils.workload.dataloader"]], "neural_compressor.ux.utils.workload.evaluation": [[487, "module-neural_compressor.ux.utils.workload.evaluation"]], "neural_compressor.ux.utils.workload.graph_optimization": [[488, "module-neural_compressor.ux.utils.workload.graph_optimization"]], "neural_compressor.ux.utils.workload": [[489, "module-neural_compressor.ux.utils.workload"]], "neural_compressor.ux.utils.workload.mixed_precision": [[490, "module-neural_compressor.ux.utils.workload.mixed_precision"]], "neural_compressor.ux.utils.workload.model": [[491, "module-neural_compressor.ux.utils.workload.model"]], "neural_compressor.ux.utils.workload.pruning": [[492, "module-neural_compressor.ux.utils.workload.pruning"]], "neural_compressor.ux.utils.workload.quantization": [[493, "module-neural_compressor.ux.utils.workload.quantization"]], "neural_compressor.ux.utils.workload.tuning": [[494, "module-neural_compressor.ux.utils.workload.tuning"]], "neural_compressor.ux.utils.yaml_utils": [[495, "module-neural_compressor.ux.utils.yaml_utils"]], "neural_compressor.ux.web.communication": [[496, "module-neural_compressor.ux.web.communication"]], "neural_compressor.ux.web.configuration": [[497, "module-neural_compressor.ux.web.configuration"]], "neural_compressor.ux.web.exceptions": [[498, "module-neural_compressor.ux.web.exceptions"]], "neural_compressor.ux.web": [[499, "module-neural_compressor.ux.web"]], "neural_compressor.ux.web.router": [[500, "module-neural_compressor.ux.web.router"]], "neural_compressor.ux.web.server": [[501, "module-neural_compressor.ux.web.server"]], "neural_compressor.ux.web.service.benchmark": [[502, "module-neural_compressor.ux.web.service.benchmark"]], "neural_compressor.ux.web.service.history_snapshot_parser": [[503, "module-neural_compressor.ux.web.service.history_snapshot_parser"]], "neural_compressor.ux.web.service": [[504, "module-neural_compressor.ux.web.service"]], "neural_compressor.ux.web.service.model": [[505, "module-neural_compressor.ux.web.service.model"]], "neural_compressor.ux.web.service.optimization": [[506, "module-neural_compressor.ux.web.service.optimization"]], "neural_compressor.ux.web.service.profiling": [[507, "module-neural_compressor.ux.web.service.profiling"]], "neural_compressor.ux.web.service.request_data_processor": [[508, "module-neural_compressor.ux.web.service.request_data_processor"]], "neural_compressor.ux.web.service.response_generator": [[509, "module-neural_compressor.ux.web.service.response_generator"]], "neural_compressor.ux.web.service.workload": [[510, "module-neural_compressor.ux.web.service.workload"]], "neural_compressor.version": [[511, "module-neural_compressor.version"]], "Intel\u00ae Neural Compressor Documentation": [[512, "intel-neural-compressor-documentation"], [616, "intel-neural-compressor-documentation"]], "Sections": [[512, "sections"], [616, "sections"]], "Contributor Covenant Code of Conduct": [[513, "contributor-covenant-code-of-conduct"], [514, "contributor-covenant-code-of-conduct"]], "Our Pledge": [[513, "our-pledge"]], "Our Standards": [[513, "our-standards"]], "Our Responsibilities": [[513, "our-responsibilities"]], "Scope": [[513, "scope"]], "Enforcement": [[513, "enforcement"]], "Attribution": [[513, "attribution"]], "Contribution Guidelines": [[514, "contribution-guidelines"]], "Pull Request Checklist": [[514, "pull-request-checklist"]], "Pull Request Template": [[514, "pull-request-template"]], "Support": [[514, "support"]], "FX": [[515, "fx"]], "Introduction": [[515, "introduction"], [516, "introduction"], [519, "introduction"], [562, "introduction"], [563, "introduction"], [564, "introduction"], [565, "introduction"], [567, "introduction"], [568, "introduction"], [569, "introduction"], [571, "introduction"], [573, "introduction"], [575, "introduction"], [578, "introduction"], [579, "introduction"], [580, "introduction"], [600, "introduction"], [601, "introduction"], [603, "introduction"], [604, "introduction"], [606, "introduction"], [610, "introduction"], [611, "introduction"], [612, "introduction"], [613, "introduction"], [614, "introduction"]], "FX Mode Support Matrix in Neural Compressor": [[515, "fx-mode-support-matrix-in-neural-compressor"]], "Get Start": [[515, "get-start"]], "Post Training Static Quantization": [[515, "post-training-static-quantization"], [607, "post-training-static-quantization"]], "Post Training Dynamic Quantization": [[515, "post-training-dynamic-quantization"], [607, "post-training-dynamic-quantization"]], "Quantization-Aware Training": [[515, "quantization-aware-training"]], "Examples": [[515, "examples"], [516, "examples"], [563, "examples"], [564, "examples"], [565, "examples"], [567, "examples"], [568, "examples"], [569, "examples"], [570, "examples"], [571, "examples"], [579, "examples"], [580, "examples"], [601, "examples"], [603, "examples"], [607, "examples"], [611, "examples"]], "Note": [[515, "note"]], "Details": [[515, "details"]], "Common Problem": [[515, "common-problem"]], "Dynamic Quantization": [[515, "dynamic-quantization"]], "Static Quantization & Quantization Aware Training": [[515, "static-quantization-quantization-aware-training"]], "Neural Architecture Search": [[516, "neural-architecture-search"]], "Basic NAS": [[516, "basic-nas"]], "Dynamic NAS": [[516, "dynamic-nas"]], "NAS Support Matrix": [[516, "nas-support-matrix"]], "Get Started with NAS API": [[516, "get-started-with-nas-api"]], "Basic Usage": [[516, "basic-usage"]], "1. Python code + YAML": [[516, "python-code-yaml"]], "2. Python code only": [[516, "python-code-only"]], "Advanced Usage (Custom NAS)": [[516, "advanced-usage-custom-nas"]], "Security Policy": [[517, "security-policy"]], "Report a Vulnerability": [[517, "report-a-vulnerability"]], "Intel\u00ae Neural Compressor1": [[518, "intel-neural-compressor1"]], "Installation": [[518, "installation"], [576, "installation"], [592, "installation"]], "Prerequisites": [[518, "prerequisites"], [576, "prerequisites"], [576, "id1"]], "Install on Linux": [[518, "install-on-linux"]], "Getting Started": [[518, "getting-started"]], "Quantization with Python API": [[518, "quantization-with-python-api"]], "Quantization with JupyterLab Extension": [[518, "quantization-with-jupyterlab-extension"]], "Quantization with GUI": [[518, "quantization-with-gui"]], "System Requirements": [[518, "system-requirements"]], "Validated Hardware Environment": [[518, "validated-hardware-environment"]], "Intel\u00ae Neural Compressor supports CPUs based on Intel 64 architecture or compatible processors:": [[518, "intel-neural-compressor-supports-cpus-based-on-intel-64-architecture-or-compatible-processors"]], "Intel\u00ae Neural Compressor supports GPUs built on Intel\u2019s Xe architecture:": [[518, "intel-neural-compressor-supports-gpus-built-on-intel-s-xe-architecture"]], "Intel\u00ae Neural Compressor quantized ONNX models support multiple hardware vendors through ONNX Runtime:": [[518, "intel-neural-compressor-quantized-onnx-models-support-multiple-hardware-vendors-through-onnx-runtime"]], "Validated Software Environment": [[518, "validated-software-environment"]], "Validated Models": [[518, "validated-models"], [615, "validated-models"]], "Documentation": [[518, "documentation"]], "Selected Publications/Events": [[518, "selected-publications-events"]], "Additional Content": [[518, "additional-content"]], "Hiring": [[518, "hiring"]], "Adaptor": [[519, "adaptor"], [520, "adaptor"]], "Adaptor Support Matrix": [[519, "adaptor-support-matrix"]], "Working Flow": [[519, "working-flow"], [607, "working-flow"]], "Get Start with Adaptor API": [[519, "get-start-with-adaptor-api"]], "Query API": [[519, "query-api"]], "Background": [[519, "background"]], "Query API Introduction": [[519, "query-api-introduction"]], "Example of Adding a New Backend Support": [[519, "example-of-adding-a-new-backend-support"]], "Capability": [[519, "capability"]], "Implement ONNXRTAdaptor Class": [[519, "implement-onnxrtadaptor-class"]], "ONNX Runtime": [[521, "onnx-runtime"]], "Torch Utils": [[522, "torch-utils"]], "Bf16 Convert": [[523, "bf16-convert"]], "Hawq Metric": [[524, "hawq-metric"]], "Onnx": [[525, "onnx"]], "Symbolic Trace": [[526, "symbolic-trace"]], "Util": [[527, "util"]], "Algorithm": [[528, "algorithm"]], "APIs": [[529, "apis"]], "User facing APIs": [[530, "user-facing-apis"]], "Benchmark": [[531, "benchmark"], [538, "benchmark"], [606, "benchmark"]], "Config": [[532, "config"]], "Mix Precision": [[533, "mix-precision"]], "Objective": [[534, "objective"], [600, "objective"]], "Quantization": [[535, "quantization"], [554, "quantization"], [606, "quantization"], [607, "quantization"]], "Training": [[536, "training"]], "Common": [[537, "common"]], "BLEU": [[539, "module-neural_compressor.experimental.metric.bleu"]], "Criterion": [[540, "criterion"]], "Data": [[541, "data"]], "Dataloader": [[542, "dataloader"]], "BaseDataLoader": [[542, "basedataloader"]], "dataloaders": [[542, "dataloaders"]], "Datasets": [[543, "datasets"]], "Transforms": [[544, "transforms"]], "Metric": [[545, "metric"]], "Model": [[546, "model"], [557, "model"], [580, "model"]], "Optimizer": [[547, "optimizer"]], "Component(experiemental API, deprecated in 2.0)": [[548, "component-experiemental-api-deprecated-in-2-0"]], "Distillation": [[549, "distillation"], [567, "distillation"], [606, "distillation"]], "MixedPrecision": [[550, "mixedprecision"]], "ModelConversion": [[551, "modelconversion"]], "Neural architecture search (NAS)": [[552, "neural-architecture-search-nas"]], "Pruning": [[553, "pruning"], [562, "pruning"], [603, "pruning"], [606, "pruning"]], "Scheduler": [[555, "scheduler"]], "Contrib": [[556, "contrib"]], "Pythonic": [[558, "pythonic"]], "Strategy": [[559, "strategy"]], "Strategies": [[560, "strategies"]], "Utils": [[561, "utils"]], "Intel\u00ae Neural Compressor Bench": [[562, "intel-neural-compressor-bench"]], "Table of Contents": [[562, "table-of-contents"]], "Install Intel\u00ae Neural Compressor with Bench": [[562, "install-intel-neural-compressor-with-bench"]], "Option 1: Install from Binary": [[562, "option-1-install-from-binary"]], "Option 2: Install from Source": [[562, "option-2-install-from-source"]], "Start the Intel\u00ae Neural Compressor Bench": [[562, "start-the-intel-neural-compressor-bench"]], "Home Screen": [[562, "home-screen"]], "Create New Project": [[562, "create-new-project"]], "Predefined Model": [[562, "predefined-model"]], "Custom Model": [[562, "custom-model"]], "Display Model Graph": [[562, "display-model-graph"]], "Project List": [[562, "project-list"]], "Remove Project": [[562, "remove-project"]], "Develop Project": [[562, "develop-project"]], "Optimization Tab": [[562, "optimization-tab"]], "Optimization Table": [[562, "optimization-table"]], "Optimization Wizard": [[562, "optimization-wizard"]], "Editing Optimization Entries": [[562, "editing-optimization-entries"]], "Optimization Details": [[562, "optimization-details"]], "Benchmark Tab": [[562, "benchmark-tab"]], "Benchmark Table": [[562, "benchmark-table"]], "Benchmark Wizard": [[562, "benchmark-wizard"]], "Editing Benchmark Entries": [[562, "editing-benchmark-entries"]], "Benchmark Details": [[562, "benchmark-details"]], "Profiling Tab": [[562, "profiling-tab"]], "Profiling Table": [[562, "profiling-table"]], "Profiling Wizard": [[562, "profiling-wizard"]], "Editing Profiling Entries": [[562, "editing-profiling-entries"]], "Profiling Details": [[562, "profiling-details"]], "Diagnosis Tab": [[562, "diagnosis-tab"]], "Dataset Tab": [[562, "dataset-tab"]], "Dataset List": [[562, "dataset-list"]], "Dataset Wizard": [[562, "dataset-wizard"]], "Dataset Details": [[562, "dataset-details"]], "Custom Dataset": [[562, "custom-dataset"]], "Project Information": [[562, "project-information"]], "System Information": [[562, "system-information"]], "Security": [[562, "security"], [569, "security"]], "Benchmarking": [[563, "benchmarking"]], "Benchmark Support Matrix": [[563, "benchmark-support-matrix"]], "Get Started with Benchmark API": [[563, "get-started-with-benchmark-api"]], "DataLoader": [[564, "dataloader"]], "Supported Framework Dataloader Matrix": [[564, "supported-framework-dataloader-matrix"]], "Get Start with Dataloader API": [[564, "get-start-with-dataloader-api"]], "Config Dataloader in a Yaml File": [[564, "config-dataloader-in-a-yaml-file"]], "Create a User-specific Dataloader": [[564, "create-a-user-specific-dataloader"]], "Dataset": [[565, "dataset"]], "Supported Framework Dataset Matrix": [[565, "supported-framework-dataset-matrix"]], "TensorFlow": [[565, "tensorflow"], [578, "tensorflow"], [612, "tensorflow"]], "PyTorch": [[565, "pytorch"], [578, "pytorch"], [608, "pytorch"]], "MXNet": [[565, "mxnet"], [578, "mxnet"], [612, "mxnet"]], "ONNXRT": [[565, "onnxrt"], [578, "onnxrt"], [612, "onnxrt"]], "Get start with Dataset API": [[565, "get-start-with-dataset-api"]], "Config dataloader in a yaml file": [[565, "config-dataloader-in-a-yaml-file"]], "User-specific dataset": [[565, "user-specific-dataset"]], "Design": [[566, "design"], [613, "design"], [613, "id1"], [613, "id3"], [613, "id5"], [613, "id7"], [613, "id9"], [613, "id11"], [613, "id13"], [613, "id15"], [613, "id17"]], "Architecture": [[566, "architecture"], [575, "architecture"]], "Workflow": [[566, "workflow"]], "Knowledge Distillation": [[567, "knowledge-distillation"]], "Intermediate Layer Knowledge Distillation": [[567, "intermediate-layer-knowledge-distillation"]], "Self Distillation": [[567, "self-distillation"]], "Distillation Support Matrix": [[567, "distillation-support-matrix"]], "Get Started with Distillation API": [[567, "get-started-with-distillation-api"]], "Distillation for Quantization": [[568, "distillation-for-quantization"]], "Distillation for Quantization Support Matrix": [[568, "distillation-for-quantization-support-matrix"]], "Get Started with Distillation for Quantization API": [[568, "get-started-with-distillation-for-quantization-api"]], "Distributed Training and Inference (Evaluation)": [[569, "distributed-training-and-inference-evaluation"]], "Supported Feature Matrix": [[569, "supported-feature-matrix"], [573, "supported-feature-matrix"], [575, "supported-feature-matrix"], [606, "supported-feature-matrix"], [607, "supported-feature-matrix"], [611, "supported-feature-matrix"], [614, "supported-feature-matrix"]], "Get Started with Distributed Training and Inference API": [[569, "get-started-with-distributed-training-and-inference-api"]], "Option 1: Pure Yaml Configuration": [[569, "option-1-pure-yaml-configuration"]], "Option 2: User Defined Training Function": [[569, "option-2-user-defined-training-function"]], "Horovodrun Execution": [[569, "horovodrun-execution"]], "PyTorch Examples:": [[569, "pytorch-examples"]], "TensorFlow Examples:": [[569, "tensorflow-examples"]], "Export": [[571, "export"]], "Supported Framework Model Matrix": [[571, "supported-framework-model-matrix"], [580, "supported-framework-model-matrix"]], "FP32 Model Export": [[571, "fp32-model-export"]], "INT8 Model Export": [[571, "int8-model-export"]], "Appendix": [[571, "appendix"]], "Frequently Asked Questions": [[572, "frequently-asked-questions"]], "Common Build Issues": [[572, "common-build-issues"]], "Issue 1:": [[572, "issue-1"]], "Issue 2:": [[572, "issue-2"]], "Issue 3:": [[572, "issue-3"]], "Framework YAML Configuration Files": [[573, "framework-yaml-configuration-files"]], "Get started with Framework YAML Files": [[573, "get-started-with-framework-yaml-files"]], "Incompatible changes between v1.2 and v1.1": [[574, "incompatible-changes-between-v1-2-and-v1-1"]], "User-facing APIs": [[574, "user-facing-apis"]], "Built-in transform/dataset/metric APIs": [[574, "built-in-transform-dataset-metric-apis"]], "Infrastructure of Intel\u00ae Neural Compressor": [[575, "infrastructure-of-intel-neural-compressor"]], "Linux Installation": [[576, "linux-installation"]], "Option 1 Install from Binary": [[576, "option-1-install-from-binary"], [576, "id2"]], "Option 2 Install from Source": [[576, "option-2-install-from-source"], [576, "id3"]], "Option 3 Install from AI Kit": [[576, "option-3-install-from-ai-kit"]], "Windows Installation": [[576, "windows-installation"]], "Legal Information": [[577, "legal-information"]], "License": [[577, "license"]], "Citation": [[577, "citation"]], "Trademarks": [[577, "trademarks"]], "Metrics": [[578, "metrics"]], "Supported Built-in Metric Matrix": [[578, "supported-built-in-metric-matrix"]], "Get Start with Metrics": [[578, "get-start-with-metrics"]], "Support Single-metric and Multi-metrics": [[578, "support-single-metric-and-multi-metrics"]], "Build Custom Metric with Python API": [[578, "build-custom-metric-with-python-api"]], "Mixed Precision": [[579, "mixed-precision"]], "Mixed Precision Support Matrix": [[579, "mixed-precision-support-matrix"]], "Get Started with Mixed Precision API": [[579, "get-started-with-mixed-precision-api"]], "Neural Coder": [[581, "neural-coder"], [598, "neural-coder"], [598, "id1"]], "What do we offer?": [[581, "what-do-we-offer"]], "Getting Started!": [[581, "getting-started"], [592, "getting-started"]], "Jupyter Lab Extension": [[581, "jupyter-lab-extension"]], "Python Launcher": [[581, "python-launcher"], [586, "python-launcher"]], "Python API": [[581, "python-api"]], "Contact": [[581, "contact"]], "AWS Amazon SageMaker Support": [[582, "aws-amazon-sagemaker-support"]], "Start Jupyter Lab 3": [[582, "start-jupyter-lab-3"]], "For SageMaker Studio": [[582, "for-sagemaker-studio"]], "For SageMaker Notebook instance": [[582, "for-sagemaker-notebook-instance"]], "Installation Guide": [[582, "installation-guide"]], "BigDL Nano Support": [[583, "bigdl-nano-support"]], "Example": [[583, "example"], [587, "example"], [600, "example"]], "Support Matrix": [[583, "support-matrix"]], "Intel CPU Platforms: Best Performance Setting": [[584, "intel-cpu-platforms-best-performance-setting"]], "Install MKL, OpenMP and JEMALLOC": [[584, "install-mkl-openmp-and-jemalloc"]], "Install NUMA Controller": [[584, "install-numa-controller"]], "Environment Variables": [[584, "environment-variables"]], "Frequency Governers": [[584, "frequency-governers"]], "Neural Coder as Python API": [[585, "neural-coder-as-python-api"]], "Enable": [[585, "enable"]], "Bench": [[585, "bench"]], "SuperBench": [[585, "superbench"]], "Quick-Start": [[586, "quick-start"]], "Launcher Arguments (Optional)": [[586, "launcher-arguments-optional"]], "Neural Coder for Quantization": [[587, "neural-coder-for-quantization"]], "Features Supported": [[587, "features-supported"]], "Models Supported": [[587, "models-supported"]], "Usage": [[587, "usage"], [611, "usage"], [611, "id1"], [613, "usage"], [613, "id2"], [613, "id4"], [613, "id6"], [613, "id8"], [613, "id10"], [613, "id12"], [613, "id14"], [613, "id16"], [613, "id18"]], "PyPI distribution:": [[587, "pypi-distribution"]], "Supported Optimization Features": [[588, "supported-optimization-features"]], "v0.4": [[589, "v0-4"]], "Highlights": [[589, "highlights"]], "Others": [[589, "others"]], "Changelog": [[590, "changelog"], [594, "changelog"]], "neural_compressor_ext_lab": [[591, "neural-compressor-ext-lab"]], "Requirements": [[591, "requirements"], [595, "requirements"]], "Install": [[591, "install"], [595, "install"]], "Uninstall": [[591, "uninstall"], [595, "uninstall"]], "Contributing": [[591, "contributing"], [595, "contributing"]], "Development install": [[591, "development-install"], [595, "development-install"]], "Development uninstall": [[591, "development-uninstall"], [595, "development-uninstall"]], "Packaging the extension": [[591, "packaging-the-extension"], [595, "packaging-the-extension"]], "Intel\u00ae Neural Compressor as JupyterLab Extension": [[592, "intel-neural-compressor-as-jupyterlab-extension"]], "Auto-enable a feature": [[592, "auto-enable-a-feature"]], "Or let us help you auto-select the best feature": [[592, "or-let-us-help-you-auto-select-the-best-feature"]], "Pre-requisites": [[592, "pre-requisites"]], "Making a new release of neural_compressor_ext_lab": [[593, "making-a-new-release-of-neural-compressor-ext-lab"]], "Manual release": [[593, "manual-release"], [596, "manual-release"]], "Python package": [[593, "python-package"], [596, "python-package"]], "NPM package": [[593, "npm-package"], [596, "npm-package"]], "Automated releases with the Jupyter Releaser": [[593, "automated-releases-with-the-jupyter-releaser"], [596, "automated-releases-with-the-jupyter-releaser"]], "Publishing to conda-forge": [[593, "publishing-to-conda-forge"], [596, "publishing-to-conda-forge"]], "neural_compressor_ext_lab_alibaba": [[595, "neural-compressor-ext-lab-alibaba"]], "Making a new release of neural_compressor_ext_lab_alibaba": [[596, "making-a-new-release-of-neural-compressor-ext-lab-alibaba"]], "Change Log": [[597, "change-log"]], "[Unreleased]": [[597, "unreleased"]], "Background Introduction": [[598, "background-introduction"]], "Intel\u00ae Neural Compressor": [[598, "intel-neural-compressor"]], "Neural Coder Extension in VSCode": [[598, "neural-coder-extension-in-vscode"]], "Neural Coder Extension Usage": [[598, "neural-coder-extension-usage"]], "1. Open": [[598, "open"]], "2. Search": [[598, "search"]], "3. Setting": [[598, "setting"]], "4. Icon": [[598, "icon"]], "5. optimization (quantization)": [[598, "optimization-quantization"]], "5.1 Enable": [[598, "enable"]], "5.2 Auto": [[598, "auto"]], "Welcome to your VS Code Extension": [[599, "welcome-to-your-vs-code-extension"]], "What\u2019s in the folder": [[599, "what-s-in-the-folder"]], "Setup": [[599, "setup"]], "Get up and running straight away": [[599, "get-up-and-running-straight-away"]], "Make changes": [[599, "make-changes"]], "Explore the API": [[599, "explore-the-api"]], "Run tests": [[599, "run-tests"]], "Go further": [[599, "go-further"]], "Single Objective": [[600, "single-objective"]], "Multiple Objectives": [[600, "multiple-objectives"]], "Objective Support Matrix": [[600, "objective-support-matrix"]], "Get Started with Objective API": [[600, "get-started-with-objective-api"]], "Config Single Objective": [[600, "config-single-objective"]], "Config Multiple Objectives": [[600, "config-multiple-objectives"]], "Optimization Orchestration": [[601, "optimization-orchestration"]], "One-shot": [[601, "one-shot"]], "Orchestration Support Matrix": [[601, "orchestration-support-matrix"]], "Get Started with Orchestration API": [[601, "get-started-with-orchestration-api"]], "SYSTEM CONFIGURATION": [[602, "system-configuration"]], "Neural Network Pruning": [[603, "neural-network-pruning"], [604, "neural-network-pruning"]], "Pruning Patterns": [[603, "pruning-patterns"], [604, "pruning-patterns"]], "Pruning Criteria": [[603, "pruning-criteria"], [604, "pruning-criteria"]], "Pruning Schedule": [[603, "pruning-schedule"], [604, "pruning-schedule"]], "Pruning Support Matrix": [[603, "pruning-support-matrix"]], "Get Started with Pruning API": [[603, "get-started-with-pruning-api"]], "Pruning details": [[604, "pruning-details"]], "Pruning Type": [[604, "pruning-type"]], "Pruning Scope": [[604, "pruning-scope"]], "Sparsity Decay Type": [[604, "sparsity-decay-type"]], "Regularization": [[604, "regularization"]], "Pruning Examples": [[604, "pruning-examples"]], "Reference": [[604, "reference"], [607, "reference"]], "Full Publications/Events (52)": [[605, "full-publications-events-52"]], "2022 (34)": [[605, "id1"]], "2021 (14)": [[605, "id2"]], "2018 - 2020 (4)": [[605, "id3"]], "Pythonic Style Access for Configurations": [[606, "pythonic-style-access-for-configurations"]], "Pythonic API for User Configurations": [[606, "pythonic-api-for-user-configurations"], [606, "id1"]], "Pythonic API for Framework Configurations": [[606, "pythonic-api-for-framework-configurations"], [606, "id2"]], "Get Started with Pythonic API for Configurations": [[606, "get-started-with-pythonic-api-for-configurations"]], "NAS": [[606, "nas"]], "Quantization Introduction": [[607, "quantization-introduction"]], "Quantization Fundamentals": [[607, "quantization-fundamentals"]], "Quantization Support Matrix": [[607, "quantization-support-matrix"]], "Quantization Scheme in TensorFlow": [[607, "quantization-scheme-in-tensorflow"]], "Quantization Scheme in PyTorch": [[607, "quantization-scheme-in-pytorch"]], "Quantization Scheme in IPEX": [[607, "quantization-scheme-in-ipex"]], "Quantization Scheme in MXNet": [[607, "quantization-scheme-in-mxnet"]], "Quantization Scheme in ONNX Runtime": [[607, "quantization-scheme-in-onnx-runtime"]], "Quantization Approaches": [[607, "quantization-approaches"]], "Quantization Aware Training": [[607, "quantization-aware-training"]], "Accuracy Aware Tuning": [[607, "accuracy-aware-tuning"]], "Get Started": [[607, "get-started"]], "Turn ON Auto Mixed Precision during Quantization": [[608, "turn-on-auto-mixed-precision-during-quantization"]], "Tensorflow": [[608, "tensorflow"]], "Release": [[609, "release"]], "Release Notes": [[609, "release-notes"]], "Known Issues": [[609, "known-issues"]], "Incompatible Changes": [[609, "incompatible-changes"]], "SigOpt Strategy": [[610, "sigopt-strategy"]], "Preparation": [[610, "preparation"]], "SigOpt Platform": [[610, "sigopt-platform"]], "Neural Compressor Configuration": [[610, "neural-compressor-configuration"]], "Performance": [[610, "performance"]], "Benefit of SigOpt Strategy": [[610, "benefit-of-sigopt-strategy"]], "Performance Comparison of Different Strategies": [[610, "performance-comparison-of-different-strategies"]], "TensorBoard": [[611, "tensorboard"]], "Get Started with TensorBoard": [[611, "get-started-with-tensorboard"]], "PyTorch TensorBoard": [[611, "pytorch-tensorboard"]], "TensorFlow Tensorboard": [[611, "tensorflow-tensorboard"]], "PyTorch Examples": [[611, "pytorch-examples"]], "TensorFlow Examples": [[611, "tensorflow-examples"]], "Transform": [[612, "transform"]], "Transform Support List": [[612, "transform-support-list"]], "Pytorch": [[612, "pytorch"]], "Tuning Strategies": [[613, "tuning-strategies"]], "Strategy Design": [[613, "strategy-design"]], "Tuning Space": [[613, "tuning-space"]], "Exit Policy": [[613, "exit-policy"]], "Accuracy Criteria": [[613, "accuracy-criteria"]], "Traverse": [[613, "traverse"]], "Traverse Logic": [[613, "traverse-logic"]], "O0": [[613, "o0"]], "Basic": [[613, "basic"]], "MSE": [[613, "mse"]], "MSE_V2": [[613, "mse-v2"]], "HAWQ_V2": [[613, "hawq-v2"]], "Bayesian": [[613, "bayesian"]], "Exhaustive": [[613, "exhaustive"]], "Random": [[613, "random"]], "SigOpt": [[613, "sigopt"]], "TPE": [[613, "tpe"]], "Customize a New Tuning Strategy": [[613, "customize-a-new-tuning-strategy"]], "User YAML Configuration Files": [[614, "user-yaml-configuration-files"]], "Get started with User YAML Files": [[614, "get-started-with-user-yaml-files"]], "Validated Quantization Examples": [[615, "validated-quantization-examples"]], "TensorFlow Models with TensorFlow 2.10.0": [[615, "tensorflow-models-with-tensorflow-2-10-0"]], "PyTorch Models with Torch 1.12.1+cpu in PTQ Mode": [[615, "pytorch-models-with-torch-1-12-1-cpu-in-ptq-mode"]], "PyTorch Models with Torch 1.12.1+cpu in QAT Mode": [[615, "pytorch-models-with-torch-1-12-1-cpu-in-qat-mode"]], "PyTorch Models with Torch and Intel\u00ae Extension for PyTorch* 1.11.0+cpu": [[615, "pytorch-models-with-torch-and-intel-extension-for-pytorch-1-11-0-cpu"]], "ONNX Models with ONNX Runtime 1.12.1": [[615, "onnx-models-with-onnx-runtime-1-12-1"]], "MXNet Models with MXNet 1.7.0": [[615, "mxnet-models-with-mxnet-1-7-0"]], "Validated Pruning Examples": [[615, "validated-pruning-examples"]], "Validated Knowledge Distillation Examples": [[615, "validated-knowledge-distillation-examples"]], "Validated ONNX QDQ INT8 Models on Multiple Hardware through ONNX Runtime": [[615, "validated-onnx-qdq-int8-models-on-multiple-hardware-through-onnx-runtime"]]}, "indexentries": {"644ec953a7dc_pruning_support": [[0, "module-644ec953a7dc_pruning_support"]], "module": [[0, "module-644ec953a7dc_pruning_support"], [1, "module-6ece06672ed3_v1_14"], [2, "module-6f0d0f71d92e_v1_13"], [3, "module-9e89549a08c8_v1_11"], [4, "module-block_mask"], [5, "module-env"], [6, "module-neural_compressor.adaptor.adaptor"], [7, "module-neural_compressor.adaptor"], [8, "module-neural_compressor.adaptor.keras"], [9, "module-neural_compressor.adaptor.keras_utils"], [10, "module-neural_compressor.adaptor.keras_utils.quantizer"], [11, "module-neural_compressor.adaptor.mxnet"], [12, "module-neural_compressor.adaptor.mxnet_utils"], [13, "module-neural_compressor.adaptor.mxnet_utils.util"], [14, "module-neural_compressor.adaptor.onnxrt"], [15, "module-neural_compressor.adaptor.ox_utils.calibration"], [16, "module-neural_compressor.adaptor.ox_utils"], [17, "module-neural_compressor.adaptor.ox_utils.operators.activation"], [18, "module-neural_compressor.adaptor.ox_utils.operators.argmax"], [19, "module-neural_compressor.adaptor.ox_utils.operators.attention"], [20, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"], [21, "module-neural_compressor.adaptor.ox_utils.operators.concat"], [22, "module-neural_compressor.adaptor.ox_utils.operators.conv"], [23, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"], [24, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"], [25, "module-neural_compressor.adaptor.ox_utils.operators.gather"], [26, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"], [27, "module-neural_compressor.adaptor.ox_utils.operators.gemm"], [28, "module-neural_compressor.adaptor.ox_utils.operators"], [29, "module-neural_compressor.adaptor.ox_utils.operators.lstm"], [30, "module-neural_compressor.adaptor.ox_utils.operators.matmul"], [31, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"], [32, "module-neural_compressor.adaptor.ox_utils.operators.ops"], [33, "module-neural_compressor.adaptor.ox_utils.operators.pad"], [34, "module-neural_compressor.adaptor.ox_utils.operators.pooling"], [35, "module-neural_compressor.adaptor.ox_utils.operators.resize"], [36, "module-neural_compressor.adaptor.ox_utils.operators.split"], [37, "module-neural_compressor.adaptor.ox_utils.quantizer"], [38, "module-neural_compressor.adaptor.ox_utils.util"], [39, "module-neural_compressor.adaptor.pytorch"], [40, "module-neural_compressor.adaptor.query"], [41, "module-neural_compressor.adaptor.tensorflow"], [42, "module-neural_compressor.adaptor.tf_utils.graph_converter"], [43, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"], [44, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"], [45, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"], [46, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"], [47, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"], [48, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"], [49, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"], [50, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"], [51, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer"], [52, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"], [53, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"], [54, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"], [55, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"], [56, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"], [57, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"], [58, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"], [59, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"], [60, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"], [61, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"], [62, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"], [63, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"], [64, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"], [65, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"], [66, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"], [67, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"], [68, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"], [69, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"], [70, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"], [71, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"], [72, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"], [73, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"], [74, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"], [75, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"], [76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"], [77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"], [78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"], [79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"], [80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter"], [81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"], [82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"], [83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"], [84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"], [85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"], [86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"], [87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"], [88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"], [89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"], [90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"], [91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"], [92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"], [93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"], [94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"], [95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"], [96, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"], [97, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"], [98, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"], [99, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"], [100, "module-neural_compressor.adaptor.tf_utils.graph_util"], [101, "module-neural_compressor.adaptor.tf_utils"], [102, "module-neural_compressor.adaptor.tf_utils.quantize_graph"], [103, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize"], [104, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat"], [105, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config"], [106, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper"], [107, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers"], [108, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer"], [109, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add"], [110, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base"], [111, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"], [112, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper"], [113, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"], [114, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"], [115, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"], [116, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"], [117, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"], [118, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"], [119, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"], [120, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"], [121, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"], [122, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"], [123, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"], [124, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"], [125, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"], [126, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"], [127, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"], [128, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"], [129, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"], [130, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"], [131, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"], [132, "module-neural_compressor.adaptor.tf_utils.transform_graph"], [133, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"], [134, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"], [135, "module-neural_compressor.adaptor.tf_utils.util"], [136, "module-neural_compressor.adaptor.torch_utils.bf16_convert"], [137, "module-neural_compressor.adaptor.torch_utils.hawq_metric"], [138, "module-neural_compressor.adaptor.torch_utils"], [139, "module-neural_compressor.adaptor.torch_utils.onnx"], [140, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"], [141, "module-neural_compressor.adaptor.torch_utils.util"], [142, "module-neural_compressor.algorithm.algorithm"], [143, "module-neural_compressor.algorithm.fast_bias_correction"], [144, "module-neural_compressor.algorithm"], [145, "module-neural_compressor.algorithm.weight_correction"], [146, "module-neural_compressor.benchmark"], [147, "module-neural_compressor.conf.config"], [148, "module-neural_compressor.conf.dotdict"], [149, "module-neural_compressor.conf"], [150, "module-neural_compressor.conf.pythonic_config"], [151, "module-neural_compressor.config"], [152, "module-neural_compressor.contrib"], [153, "module-neural_compressor.contrib.strategy"], [154, "module-neural_compressor.contrib.strategy.sigopt"], [155, "module-neural_compressor.contrib.strategy.tpe"], [156, "module-neural_compressor.data.dataloaders.base_dataloader"], [157, "module-neural_compressor.data.dataloaders.dataloader"], [158, "module-neural_compressor.data.dataloaders.default_dataloader"], [159, "module-neural_compressor.data.dataloaders.fetcher"], [160, "module-neural_compressor.data.dataloaders"], [161, "module-neural_compressor.data.dataloaders.mxnet_dataloader"], [162, "module-neural_compressor.data.dataloaders.onnxrt_dataloader"], [163, "module-neural_compressor.data.dataloaders.pytorch_dataloader"], [164, "module-neural_compressor.data.dataloaders.sampler"], [165, "module-neural_compressor.data.dataloaders.tensorflow_dataloader"], [166, "module-neural_compressor.data.datasets.bert_dataset"], [167, "module-neural_compressor.data.datasets.coco_dataset"], [168, "module-neural_compressor.data.datasets.dataset"], [169, "module-neural_compressor.data.datasets.dummy_dataset"], [170, "module-neural_compressor.data.datasets.dummy_dataset_v2"], [171, "module-neural_compressor.data.datasets.imagenet_dataset"], [172, "module-neural_compressor.data.datasets"], [173, "module-neural_compressor.data.datasets.style_transfer_dataset"], [174, "module-neural_compressor.data.filters.coco_filter"], [175, "module-neural_compressor.data.filters.filter"], [176, "module-neural_compressor.data.filters"], [177, "module-neural_compressor.data"], [178, "module-neural_compressor.data.transforms.coco_transform"], [179, "module-neural_compressor.data.transforms.imagenet_transform"], [180, "module-neural_compressor.data.transforms"], [181, "module-neural_compressor.data.transforms.postprocess"], [182, "module-neural_compressor.data.transforms.tokenization"], [183, "module-neural_compressor.data.transforms.transform"], [184, "module-neural_compressor.experimental.benchmark"], [185, "module-neural_compressor.experimental.common.criterion"], [186, "module-neural_compressor.experimental.common.dataloader"], [187, "module-neural_compressor.experimental.common"], [188, "module-neural_compressor.experimental.common.metric"], [189, "module-neural_compressor.experimental.common.model"], [190, "module-neural_compressor.experimental.common.optimizer"], [191, "module-neural_compressor.experimental.common.postprocess"], [192, "module-neural_compressor.experimental.common.torch_utils"], [193, "module-neural_compressor.experimental.component"], [194, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"], [195, "module-neural_compressor.experimental.data.dataloaders.dataloader"], [196, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"], [197, "module-neural_compressor.experimental.data.dataloaders.fetcher"], [198, "module-neural_compressor.experimental.data.dataloaders"], [199, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"], [200, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"], [201, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"], [202, "module-neural_compressor.experimental.data.dataloaders.sampler"], [203, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"], [204, "module-neural_compressor.experimental.data.datasets.bert_dataset"], [205, "module-neural_compressor.experimental.data.datasets.coco_dataset"], [206, "module-neural_compressor.experimental.data.datasets.dataset"], [207, "module-neural_compressor.experimental.data.datasets.dummy_dataset"], [208, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"], [209, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"], [210, "module-neural_compressor.experimental.data.datasets"], [211, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"], [212, "module-neural_compressor.experimental.data.filters.coco_filter"], [213, "module-neural_compressor.experimental.data.filters.filter"], [214, "module-neural_compressor.experimental.data.filters"], [215, "module-neural_compressor.experimental.data"], [216, "module-neural_compressor.experimental.data.transforms.imagenet_transform"], [217, "module-neural_compressor.experimental.data.transforms"], [218, "module-neural_compressor.experimental.data.transforms.tokenization"], [219, "module-neural_compressor.experimental.data.transforms.transform"], [220, "module-neural_compressor.experimental.distillation"], [221, "module-neural_compressor.experimental.export"], [222, "module-neural_compressor.experimental.export.qlinear2qdq"], [223, "module-neural_compressor.experimental.export.torch2onnx"], [224, "module-neural_compressor.experimental.export.utils"], [225, "module-neural_compressor.experimental.graph_optimization"], [226, "module-neural_compressor.experimental"], [227, "module-neural_compressor.experimental.metric.bleu"], [228, "module-neural_compressor.experimental.metric.bleu_util"], [229, "module-neural_compressor.experimental.metric.coco_label_map"], [230, "module-neural_compressor.experimental.metric.coco_tools"], [231, "module-neural_compressor.experimental.metric.evaluate_squad"], [232, "module-neural_compressor.experimental.metric.f1"], [233, "module-neural_compressor.experimental.metric"], [234, "module-neural_compressor.experimental.metric.metric"], [235, "module-neural_compressor.experimental.mixed_precision"], [236, "module-neural_compressor.experimental.model_conversion"], [237, "module-neural_compressor.experimental.nas.basic_nas"], [238, "module-neural_compressor.experimental.nas.dynas"], [239, "module-neural_compressor.experimental.nas.dynast.dynas_manager"], [240, "module-neural_compressor.experimental.nas.dynast.dynas_predictor"], [241, "module-neural_compressor.experimental.nas.dynast.dynas_search"], [242, "module-neural_compressor.experimental.nas.dynast.dynas_utils"], [243, "module-neural_compressor.experimental.nas.dynast"], [244, "module-neural_compressor.experimental.nas.dynast.supernetwork"], [245, "module-neural_compressor.experimental.nas.dynast.supernetwork.machine_translation"], [246, "module-neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork"], [247, "module-neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface"], [248, "module-neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork"], [249, "module-neural_compressor.experimental.nas"], [250, "module-neural_compressor.experimental.nas.nas"], [251, "module-neural_compressor.experimental.nas.nas_utils"], [252, "module-neural_compressor.experimental.nas.search_algorithms"], [253, "module-neural_compressor.experimental.pruning"], [254, "module-neural_compressor.experimental.pruning_recipes"], [255, "module-neural_compressor.experimental.pruning_recipes.patterns"], [256, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"], [257, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"], [258, "module-neural_compressor.experimental.pruning_v2"], [259, "module-neural_compressor.experimental.pytorch_pruner"], [260, "module-neural_compressor.experimental.pytorch_pruner.logger"], [261, "module-neural_compressor.experimental.pytorch_pruner.patterns"], [262, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"], [263, "module-neural_compressor.experimental.pytorch_pruner.pruner"], [264, "module-neural_compressor.experimental.pytorch_pruner.pruning"], [265, "module-neural_compressor.experimental.pytorch_pruner.scheduler"], [266, "module-neural_compressor.experimental.quantization"], [267, "module-neural_compressor.experimental.scheduler"], [268, "module-neural_compressor"], [269, "module-neural_compressor.metric.bleu"], [270, "module-neural_compressor.metric.bleu_util"], [271, "module-neural_compressor.metric.coco_label_map"], [272, "module-neural_compressor.metric.coco_tools"], [273, "module-neural_compressor.metric.evaluate_squad"], [274, "module-neural_compressor.metric.f1"], [275, "module-neural_compressor.metric"], [276, "module-neural_compressor.metric.metric"], [277, "module-neural_compressor.mix_precision"], [278, "module-neural_compressor.model.base_model"], [279, "module-neural_compressor.model"], [280, "module-neural_compressor.model.keras_model"], [281, "module-neural_compressor.model.model"], [282, "module-neural_compressor.model.mxnet_model"], [283, "module-neural_compressor.model.nets_factory"], [284, "module-neural_compressor.model.onnx_model"], [285, "module-neural_compressor.model.tensorflow_model"], [286, "module-neural_compressor.model.torch_model"], [287, "module-neural_compressor.objective"], [288, "module-neural_compressor.pruner.criteria"], [289, "module-neural_compressor.pruner"], [290, "module-neural_compressor.pruner.logger"], [291, "module-neural_compressor.pruner.patterns"], [292, "module-neural_compressor.pruner.pruner_legacy.gradient_sensitivity"], [293, "module-neural_compressor.pruner.pruner_legacy.group_lasso"], [294, "module-neural_compressor.pruner.pruner_legacy"], [295, "module-neural_compressor.pruner.pruner_legacy.magnitude"], [296, "module-neural_compressor.pruner.pruner_legacy.pattern_lock"], [297, "module-neural_compressor.pruner.pruner_legacy.pruner"], [298, "module-neural_compressor.pruner.pruners"], [299, "module-neural_compressor.pruner.pruning"], [300, "module-neural_compressor.pruner.regs"], [301, "module-neural_compressor.pruner.schedulers"], [302, "module-neural_compressor.pruner.utils"], [303, "module-neural_compressor.quantization"], [304, "module-neural_compressor.strategy.auto_mixed_precision"], [305, "module-neural_compressor.strategy.basic"], [306, "module-neural_compressor.strategy.bayesian"], [307, "module-neural_compressor.strategy.conservative"], [308, "module-neural_compressor.strategy.exhaustive"], [309, "module-neural_compressor.strategy.hawq_v2"], [310, "module-neural_compressor.strategy"], [311, "module-neural_compressor.strategy.mse"], [312, "module-neural_compressor.strategy.mse_v2"], [313, "module-neural_compressor.strategy.random"], [314, "module-neural_compressor.strategy.strategy"], [315, "module-neural_compressor.strategy.utils"], [316, "module-neural_compressor.strategy.utils.tuning_sampler"], [317, "module-neural_compressor.strategy.utils.tuning_space"], [318, "module-neural_compressor.strategy.utils.tuning_structs"], [319, "module-neural_compressor.training"], [320, "module-neural_compressor.utils.collect_layer_histogram"], [321, "module-neural_compressor.utils.constant"], [322, "module-neural_compressor.utils.create_obj_from_config"], [323, "module-neural_compressor.utils"], [324, "module-neural_compressor.utils.kl_divergence"], [325, "module-neural_compressor.utils.load_huggingface"], [326, "module-neural_compressor.utils.logger"], [327, "module-neural_compressor.utils.options"], [328, "module-neural_compressor.utils.pytorch"], [329, "module-neural_compressor.utils.utility"], [330, "module-neural_compressor.ux.components.benchmark.benchmark"], [331, "module-neural_compressor.ux.components.benchmark.benchmark_model"], [332, "module-neural_compressor.ux.components.benchmark.execute_benchmark"], [333, "module-neural_compressor.ux.components.benchmark"], [334, "module-neural_compressor.ux.components.config_generator.benchmark_config_generator"], [335, "module-neural_compressor.ux.components.config_generator.config_generator"], [336, "module-neural_compressor.ux.components.config_generator.graph_optimization_config_generator"], [337, "module-neural_compressor.ux.components.config_generator"], [338, "module-neural_compressor.ux.components.config_generator.mixed_precision_config_generator"], [339, "module-neural_compressor.ux.components.config_generator.profiling_config_generator"], [340, "module-neural_compressor.ux.components.config_generator.pruning_config_generator"], [341, "module-neural_compressor.ux.components.config_generator.quantization_config_generator"], [342, "module-neural_compressor.ux.components.configuration_wizard.configuration_parser"], [343, "module-neural_compressor.ux.components.configuration_wizard.get_boundary_nodes"], [344, "module-neural_compressor.ux.components.configuration_wizard.get_configuration"], [345, "module-neural_compressor.ux.components.configuration_wizard"], [346, "module-neural_compressor.ux.components.configuration_wizard.params_feeder"], [347, "module-neural_compressor.ux.components.configuration_wizard.pruning_config_parser"], [348, "module-neural_compressor.ux.components.db_manager.db_manager"], [349, "module-neural_compressor.ux.components.db_manager.db_models.benchmark"], [350, "module-neural_compressor.ux.components.db_manager.db_models.benchmark_result"], [351, "module-neural_compressor.ux.components.db_manager.db_models.dataloader"], [352, "module-neural_compressor.ux.components.db_manager.db_models.dataset"], [353, "module-neural_compressor.ux.components.db_manager.db_models.domain"], [354, "module-neural_compressor.ux.components.db_manager.db_models.domain_flavour"], [355, "module-neural_compressor.ux.components.db_manager.db_models.example"], [356, "module-neural_compressor.ux.components.db_manager.db_models.framework"], [357, "module-neural_compressor.ux.components.db_manager.db_models"], [358, "module-neural_compressor.ux.components.db_manager.db_models.metric"], [359, "module-neural_compressor.ux.components.db_manager.db_models.model"], [360, "module-neural_compressor.ux.components.db_manager.db_models.optimization"], [361, "module-neural_compressor.ux.components.db_manager.db_models.optimization_type"], [362, "module-neural_compressor.ux.components.db_manager.db_models.precision"], [363, "module-neural_compressor.ux.components.db_manager.db_models.profiling"], [364, "module-neural_compressor.ux.components.db_manager.db_models.profiling_result"], [365, "module-neural_compressor.ux.components.db_manager.db_models.project"], [366, "module-neural_compressor.ux.components.db_manager.db_models.pruning_details"], [367, "module-neural_compressor.ux.components.db_manager.db_models.transform"], [368, "module-neural_compressor.ux.components.db_manager.db_models.tuning_details"], [369, "module-neural_compressor.ux.components.db_manager.db_models.tuning_history"], [370, "module-neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface"], [371, "module-neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface"], [372, "module-neural_compressor.ux.components.db_manager.db_operations.db_operations"], [373, "module-neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface"], [374, "module-neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface"], [375, "module-neural_compressor.ux.components.db_manager.db_operations.examples_api_interface"], [376, "module-neural_compressor.ux.components.db_manager.db_operations"], [377, "module-neural_compressor.ux.components.db_manager.db_operations.model_api_interface"], [378, "module-neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface"], [379, "module-neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface"], [380, "module-neural_compressor.ux.components.db_manager.db_operations.project_api_interface"], [381, "module-neural_compressor.ux.components.db_manager"], [382, "module-neural_compressor.ux.components.db_manager.params_interfaces"], [383, "module-neural_compressor.ux.components.db_manager.utils"], [384, "module-neural_compressor.ux.components.diagnosis.diagnosis"], [385, "module-neural_compressor.ux.components.diagnosis.factory"], [386, "module-neural_compressor.ux.components.diagnosis"], [387, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis"], [388, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis"], [389, "module-neural_compressor.ux.components.diagnosis.op_details"], [390, "module-neural_compressor.ux.components.diagnosis.op_entry"], [391, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis"], [392, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis"], [393, "module-neural_compressor.ux.components.file_browser.file_browser"], [394, "module-neural_compressor.ux.components.file_browser"], [395, "module-neural_compressor.ux.components.graph.attribute"], [396, "module-neural_compressor.ux.components.graph.collapser"], [397, "module-neural_compressor.ux.components.graph.edge"], [398, "module-neural_compressor.ux.components.graph.graph"], [399, "module-neural_compressor.ux.components.graph.graph_reader"], [400, "module-neural_compressor.ux.components.graph"], [401, "module-neural_compressor.ux.components.graph.node"], [402, "module-neural_compressor.ux.components.graph.reader"], [403, "module-neural_compressor.ux.components.graph.reader.onnxrt_reader"], [404, "module-neural_compressor.ux.components.graph.reader.tensorflow_reader"], [405, "module-neural_compressor.ux.components"], [406, "module-neural_compressor.ux.components.jobs_management"], [407, "module-neural_compressor.ux.components.jobs_management.jobs_control_queue"], [408, "module-neural_compressor.ux.components.jobs_management.jobs_manager"], [409, "module-neural_compressor.ux.components.jobs_management.request"], [410, "module-neural_compressor.ux.components.manage_workspace"], [411, "module-neural_compressor.ux.components.model.domain"], [412, "module-neural_compressor.ux.components.model"], [413, "module-neural_compressor.ux.components.model.model"], [414, "module-neural_compressor.ux.components.model.model_type_getter"], [415, "module-neural_compressor.ux.components.model.onnxrt"], [416, "module-neural_compressor.ux.components.model.onnxrt.model"], [417, "module-neural_compressor.ux.components.model.pytorch"], [418, "module-neural_compressor.ux.components.model.pytorch.model"], [419, "module-neural_compressor.ux.components.model.repository"], [420, "module-neural_compressor.ux.components.model.shape"], [421, "module-neural_compressor.ux.components.model.tensorflow.frozen_pb"], [422, "module-neural_compressor.ux.components.model.tensorflow"], [423, "module-neural_compressor.ux.components.model.tensorflow.keras"], [424, "module-neural_compressor.ux.components.model.tensorflow.meta_graph"], [425, "module-neural_compressor.ux.components.model.tensorflow.model"], [426, "module-neural_compressor.ux.components.model.tensorflow.saved_model"], [427, "module-neural_compressor.ux.components.model.tensorflow.utils"], [428, "module-neural_compressor.ux.components.model_zoo.download_config"], [429, "module-neural_compressor.ux.components.model_zoo.download_model"], [430, "module-neural_compressor.ux.components.model_zoo.downloader"], [431, "module-neural_compressor.ux.components.model_zoo"], [432, "module-neural_compressor.ux.components.model_zoo.list_models"], [433, "module-neural_compressor.ux.components.names_mapper"], [434, "module-neural_compressor.ux.components.names_mapper.names_mapper"], [435, "module-neural_compressor.ux.components.optimization.execute_optimization"], [436, "module-neural_compressor.ux.components.optimization.factory"], [437, "module-neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization"], [438, "module-neural_compressor.ux.components.optimization.graph_optimizer"], [439, "module-neural_compressor.ux.components.optimization.graph_optimizer.optimize_model"], [440, "module-neural_compressor.ux.components.optimization"], [441, "module-neural_compressor.ux.components.optimization.mixed_precision"], [442, "module-neural_compressor.ux.components.optimization.mixed_precision.mixed_precision"], [443, "module-neural_compressor.ux.components.optimization.mixed_precision.optimize_model"], [444, "module-neural_compressor.ux.components.optimization.neural_coder_optimization"], [445, "module-neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model"], [446, "module-neural_compressor.ux.components.optimization.optimization"], [447, "module-neural_compressor.ux.components.optimization.pruning"], [448, "module-neural_compressor.ux.components.optimization.pruning.optimize_model"], [449, "module-neural_compressor.ux.components.optimization.pruning.pruning"], [450, "module-neural_compressor.ux.components.optimization.tune"], [451, "module-neural_compressor.ux.components.optimization.tune.tune_model"], [452, "module-neural_compressor.ux.components.optimization.tune.tuning"], [453, "module-neural_compressor.ux.components.optimization.tuning_history"], [454, "module-neural_compressor.ux.components.profiling.execute_profiling"], [455, "module-neural_compressor.ux.components.profiling.factory"], [456, "module-neural_compressor.ux.components.profiling"], [457, "module-neural_compressor.ux.components.profiling.profile_model"], [458, "module-neural_compressor.ux.components.profiling.profiler"], [459, "module-neural_compressor.ux.components.profiling.profiling"], [460, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.factory"], [461, "module-neural_compressor.ux.components.profiling.tensorflow_profiler"], [462, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.profiler"], [463, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.utils"], [464, "module-neural_compressor.ux.inc_bench"], [465, "module-neural_compressor.ux"], [466, "module-neural_compressor.ux.utils.consts"], [467, "module-neural_compressor.ux.utils.environment"], [468, "module-neural_compressor.ux.utils.exceptions"], [469, "module-neural_compressor.ux.utils.executor"], [470, "module-neural_compressor.ux.utils.expiring_dict"], [471, "module-neural_compressor.ux.utils.github_info"], [472, "module-neural_compressor.ux.utils.hw_info"], [473, "module-neural_compressor.ux.utils"], [474, "module-neural_compressor.ux.utils.json_serializer"], [475, "module-neural_compressor.ux.utils.logger"], [476, "module-neural_compressor.ux.utils.parser"], [477, "module-neural_compressor.ux.utils.proc"], [478, "module-neural_compressor.ux.utils.processes"], [479, "module-neural_compressor.ux.utils.singleton"], [480, "module-neural_compressor.ux.utils.status_updates"], [481, "module-neural_compressor.ux.utils.templates"], [482, "module-neural_compressor.ux.utils.templates.metric"], [483, "module-neural_compressor.ux.utils.templates.workdir"], [484, "module-neural_compressor.ux.utils.utils"], [485, "module-neural_compressor.ux.utils.workload.config"], [486, "module-neural_compressor.ux.utils.workload.dataloader"], [487, "module-neural_compressor.ux.utils.workload.evaluation"], [488, "module-neural_compressor.ux.utils.workload.graph_optimization"], [489, "module-neural_compressor.ux.utils.workload"], [490, "module-neural_compressor.ux.utils.workload.mixed_precision"], [491, "module-neural_compressor.ux.utils.workload.model"], [492, "module-neural_compressor.ux.utils.workload.pruning"], [493, "module-neural_compressor.ux.utils.workload.quantization"], [494, "module-neural_compressor.ux.utils.workload.tuning"], [495, "module-neural_compressor.ux.utils.yaml_utils"], [496, "module-neural_compressor.ux.web.communication"], [497, "module-neural_compressor.ux.web.configuration"], [498, "module-neural_compressor.ux.web.exceptions"], [499, "module-neural_compressor.ux.web"], [500, "module-neural_compressor.ux.web.router"], [501, "module-neural_compressor.ux.web.server"], [502, "module-neural_compressor.ux.web.service.benchmark"], [503, "module-neural_compressor.ux.web.service.history_snapshot_parser"], [504, "module-neural_compressor.ux.web.service"], [505, "module-neural_compressor.ux.web.service.model"], [506, "module-neural_compressor.ux.web.service.optimization"], [507, "module-neural_compressor.ux.web.service.profiling"], [508, "module-neural_compressor.ux.web.service.request_data_processor"], [509, "module-neural_compressor.ux.web.service.response_generator"], [510, "module-neural_compressor.ux.web.service.workload"], [511, "module-neural_compressor.version"], [539, "module-neural_compressor.experimental.metric.bleu"]], "6ece06672ed3_v1_14": [[1, "module-6ece06672ed3_v1_14"]], "update_dataloaders() (in module 6ece06672ed3_v1_14)": [[1, "ece06672ed3_v1_14.update_dataloaders"]], "update_transformations() (in module 6ece06672ed3_v1_14)": [[1, "ece06672ed3_v1_14.update_transformations"]], "6f0d0f71d92e_v1_13": [[2, "module-6f0d0f71d92e_v1_13"]], "9e89549a08c8_v1_11": [[3, "module-9e89549a08c8_v1_11"]], "block_mask": [[4, "module-block_mask"]], "env": [[5, "module-env"]], "run_migrations_offline() (in module env)": [[5, "env.run_migrations_offline"]], "run_migrations_online() (in module env)": [[5, "env.run_migrations_online"]], "adaptor (class in neural_compressor.adaptor.adaptor)": [[6, "neural_compressor.adaptor.adaptor.Adaptor"]], "adaptor_registry() (in module neural_compressor.adaptor.adaptor)": [[6, "neural_compressor.adaptor.adaptor.adaptor_registry"]], "convert() (neural_compressor.adaptor.adaptor.adaptor method)": [[6, "neural_compressor.adaptor.adaptor.Adaptor.convert"]], "evaluate() (neural_compressor.adaptor.adaptor.adaptor method)": [[6, "neural_compressor.adaptor.adaptor.Adaptor.evaluate"]], "inspect_tensor() (neural_compressor.adaptor.adaptor.adaptor method)": [[6, "neural_compressor.adaptor.adaptor.Adaptor.inspect_tensor"]], "neural_compressor.adaptor.adaptor": [[6, "module-neural_compressor.adaptor.adaptor"]], "quantize() (neural_compressor.adaptor.adaptor.adaptor method)": [[6, "neural_compressor.adaptor.adaptor.Adaptor.quantize"]], "quantize_input() (neural_compressor.adaptor.adaptor.adaptor method)": [[6, "neural_compressor.adaptor.adaptor.Adaptor.quantize_input"]], "query_fused_patterns() (neural_compressor.adaptor.adaptor.adaptor method)": [[6, "neural_compressor.adaptor.adaptor.Adaptor.query_fused_patterns"]], "query_fw_capability() (neural_compressor.adaptor.adaptor.adaptor method)": [[6, "neural_compressor.adaptor.adaptor.Adaptor.query_fw_capability"]], "save() (neural_compressor.adaptor.adaptor.adaptor method)": [[6, "neural_compressor.adaptor.adaptor.Adaptor.save"]], "set_tensor() (neural_compressor.adaptor.adaptor.adaptor method)": [[6, "neural_compressor.adaptor.adaptor.Adaptor.set_tensor"]], "neural_compressor.adaptor": [[7, "module-neural_compressor.adaptor"]], "kerasadaptor (class in neural_compressor.adaptor.keras)": [[8, "neural_compressor.adaptor.keras.KerasAdaptor"]], "kerasquery (class in neural_compressor.adaptor.keras)": [[8, "neural_compressor.adaptor.keras.KerasQuery"]], "convert() (neural_compressor.adaptor.keras.kerasadaptor method)": [[8, "neural_compressor.adaptor.keras.KerasAdaptor.convert"]], "evaluate() (neural_compressor.adaptor.keras.kerasadaptor method)": [[8, "neural_compressor.adaptor.keras.KerasAdaptor.evaluate"]], "get_op_types() (neural_compressor.adaptor.keras.kerasquery method)": [[8, "neural_compressor.adaptor.keras.KerasQuery.get_op_types"]], "get_op_types_by_precision() (neural_compressor.adaptor.keras.kerasquery method)": [[8, "neural_compressor.adaptor.keras.KerasQuery.get_op_types_by_precision"]], "get_optype_wise_ability() (neural_compressor.adaptor.keras.kerasadaptor method)": [[8, "neural_compressor.adaptor.keras.KerasAdaptor.get_optype_wise_ability"]], "get_precisions() (neural_compressor.adaptor.keras.kerasquery method)": [[8, "neural_compressor.adaptor.keras.KerasQuery.get_precisions"]], "get_quantization_capability() (neural_compressor.adaptor.keras.kerasquery method)": [[8, "neural_compressor.adaptor.keras.KerasQuery.get_quantization_capability"]], "get_version() (neural_compressor.adaptor.keras.kerasquery method)": [[8, "neural_compressor.adaptor.keras.KerasQuery.get_version"]], "inspect_tensor() (neural_compressor.adaptor.keras.kerasadaptor method)": [[8, "neural_compressor.adaptor.keras.KerasAdaptor.inspect_tensor"]], "neural_compressor.adaptor.keras": [[8, "module-neural_compressor.adaptor.keras"]], "quantize() (neural_compressor.adaptor.keras.kerasadaptor method)": [[8, "neural_compressor.adaptor.keras.KerasAdaptor.quantize"]], "quantize_input() (neural_compressor.adaptor.keras.kerasadaptor method)": [[8, "neural_compressor.adaptor.keras.KerasAdaptor.quantize_input"]], "query_fw_capability() (neural_compressor.adaptor.keras.kerasadaptor method)": [[8, "neural_compressor.adaptor.keras.KerasAdaptor.query_fw_capability"]], "save() (neural_compressor.adaptor.keras.kerasadaptor method)": [[8, "neural_compressor.adaptor.keras.KerasAdaptor.save"]], "set_tensor() (neural_compressor.adaptor.keras.kerasadaptor method)": [[8, "neural_compressor.adaptor.keras.KerasAdaptor.set_tensor"]], "neural_compressor.adaptor.keras_utils": [[9, "module-neural_compressor.adaptor.keras_utils"]], "neural_compressor.adaptor.keras_utils.quantizer": [[10, "module-neural_compressor.adaptor.keras_utils.quantizer"]], "mxnetadaptor (class in neural_compressor.adaptor.mxnet)": [[11, "neural_compressor.adaptor.mxnet.MxNetAdaptor"]], "evaluate() (neural_compressor.adaptor.mxnet.mxnetadaptor method)": [[11, "neural_compressor.adaptor.mxnet.MxNetAdaptor.evaluate"]], "inspect_tensor() (neural_compressor.adaptor.mxnet.mxnetadaptor method)": [[11, "neural_compressor.adaptor.mxnet.MxNetAdaptor.inspect_tensor"]], "neural_compressor.adaptor.mxnet": [[11, "module-neural_compressor.adaptor.mxnet"]], "quantize() (neural_compressor.adaptor.mxnet.mxnetadaptor method)": [[11, "neural_compressor.adaptor.mxnet.MxNetAdaptor.quantize"]], "query_fw_capability() (neural_compressor.adaptor.mxnet.mxnetadaptor method)": [[11, "neural_compressor.adaptor.mxnet.MxNetAdaptor.query_fw_capability"]], "recover_tuned_model() (neural_compressor.adaptor.mxnet.mxnetadaptor method)": [[11, "neural_compressor.adaptor.mxnet.MxNetAdaptor.recover_tuned_model"]], "set_tensor() (neural_compressor.adaptor.mxnet.mxnetadaptor method)": [[11, "neural_compressor.adaptor.mxnet.MxNetAdaptor.set_tensor"]], "neural_compressor.adaptor.mxnet_utils": [[12, "module-neural_compressor.adaptor.mxnet_utils"]], "calibcollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.CalibCollector"]], "calibdata (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.CalibData"]], "collectorbase (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.CollectorBase"]], "dataiterloader (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.DataIterLoader"]], "dataloaderwrap (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.DataLoaderWrap"]], "namecollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.NameCollector"]], "optype (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.OpType"]], "tensorcollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.TensorCollector"]], "amp_convert() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.amp_convert"]], "calc_kl_th_dict() (neural_compressor.adaptor.mxnet_utils.util.calibcollector method)": [[13, "neural_compressor.adaptor.mxnet_utils.util.CalibCollector.calc_kl_th_dict"]], "calib_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.calib_model"]], "check_mx_version() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.check_mx_version"]], "collect_gluon() (neural_compressor.adaptor.mxnet_utils.util.calibcollector method)": [[13, "neural_compressor.adaptor.mxnet_utils.util.CalibCollector.collect_gluon"]], "collect_gluon() (neural_compressor.adaptor.mxnet_utils.util.collectorbase method)": [[13, "neural_compressor.adaptor.mxnet_utils.util.CollectorBase.collect_gluon"]], "collect_gluon() (neural_compressor.adaptor.mxnet_utils.util.namecollector method)": [[13, "neural_compressor.adaptor.mxnet_utils.util.NameCollector.collect_gluon"]], "collect_gluon() (neural_compressor.adaptor.mxnet_utils.util.tensorcollector method)": [[13, "neural_compressor.adaptor.mxnet_utils.util.TensorCollector.collect_gluon"]], "collect_module() (neural_compressor.adaptor.mxnet_utils.util.collectorbase method)": [[13, "neural_compressor.adaptor.mxnet_utils.util.CollectorBase.collect_module"]], "combine_capabilities() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.combine_capabilities"]], "create_data_example() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.create_data_example"]], "distribute_calib_tensors() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.distribute_calib_tensors"]], "ensure_list() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.ensure_list"]], "fuse() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.fuse"]], "get_framework_name() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.get_framework_name"]], "is_model_quantized() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.is_model_quantized"]], "isiterable() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.isiterable"]], "make_module() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.make_module"]], "make_nc_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.make_nc_model"]], "make_symbol_block() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.make_symbol_block"]], "min_max_dict (neural_compressor.adaptor.mxnet_utils.util.calibdata property)": [[13, "neural_compressor.adaptor.mxnet_utils.util.CalibData.min_max_dict"]], "ndarray_to_device() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.ndarray_to_device"]], "neural_compressor.adaptor.mxnet_utils.util": [[13, "module-neural_compressor.adaptor.mxnet_utils.util"]], "parse_tune_config() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.parse_tune_config"]], "post_batch() (neural_compressor.adaptor.mxnet_utils.util.collectorbase method)": [[13, "neural_compressor.adaptor.mxnet_utils.util.CollectorBase.post_batch"]], "post_collect() (neural_compressor.adaptor.mxnet_utils.util.calibdata method)": [[13, "neural_compressor.adaptor.mxnet_utils.util.CalibData.post_collect"]], "pre_batch() (neural_compressor.adaptor.mxnet_utils.util.collectorbase method)": [[13, "neural_compressor.adaptor.mxnet_utils.util.CollectorBase.pre_batch"]], "pre_batch() (neural_compressor.adaptor.mxnet_utils.util.tensorcollector method)": [[13, "neural_compressor.adaptor.mxnet_utils.util.TensorCollector.pre_batch"]], "prepare_dataloader() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.prepare_dataloader"]], "prepare_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.prepare_model"]], "prepare_model_data() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.prepare_model_data"]], "quantize_sym_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.quantize_sym_model"]], "query_quantizable_nodes() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.query_quantizable_nodes"]], "run_forward() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.run_forward"]], "onnxrtquery (class in neural_compressor.adaptor.onnxrt)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRTQuery"]], "onnxrt_integeropsadaptor (class in neural_compressor.adaptor.onnxrt)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRT_IntegerOpsAdaptor"]], "onnxrt_qdqadaptor (class in neural_compressor.adaptor.onnxrt)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRT_QDQAdaptor"]], "onnxrt_qlinearopsadaptor (class in neural_compressor.adaptor.onnxrt)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRT_QLinearOpsAdaptor"]], "onnxruntimeadaptor (class in neural_compressor.adaptor.onnxrt)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor"]], "evaluate() (neural_compressor.adaptor.onnxrt.onnxruntimeadaptor method)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor.evaluate"]], "get_graph_optimization() (neural_compressor.adaptor.onnxrt.onnxrtquery method)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRTQuery.get_graph_optimization"]], "get_op_types() (neural_compressor.adaptor.onnxrt.onnxrtquery method)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRTQuery.get_op_types"]], "get_op_types_by_precision() (neural_compressor.adaptor.onnxrt.onnxrtquery method)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRTQuery.get_op_types_by_precision"]], "get_precisions() (neural_compressor.adaptor.onnxrt.onnxrtquery method)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRTQuery.get_precisions"]], "get_quantization_capability() (neural_compressor.adaptor.onnxrt.onnxrtquery method)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRTQuery.get_quantization_capability"]], "get_version() (neural_compressor.adaptor.onnxrt.onnxrtquery method)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRTQuery.get_version"]], "inspect_tensor() (neural_compressor.adaptor.onnxrt.onnxruntimeadaptor method)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor.inspect_tensor"]], "neural_compressor.adaptor.onnxrt": [[14, "module-neural_compressor.adaptor.onnxrt"]], "quantize() (neural_compressor.adaptor.onnxrt.onnxruntimeadaptor method)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor.quantize"]], "query_fw_capability() (neural_compressor.adaptor.onnxrt.onnxruntimeadaptor method)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor.query_fw_capability"]], "recover() (neural_compressor.adaptor.onnxrt.onnxruntimeadaptor method)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor.recover"]], "save() (neural_compressor.adaptor.onnxrt.onnxruntimeadaptor method)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor.save"]], "set_tensor() (neural_compressor.adaptor.onnxrt.onnxruntimeadaptor method)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor.set_tensor"]], "onnxrtaugment (class in neural_compressor.adaptor.ox_utils.calibration)": [[15, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment"]], "augment_graph() (neural_compressor.adaptor.ox_utils.calibration.onnxrtaugment method)": [[15, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment.augment_graph"]], "calculate_quantization_params() (neural_compressor.adaptor.ox_utils.calibration.onnxrtaugment method)": [[15, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment.calculate_quantization_params"]], "calculate_scale_zeropoint() (neural_compressor.adaptor.ox_utils.calibration.onnxrtaugment method)": [[15, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment.calculate_scale_zeropoint"]], "dump_calibration() (neural_compressor.adaptor.ox_utils.calibration.onnxrtaugment method)": [[15, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment.dump_calibration"]], "dump_minmax() (neural_compressor.adaptor.ox_utils.calibration.onnxrtaugment method)": [[15, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment.dump_minmax"]], "dump_tensor() (neural_compressor.adaptor.ox_utils.calibration.onnxrtaugment method)": [[15, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment.dump_tensor"]], "get_intermediate_outputs() (neural_compressor.adaptor.ox_utils.calibration.onnxrtaugment method)": [[15, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment.get_intermediate_outputs"]], "neural_compressor.adaptor.ox_utils.calibration": [[15, "module-neural_compressor.adaptor.ox_utils.calibration"]], "neural_compressor.adaptor.ox_utils": [[16, "module-neural_compressor.adaptor.ox_utils"]], "activationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[17, "neural_compressor.adaptor.ox_utils.operators.activation.ActivationOperator"]], "qactivationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[17, "neural_compressor.adaptor.ox_utils.operators.activation.QActivationOperator"]], "removableactivationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[17, "neural_compressor.adaptor.ox_utils.operators.activation.RemovableActivationOperator"]], "convert() (neural_compressor.adaptor.ox_utils.operators.activation.activationoperator method)": [[17, "neural_compressor.adaptor.ox_utils.operators.activation.ActivationOperator.convert"]], "convert() (neural_compressor.adaptor.ox_utils.operators.activation.qactivationoperator method)": [[17, "neural_compressor.adaptor.ox_utils.operators.activation.QActivationOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.activation.activationoperator method)": [[17, "neural_compressor.adaptor.ox_utils.operators.activation.ActivationOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[17, "module-neural_compressor.adaptor.ox_utils.operators.activation"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.activation.activationoperator method)": [[17, "neural_compressor.adaptor.ox_utils.operators.activation.ActivationOperator.quantize"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.activation.removableactivationoperator method)": [[17, "neural_compressor.adaptor.ox_utils.operators.activation.RemovableActivationOperator.quantize"]], "quantize_check() (neural_compressor.adaptor.ox_utils.operators.activation.activationoperator method)": [[17, "neural_compressor.adaptor.ox_utils.operators.activation.ActivationOperator.quantize_check"]], "quantize_check() (neural_compressor.adaptor.ox_utils.operators.activation.removableactivationoperator method)": [[17, "neural_compressor.adaptor.ox_utils.operators.activation.RemovableActivationOperator.quantize_check"]], "argmaxoperator (class in neural_compressor.adaptor.ox_utils.operators.argmax)": [[18, "neural_compressor.adaptor.ox_utils.operators.argmax.ArgMaxOperator"]], "qargmaxoperator (class in neural_compressor.adaptor.ox_utils.operators.argmax)": [[18, "neural_compressor.adaptor.ox_utils.operators.argmax.QArgMaxOperator"]], "convert() (neural_compressor.adaptor.ox_utils.operators.argmax.argmaxoperator method)": [[18, "neural_compressor.adaptor.ox_utils.operators.argmax.ArgMaxOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.argmax.argmaxoperator method)": [[18, "neural_compressor.adaptor.ox_utils.operators.argmax.ArgMaxOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[18, "module-neural_compressor.adaptor.ox_utils.operators.argmax"]], "attentionoperator (class in neural_compressor.adaptor.ox_utils.operators.attention)": [[19, "neural_compressor.adaptor.ox_utils.operators.attention.AttentionOperator"]], "qattentionoperator (class in neural_compressor.adaptor.ox_utils.operators.attention)": [[19, "neural_compressor.adaptor.ox_utils.operators.attention.QAttentionOperator"]], "convert() (neural_compressor.adaptor.ox_utils.operators.attention.attentionoperator method)": [[19, "neural_compressor.adaptor.ox_utils.operators.attention.AttentionOperator.convert"]], "convert() (neural_compressor.adaptor.ox_utils.operators.attention.qattentionoperator method)": [[19, "neural_compressor.adaptor.ox_utils.operators.attention.QAttentionOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.attention.attentionoperator method)": [[19, "neural_compressor.adaptor.ox_utils.operators.attention.AttentionOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[19, "module-neural_compressor.adaptor.ox_utils.operators.attention"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.attention.attentionoperator method)": [[19, "neural_compressor.adaptor.ox_utils.operators.attention.AttentionOperator.quantize"]], "binaryoperator (class in neural_compressor.adaptor.ox_utils.operators.binary_op)": [[20, "neural_compressor.adaptor.ox_utils.operators.binary_op.BinaryOperator"]], "qbinaryoperator (class in neural_compressor.adaptor.ox_utils.operators.binary_op)": [[20, "neural_compressor.adaptor.ox_utils.operators.binary_op.QBinaryOperator"]], "convert() (neural_compressor.adaptor.ox_utils.operators.binary_op.binaryoperator method)": [[20, "neural_compressor.adaptor.ox_utils.operators.binary_op.BinaryOperator.convert"]], "convert() (neural_compressor.adaptor.ox_utils.operators.binary_op.qbinaryoperator method)": [[20, "neural_compressor.adaptor.ox_utils.operators.binary_op.QBinaryOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.binary_op.binaryoperator method)": [[20, "neural_compressor.adaptor.ox_utils.operators.binary_op.BinaryOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[20, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.binary_op.binaryoperator method)": [[20, "neural_compressor.adaptor.ox_utils.operators.binary_op.BinaryOperator.quantize"]], "quantize_check() (neural_compressor.adaptor.ox_utils.operators.binary_op.binaryoperator method)": [[20, "neural_compressor.adaptor.ox_utils.operators.binary_op.BinaryOperator.quantize_check"]], "concatoperator (class in neural_compressor.adaptor.ox_utils.operators.concat)": [[21, "neural_compressor.adaptor.ox_utils.operators.concat.ConcatOperator"]], "qconcatoperator (class in neural_compressor.adaptor.ox_utils.operators.concat)": [[21, "neural_compressor.adaptor.ox_utils.operators.concat.QConcatOperator"]], "cast() (neural_compressor.adaptor.ox_utils.operators.concat.concatoperator method)": [[21, "neural_compressor.adaptor.ox_utils.operators.concat.ConcatOperator.cast"]], "convert() (neural_compressor.adaptor.ox_utils.operators.concat.concatoperator method)": [[21, "neural_compressor.adaptor.ox_utils.operators.concat.ConcatOperator.convert"]], "convert() (neural_compressor.adaptor.ox_utils.operators.concat.qconcatoperator method)": [[21, "neural_compressor.adaptor.ox_utils.operators.concat.QConcatOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.concat.concatoperator method)": [[21, "neural_compressor.adaptor.ox_utils.operators.concat.ConcatOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[21, "module-neural_compressor.adaptor.ox_utils.operators.concat"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.concat.concatoperator method)": [[21, "neural_compressor.adaptor.ox_utils.operators.concat.ConcatOperator.quantize"]], "quantize_check() (neural_compressor.adaptor.ox_utils.operators.concat.concatoperator method)": [[21, "neural_compressor.adaptor.ox_utils.operators.concat.ConcatOperator.quantize_check"]], "convoperator (class in neural_compressor.adaptor.ox_utils.operators.conv)": [[22, "neural_compressor.adaptor.ox_utils.operators.conv.ConvOperator"]], "qconvoperator (class in neural_compressor.adaptor.ox_utils.operators.conv)": [[22, "neural_compressor.adaptor.ox_utils.operators.conv.QConvOperator"]], "convert() (neural_compressor.adaptor.ox_utils.operators.conv.convoperator method)": [[22, "neural_compressor.adaptor.ox_utils.operators.conv.ConvOperator.convert"]], "convert() (neural_compressor.adaptor.ox_utils.operators.conv.qconvoperator method)": [[22, "neural_compressor.adaptor.ox_utils.operators.conv.QConvOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.conv.convoperator method)": [[22, "neural_compressor.adaptor.ox_utils.operators.conv.ConvOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[22, "module-neural_compressor.adaptor.ox_utils.operators.conv"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.conv.convoperator method)": [[22, "neural_compressor.adaptor.ox_utils.operators.conv.ConvOperator.quantize"]], "direct8bitoperator (class in neural_compressor.adaptor.ox_utils.operators.direct_q8)": [[23, "neural_compressor.adaptor.ox_utils.operators.direct_q8.Direct8BitOperator"]], "directcastoperator (class in neural_compressor.adaptor.ox_utils.operators.direct_q8)": [[23, "neural_compressor.adaptor.ox_utils.operators.direct_q8.DirectCastOperator"]], "qdirectoperator (class in neural_compressor.adaptor.ox_utils.operators.direct_q8)": [[23, "neural_compressor.adaptor.ox_utils.operators.direct_q8.QDirectOperator"]], "cast() (neural_compressor.adaptor.ox_utils.operators.direct_q8.direct8bitoperator method)": [[23, "neural_compressor.adaptor.ox_utils.operators.direct_q8.Direct8BitOperator.cast"]], "cast() (neural_compressor.adaptor.ox_utils.operators.direct_q8.directcastoperator method)": [[23, "neural_compressor.adaptor.ox_utils.operators.direct_q8.DirectCastOperator.cast"]], "convert() (neural_compressor.adaptor.ox_utils.operators.direct_q8.direct8bitoperator method)": [[23, "neural_compressor.adaptor.ox_utils.operators.direct_q8.Direct8BitOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.direct_q8.direct8bitoperator method)": [[23, "neural_compressor.adaptor.ox_utils.operators.direct_q8.Direct8BitOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[23, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.direct_q8.direct8bitoperator method)": [[23, "neural_compressor.adaptor.ox_utils.operators.direct_q8.Direct8BitOperator.quantize"]], "quantize_check() (neural_compressor.adaptor.ox_utils.operators.direct_q8.direct8bitoperator method)": [[23, "neural_compressor.adaptor.ox_utils.operators.direct_q8.Direct8BitOperator.quantize_check"]], "embedlayernormalizationoperator (class in neural_compressor.adaptor.ox_utils.operators.embed_layernorm)": [[24, "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.EmbedLayerNormalizationOperator"]], "qembedlayernormalizationoperator (class in neural_compressor.adaptor.ox_utils.operators.embed_layernorm)": [[24, "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.QEmbedLayerNormalizationOperator"]], "convert() (neural_compressor.adaptor.ox_utils.operators.embed_layernorm.embedlayernormalizationoperator method)": [[24, "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.EmbedLayerNormalizationOperator.convert"]], "convert() (neural_compressor.adaptor.ox_utils.operators.embed_layernorm.qembedlayernormalizationoperator method)": [[24, "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.QEmbedLayerNormalizationOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.embed_layernorm.embedlayernormalizationoperator method)": [[24, "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.EmbedLayerNormalizationOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[24, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.embed_layernorm.embedlayernormalizationoperator method)": [[24, "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.EmbedLayerNormalizationOperator.quantize"]], "gatheroperator (class in neural_compressor.adaptor.ox_utils.operators.gather)": [[25, "neural_compressor.adaptor.ox_utils.operators.gather.GatherOperator"]], "qgatheroperator (class in neural_compressor.adaptor.ox_utils.operators.gather)": [[25, "neural_compressor.adaptor.ox_utils.operators.gather.QGatherOperator"]], "convert() (neural_compressor.adaptor.ox_utils.operators.gather.gatheroperator method)": [[25, "neural_compressor.adaptor.ox_utils.operators.gather.GatherOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.gather.gatheroperator method)": [[25, "neural_compressor.adaptor.ox_utils.operators.gather.GatherOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[25, "module-neural_compressor.adaptor.ox_utils.operators.gather"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.gather.gatheroperator method)": [[25, "neural_compressor.adaptor.ox_utils.operators.gather.GatherOperator.quantize"]], "quantize_check() (neural_compressor.adaptor.ox_utils.operators.gather.gatheroperator method)": [[25, "neural_compressor.adaptor.ox_utils.operators.gather.GatherOperator.quantize_check"]], "globalaveragepooloperator (class in neural_compressor.adaptor.ox_utils.operators.gavgpool)": [[26, "neural_compressor.adaptor.ox_utils.operators.gavgpool.GlobalAveragePoolOperator"]], "qglobalaveragepooloperator (class in neural_compressor.adaptor.ox_utils.operators.gavgpool)": [[26, "neural_compressor.adaptor.ox_utils.operators.gavgpool.QGlobalAveragePoolOperator"]], "convert() (neural_compressor.adaptor.ox_utils.operators.gavgpool.globalaveragepooloperator method)": [[26, "neural_compressor.adaptor.ox_utils.operators.gavgpool.GlobalAveragePoolOperator.convert"]], "convert() (neural_compressor.adaptor.ox_utils.operators.gavgpool.qglobalaveragepooloperator method)": [[26, "neural_compressor.adaptor.ox_utils.operators.gavgpool.QGlobalAveragePoolOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.gavgpool.globalaveragepooloperator method)": [[26, "neural_compressor.adaptor.ox_utils.operators.gavgpool.GlobalAveragePoolOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[26, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"]], "gemmoperator (class in neural_compressor.adaptor.ox_utils.operators.gemm)": [[27, "neural_compressor.adaptor.ox_utils.operators.gemm.GemmOperator"]], "qgemmoperator (class in neural_compressor.adaptor.ox_utils.operators.gemm)": [[27, "neural_compressor.adaptor.ox_utils.operators.gemm.QGemmOperator"]], "convert() (neural_compressor.adaptor.ox_utils.operators.gemm.gemmoperator method)": [[27, "neural_compressor.adaptor.ox_utils.operators.gemm.GemmOperator.convert"]], "convert() (neural_compressor.adaptor.ox_utils.operators.gemm.qgemmoperator method)": [[27, "neural_compressor.adaptor.ox_utils.operators.gemm.QGemmOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.gemm.gemmoperator method)": [[27, "neural_compressor.adaptor.ox_utils.operators.gemm.GemmOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[27, "module-neural_compressor.adaptor.ox_utils.operators.gemm"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.gemm.gemmoperator method)": [[27, "neural_compressor.adaptor.ox_utils.operators.gemm.GemmOperator.quantize"]], "quantize_check() (neural_compressor.adaptor.ox_utils.operators.gemm.gemmoperator method)": [[27, "neural_compressor.adaptor.ox_utils.operators.gemm.GemmOperator.quantize_check"]], "neural_compressor.adaptor.ox_utils.operators": [[28, "module-neural_compressor.adaptor.ox_utils.operators"]], "lstmoperator (class in neural_compressor.adaptor.ox_utils.operators.lstm)": [[29, "neural_compressor.adaptor.ox_utils.operators.lstm.LSTMOperator"]], "convert() (neural_compressor.adaptor.ox_utils.operators.lstm.lstmoperator method)": [[29, "neural_compressor.adaptor.ox_utils.operators.lstm.LSTMOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.lstm.lstmoperator method)": [[29, "neural_compressor.adaptor.ox_utils.operators.lstm.LSTMOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[29, "module-neural_compressor.adaptor.ox_utils.operators.lstm"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.lstm.lstmoperator method)": [[29, "neural_compressor.adaptor.ox_utils.operators.lstm.LSTMOperator.quantize"]], "matmuloperator (class in neural_compressor.adaptor.ox_utils.operators.matmul)": [[30, "neural_compressor.adaptor.ox_utils.operators.matmul.MatMulOperator"]], "qmatmuloperator (class in neural_compressor.adaptor.ox_utils.operators.matmul)": [[30, "neural_compressor.adaptor.ox_utils.operators.matmul.QMatMulOperator"]], "convert() (neural_compressor.adaptor.ox_utils.operators.matmul.matmuloperator method)": [[30, "neural_compressor.adaptor.ox_utils.operators.matmul.MatMulOperator.convert"]], "convert() (neural_compressor.adaptor.ox_utils.operators.matmul.qmatmuloperator method)": [[30, "neural_compressor.adaptor.ox_utils.operators.matmul.QMatMulOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.matmul.matmuloperator method)": [[30, "neural_compressor.adaptor.ox_utils.operators.matmul.MatMulOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[30, "module-neural_compressor.adaptor.ox_utils.operators.matmul"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.matmul.matmuloperator method)": [[30, "neural_compressor.adaptor.ox_utils.operators.matmul.MatMulOperator.quantize"]], "maxpooloperator (class in neural_compressor.adaptor.ox_utils.operators.maxpool)": [[31, "neural_compressor.adaptor.ox_utils.operators.maxpool.MaxPoolOperator"]], "qmaxpooloperator (class in neural_compressor.adaptor.ox_utils.operators.maxpool)": [[31, "neural_compressor.adaptor.ox_utils.operators.maxpool.QMaxPoolOperator"]], "convert() (neural_compressor.adaptor.ox_utils.operators.maxpool.maxpooloperator method)": [[31, "neural_compressor.adaptor.ox_utils.operators.maxpool.MaxPoolOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.maxpool.maxpooloperator method)": [[31, "neural_compressor.adaptor.ox_utils.operators.maxpool.MaxPoolOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[31, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.maxpool.maxpooloperator method)": [[31, "neural_compressor.adaptor.ox_utils.operators.maxpool.MaxPoolOperator.quantize"]], "quantize_check() (neural_compressor.adaptor.ox_utils.operators.maxpool.maxpooloperator method)": [[31, "neural_compressor.adaptor.ox_utils.operators.maxpool.MaxPoolOperator.quantize_check"]], "operator (class in neural_compressor.adaptor.ox_utils.operators.ops)": [[32, "neural_compressor.adaptor.ox_utils.operators.ops.Operator"]], "qoperator (class in neural_compressor.adaptor.ox_utils.operators.ops)": [[32, "neural_compressor.adaptor.ox_utils.operators.ops.QOperator"]], "cast() (neural_compressor.adaptor.ox_utils.operators.ops.operator method)": [[32, "neural_compressor.adaptor.ox_utils.operators.ops.Operator.cast"]], "convert() (neural_compressor.adaptor.ox_utils.operators.ops.operator method)": [[32, "neural_compressor.adaptor.ox_utils.operators.ops.Operator.convert"]], "convert() (neural_compressor.adaptor.ox_utils.operators.ops.qoperator method)": [[32, "neural_compressor.adaptor.ox_utils.operators.ops.QOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.ops.operator method)": [[32, "neural_compressor.adaptor.ox_utils.operators.ops.Operator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[32, "module-neural_compressor.adaptor.ox_utils.operators.ops"]], "op_registry() (in module neural_compressor.adaptor.ox_utils.operators.ops)": [[32, "neural_compressor.adaptor.ox_utils.operators.ops.op_registry"]], "qop_registry() (in module neural_compressor.adaptor.ox_utils.operators.ops)": [[32, "neural_compressor.adaptor.ox_utils.operators.ops.qop_registry"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.ops.operator method)": [[32, "neural_compressor.adaptor.ox_utils.operators.ops.Operator.quantize"]], "quantize_check() (neural_compressor.adaptor.ox_utils.operators.ops.operator method)": [[32, "neural_compressor.adaptor.ox_utils.operators.ops.Operator.quantize_check"]], "padoperator (class in neural_compressor.adaptor.ox_utils.operators.pad)": [[33, "neural_compressor.adaptor.ox_utils.operators.pad.PadOperator"]], "qpadoperator (class in neural_compressor.adaptor.ox_utils.operators.pad)": [[33, "neural_compressor.adaptor.ox_utils.operators.pad.QPadOperator"]], "convert() (neural_compressor.adaptor.ox_utils.operators.pad.padoperator method)": [[33, "neural_compressor.adaptor.ox_utils.operators.pad.PadOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.pad.padoperator method)": [[33, "neural_compressor.adaptor.ox_utils.operators.pad.PadOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[33, "module-neural_compressor.adaptor.ox_utils.operators.pad"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.pad.padoperator method)": [[33, "neural_compressor.adaptor.ox_utils.operators.pad.PadOperator.quantize"]], "quantize_check() (neural_compressor.adaptor.ox_utils.operators.pad.padoperator method)": [[33, "neural_compressor.adaptor.ox_utils.operators.pad.PadOperator.quantize_check"]], "pooloperator (class in neural_compressor.adaptor.ox_utils.operators.pooling)": [[34, "neural_compressor.adaptor.ox_utils.operators.pooling.PoolOperator"]], "qpooloperator (class in neural_compressor.adaptor.ox_utils.operators.pooling)": [[34, "neural_compressor.adaptor.ox_utils.operators.pooling.QPoolOperator"]], "convert() (neural_compressor.adaptor.ox_utils.operators.pooling.pooloperator method)": [[34, "neural_compressor.adaptor.ox_utils.operators.pooling.PoolOperator.convert"]], "convert() (neural_compressor.adaptor.ox_utils.operators.pooling.qpooloperator method)": [[34, "neural_compressor.adaptor.ox_utils.operators.pooling.QPoolOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.pooling.pooloperator method)": [[34, "neural_compressor.adaptor.ox_utils.operators.pooling.PoolOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[34, "module-neural_compressor.adaptor.ox_utils.operators.pooling"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.pooling.pooloperator method)": [[34, "neural_compressor.adaptor.ox_utils.operators.pooling.PoolOperator.quantize"]], "quantize_check() (neural_compressor.adaptor.ox_utils.operators.pooling.pooloperator method)": [[34, "neural_compressor.adaptor.ox_utils.operators.pooling.PoolOperator.quantize_check"]], "qresizeoperator (class in neural_compressor.adaptor.ox_utils.operators.resize)": [[35, "neural_compressor.adaptor.ox_utils.operators.resize.QResizeOperator"]], "resizeoperator (class in neural_compressor.adaptor.ox_utils.operators.resize)": [[35, "neural_compressor.adaptor.ox_utils.operators.resize.ResizeOperator"]], "convert() (neural_compressor.adaptor.ox_utils.operators.resize.resizeoperator method)": [[35, "neural_compressor.adaptor.ox_utils.operators.resize.ResizeOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.resize.resizeoperator method)": [[35, "neural_compressor.adaptor.ox_utils.operators.resize.ResizeOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[35, "module-neural_compressor.adaptor.ox_utils.operators.resize"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.resize.resizeoperator method)": [[35, "neural_compressor.adaptor.ox_utils.operators.resize.ResizeOperator.quantize"]], "quantize_check() (neural_compressor.adaptor.ox_utils.operators.resize.resizeoperator method)": [[35, "neural_compressor.adaptor.ox_utils.operators.resize.ResizeOperator.quantize_check"]], "qsplitoperator (class in neural_compressor.adaptor.ox_utils.operators.split)": [[36, "neural_compressor.adaptor.ox_utils.operators.split.QSplitOperator"]], "splitoperator (class in neural_compressor.adaptor.ox_utils.operators.split)": [[36, "neural_compressor.adaptor.ox_utils.operators.split.SplitOperator"]], "cast() (neural_compressor.adaptor.ox_utils.operators.split.splitoperator method)": [[36, "neural_compressor.adaptor.ox_utils.operators.split.SplitOperator.cast"]], "convert() (neural_compressor.adaptor.ox_utils.operators.split.qsplitoperator method)": [[36, "neural_compressor.adaptor.ox_utils.operators.split.QSplitOperator.convert"]], "convert() (neural_compressor.adaptor.ox_utils.operators.split.splitoperator method)": [[36, "neural_compressor.adaptor.ox_utils.operators.split.SplitOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.split.splitoperator method)": [[36, "neural_compressor.adaptor.ox_utils.operators.split.SplitOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.split": [[36, "module-neural_compressor.adaptor.ox_utils.operators.split"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.split.splitoperator method)": [[36, "neural_compressor.adaptor.ox_utils.operators.split.SplitOperator.quantize"]], "quantizer (class in neural_compressor.adaptor.ox_utils.quantizer)": [[37, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer"]], "check_opset_version() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[37, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.check_opset_version"]], "convert_qdq_to_operator_oriented() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[37, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.convert_qdq_to_operator_oriented"]], "dequantize_tensor() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[37, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.dequantize_tensor"]], "dtype_cast() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[37, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.dtype_cast"]], "get_bias_add_nodes() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[37, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.get_bias_add_nodes"]], "insert_qdq() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[37, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.insert_qdq"]], "is_valid_quantize_weight() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[37, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.is_valid_quantize_weight"]], "merge_dedicated_qdq_pair() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[37, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.merge_dedicated_qdq_pair"]], "neural_compressor.adaptor.ox_utils.quantizer": [[37, "module-neural_compressor.adaptor.ox_utils.quantizer"]], "quantize_bias() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[37, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.quantize_bias"]], "quantize_bias_tensor() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[37, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.quantize_bias_tensor"]], "quantize_inputs() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[37, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.quantize_inputs"]], "quantize_model() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[37, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.quantize_model"]], "quantize_outputs() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[37, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.quantize_outputs"]], "quantize_weight_per_channel() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[37, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.quantize_weight_per_channel"]], "quantize_weights_per_channel() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[37, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.quantize_weights_per_channel"]], "remove_redundant_pairs() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[37, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.remove_redundant_pairs"]], "should_cast() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[37, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.should_cast"]], "should_convert() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[37, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.should_convert"]], "should_quantize() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[37, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.should_quantize"]], "tensor_proto_to_array() (neural_compressor.adaptor.ox_utils.quantizer.quantizer static method)": [[37, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.tensor_proto_to_array"]], "quantformat (class in neural_compressor.adaptor.ox_utils.util)": [[38, "neural_compressor.adaptor.ox_utils.util.QuantFormat"]], "quanttype (class in neural_compressor.adaptor.ox_utils.util)": [[38, "neural_compressor.adaptor.ox_utils.util.QuantType"]], "quantizationmode (class in neural_compressor.adaptor.ox_utils.util)": [[38, "neural_compressor.adaptor.ox_utils.util.QuantizationMode"]], "quantizedinitializer (class in neural_compressor.adaptor.ox_utils.util)": [[38, "neural_compressor.adaptor.ox_utils.util.QuantizedInitializer"]], "quantizedvalue (class in neural_compressor.adaptor.ox_utils.util)": [[38, "neural_compressor.adaptor.ox_utils.util.QuantizedValue"]], "quantizedvaluetype (class in neural_compressor.adaptor.ox_utils.util)": [[38, "neural_compressor.adaptor.ox_utils.util.QuantizedValueType"]], "valueinfo (class in neural_compressor.adaptor.ox_utils.util)": [[38, "neural_compressor.adaptor.ox_utils.util.ValueInfo"]], "attribute_to_kwarg() (in module neural_compressor.adaptor.ox_utils.util)": [[38, "neural_compressor.adaptor.ox_utils.util.attribute_to_kwarg"]], "calculate_scale_zp() (in module neural_compressor.adaptor.ox_utils.util)": [[38, "neural_compressor.adaptor.ox_utils.util.calculate_scale_zp"]], "cast_tensor() (in module neural_compressor.adaptor.ox_utils.util)": [[38, "neural_compressor.adaptor.ox_utils.util.cast_tensor"]], "collate_preds() (in module neural_compressor.adaptor.ox_utils.util)": [[38, "neural_compressor.adaptor.ox_utils.util.collate_preds"]], "dequantize_data() (in module neural_compressor.adaptor.ox_utils.util)": [[38, "neural_compressor.adaptor.ox_utils.util.dequantize_data"]], "dequantize_data_with_scale_zero() (in module neural_compressor.adaptor.ox_utils.util)": [[38, "neural_compressor.adaptor.ox_utils.util.dequantize_data_with_scale_zero"]], "dtype_to_name() (in module neural_compressor.adaptor.ox_utils.util)": [[38, "neural_compressor.adaptor.ox_utils.util.dtype_to_name"]], "find_by_name() (in module neural_compressor.adaptor.ox_utils.util)": [[38, "neural_compressor.adaptor.ox_utils.util.find_by_name"]], "is_b_transposed() (in module neural_compressor.adaptor.ox_utils.util)": [[38, "neural_compressor.adaptor.ox_utils.util.is_B_transposed"]], "make_dquant_node() (in module neural_compressor.adaptor.ox_utils.util)": [[38, "neural_compressor.adaptor.ox_utils.util.make_dquant_node"]], "make_quant_node() (in module neural_compressor.adaptor.ox_utils.util)": [[38, "neural_compressor.adaptor.ox_utils.util.make_quant_node"]], "neural_compressor.adaptor.ox_utils.util": [[38, "module-neural_compressor.adaptor.ox_utils.util"]], "quantize_data() (in module neural_compressor.adaptor.ox_utils.util)": [[38, "neural_compressor.adaptor.ox_utils.util.quantize_data"]], "quantize_data_per_channel() (in module neural_compressor.adaptor.ox_utils.util)": [[38, "neural_compressor.adaptor.ox_utils.util.quantize_data_per_channel"]], "quantize_data_with_scale_zero() (in module neural_compressor.adaptor.ox_utils.util)": [[38, "neural_compressor.adaptor.ox_utils.util.quantize_data_with_scale_zero"]], "quantize_nparray() (in module neural_compressor.adaptor.ox_utils.util)": [[38, "neural_compressor.adaptor.ox_utils.util.quantize_nparray"]], "remove_init_from_model_input() (in module neural_compressor.adaptor.ox_utils.util)": [[38, "neural_compressor.adaptor.ox_utils.util.remove_init_from_model_input"]], "split_shared_bias() (in module neural_compressor.adaptor.ox_utils.util)": [[38, "neural_compressor.adaptor.ox_utils.util.split_shared_bias"]], "pytorchadaptor (class in neural_compressor.adaptor.pytorch)": [[39, "neural_compressor.adaptor.pytorch.PyTorchAdaptor"]], "pytorchquery (class in neural_compressor.adaptor.pytorch)": [[39, "neural_compressor.adaptor.pytorch.PyTorchQuery"]], "pytorch_fxadaptor (class in neural_compressor.adaptor.pytorch)": [[39, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor"]], "pytorch_ipexadaptor (class in neural_compressor.adaptor.pytorch)": [[39, "neural_compressor.adaptor.pytorch.PyTorch_IPEXAdaptor"]], "templateadaptor (class in neural_compressor.adaptor.pytorch)": [[39, "neural_compressor.adaptor.pytorch.TemplateAdaptor"]], "calculate_hessian_trace() (neural_compressor.adaptor.pytorch.templateadaptor method)": [[39, "neural_compressor.adaptor.pytorch.TemplateAdaptor.calculate_hessian_trace"]], "calculate_op_sensitivity() (neural_compressor.adaptor.pytorch.pytorch_fxadaptor method)": [[39, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor.calculate_op_sensitivity"]], "convert_sub_graph() (neural_compressor.adaptor.pytorch.pytorch_fxadaptor static method)": [[39, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor.convert_sub_graph"]], "evaluate() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[39, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.evaluate"]], "evaluate() (neural_compressor.adaptor.pytorch.pytorch_fxadaptor method)": [[39, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor.evaluate"]], "evaluate() (neural_compressor.adaptor.pytorch.pytorch_ipexadaptor method)": [[39, "neural_compressor.adaptor.pytorch.PyTorch_IPEXAdaptor.evaluate"]], "fuse_fx_model() (neural_compressor.adaptor.pytorch.pytorch_fxadaptor method)": [[39, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor.fuse_fx_model"]], "get_non_quant_modules() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[39, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.get_non_quant_modules"]], "get_op_types() (neural_compressor.adaptor.pytorch.pytorchquery method)": [[39, "neural_compressor.adaptor.pytorch.PyTorchQuery.get_op_types"]], "get_op_types_by_precision() (neural_compressor.adaptor.pytorch.pytorchquery method)": [[39, "neural_compressor.adaptor.pytorch.PyTorchQuery.get_op_types_by_precision"]], "get_ops_recursively() (in module neural_compressor.adaptor.pytorch)": [[39, "neural_compressor.adaptor.pytorch.get_ops_recursively"]], "get_quantization_capability() (neural_compressor.adaptor.pytorch.pytorchquery method)": [[39, "neural_compressor.adaptor.pytorch.PyTorchQuery.get_quantization_capability"]], "inspect_tensor() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[39, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.inspect_tensor"]], "inspect_tensor() (neural_compressor.adaptor.pytorch.pytorch_ipexadaptor method)": [[39, "neural_compressor.adaptor.pytorch.PyTorch_IPEXAdaptor.inspect_tensor"]], "is_fused_child() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[39, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.is_fused_child"]], "is_fused_module() (neural_compressor.adaptor.pytorch.templateadaptor method)": [[39, "neural_compressor.adaptor.pytorch.TemplateAdaptor.is_fused_module"]], "is_fused_op() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[39, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.is_fused_op"]], "is_last_fused_child() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[39, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.is_last_fused_child"]], "neural_compressor.adaptor.pytorch": [[39, "module-neural_compressor.adaptor.pytorch"]], "prepare_sub_graph() (neural_compressor.adaptor.pytorch.pytorch_fxadaptor static method)": [[39, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor.prepare_sub_graph"]], "quantize() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[39, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.quantize"]], "quantize() (neural_compressor.adaptor.pytorch.pytorch_fxadaptor method)": [[39, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor.quantize"]], "quantize() (neural_compressor.adaptor.pytorch.pytorch_ipexadaptor method)": [[39, "neural_compressor.adaptor.pytorch.PyTorch_IPEXAdaptor.quantize"]], "query_fw_capability() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[39, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.query_fw_capability"]], "query_fw_capability() (neural_compressor.adaptor.pytorch.pytorch_fxadaptor method)": [[39, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor.query_fw_capability"]], "query_fw_capability() (neural_compressor.adaptor.pytorch.pytorch_ipexadaptor method)": [[39, "neural_compressor.adaptor.pytorch.PyTorch_IPEXAdaptor.query_fw_capability"]], "save() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[39, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.save"]], "save() (neural_compressor.adaptor.pytorch.pytorch_ipexadaptor method)": [[39, "neural_compressor.adaptor.pytorch.PyTorch_IPEXAdaptor.save"]], "set_tensor() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[39, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.set_tensor"]], "train() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[39, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.train"]], "train() (neural_compressor.adaptor.pytorch.pytorch_fxadaptor method)": [[39, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor.train"]], "querybackendcapability (class in neural_compressor.adaptor.query)": [[40, "neural_compressor.adaptor.query.QueryBackendCapability"]], "get_fuse_patterns() (neural_compressor.adaptor.query.querybackendcapability method)": [[40, "neural_compressor.adaptor.query.QueryBackendCapability.get_fuse_patterns"]], "get_mixed_precision_combination() (neural_compressor.adaptor.query.querybackendcapability method)": [[40, "neural_compressor.adaptor.query.QueryBackendCapability.get_mixed_precision_combination"]], "get_op_types() (neural_compressor.adaptor.query.querybackendcapability method)": [[40, "neural_compressor.adaptor.query.QueryBackendCapability.get_op_types"]], "get_precisions() (neural_compressor.adaptor.query.querybackendcapability method)": [[40, "neural_compressor.adaptor.query.QueryBackendCapability.get_precisions"]], "get_quantization_capability() (neural_compressor.adaptor.query.querybackendcapability method)": [[40, "neural_compressor.adaptor.query.QueryBackendCapability.get_quantization_capability"]], "get_version() (neural_compressor.adaptor.query.querybackendcapability method)": [[40, "neural_compressor.adaptor.query.QueryBackendCapability.get_version"]], "neural_compressor.adaptor.query": [[40, "module-neural_compressor.adaptor.query"]], "set_quantization_config() (neural_compressor.adaptor.query.querybackendcapability method)": [[40, "neural_compressor.adaptor.query.QueryBackendCapability.set_quantization_config"]], "tensorflowadaptor (class in neural_compressor.adaptor.tensorflow)": [[41, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor"]], "tensorflowquery (class in neural_compressor.adaptor.tensorflow)": [[41, "neural_compressor.adaptor.tensorflow.TensorflowQuery"]], "tensorflow_itexadaptor (class in neural_compressor.adaptor.tensorflow)": [[41, "neural_compressor.adaptor.tensorflow.Tensorflow_ITEXAdaptor"]], "calculate_op_sensitivity() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[41, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.calculate_op_sensitivity"]], "convert() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[41, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.convert"]], "diagnosis_helper() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[41, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.diagnosis_helper"]], "evaluate() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[41, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.evaluate"]], "fused_node_mapping() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[41, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.fused_node_mapping"]], "generate_internal_patterns() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[41, "neural_compressor.adaptor.tensorflow.TensorflowQuery.generate_internal_patterns"]], "get_bf16_patterns() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[41, "neural_compressor.adaptor.tensorflow.TensorflowQuery.get_bf16_patterns"]], "get_eightbit_patterns() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[41, "neural_compressor.adaptor.tensorflow.TensorflowQuery.get_eightbit_patterns"]], "get_fuse_patterns() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[41, "neural_compressor.adaptor.tensorflow.TensorflowQuery.get_fuse_patterns"]], "get_grappler_optimization_cfg() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[41, "neural_compressor.adaptor.tensorflow.TensorflowQuery.get_grappler_optimization_cfg"]], "get_mixed_precision_combination() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[41, "neural_compressor.adaptor.tensorflow.TensorflowQuery.get_mixed_precision_combination"]], "get_op_types() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[41, "neural_compressor.adaptor.tensorflow.TensorflowQuery.get_op_types"]], "get_op_types_by_precision() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[41, "neural_compressor.adaptor.tensorflow.TensorflowQuery.get_op_types_by_precision"]], "get_optype_wise_ability() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[41, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.get_optype_wise_ability"]], "get_output_op_names() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[41, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.get_output_op_names"]], "get_precisions() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[41, "neural_compressor.adaptor.tensorflow.TensorflowQuery.get_precisions"]], "get_quantization_capability() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[41, "neural_compressor.adaptor.tensorflow.TensorflowQuery.get_quantization_capability"]], "get_version() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[41, "neural_compressor.adaptor.tensorflow.TensorflowQuery.get_version"]], "inspect_activation() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[41, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.inspect_activation"]], "inspect_tensor() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[41, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.inspect_tensor"]], "inspect_weight_and_bias() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[41, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.inspect_weight_and_bias"]], "neural_compressor.adaptor.tensorflow": [[41, "module-neural_compressor.adaptor.tensorflow"]], "qat_convert() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[41, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.qat_convert"]], "quantize() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[41, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.quantize"]], "quantize() (neural_compressor.adaptor.tensorflow.tensorflow_itexadaptor method)": [[41, "neural_compressor.adaptor.tensorflow.Tensorflow_ITEXAdaptor.quantize"]], "quantize_input() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[41, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.quantize_input"]], "query_fw_capability() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[41, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.query_fw_capability"]], "recover_tuned_model() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[41, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.recover_tuned_model"]], "save() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[41, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.save"]], "set_tensor() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[41, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.set_tensor"]], "train() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[41, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.train"]], "graphconverter (class in neural_compressor.adaptor.tf_utils.graph_converter)": [[42, "neural_compressor.adaptor.tf_utils.graph_converter.GraphConverter"]], "bf16_convert() (neural_compressor.adaptor.tf_utils.graph_converter.graphconverter method)": [[42, "neural_compressor.adaptor.tf_utils.graph_converter.GraphConverter.bf16_convert"]], "convert() (neural_compressor.adaptor.tf_utils.graph_converter.graphconverter method)": [[42, "neural_compressor.adaptor.tf_utils.graph_converter.GraphConverter.convert"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[42, "module-neural_compressor.adaptor.tf_utils.graph_converter"]], "quantize() (neural_compressor.adaptor.tf_utils.graph_converter.graphconverter method)": [[42, "neural_compressor.adaptor.tf_utils.graph_converter.GraphConverter.quantize"]], "quantize_with_qdq_pattern() (neural_compressor.adaptor.tf_utils.graph_converter.graphconverter method)": [[42, "neural_compressor.adaptor.tf_utils.graph_converter.GraphConverter.quantize_with_qdq_pattern"]], "graphconverterwithoutcalib (class in neural_compressor.adaptor.tf_utils.graph_converter_without_calib)": [[43, "neural_compressor.adaptor.tf_utils.graph_converter_without_calib.GraphConverterWithoutCalib"]], "bf16_convert() (neural_compressor.adaptor.tf_utils.graph_converter_without_calib.graphconverterwithoutcalib method)": [[43, "neural_compressor.adaptor.tf_utils.graph_converter_without_calib.GraphConverterWithoutCalib.bf16_convert"]], "convert_without_calib() (neural_compressor.adaptor.tf_utils.graph_converter_without_calib.graphconverterwithoutcalib method)": [[43, "neural_compressor.adaptor.tf_utils.graph_converter_without_calib.GraphConverterWithoutCalib.convert_without_calib"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[43, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"]], "quantize_without_calib() (neural_compressor.adaptor.tf_utils.graph_converter_without_calib.graphconverterwithoutcalib method)": [[43, "neural_compressor.adaptor.tf_utils.graph_converter_without_calib.GraphConverterWithoutCalib.quantize_without_calib"]], "bf16convert (class in neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert)": [[44, "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert.BF16Convert"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert.bf16convert method)": [[44, "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert.BF16Convert.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[44, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[45, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"]], "convertaddtobiasaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd)": [[46, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd.ConvertAddToBiasAddOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd.convertaddtobiasaddoptimizer method)": [[46, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd.ConvertAddToBiasAddOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[46, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"]], "convertlayoutoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout)": [[47, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout.ConvertLayoutOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout.convertlayoutoptimizer method)": [[47, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout.ConvertLayoutOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[47, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"]], "convertleakyreluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu)": [[48, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu.ConvertLeakyReluOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu.convertleakyreluoptimizer method)": [[48, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu.ConvertLeakyReluOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[48, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"]], "convertnantorandom (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random)": [[49, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random.ConvertNanToRandom"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random.convertnantorandom method)": [[49, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random.ConvertNanToRandom.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[49, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"]], "convertplaceholdertoconst (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const)": [[50, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const.ConvertPlaceholderToConst"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const.convertplaceholdertoconst method)": [[50, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const.ConvertPlaceholderToConst.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[50, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"]], "strtobool() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const.convertplaceholdertoconst method)": [[50, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const.ConvertPlaceholderToConst.strtobool"]], "dequantizecastoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer)": [[51, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer.DequantizeCastOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer.dequantizecastoptimizer method)": [[51, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer.DequantizeCastOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer": [[51, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer"]], "dilatedcontraction (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction)": [[52, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction.DilatedContraction"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction.dilatedcontraction method)": [[52, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction.DilatedContraction.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[52, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"]], "injectdummybiasaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd)": [[53, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd.InjectDummyBiasAddOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd.injectdummybiasaddoptimizer method)": [[53, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd.InjectDummyBiasAddOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[53, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"]], "expanddimsoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer)": [[54, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer.ExpandDimsOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer.expanddimsoptimizer method)": [[54, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer.ExpandDimsOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[54, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"]], "fetchweightfromreshapeoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape)": [[55, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape.FetchWeightFromReshapeOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape.fetchweightfromreshapeoptimizer method)": [[55, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape.FetchWeightFromReshapeOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[55, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"]], "foldbatchnormnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm)": [[56, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm.FoldBatchNormNodesOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm.foldbatchnormnodesoptimizer method)": [[56, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm.FoldBatchNormNodesOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[56, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"]], "scale_after_normalization() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm.foldbatchnormnodesoptimizer method)": [[56, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm.FoldBatchNormNodesOptimizer.scale_after_normalization"]], "graphfoldconstantoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant)": [[57, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.GraphFoldConstantOptimizer"]], "check_all_folded() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.graphfoldconstantoptimizer method)": [[57, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.GraphFoldConstantOptimizer.check_all_folded"]], "check_const_inputs() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.graphfoldconstantoptimizer method)": [[57, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.GraphFoldConstantOptimizer.check_const_inputs"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.graphfoldconstantoptimizer method)": [[57, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.GraphFoldConstantOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[57, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"]], "fusebiasaddandaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add)": [[58, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add.FuseBiasAddAndAddOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add.fusebiasaddandaddoptimizer method)": [[58, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add.FuseBiasAddAndAddOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[58, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"]], "fusecolumnwisemuloptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul)": [[59, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul.FuseColumnWiseMulOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul.fusecolumnwisemuloptimizer method)": [[59, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul.FuseColumnWiseMulOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[59, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"]], "fuseconvwithmathoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math)": [[60, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math.FuseConvWithMathOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math.fuseconvwithmathoptimizer method)": [[60, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math.FuseConvWithMathOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[60, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"]], "fusedecomposedbnoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[61, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.FuseDecomposedBNOptimizer"]], "bypass_reshape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[61, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.bypass_reshape"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.fusedecomposedbnoptimizer method)": [[61, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.FuseDecomposedBNOptimizer.do_transformation"]], "get_const_dim_count() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[61, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.get_const_dim_count"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[61, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[61, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[61, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.node_name_from_input"]], "valid_reshape_inputs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[61, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.valid_reshape_inputs"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[61, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.values_from_const"]], "fusedecomposedinoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[62, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.FuseDecomposedINOptimizer"]], "bypass_reshape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[62, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.bypass_reshape"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.fusedecomposedinoptimizer method)": [[62, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.FuseDecomposedINOptimizer.do_transformation"]], "get_const_dim_count() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[62, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.get_const_dim_count"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[62, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[62, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[62, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.node_name_from_input"]], "valid_reshape_inputs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[62, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.valid_reshape_inputs"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[62, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.values_from_const"]], "fusegeluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu)": [[63, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu.FuseGeluOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu.fusegeluoptimizer method)": [[63, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu.FuseGeluOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[63, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"]], "fuselayernormoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[64, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.FuseLayerNormOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.fuselayernormoptimizer method)": [[64, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.FuseLayerNormOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[64, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[64, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[64, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.node_name_from_input"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[64, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.values_from_const"]], "fusepadwithconv2doptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv)": [[65, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv.FusePadWithConv2DOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv.fusepadwithconv2doptimizer method)": [[65, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv.FusePadWithConv2DOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[65, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"]], "fusepadwithfp32conv2doptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv)": [[66, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv.FusePadWithFP32Conv2DOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv.fusepadwithfp32conv2doptimizer method)": [[66, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv.FusePadWithFP32Conv2DOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[66, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"]], "fusetransposereshapeoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose.FuseTransposeReshapeOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose.fusetransposereshapeoptimizer method)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose.FuseTransposeReshapeOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[67, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"]], "graphcseoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer.GraphCseOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer.graphcseoptimizer method)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer.GraphCseOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[68, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"]], "grappleroptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass)": [[69, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass.GrapplerOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass.grappleroptimizer method)": [[69, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass.GrapplerOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[69, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[70, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"]], "insertprintminmaxnode (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node)": [[71, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node.InsertPrintMinMaxNode"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node.insertprintminmaxnode method)": [[71, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node.InsertPrintMinMaxNode.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[71, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"]], "movesqueezeafterreluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu)": [[72, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu.MoveSqueezeAfterReluOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu.movesqueezeafterreluoptimizer method)": [[72, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu.MoveSqueezeAfterReluOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[72, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"]], "preoptimization (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize)": [[73, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize.PreOptimization"]], "get_excluded_node_names() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize.preoptimization method)": [[73, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize.PreOptimization.get_excluded_node_names"]], "get_matched_nodes() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize.preoptimization method)": [[73, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize.PreOptimization.get_matched_nodes"]], "get_optimized_model() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize.preoptimization method)": [[73, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize.PreOptimization.get_optimized_model"]], "has_positive_input() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize.preoptimization method)": [[73, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize.PreOptimization.has_positive_input"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[73, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"]], "removetrainingnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes)": [[74, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes.RemoveTrainingNodesOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes.removetrainingnodesoptimizer method)": [[74, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes.RemoveTrainingNodesOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[74, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"]], "renamebatchnormoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm)": [[75, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm.RenameBatchNormOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm.renamebatchnormoptimizer method)": [[75, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm.RenameBatchNormOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[75, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"]], "splitsharedinputoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input)": [[76, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input.SplitSharedInputOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input.splitsharedinputoptimizer method)": [[76, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input.SplitSharedInputOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"]], "stripequivalentnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes)": [[77, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes.StripEquivalentNodesOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes.stripequivalentnodesoptimizer method)": [[77, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes.StripEquivalentNodesOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"]], "stripunusednodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes)": [[78, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes.StripUnusedNodesOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes.stripunusednodesoptimizer method)": [[78, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes.StripUnusedNodesOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"]], "switchoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer)": [[79, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer.SwitchOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer.switchoptimizer method)": [[79, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer.SwitchOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"]], "updateenteroptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter)": [[80, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter.UpdateEnterOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter.updateenteroptimizer method)": [[80, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter.UpdateEnterOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter": [[80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter"]], "graphrewriterbase (class in neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base)": [[81, "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base.GraphRewriterBase"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base.graphrewriterbase method)": [[81, "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base.GraphRewriterBase.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"]], "freezefakequantopoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant)": [[83, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant.FreezeFakeQuantOpOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant.freezefakequantopoptimizer method)": [[83, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant.FreezeFakeQuantOpOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"]], "freezevaluetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value)": [[84, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.FreezeValueTransformer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.freezevaluetransformer method)": [[84, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.FreezeValueTransformer.do_transformation"]], "generate_output_graph() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.freezevaluetransformer method)": [[84, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.FreezeValueTransformer.generate_output_graph"]], "generate_output_graph_ranges() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.freezevaluetransformer method)": [[84, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.FreezeValueTransformer.generate_output_graph_ranges"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"]], "freezevaluewithoutcalibtransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib)": [[85, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.FreezeValueWithoutCalibTransformer"]], "do_transformation_without_calib() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.freezevaluewithoutcalibtransformer method)": [[85, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.FreezeValueWithoutCalibTransformer.do_transformation_without_calib"]], "generate_output_graph() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.freezevaluewithoutcalibtransformer method)": [[85, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.FreezeValueWithoutCalibTransformer.generate_output_graph"]], "generate_output_graph_ranges() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.freezevaluewithoutcalibtransformer method)": [[85, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.FreezeValueWithoutCalibTransformer.generate_output_graph_ranges"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"]], "fuseconvredundantdequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize)": [[86, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize.FuseConvRedundantDequantizeTransformer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize.fuseconvredundantdequantizetransformer method)": [[86, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize.FuseConvRedundantDequantizeTransformer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"]], "fuseconvrequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize)": [[87, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize.FuseConvRequantizeTransformer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize.fuseconvrequantizetransformer method)": [[87, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize.FuseConvRequantizeTransformer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"]], "fusematmulredundantdequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize)": [[88, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize.FuseMatMulRedundantDequantizeTransformer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize.fusematmulredundantdequantizetransformer method)": [[88, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize.FuseMatMulRedundantDequantizeTransformer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"]], "fusematmulrequantizedequantizenewapitransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[89, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeNewAPITransformer"]], "fusematmulrequantizedequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[89, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeTransformer"]], "fusematmulrequantizenewapitransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[89, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeNewAPITransformer"]], "fusematmulrequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[89, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeTransformer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.fusematmulrequantizedequantizenewapitransformer method)": [[89, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeNewAPITransformer.do_transformation"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.fusematmulrequantizedequantizetransformer method)": [[89, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeTransformer.do_transformation"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.fusematmulrequantizenewapitransformer method)": [[89, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeNewAPITransformer.do_transformation"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.fusematmulrequantizetransformer method)": [[89, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeTransformer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"]], "metainfochangingmemopoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer.MetaInfoChangingMemOpOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer.metainfochangingmemopoptimizer method)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer.MetaInfoChangingMemOpOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"]], "posthostconstconverter (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter)": [[92, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter.PostHostConstConverter"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter.posthostconstconverter method)": [[92, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter.PostHostConstConverter.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"]], "postcseoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse)": [[93, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse.PostCseOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse.postcseoptimizer method)": [[93, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse.PostCseOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"]], "quantizedrnnconverter (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert)": [[94, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert.QuantizedRNNConverter"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert.quantizedrnnconverter method)": [[94, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert.QuantizedRNNConverter.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"]], "scalepropagationtransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation)": [[95, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation.ScaleProPagationTransformer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation.scalepropagationtransformer method)": [[95, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation.ScaleProPagationTransformer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[96, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"]], "generategraphwithqdqpattern (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern)": [[97, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern.GenerateGraphWithQDQPattern"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern.generategraphwithqdqpattern method)": [[97, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern.GenerateGraphWithQDQPattern.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[97, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"]], "mergeduplicatedqdqoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq.MergeDuplicatedQDQOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq.mergeduplicatedqdqoptimizer method)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq.MergeDuplicatedQDQOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[98, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"]], "shareqdqforitexypatternoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern.ShareQDQForItexYPatternOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern.shareqdqforitexypatternoptimizer method)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern.ShareQDQForItexYPatternOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[99, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"]], "graphanalyzer (class in neural_compressor.adaptor.tf_utils.graph_util)": [[100, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer"]], "graphrewriterhelper (class in neural_compressor.adaptor.tf_utils.graph_util)": [[100, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper"]], "add_node() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[100, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.add_node"]], "analysis_rnn_model() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[100, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.analysis_rnn_model"]], "compare_node_attr() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[100, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.compare_node_attr"]], "create_constant_node() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[100, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.create_constant_node"]], "create_node() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[100, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.create_node"]], "dump_graph() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[100, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.dump_graph"]], "gen_valid_sampling_log() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[100, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.gen_valid_sampling_log"]], "generate_int32_bias_for_conv() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[100, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.generate_int32_bias_for_conv"]], "generate_int32_bias_for_matmul() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[100, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.generate_int32_bias_for_matmul"]], "get_frame_info() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[100, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.get_frame_info"]], "get_graph_input_output() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[100, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.get_graph_input_output"]], "graph (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer property)": [[100, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.graph"]], "has_positive_input() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[100, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.has_positive_input"]], "neural_compressor.adaptor.tf_utils.graph_util": [[100, "module-neural_compressor.adaptor.tf_utils.graph_util"]], "node_name_from_input() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[100, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.node_name_from_input"]], "parse_graph() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[100, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.parse_graph"]], "query_fusion_pattern_nodes() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[100, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.query_fusion_pattern_nodes"]], "remove_node() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[100, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.remove_node"]], "remove_node_with_single_input_output() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[100, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.remove_node_with_single_input_output"]], "replace_const_node() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[100, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.replace_const_node"]], "replace_constant_graph_with_constant_node() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[100, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.replace_constant_graph_with_constant_node"]], "replace_node() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[100, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.replace_node"]], "replace_single_node() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[100, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.replace_single_node"]], "set_attr_bool() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[100, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_bool"]], "set_attr_dtype() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[100, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_dtype"]], "set_attr_float() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[100, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_float"]], "set_attr_int() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[100, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_int"]], "set_attr_int_list() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[100, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_int_list"]], "set_attr_string() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[100, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_string"]], "set_attr_string_list() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[100, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_string_list"]], "set_attr_tensor() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[100, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_tensor"]], "set_attr_type_list() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[100, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_type_list"]], "values_from_const() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[100, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.values_from_const"]], "neural_compressor.adaptor.tf_utils": [[101, "module-neural_compressor.adaptor.tf_utils"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[102, "module-neural_compressor.adaptor.tf_utils.quantize_graph"]], "fakequantize (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize)": [[103, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantize"]], "fakequantizebase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize)": [[103, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantizeBase"]], "from_config() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.fakequantizebase class method)": [[103, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantizeBase.from_config"]], "get_config() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.fakequantize method)": [[103, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantize.get_config"]], "get_config() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.fakequantizebase method)": [[103, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantizeBase.get_config"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[103, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[104, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat"]], "quantizeconfig (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config)": [[105, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig"]], "add_quantize_recipe() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.quantizeconfig method)": [[105, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig.add_quantize_recipe"]], "clear_quantize_recipe() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.quantizeconfig method)": [[105, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig.clear_quantize_recipe"]], "get_quantize_recipe() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.quantizeconfig method)": [[105, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig.get_quantize_recipe"]], "is_empty() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.quantizeconfig method)": [[105, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig.is_empty"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[105, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config"]], "query_layer() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.quantizeconfig method)": [[105, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig.query_layer"]], "remove_layer() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.quantizeconfig method)": [[105, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig.remove_layer"]], "remove_layers() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.quantizeconfig method)": [[105, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig.remove_layers"]], "init_quantize_config() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper)": [[106, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper.init_quantize_config"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[106, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper"]], "qat_clone_function() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper)": [[106, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper.qat_clone_function"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[107, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers"]], "config_quantizable_layers() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer)": [[108, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer.config_quantizable_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[108, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer"]], "quantizelayeradd (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add)": [[109, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add.QuantizeLayerAdd"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[109, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add"]], "quantizelayerbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base)": [[110, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base.QuantizeLayerBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[110, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base"]], "quantizelayerbatchnormalization (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn)": [[111, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn.QuantizeLayerBatchNormalization"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[111, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"]], "quantizewrapper (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper)": [[112, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapper"]], "quantizewrapperbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper)": [[112, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase"]], "build() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapper method)": [[112, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapper.build"]], "build() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase method)": [[112, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.build"]], "call() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapper method)": [[112, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapper.call"]], "call() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase method)": [[112, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.call"]], "compute_output_shape() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase method)": [[112, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.compute_output_shape"]], "from_config() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase class method)": [[112, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.from_config"]], "get_config() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase method)": [[112, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.get_config"]], "losses (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase property)": [[112, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.losses"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[112, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper"]], "non_trainable_weights (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase property)": [[112, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.non_trainable_weights"]], "query_input_index() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase method)": [[112, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.query_input_index"]], "trainable (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase property)": [[112, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.trainable"]], "trainable_weights (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase property)": [[112, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.trainable_weights"]], "updates (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase property)": [[112, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.updates"]], "fusenodestartwithfusedbatchnormv3 (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn)": [[113, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.FuseNodeStartWithFusedBatchNormV3"]], "apply_newly_bn_leakyrelu_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.fusenodestartwithfusedbatchnormv3 method)": [[113, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.FuseNodeStartWithFusedBatchNormV3.apply_newly_bn_leakyrelu_fusion"]], "apply_newly_bn_relu_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.fusenodestartwithfusedbatchnormv3 method)": [[113, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.FuseNodeStartWithFusedBatchNormV3.apply_newly_bn_relu_fusion"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.fusenodestartwithfusedbatchnormv3 method)": [[113, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.FuseNodeStartWithFusedBatchNormV3.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.fusenodestartwithfusedbatchnormv3 method)": [[113, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.FuseNodeStartWithFusedBatchNormV3.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[113, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"]], "fusenodestartwithconcatv2 (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2)": [[114, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2.FuseNodeStartWithConcatV2"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2.fusenodestartwithconcatv2 method)": [[114, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2.FuseNodeStartWithConcatV2.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2.fusenodestartwithconcatv2 method)": [[114, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2.FuseNodeStartWithConcatV2.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[114, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"]], "fusenodestartwithconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv)": [[115, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d"]], "apply_conv3d_add_addn_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.fusenodestartwithconv2d method)": [[115, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d.apply_conv3d_add_addn_fusion"]], "apply_conv3d_add_addn_relu_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.fusenodestartwithconv2d method)": [[115, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d.apply_conv3d_add_addn_relu_fusion"]], "apply_conv3d_add_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.fusenodestartwithconv2d method)": [[115, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d.apply_conv3d_add_fusion"]], "apply_conv3d_add_relu_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.fusenodestartwithconv2d method)": [[115, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d.apply_conv3d_add_relu_fusion"]], "apply_conv3d_single_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.fusenodestartwithconv2d method)": [[115, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d.apply_conv3d_single_fusion"]], "apply_conv_biasadd_hardswish_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.fusenodestartwithconv2d method)": [[115, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d.apply_conv_biasadd_hardswish_fusion"]], "apply_newly_conv_biasadd_addn_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.fusenodestartwithconv2d method)": [[115, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d.apply_newly_conv_biasadd_addn_fusion"]], "apply_newly_conv_biasadd_addn_relu_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.fusenodestartwithconv2d method)": [[115, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d.apply_newly_conv_biasadd_addn_relu_fusion"]], "apply_newly_conv_biasadd_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.fusenodestartwithconv2d method)": [[115, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d.apply_newly_conv_biasadd_fusion"]], "apply_newly_conv_biasadd_relu_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.fusenodestartwithconv2d method)": [[115, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d.apply_newly_conv_biasadd_relu_fusion"]], "apply_newly_conv_biasadd_swishf32_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.fusenodestartwithconv2d method)": [[115, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d.apply_newly_conv_biasadd_swishf32_fusion"]], "apply_newly_conv_single_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.fusenodestartwithconv2d method)": [[115, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d.apply_newly_conv_single_fusion"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.fusenodestartwithconv2d method)": [[115, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.fusenodestartwithconv2d method)": [[115, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[115, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"]], "fusenodestartwithdeconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv)": [[116, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.FuseNodeStartWithDeconv2d"]], "apply_deconv2d_biasadd_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.fusenodestartwithdeconv2d method)": [[116, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.FuseNodeStartWithDeconv2d.apply_deconv2d_biasadd_fusion"]], "apply_deconv3d_biasadd_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.fusenodestartwithdeconv2d method)": [[116, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.FuseNodeStartWithDeconv2d.apply_deconv3d_biasadd_fusion"]], "apply_single_deconv2d_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.fusenodestartwithdeconv2d method)": [[116, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.FuseNodeStartWithDeconv2d.apply_single_deconv2d_fusion"]], "apply_single_deconv3d_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.fusenodestartwithdeconv2d method)": [[116, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.FuseNodeStartWithDeconv2d.apply_single_deconv3d_fusion"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.fusenodestartwithdeconv2d method)": [[116, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.FuseNodeStartWithDeconv2d.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.fusenodestartwithdeconv2d method)": [[116, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.FuseNodeStartWithDeconv2d.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[116, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"]], "fusenodestartwithfusedinstancenorm (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in)": [[117, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.FuseNodeStartWithFusedInstanceNorm"]], "apply_newly_in_relu_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.fusenodestartwithfusedinstancenorm method)": [[117, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.FuseNodeStartWithFusedInstanceNorm.apply_newly_in_relu_fusion"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.fusenodestartwithfusedinstancenorm method)": [[117, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.FuseNodeStartWithFusedInstanceNorm.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.fusenodestartwithfusedinstancenorm method)": [[117, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.FuseNodeStartWithFusedInstanceNorm.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[117, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"]], "fusenodestartwithmatmul (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul)": [[118, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul"]], "apply_batchmatmulv2_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.fusenodestartwithmatmul method)": [[118, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul.apply_batchmatmulv2_fusion"]], "apply_batchmatmulv2_mul_add_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.fusenodestartwithmatmul method)": [[118, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul.apply_batchmatmulv2_mul_add_fusion"]], "apply_matmul_biasadd_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.fusenodestartwithmatmul method)": [[118, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul.apply_matmul_biasadd_fusion"]], "apply_matmul_biasadd_relu_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.fusenodestartwithmatmul method)": [[118, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul.apply_matmul_biasadd_relu_fusion"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.fusenodestartwithmatmul method)": [[118, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.fusenodestartwithmatmul method)": [[118, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[118, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"]], "fusenodestartwithpooling (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling)": [[119, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling.FuseNodeStartWithPooling"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling.fusenodestartwithpooling method)": [[119, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling.FuseNodeStartWithPooling.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling.fusenodestartwithpooling method)": [[119, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling.FuseNodeStartWithPooling.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[119, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[120, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"]], "optimizeqdqgraph (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq)": [[121, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq.OptimizeQDQGraph"]], "do_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq.optimizeqdqgraph method)": [[121, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq.OptimizeQDQGraph.do_transform"]], "get_quantized_nodes() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq.optimizeqdqgraph method)": [[121, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq.OptimizeQDQGraph.get_quantized_nodes"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[121, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"]], "quantizegraphbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base)": [[122, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeGraphBase"]], "quantizenodebase (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base)": [[122, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase"]], "add_output_graph_node() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.quantizenodebase method)": [[122, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase.add_output_graph_node"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.quantizenodebase method)": [[122, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase.apply_the_transform"]], "create_nodes_map() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.quantizenodebase method)": [[122, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase.create_nodes_map"]], "do_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.quantizegraphbase method)": [[122, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeGraphBase.do_transform"]], "eightbitize_single_input_tensor_node() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.quantizenodebase method)": [[122, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase.eightbitize_single_input_tensor_node"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.quantizenodebase method)": [[122, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[122, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"]], "register_transformer() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.quantizegraphbase method)": [[122, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeGraphBase.register_transformer"]], "remove_dead_nodes() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.quantizegraphbase method)": [[122, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeGraphBase.remove_dead_nodes"]], "remove_redundant_quantization() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.quantizenodebase method)": [[122, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase.remove_redundant_quantization"]], "fusenodestartwithfusedbatchnormv3 (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn)": [[123, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.FuseNodeStartWithFusedBatchNormV3"]], "apply_newly_bn_leakyrelu_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.fusenodestartwithfusedbatchnormv3 method)": [[123, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.FuseNodeStartWithFusedBatchNormV3.apply_newly_bn_leakyrelu_fusion"]], "apply_newly_bn_relu_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.fusenodestartwithfusedbatchnormv3 method)": [[123, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.FuseNodeStartWithFusedBatchNormV3.apply_newly_bn_relu_fusion"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.fusenodestartwithfusedbatchnormv3 method)": [[123, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.FuseNodeStartWithFusedBatchNormV3.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.fusenodestartwithfusedbatchnormv3 method)": [[123, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.FuseNodeStartWithFusedBatchNormV3.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[123, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"]], "fusenodestartwithconcatv2 (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2)": [[124, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2.FuseNodeStartWithConcatV2"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2.fusenodestartwithconcatv2 method)": [[124, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2.FuseNodeStartWithConcatV2.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2.fusenodestartwithconcatv2 method)": [[124, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2.FuseNodeStartWithConcatV2.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[124, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"]], "fusenodestartwithconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv)": [[125, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d"]], "apply_conv_biasadd_addn_relu_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.fusenodestartwithconv2d method)": [[125, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d.apply_conv_biasadd_addn_relu_fusion"]], "apply_conv_biasadd_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.fusenodestartwithconv2d method)": [[125, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d.apply_conv_biasadd_fusion"]], "apply_conv_biasadd_relu_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.fusenodestartwithconv2d method)": [[125, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d.apply_conv_biasadd_relu_fusion"]], "apply_conv_single_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.fusenodestartwithconv2d method)": [[125, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d.apply_conv_single_fusion"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.fusenodestartwithconv2d method)": [[125, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.fusenodestartwithconv2d method)": [[125, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[125, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"]], "quantizegraphforintel (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu)": [[126, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu.QuantizeGraphForIntel"]], "do_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu.quantizegraphforintel method)": [[126, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu.QuantizeGraphForIntel.do_transform"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[126, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"]], "fusenodestartwithmatmul (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul)": [[127, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.FuseNodeStartWithMatmul"]], "apply_matmul_biasadd_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.fusenodestartwithmatmul method)": [[127, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.FuseNodeStartWithMatmul.apply_matmul_biasadd_fusion"]], "apply_matmul_biasadd_relu_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.fusenodestartwithmatmul method)": [[127, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.FuseNodeStartWithMatmul.apply_matmul_biasadd_relu_fusion"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.fusenodestartwithmatmul method)": [[127, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.FuseNodeStartWithMatmul.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.fusenodestartwithmatmul method)": [[127, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.FuseNodeStartWithMatmul.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[127, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"]], "fusenodestartwithpooling (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling)": [[128, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling.FuseNodeStartWithPooling"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling.fusenodestartwithpooling method)": [[128, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling.FuseNodeStartWithPooling.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling.fusenodestartwithpooling method)": [[128, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling.FuseNodeStartWithPooling.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[128, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"]], "quantizegraphhelper (class in neural_compressor.adaptor.tf_utils.quantize_graph_common)": [[129, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper"]], "copy_attr() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[129, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.copy_attr"]], "create_constant_node() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[129, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.create_constant_node"]], "create_node() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[129, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.create_node"]], "ensure_tensor_name_has_port() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[129, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.ensure_tensor_name_has_port"]], "generate_quantized_weight_node() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[129, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.generate_quantized_weight_node"]], "get_sorted_graph() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper method)": [[129, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.get_sorted_graph"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[129, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"]], "node_name_from_input() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[129, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.node_name_from_input"]], "remove_training_nodes() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[129, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.remove_training_nodes"]], "set_attr_bool() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[129, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.set_attr_bool"]], "set_attr_dtype() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[129, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.set_attr_dtype"]], "set_attr_float() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[129, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.set_attr_float"]], "set_attr_int() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[129, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.set_attr_int"]], "set_attr_string() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[129, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.set_attr_string"]], "set_attr_string_list() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[129, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.set_attr_string_list"]], "set_attr_tensor() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[129, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.set_attr_tensor"]], "set_attr_type_list() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[129, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.set_attr_type_list"]], "split_shared_inputs() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[129, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.split_shared_inputs"]], "unique_node_name_from_input() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[129, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.unique_node_name_from_input"]], "biascorrection (class in neural_compressor.adaptor.tf_utils.transform_graph.bias_correction)": [[130, "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction.BiasCorrection"]], "do_transformation() (neural_compressor.adaptor.tf_utils.transform_graph.bias_correction.biascorrection method)": [[130, "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction.BiasCorrection.do_transformation"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[130, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"]], "graphtransformbase (class in neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base)": [[131, "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base.GraphTransformBase"]], "do_transformation() (neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base.graphtransformbase method)": [[131, "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base.GraphTransformBase.do_transformation"]], "generate_input_map() (neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base.graphtransformbase method)": [[131, "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base.GraphTransformBase.generate_input_map"]], "get_node_name_from_input() (neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base.graphtransformbase method)": [[131, "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base.GraphTransformBase.get_node_name_from_input"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[131, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"]], "node_name_from_input() (neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base.graphtransformbase method)": [[131, "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base.GraphTransformBase.node_name_from_input"]], "parse_input_pb() (neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base.graphtransformbase method)": [[131, "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base.GraphTransformBase.parse_input_pb"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[132, "module-neural_compressor.adaptor.tf_utils.transform_graph"]], "insertlogging (class in neural_compressor.adaptor.tf_utils.transform_graph.insert_logging)": [[133, "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging.InsertLogging"]], "do_transformation() (neural_compressor.adaptor.tf_utils.transform_graph.insert_logging.insertlogging method)": [[133, "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging.InsertLogging.do_transformation"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[133, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"]], "rerangequantizedconcat (class in neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat)": [[134, "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat.RerangeQuantizedConcat"]], "do_transformation() (neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat.rerangequantizedconcat method)": [[134, "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat.RerangeQuantizedConcat.do_transformation"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[134, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"]], "collate_tf_preds() (in module neural_compressor.adaptor.tf_utils.util)": [[135, "neural_compressor.adaptor.tf_utils.util.collate_tf_preds"]], "disable_random() (in module neural_compressor.adaptor.tf_utils.util)": [[135, "neural_compressor.adaptor.tf_utils.util.disable_random"]], "fix_ref_type_of_graph_def() (in module neural_compressor.adaptor.tf_utils.util)": [[135, "neural_compressor.adaptor.tf_utils.util.fix_ref_type_of_graph_def"]], "generate_feed_dict() (in module neural_compressor.adaptor.tf_utils.util)": [[135, "neural_compressor.adaptor.tf_utils.util.generate_feed_dict"]], "get_estimator_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[135, "neural_compressor.adaptor.tf_utils.util.get_estimator_graph"]], "get_graph_def() (in module neural_compressor.adaptor.tf_utils.util)": [[135, "neural_compressor.adaptor.tf_utils.util.get_graph_def"]], "get_input_output_node_names() (in module neural_compressor.adaptor.tf_utils.util)": [[135, "neural_compressor.adaptor.tf_utils.util.get_input_output_node_names"]], "get_model_input_shape() (in module neural_compressor.adaptor.tf_utils.util)": [[135, "neural_compressor.adaptor.tf_utils.util.get_model_input_shape"]], "get_tensor_by_name() (in module neural_compressor.adaptor.tf_utils.util)": [[135, "neural_compressor.adaptor.tf_utils.util.get_tensor_by_name"]], "get_tensor_val_from_graph_node() (in module neural_compressor.adaptor.tf_utils.util)": [[135, "neural_compressor.adaptor.tf_utils.util.get_tensor_val_from_graph_node"]], "int8_node_name_reverse() (in module neural_compressor.adaptor.tf_utils.util)": [[135, "neural_compressor.adaptor.tf_utils.util.int8_node_name_reverse"]], "is_ckpt_format() (in module neural_compressor.adaptor.tf_utils.util)": [[135, "neural_compressor.adaptor.tf_utils.util.is_ckpt_format"]], "is_saved_model_format() (in module neural_compressor.adaptor.tf_utils.util)": [[135, "neural_compressor.adaptor.tf_utils.util.is_saved_model_format"]], "iterator_sess_run() (in module neural_compressor.adaptor.tf_utils.util)": [[135, "neural_compressor.adaptor.tf_utils.util.iterator_sess_run"]], "neural_compressor.adaptor.tf_utils.util": [[135, "module-neural_compressor.adaptor.tf_utils.util"]], "read_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[135, "neural_compressor.adaptor.tf_utils.util.read_graph"]], "strip_equivalent_nodes() (in module neural_compressor.adaptor.tf_utils.util)": [[135, "neural_compressor.adaptor.tf_utils.util.strip_equivalent_nodes"]], "strip_unused_nodes() (in module neural_compressor.adaptor.tf_utils.util)": [[135, "neural_compressor.adaptor.tf_utils.util.strip_unused_nodes"]], "tf_diagnosis_helper() (in module neural_compressor.adaptor.tf_utils.util)": [[135, "neural_compressor.adaptor.tf_utils.util.tf_diagnosis_helper"]], "version1_eq_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[135, "neural_compressor.adaptor.tf_utils.util.version1_eq_version2"]], "version1_gt_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[135, "neural_compressor.adaptor.tf_utils.util.version1_gt_version2"]], "version1_gte_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[135, "neural_compressor.adaptor.tf_utils.util.version1_gte_version2"]], "version1_lt_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[135, "neural_compressor.adaptor.tf_utils.util.version1_lt_version2"]], "version1_lte_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[135, "neural_compressor.adaptor.tf_utils.util.version1_lte_version2"]], "write_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[135, "neural_compressor.adaptor.tf_utils.util.write_graph"]], "bf16modulewrapper (class in neural_compressor.adaptor.torch_utils.bf16_convert)": [[136, "neural_compressor.adaptor.torch_utils.bf16_convert.BF16ModuleWrapper"]], "convert() (in module neural_compressor.adaptor.torch_utils.bf16_convert)": [[136, "neural_compressor.adaptor.torch_utils.bf16_convert.Convert"]], "bf16_symbolic_trace() (in module neural_compressor.adaptor.torch_utils.bf16_convert)": [[136, "neural_compressor.adaptor.torch_utils.bf16_convert.bf16_symbolic_trace"]], "forward() (neural_compressor.adaptor.torch_utils.bf16_convert.bf16modulewrapper method)": [[136, "neural_compressor.adaptor.torch_utils.bf16_convert.BF16ModuleWrapper.forward"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[136, "module-neural_compressor.adaptor.torch_utils.bf16_convert"]], "hessiantrace (class in neural_compressor.adaptor.torch_utils.hawq_metric)": [[137, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace"]], "node_collector (class in neural_compressor.adaptor.torch_utils.hawq_metric)": [[137, "neural_compressor.adaptor.torch_utils.hawq_metric.Node_collector"]], "compare_weights() (in module neural_compressor.adaptor.torch_utils.hawq_metric)": [[137, "neural_compressor.adaptor.torch_utils.hawq_metric.compare_weights"]], "get_act_gap() (neural_compressor.adaptor.torch_utils.hawq_metric.hessiantrace method)": [[137, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace.get_act_gap"]], "get_act_traces() (neural_compressor.adaptor.torch_utils.hawq_metric.hessiantrace method)": [[137, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace.get_act_traces"]], "get_avg_traces() (neural_compressor.adaptor.torch_utils.hawq_metric.hessiantrace method)": [[137, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace.get_avg_traces"]], "get_device() (neural_compressor.adaptor.torch_utils.hawq_metric.hessiantrace method)": [[137, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace.get_device"]], "get_fused_mapping() (neural_compressor.adaptor.torch_utils.hawq_metric.hessiantrace method)": [[137, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace.get_fused_mapping"]], "get_params() (neural_compressor.adaptor.torch_utils.hawq_metric.hessiantrace method)": [[137, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace.get_params"]], "get_vthv_weight() (neural_compressor.adaptor.torch_utils.hawq_metric.hessiantrace method)": [[137, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace.get_vtHv_weight"]], "get_weight_traces() (neural_compressor.adaptor.torch_utils.hawq_metric.hessiantrace method)": [[137, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace.get_weight_traces"]], "hawq_top() (in module neural_compressor.adaptor.torch_utils.hawq_metric)": [[137, "neural_compressor.adaptor.torch_utils.hawq_metric.hawq_top"]], "hook_fn_act() (neural_compressor.adaptor.torch_utils.hawq_metric.node_collector method)": [[137, "neural_compressor.adaptor.torch_utils.hawq_metric.Node_collector.hook_fn_act"]], "is_fused_module() (neural_compressor.adaptor.torch_utils.hawq_metric.hessiantrace method)": [[137, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace.is_fused_module"]], "mse_metric_gap() (neural_compressor.adaptor.torch_utils.hawq_metric.hessiantrace method)": [[137, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace.mse_metric_gap"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[137, "module-neural_compressor.adaptor.torch_utils.hawq_metric"]], "register_act_grad_hooks() (neural_compressor.adaptor.torch_utils.hawq_metric.hessiantrace method)": [[137, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace.register_act_grad_hooks"]], "remove() (neural_compressor.adaptor.torch_utils.hawq_metric.node_collector method)": [[137, "neural_compressor.adaptor.torch_utils.hawq_metric.Node_collector.remove"]], "reset_act_gradient_and_hooks() (neural_compressor.adaptor.torch_utils.hawq_metric.hessiantrace method)": [[137, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace.reset_act_gradient_and_hooks"]], "neural_compressor.adaptor.torch_utils": [[138, "module-neural_compressor.adaptor.torch_utils"]], "datareader (class in neural_compressor.adaptor.torch_utils.onnx)": [[139, "neural_compressor.adaptor.torch_utils.onnx.DataReader"]], "get_next() (neural_compressor.adaptor.torch_utils.onnx.datareader method)": [[139, "neural_compressor.adaptor.torch_utils.onnx.DataReader.get_next"]], "neural_compressor.adaptor.torch_utils.onnx": [[139, "module-neural_compressor.adaptor.torch_utils.onnx"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[140, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"]], "symbolic_trace() (in module neural_compressor.adaptor.torch_utils.symbolic_trace)": [[140, "neural_compressor.adaptor.torch_utils.symbolic_trace.symbolic_trace"]], "trace_and_fuse_sub_graph() (in module neural_compressor.adaptor.torch_utils.symbolic_trace)": [[140, "neural_compressor.adaptor.torch_utils.symbolic_trace.trace_and_fuse_sub_graph"]], "append_attr() (in module neural_compressor.adaptor.torch_utils.util)": [[141, "neural_compressor.adaptor.torch_utils.util.append_attr"]], "auto_copy() (in module neural_compressor.adaptor.torch_utils.util)": [[141, "neural_compressor.adaptor.torch_utils.util.auto_copy"]], "check_cfg_and_qconfig() (in module neural_compressor.adaptor.torch_utils.util)": [[141, "neural_compressor.adaptor.torch_utils.util.check_cfg_and_qconfig"]], "collate_torch_preds() (in module neural_compressor.adaptor.torch_utils.util)": [[141, "neural_compressor.adaptor.torch_utils.util.collate_torch_preds"]], "fetch_module() (in module neural_compressor.adaptor.torch_utils.util)": [[141, "neural_compressor.adaptor.torch_utils.util.fetch_module"]], "generate_activation_observer() (in module neural_compressor.adaptor.torch_utils.util)": [[141, "neural_compressor.adaptor.torch_utils.util.generate_activation_observer"]], "get_embedding_contiguous() (in module neural_compressor.adaptor.torch_utils.util)": [[141, "neural_compressor.adaptor.torch_utils.util.get_embedding_contiguous"]], "get_example_input() (in module neural_compressor.adaptor.torch_utils.util)": [[141, "neural_compressor.adaptor.torch_utils.util.get_example_input"]], "get_fallback_order() (in module neural_compressor.adaptor.torch_utils.util)": [[141, "neural_compressor.adaptor.torch_utils.util.get_fallback_order"]], "get_mse_order_per_fp32() (in module neural_compressor.adaptor.torch_utils.util)": [[141, "neural_compressor.adaptor.torch_utils.util.get_mse_order_per_fp32"]], "get_mse_order_per_int8() (in module neural_compressor.adaptor.torch_utils.util)": [[141, "neural_compressor.adaptor.torch_utils.util.get_mse_order_per_int8"]], "get_quantizable_ops_from_cfgs() (in module neural_compressor.adaptor.torch_utils.util)": [[141, "neural_compressor.adaptor.torch_utils.util.get_quantizable_ops_from_cfgs"]], "get_torch_version() (in module neural_compressor.adaptor.torch_utils.util)": [[141, "neural_compressor.adaptor.torch_utils.util.get_torch_version"]], "input2tuple() (in module neural_compressor.adaptor.torch_utils.util)": [[141, "neural_compressor.adaptor.torch_utils.util.input2tuple"]], "is_fused_module() (in module neural_compressor.adaptor.torch_utils.util)": [[141, "neural_compressor.adaptor.torch_utils.util.is_fused_module"]], "neural_compressor.adaptor.torch_utils.util": [[141, "module-neural_compressor.adaptor.torch_utils.util"]], "paser_cfgs() (in module neural_compressor.adaptor.torch_utils.util)": [[141, "neural_compressor.adaptor.torch_utils.util.paser_cfgs"]], "set_module() (in module neural_compressor.adaptor.torch_utils.util)": [[141, "neural_compressor.adaptor.torch_utils.util.set_module"]], "simple_inference() (in module neural_compressor.adaptor.torch_utils.util)": [[141, "neural_compressor.adaptor.torch_utils.util.simple_inference"]], "algorithms (class in neural_compressor.algorithm.algorithm)": [[142, "neural_compressor.algorithm.algorithm.ALGORITHMS"]], "algorithm (class in neural_compressor.algorithm.algorithm)": [[142, "neural_compressor.algorithm.algorithm.Algorithm"]], "algorithmscheduler (class in neural_compressor.algorithm.algorithm)": [[142, "neural_compressor.algorithm.algorithm.AlgorithmScheduler"]], "adaptor (neural_compressor.algorithm.algorithm.algorithmscheduler property)": [[142, "neural_compressor.algorithm.algorithm.AlgorithmScheduler.adaptor"]], "algorithm_registry() (in module neural_compressor.algorithm.algorithm)": [[142, "neural_compressor.algorithm.algorithm.algorithm_registry"]], "calib_iter (neural_compressor.algorithm.algorithm.algorithmscheduler property)": [[142, "neural_compressor.algorithm.algorithm.AlgorithmScheduler.calib_iter"]], "dataloader (neural_compressor.algorithm.algorithm.algorithmscheduler property)": [[142, "neural_compressor.algorithm.algorithm.AlgorithmScheduler.dataloader"]], "neural_compressor.algorithm.algorithm": [[142, "module-neural_compressor.algorithm.algorithm"]], "origin_model (neural_compressor.algorithm.algorithm.algorithmscheduler property)": [[142, "neural_compressor.algorithm.algorithm.AlgorithmScheduler.origin_model"]], "q_model (neural_compressor.algorithm.algorithm.algorithmscheduler property)": [[142, "neural_compressor.algorithm.algorithm.AlgorithmScheduler.q_model"]], "support_algorithms() (neural_compressor.algorithm.algorithm.algorithms class method)": [[142, "neural_compressor.algorithm.algorithm.ALGORITHMS.support_algorithms"]], "fastbiascorrection (class in neural_compressor.algorithm.fast_bias_correction)": [[143, "neural_compressor.algorithm.fast_bias_correction.FastBiasCorrection"]], "neural_compressor.algorithm.fast_bias_correction": [[143, "module-neural_compressor.algorithm.fast_bias_correction"]], "algorithms (class in neural_compressor.algorithm)": [[144, "neural_compressor.algorithm.ALGORITHMS"]], "algorithm (class in neural_compressor.algorithm)": [[144, "neural_compressor.algorithm.Algorithm"]], "algorithmscheduler (class in neural_compressor.algorithm)": [[144, "neural_compressor.algorithm.AlgorithmScheduler"]], "adaptor (neural_compressor.algorithm.algorithmscheduler property)": [[144, "neural_compressor.algorithm.AlgorithmScheduler.adaptor"]], "algorithm_registry() (in module neural_compressor.algorithm)": [[144, "neural_compressor.algorithm.algorithm_registry"]], "calib_iter (neural_compressor.algorithm.algorithmscheduler property)": [[144, "neural_compressor.algorithm.AlgorithmScheduler.calib_iter"]], "dataloader (neural_compressor.algorithm.algorithmscheduler property)": [[144, "neural_compressor.algorithm.AlgorithmScheduler.dataloader"]], "neural_compressor.algorithm": [[144, "module-neural_compressor.algorithm"]], "origin_model (neural_compressor.algorithm.algorithmscheduler property)": [[144, "neural_compressor.algorithm.AlgorithmScheduler.origin_model"]], "q_model (neural_compressor.algorithm.algorithmscheduler property)": [[144, "neural_compressor.algorithm.AlgorithmScheduler.q_model"]], "support_algorithms() (neural_compressor.algorithm.algorithms class method)": [[144, "neural_compressor.algorithm.ALGORITHMS.support_algorithms"]], "weightcorrection (class in neural_compressor.algorithm.weight_correction)": [[145, "neural_compressor.algorithm.weight_correction.WeightCorrection"]], "neural_compressor.algorithm.weight_correction": [[145, "module-neural_compressor.algorithm.weight_correction"]], "benchmark (class in neural_compressor.benchmark)": [[146, "neural_compressor.benchmark.Benchmark"]], "dataloader() (neural_compressor.benchmark.benchmark method)": [[146, "neural_compressor.benchmark.Benchmark.dataloader"]], "fit() (in module neural_compressor.benchmark)": [[146, "neural_compressor.benchmark.fit"]], "metric() (neural_compressor.benchmark.benchmark method)": [[146, "neural_compressor.benchmark.Benchmark.metric"]], "neural_compressor.benchmark": [[146, "module-neural_compressor.benchmark"]], "postprocess() (neural_compressor.benchmark.benchmark method)": [[146, "neural_compressor.benchmark.Benchmark.postprocess"]], "benchmark_conf (class in neural_compressor.conf.config)": [[147, "neural_compressor.conf.config.Benchmark_Conf"]], "conf (class in neural_compressor.conf.config)": [[147, "neural_compressor.conf.config.Conf"]], "distillation_conf (class in neural_compressor.conf.config)": [[147, "neural_compressor.conf.config.Distillation_Conf"]], "graph_optimization_conf (class in neural_compressor.conf.config)": [[147, "neural_compressor.conf.config.Graph_Optimization_Conf"]], "mixedprecision_conf (class in neural_compressor.conf.config)": [[147, "neural_compressor.conf.config.MixedPrecision_Conf"]], "nasconfig (class in neural_compressor.conf.config)": [[147, "neural_compressor.conf.config.NASConfig"]], "prunerv2 (class in neural_compressor.conf.config)": [[147, "neural_compressor.conf.config.PrunerV2"]], "pruning_conf (class in neural_compressor.conf.config)": [[147, "neural_compressor.conf.config.Pruning_Conf"]], "quantization_conf (class in neural_compressor.conf.config)": [[147, "neural_compressor.conf.config.Quantization_Conf"]], "neural_compressor.conf.config": [[147, "module-neural_compressor.conf.config"]], "dotdict (class in neural_compressor.conf.dotdict)": [[148, "neural_compressor.conf.dotdict.DotDict"]], "deep_get() (in module neural_compressor.conf.dotdict)": [[148, "neural_compressor.conf.dotdict.deep_get"]], "deep_set() (in module neural_compressor.conf.dotdict)": [[148, "neural_compressor.conf.dotdict.deep_set"]], "neural_compressor.conf.dotdict": [[148, "module-neural_compressor.conf.dotdict"]], "neural_compressor.conf": [[149, "module-neural_compressor.conf"]], "neural_compressor.conf.pythonic_config": [[150, "module-neural_compressor.conf.pythonic_config"]], "accuracycriterion (class in neural_compressor.config)": [[151, "neural_compressor.config.AccuracyCriterion"]], "benchmarkconfig (class in neural_compressor.config)": [[151, "neural_compressor.config.BenchmarkConfig"]], "distillationconfig (class in neural_compressor.config)": [[151, "neural_compressor.config.DistillationConfig"]], "exportconfig (class in neural_compressor.config)": [[151, "neural_compressor.config.ExportConfig"]], "intermediatelayersknowledgedistillationlossconfig (class in neural_compressor.config)": [[151, "neural_compressor.config.IntermediateLayersKnowledgeDistillationLossConfig"]], "knowledgedistillationlossconfig (class in neural_compressor.config)": [[151, "neural_compressor.config.KnowledgeDistillationLossConfig"]], "mixedprecisionconfig (class in neural_compressor.config)": [[151, "neural_compressor.config.MixedPrecisionConfig"]], "onnxqlinear2qdqconfig (class in neural_compressor.config)": [[151, "neural_compressor.config.ONNXQlinear2QDQConfig"]], "options (class in neural_compressor.config)": [[151, "neural_compressor.config.Options"]], "posttrainingquantconfig (class in neural_compressor.config)": [[151, "neural_compressor.config.PostTrainingQuantConfig"]], "quantizationawaretrainingconfig (class in neural_compressor.config)": [[151, "neural_compressor.config.QuantizationAwareTrainingConfig"]], "selfknowledgedistillationlossconfig (class in neural_compressor.config)": [[151, "neural_compressor.config.SelfKnowledgeDistillationLossConfig"]], "tf2onnxconfig (class in neural_compressor.config)": [[151, "neural_compressor.config.TF2ONNXConfig"]], "torch2onnxconfig (class in neural_compressor.config)": [[151, "neural_compressor.config.Torch2ONNXConfig"]], "tuningcriterion (class in neural_compressor.config)": [[151, "neural_compressor.config.TuningCriterion"]], "weightpruningconfig (class in neural_compressor.config)": [[151, "neural_compressor.config.WeightPruningConfig"]], "absolute (neural_compressor.config.accuracycriterion property)": [[151, "neural_compressor.config.AccuracyCriterion.absolute"]], "approach (neural_compressor.config.posttrainingquantconfig property)": [[151, "neural_compressor.config.PostTrainingQuantConfig.approach"]], "approach (neural_compressor.config.quantizationawaretrainingconfig property)": [[151, "neural_compressor.config.QuantizationAwareTrainingConfig.approach"]], "backend (neural_compressor.config.benchmarkconfig property)": [[151, "neural_compressor.config.BenchmarkConfig.backend"]], "check_value() (in module neural_compressor.config)": [[151, "neural_compressor.config.check_value"]], "cores_per_instance (neural_compressor.config.benchmarkconfig property)": [[151, "neural_compressor.config.BenchmarkConfig.cores_per_instance"]], "criterion (neural_compressor.config.accuracycriterion property)": [[151, "neural_compressor.config.AccuracyCriterion.criterion"]], "criterion (neural_compressor.config.distillationconfig property)": [[151, "neural_compressor.config.DistillationConfig.criterion"]], "dtype (neural_compressor.config.exportconfig property)": [[151, "neural_compressor.config.ExportConfig.dtype"]], "dynamic_axes (neural_compressor.config.exportconfig property)": [[151, "neural_compressor.config.ExportConfig.dynamic_axes"]], "example_inputs (neural_compressor.config.exportconfig property)": [[151, "neural_compressor.config.ExportConfig.example_inputs"]], "higher_is_better (neural_compressor.config.accuracycriterion property)": [[151, "neural_compressor.config.AccuracyCriterion.higher_is_better"]], "input_names (neural_compressor.config.exportconfig property)": [[151, "neural_compressor.config.ExportConfig.input_names"]], "inputs (neural_compressor.config.benchmarkconfig property)": [[151, "neural_compressor.config.BenchmarkConfig.inputs"]], "inter_num_of_threads (neural_compressor.config.benchmarkconfig property)": [[151, "neural_compressor.config.BenchmarkConfig.inter_num_of_threads"]], "intra_num_of_threads (neural_compressor.config.benchmarkconfig property)": [[151, "neural_compressor.config.BenchmarkConfig.intra_num_of_threads"]], "iteration (neural_compressor.config.benchmarkconfig property)": [[151, "neural_compressor.config.BenchmarkConfig.iteration"]], "max_trials (neural_compressor.config.tuningcriterion property)": [[151, "neural_compressor.config.TuningCriterion.max_trials"]], "neural_compressor.config": [[151, "module-neural_compressor.config"]], "num_of_instance (neural_compressor.config.benchmarkconfig property)": [[151, "neural_compressor.config.BenchmarkConfig.num_of_instance"]], "objective (neural_compressor.config.tuningcriterion property)": [[151, "neural_compressor.config.TuningCriterion.objective"]], "opset_version (neural_compressor.config.exportconfig property)": [[151, "neural_compressor.config.ExportConfig.opset_version"]], "optimizer (neural_compressor.config.distillationconfig property)": [[151, "neural_compressor.config.DistillationConfig.optimizer"]], "output_names (neural_compressor.config.exportconfig property)": [[151, "neural_compressor.config.ExportConfig.output_names"]], "outputs (neural_compressor.config.benchmarkconfig property)": [[151, "neural_compressor.config.BenchmarkConfig.outputs"]], "quant_format (neural_compressor.config.exportconfig property)": [[151, "neural_compressor.config.ExportConfig.quant_format"]], "random_seed (neural_compressor.config.options property)": [[151, "neural_compressor.config.Options.random_seed"]], "relative (neural_compressor.config.accuracycriterion property)": [[151, "neural_compressor.config.AccuracyCriterion.relative"]], "resume_from (neural_compressor.config.options property)": [[151, "neural_compressor.config.Options.resume_from"]], "strategy (neural_compressor.config.tuningcriterion property)": [[151, "neural_compressor.config.TuningCriterion.strategy"]], "strategy_kwargs (neural_compressor.config.tuningcriterion property)": [[151, "neural_compressor.config.TuningCriterion.strategy_kwargs"]], "teacher_model (neural_compressor.config.distillationconfig property)": [[151, "neural_compressor.config.DistillationConfig.teacher_model"]], "tensorboard (neural_compressor.config.options property)": [[151, "neural_compressor.config.Options.tensorboard"]], "timeout (neural_compressor.config.tuningcriterion property)": [[151, "neural_compressor.config.TuningCriterion.timeout"]], "tolerable_loss (neural_compressor.config.accuracycriterion property)": [[151, "neural_compressor.config.AccuracyCriterion.tolerable_loss"]], "tuning_criterion (neural_compressor.config.posttrainingquantconfig property)": [[151, "neural_compressor.config.PostTrainingQuantConfig.tuning_criterion"]], "warmup (neural_compressor.config.benchmarkconfig property)": [[151, "neural_compressor.config.BenchmarkConfig.warmup"]], "weight_compression (neural_compressor.config.weightpruningconfig property)": [[151, "neural_compressor.config.WeightPruningConfig.weight_compression"]], "workspace (neural_compressor.config.options property)": [[151, "neural_compressor.config.Options.workspace"]], "neural_compressor.contrib": [[152, "module-neural_compressor.contrib"]], "neural_compressor.contrib.strategy": [[153, "module-neural_compressor.contrib.strategy"]], "sigopttunestrategy (class in neural_compressor.contrib.strategy.sigopt)": [[154, "neural_compressor.contrib.strategy.sigopt.SigOptTuneStrategy"]], "create_exp() (neural_compressor.contrib.strategy.sigopt.sigopttunestrategy method)": [[154, "neural_compressor.contrib.strategy.sigopt.SigOptTuneStrategy.create_exp"]], "get_acc_target() (neural_compressor.contrib.strategy.sigopt.sigopttunestrategy method)": [[154, "neural_compressor.contrib.strategy.sigopt.SigOptTuneStrategy.get_acc_target"]], "neural_compressor.contrib.strategy.sigopt": [[154, "module-neural_compressor.contrib.strategy.sigopt"]], "next_tune_cfg() (neural_compressor.contrib.strategy.sigopt.sigopttunestrategy method)": [[154, "neural_compressor.contrib.strategy.sigopt.SigOptTuneStrategy.next_tune_cfg"]], "params_to_tune_configs() (neural_compressor.contrib.strategy.sigopt.sigopttunestrategy method)": [[154, "neural_compressor.contrib.strategy.sigopt.SigOptTuneStrategy.params_to_tune_configs"]], "traverse() (neural_compressor.contrib.strategy.sigopt.sigopttunestrategy method)": [[154, "neural_compressor.contrib.strategy.sigopt.SigOptTuneStrategy.traverse"]], "tpetunestrategy (class in neural_compressor.contrib.strategy.tpe)": [[155, "neural_compressor.contrib.strategy.tpe.TpeTuneStrategy"]], "add_loss_to_tuned_history_and_find_best() (neural_compressor.contrib.strategy.tpe.tpetunestrategy method)": [[155, "neural_compressor.contrib.strategy.tpe.TpeTuneStrategy.add_loss_to_tuned_history_and_find_best"]], "calculate_loss() (neural_compressor.contrib.strategy.tpe.tpetunestrategy method)": [[155, "neural_compressor.contrib.strategy.tpe.TpeTuneStrategy.calculate_loss"]], "neural_compressor.contrib.strategy.tpe": [[155, "module-neural_compressor.contrib.strategy.tpe"]], "object_evaluation() (neural_compressor.contrib.strategy.tpe.tpetunestrategy method)": [[155, "neural_compressor.contrib.strategy.tpe.TpeTuneStrategy.object_evaluation"]], "stop() (neural_compressor.contrib.strategy.tpe.tpetunestrategy method)": [[155, "neural_compressor.contrib.strategy.tpe.TpeTuneStrategy.stop"]], "traverse() (neural_compressor.contrib.strategy.tpe.tpetunestrategy method)": [[155, "neural_compressor.contrib.strategy.tpe.TpeTuneStrategy.traverse"]], "basedataloader (class in neural_compressor.data.dataloaders.base_dataloader)": [[156, "neural_compressor.data.dataloaders.base_dataloader.BaseDataLoader"]], "batch() (neural_compressor.data.dataloaders.base_dataloader.basedataloader method)": [[156, "neural_compressor.data.dataloaders.base_dataloader.BaseDataLoader.batch"]], "batch_size (neural_compressor.data.dataloaders.base_dataloader.basedataloader property)": [[156, "neural_compressor.data.dataloaders.base_dataloader.BaseDataLoader.batch_size"]], "neural_compressor.data.dataloaders.base_dataloader": [[156, "module-neural_compressor.data.dataloaders.base_dataloader"]], "dataloader (class in neural_compressor.data.dataloaders.dataloader)": [[157, "neural_compressor.data.dataloaders.dataloader.DataLoader"]], "neural_compressor.data.dataloaders.dataloader": [[157, "module-neural_compressor.data.dataloaders.dataloader"]], "defaultdataloader (class in neural_compressor.data.dataloaders.default_dataloader)": [[158, "neural_compressor.data.dataloaders.default_dataloader.DefaultDataLoader"]], "batch() (neural_compressor.data.dataloaders.default_dataloader.defaultdataloader method)": [[158, "neural_compressor.data.dataloaders.default_dataloader.DefaultDataLoader.batch"]], "dataloader (neural_compressor.data.dataloaders.default_dataloader.defaultdataloader property)": [[158, "neural_compressor.data.dataloaders.default_dataloader.DefaultDataLoader.dataloader"]], "default_collate() (in module neural_compressor.data.dataloaders.default_dataloader)": [[158, "neural_compressor.data.dataloaders.default_dataloader.default_collate"]], "neural_compressor.data.dataloaders.default_dataloader": [[158, "module-neural_compressor.data.dataloaders.default_dataloader"]], "fetcher (class in neural_compressor.data.dataloaders.fetcher)": [[159, "neural_compressor.data.dataloaders.fetcher.Fetcher"]], "indexfetcher (class in neural_compressor.data.dataloaders.fetcher)": [[159, "neural_compressor.data.dataloaders.fetcher.IndexFetcher"]], "iterablefetcher (class in neural_compressor.data.dataloaders.fetcher)": [[159, "neural_compressor.data.dataloaders.fetcher.IterableFetcher"]], "neural_compressor.data.dataloaders.fetcher": [[159, "module-neural_compressor.data.dataloaders.fetcher"]], "dataloader (class in neural_compressor.data.dataloaders)": [[160, "neural_compressor.data.dataloaders.DataLoader"]], "neural_compressor.data.dataloaders": [[160, "module-neural_compressor.data.dataloaders"]], "mxnetdataloader (class in neural_compressor.data.dataloaders.mxnet_dataloader)": [[161, "neural_compressor.data.dataloaders.mxnet_dataloader.MXNetDataLoader"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[161, "module-neural_compressor.data.dataloaders.mxnet_dataloader"]], "onnxrtbertdataloader (class in neural_compressor.data.dataloaders.onnxrt_dataloader)": [[162, "neural_compressor.data.dataloaders.onnxrt_dataloader.ONNXRTBertDataLoader"]], "onnxrtdataloader (class in neural_compressor.data.dataloaders.onnxrt_dataloader)": [[162, "neural_compressor.data.dataloaders.onnxrt_dataloader.ONNXRTDataLoader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[162, "module-neural_compressor.data.dataloaders.onnxrt_dataloader"]], "pytorchdataloader (class in neural_compressor.data.dataloaders.pytorch_dataloader)": [[163, "neural_compressor.data.dataloaders.pytorch_dataloader.PyTorchDataLoader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[163, "module-neural_compressor.data.dataloaders.pytorch_dataloader"]], "batchsampler (class in neural_compressor.data.dataloaders.sampler)": [[164, "neural_compressor.data.dataloaders.sampler.BatchSampler"]], "iterablesampler (class in neural_compressor.data.dataloaders.sampler)": [[164, "neural_compressor.data.dataloaders.sampler.IterableSampler"]], "sampler (class in neural_compressor.data.dataloaders.sampler)": [[164, "neural_compressor.data.dataloaders.sampler.Sampler"]], "sequentialsampler (class in neural_compressor.data.dataloaders.sampler)": [[164, "neural_compressor.data.dataloaders.sampler.SequentialSampler"]], "neural_compressor.data.dataloaders.sampler": [[164, "module-neural_compressor.data.dataloaders.sampler"]], "tfdatadataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[165, "neural_compressor.data.dataloaders.tensorflow_dataloader.TFDataDataLoader"]], "tensorflowbertdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[165, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowBertDataLoader"]], "tensorflowdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[165, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowDataLoader"]], "tensorflowmodelzoobertdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[165, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowModelZooBertDataLoader"]], "batch() (neural_compressor.data.dataloaders.tensorflow_dataloader.tfdatadataloader method)": [[165, "neural_compressor.data.dataloaders.tensorflow_dataloader.TFDataDataLoader.batch"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[165, "module-neural_compressor.data.dataloaders.tensorflow_dataloader"]], "inputfeatures (class in neural_compressor.data.datasets.bert_dataset)": [[166, "neural_compressor.data.datasets.bert_dataset.InputFeatures"]], "onnxrtbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[166, "neural_compressor.data.datasets.bert_dataset.ONNXRTBertDataset"]], "parsedecodebert (class in neural_compressor.data.datasets.bert_dataset)": [[166, "neural_compressor.data.datasets.bert_dataset.ParseDecodeBert"]], "pytorchbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[166, "neural_compressor.data.datasets.bert_dataset.PytorchBertDataset"]], "tensorflowbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[166, "neural_compressor.data.datasets.bert_dataset.TensorflowBertDataset"]], "tensorflowmodelzoobertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[166, "neural_compressor.data.datasets.bert_dataset.TensorflowModelZooBertDataset"]], "convert_examples_to_features() (in module neural_compressor.data.datasets.bert_dataset)": [[166, "neural_compressor.data.datasets.bert_dataset.convert_examples_to_features"]], "load_and_cache_examples() (in module neural_compressor.data.datasets.bert_dataset)": [[166, "neural_compressor.data.datasets.bert_dataset.load_and_cache_examples"]], "neural_compressor.data.datasets.bert_dataset": [[166, "module-neural_compressor.data.datasets.bert_dataset"]], "to_json_string() (neural_compressor.data.datasets.bert_dataset.inputfeatures method)": [[166, "neural_compressor.data.datasets.bert_dataset.InputFeatures.to_json_string"]], "coconpy (class in neural_compressor.data.datasets.coco_dataset)": [[167, "neural_compressor.data.datasets.coco_dataset.COCONpy"]], "cocoraw (class in neural_compressor.data.datasets.coco_dataset)": [[167, "neural_compressor.data.datasets.coco_dataset.COCORaw"]], "cocorecorddataset (class in neural_compressor.data.datasets.coco_dataset)": [[167, "neural_compressor.data.datasets.coco_dataset.COCORecordDataset"]], "parsedecodecoco (class in neural_compressor.data.datasets.coco_dataset)": [[167, "neural_compressor.data.datasets.coco_dataset.ParseDecodeCoco"]], "neural_compressor.data.datasets.coco_dataset": [[167, "module-neural_compressor.data.datasets.coco_dataset"]], "cifar10 (class in neural_compressor.data.datasets.dataset)": [[168, "neural_compressor.data.datasets.dataset.CIFAR10"]], "cifar100 (class in neural_compressor.data.datasets.dataset)": [[168, "neural_compressor.data.datasets.dataset.CIFAR100"]], "dataset (class in neural_compressor.data.datasets.dataset)": [[168, "neural_compressor.data.datasets.dataset.Dataset"]], "datasets (class in neural_compressor.data.datasets.dataset)": [[168, "neural_compressor.data.datasets.dataset.Datasets"]], "fashionmnist (class in neural_compressor.data.datasets.dataset)": [[168, "neural_compressor.data.datasets.dataset.FashionMNIST"]], "imagefolder (class in neural_compressor.data.datasets.dataset)": [[168, "neural_compressor.data.datasets.dataset.ImageFolder"]], "iterabledataset (class in neural_compressor.data.datasets.dataset)": [[168, "neural_compressor.data.datasets.dataset.IterableDataset"]], "mnist (class in neural_compressor.data.datasets.dataset)": [[168, "neural_compressor.data.datasets.dataset.MNIST"]], "mxnetcifar10 (class in neural_compressor.data.datasets.dataset)": [[168, "neural_compressor.data.datasets.dataset.MXNetCIFAR10"]], "mxnetcifar100 (class in neural_compressor.data.datasets.dataset)": [[168, "neural_compressor.data.datasets.dataset.MXNetCIFAR100"]], "mxnetdatasets (class in neural_compressor.data.datasets.dataset)": [[168, "neural_compressor.data.datasets.dataset.MXNetDatasets"]], "mxnetfashionmnist (class in neural_compressor.data.datasets.dataset)": [[168, "neural_compressor.data.datasets.dataset.MXNetFashionMNIST"]], "mxnetimagefolder (class in neural_compressor.data.datasets.dataset)": [[168, "neural_compressor.data.datasets.dataset.MXNetImageFolder"]], "mxnetmnist (class in neural_compressor.data.datasets.dataset)": [[168, "neural_compressor.data.datasets.dataset.MXNetMNIST"]], "onnxrtitdatasets (class in neural_compressor.data.datasets.dataset)": [[168, "neural_compressor.data.datasets.dataset.ONNXRTITDatasets"]], "onnxrtqldatasets (class in neural_compressor.data.datasets.dataset)": [[168, "neural_compressor.data.datasets.dataset.ONNXRTQLDatasets"]], "pytorchdatasets (class in neural_compressor.data.datasets.dataset)": [[168, "neural_compressor.data.datasets.dataset.PyTorchDatasets"]], "pytorchcifar10 (class in neural_compressor.data.datasets.dataset)": [[168, "neural_compressor.data.datasets.dataset.PytorchCIFAR10"]], "pytorchcifar100 (class in neural_compressor.data.datasets.dataset)": [[168, "neural_compressor.data.datasets.dataset.PytorchCIFAR100"]], "pytorchfashionmnist (class in neural_compressor.data.datasets.dataset)": [[168, "neural_compressor.data.datasets.dataset.PytorchFashionMNIST"]], "pytorchmnist (class in neural_compressor.data.datasets.dataset)": [[168, "neural_compressor.data.datasets.dataset.PytorchMNIST"]], "pytorchmxnetwrapdataset (class in neural_compressor.data.datasets.dataset)": [[168, "neural_compressor.data.datasets.dataset.PytorchMxnetWrapDataset"]], "pytorchmxnetwrapfunction (class in neural_compressor.data.datasets.dataset)": [[168, "neural_compressor.data.datasets.dataset.PytorchMxnetWrapFunction"]], "tensorflowcifar10 (class in neural_compressor.data.datasets.dataset)": [[168, "neural_compressor.data.datasets.dataset.TensorflowCIFAR10"]], "tensorflowcifar100 (class in neural_compressor.data.datasets.dataset)": [[168, "neural_compressor.data.datasets.dataset.TensorflowCIFAR100"]], "tensorflowdatasets (class in neural_compressor.data.datasets.dataset)": [[168, "neural_compressor.data.datasets.dataset.TensorflowDatasets"]], "tensorflowfashionmnist (class in neural_compressor.data.datasets.dataset)": [[168, "neural_compressor.data.datasets.dataset.TensorflowFashionMNIST"]], "tensorflowimagefolder (class in neural_compressor.data.datasets.dataset)": [[168, "neural_compressor.data.datasets.dataset.TensorflowImageFolder"]], "tensorflowimagerecord (class in neural_compressor.data.datasets.dataset)": [[168, "neural_compressor.data.datasets.dataset.TensorflowImageRecord"]], "tensorflowmnist (class in neural_compressor.data.datasets.dataset)": [[168, "neural_compressor.data.datasets.dataset.TensorflowMNIST"]], "tensorflowtfrecorddataset (class in neural_compressor.data.datasets.dataset)": [[168, "neural_compressor.data.datasets.dataset.TensorflowTFRecordDataset"]], "tensorflowvocrecord (class in neural_compressor.data.datasets.dataset)": [[168, "neural_compressor.data.datasets.dataset.TensorflowVOCRecord"]], "calculate_md5() (in module neural_compressor.data.datasets.dataset)": [[168, "neural_compressor.data.datasets.dataset.calculate_md5"]], "check_integrity() (in module neural_compressor.data.datasets.dataset)": [[168, "neural_compressor.data.datasets.dataset.check_integrity"]], "class_to_idx (neural_compressor.data.datasets.dataset.mnist property)": [[168, "neural_compressor.data.datasets.dataset.MNIST.class_to_idx"]], "dataset_registry() (in module neural_compressor.data.datasets.dataset)": [[168, "neural_compressor.data.datasets.dataset.dataset_registry"]], "download() (neural_compressor.data.datasets.dataset.cifar10 method)": [[168, "neural_compressor.data.datasets.dataset.CIFAR10.download"]], "download() (neural_compressor.data.datasets.dataset.mnist method)": [[168, "neural_compressor.data.datasets.dataset.MNIST.download"]], "download_url() (in module neural_compressor.data.datasets.dataset)": [[168, "neural_compressor.data.datasets.dataset.download_url"]], "framework_datasets (in module neural_compressor.data.datasets.dataset)": [[168, "neural_compressor.data.datasets.dataset.framework_datasets"]], "gen_bar_updater() (in module neural_compressor.data.datasets.dataset)": [[168, "neural_compressor.data.datasets.dataset.gen_bar_updater"]], "load_meta() (neural_compressor.data.datasets.dataset.cifar10 method)": [[168, "neural_compressor.data.datasets.dataset.CIFAR10.load_meta"]], "neural_compressor.data.datasets.dataset": [[168, "module-neural_compressor.data.datasets.dataset"]], "read_data() (neural_compressor.data.datasets.dataset.fashionmnist method)": [[168, "neural_compressor.data.datasets.dataset.FashionMNIST.read_data"]], "read_data() (neural_compressor.data.datasets.dataset.mnist method)": [[168, "neural_compressor.data.datasets.dataset.MNIST.read_data"]], "dummydataset (class in neural_compressor.data.datasets.dummy_dataset)": [[169, "neural_compressor.data.datasets.dummy_dataset.DummyDataset"]], "neural_compressor.data.datasets.dummy_dataset": [[169, "module-neural_compressor.data.datasets.dummy_dataset"]], "dummydataset (class in neural_compressor.data.datasets.dummy_dataset_v2)": [[170, "neural_compressor.data.datasets.dummy_dataset_v2.DummyDataset"]], "sparsedummydataset (class in neural_compressor.data.datasets.dummy_dataset_v2)": [[170, "neural_compressor.data.datasets.dummy_dataset_v2.SparseDummyDataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[170, "module-neural_compressor.data.datasets.dummy_dataset_v2"]], "imagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[171, "neural_compressor.data.datasets.imagenet_dataset.ImagenetRaw"]], "mxnetimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[171, "neural_compressor.data.datasets.imagenet_dataset.MXNetImagenetRaw"]], "onnxrtimagenetdataset (class in neural_compressor.data.datasets.imagenet_dataset)": [[171, "neural_compressor.data.datasets.imagenet_dataset.ONNXRTImagenetDataset"]], "pytorchimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[171, "neural_compressor.data.datasets.imagenet_dataset.PytorchImagenetRaw"]], "tensorflowimagenetdataset (class in neural_compressor.data.datasets.imagenet_dataset)": [[171, "neural_compressor.data.datasets.imagenet_dataset.TensorflowImagenetDataset"]], "tensorflowimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[171, "neural_compressor.data.datasets.imagenet_dataset.TensorflowImagenetRaw"]], "neural_compressor.data.datasets.imagenet_dataset": [[171, "module-neural_compressor.data.datasets.imagenet_dataset"]], "dataset (class in neural_compressor.data.datasets)": [[172, "neural_compressor.data.datasets.Dataset"]], "datasets (class in neural_compressor.data.datasets)": [[172, "neural_compressor.data.datasets.Datasets"]], "iterabledataset (class in neural_compressor.data.datasets)": [[172, "neural_compressor.data.datasets.IterableDataset"]], "dataset_registry() (in module neural_compressor.data.datasets)": [[172, "neural_compressor.data.datasets.dataset_registry"]], "neural_compressor.data.datasets": [[172, "module-neural_compressor.data.datasets"]], "styletransferdataset (class in neural_compressor.data.datasets.style_transfer_dataset)": [[173, "neural_compressor.data.datasets.style_transfer_dataset.StyleTransferDataset"]], "neural_compressor.data.datasets.style_transfer_dataset": [[173, "module-neural_compressor.data.datasets.style_transfer_dataset"]], "labelbalancecocorawfilter (class in neural_compressor.data.filters.coco_filter)": [[174, "neural_compressor.data.filters.coco_filter.LabelBalanceCOCORawFilter"]], "labelbalancecocorecordfilter (class in neural_compressor.data.filters.coco_filter)": [[174, "neural_compressor.data.filters.coco_filter.LabelBalanceCOCORecordFilter"]], "neural_compressor.data.filters.coco_filter": [[174, "module-neural_compressor.data.filters.coco_filter"]], "filters (class in neural_compressor.data.filters.filter)": [[175, "neural_compressor.data.filters.filter.FILTERS"]], "filter (class in neural_compressor.data.filters.filter)": [[175, "neural_compressor.data.filters.filter.Filter"]], "mxnetfilters (class in neural_compressor.data.filters.filter)": [[175, "neural_compressor.data.filters.filter.MXNetFilters"]], "onnxrtitfilters (class in neural_compressor.data.filters.filter)": [[175, "neural_compressor.data.filters.filter.ONNXRTITFilters"]], "onnxrtqlfilters (class in neural_compressor.data.filters.filter)": [[175, "neural_compressor.data.filters.filter.ONNXRTQLFilters"]], "pytorchfilters (class in neural_compressor.data.filters.filter)": [[175, "neural_compressor.data.filters.filter.PyTorchFilters"]], "tensorflowfilters (class in neural_compressor.data.filters.filter)": [[175, "neural_compressor.data.filters.filter.TensorflowFilters"]], "filter_registry() (in module neural_compressor.data.filters.filter)": [[175, "neural_compressor.data.filters.filter.filter_registry"]], "neural_compressor.data.filters.filter": [[175, "module-neural_compressor.data.filters.filter"]], "filters (class in neural_compressor.data.filters)": [[176, "neural_compressor.data.filters.FILTERS"]], "filter (class in neural_compressor.data.filters)": [[176, "neural_compressor.data.filters.Filter"]], "filter_registry() (in module neural_compressor.data.filters)": [[176, "neural_compressor.data.filters.filter_registry"]], "neural_compressor.data.filters": [[176, "module-neural_compressor.data.filters"]], "basetransform (class in neural_compressor.data)": [[177, "neural_compressor.data.BaseTransform"]], "dataloader (class in neural_compressor.data)": [[177, "neural_compressor.data.DataLoader"]], "dataset (class in neural_compressor.data)": [[177, "neural_compressor.data.Dataset"]], "datasets (class in neural_compressor.data)": [[177, "neural_compressor.data.Datasets"]], "filters (class in neural_compressor.data)": [[177, "neural_compressor.data.FILTERS"]], "filter (class in neural_compressor.data)": [[177, "neural_compressor.data.Filter"]], "iterabledataset (class in neural_compressor.data)": [[177, "neural_compressor.data.IterableDataset"]], "postprocess (class in neural_compressor.data)": [[177, "neural_compressor.data.Postprocess"]], "transforms (class in neural_compressor.data)": [[177, "neural_compressor.data.TRANSFORMS"]], "dataset_registry() (in module neural_compressor.data)": [[177, "neural_compressor.data.dataset_registry"]], "filter_registry() (in module neural_compressor.data)": [[177, "neural_compressor.data.filter_registry"]], "neural_compressor.data": [[177, "module-neural_compressor.data"]], "register() (neural_compressor.data.transforms method)": [[177, "neural_compressor.data.TRANSFORMS.register"]], "transform_registry() (in module neural_compressor.data)": [[177, "neural_compressor.data.transform_registry"]], "parsedecodecocotransform (class in neural_compressor.data.transforms.coco_transform)": [[178, "neural_compressor.data.transforms.coco_transform.ParseDecodeCocoTransform"]], "neural_compressor.data.transforms.coco_transform": [[178, "module-neural_compressor.data.transforms.coco_transform"]], "bilinearimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[179, "neural_compressor.data.transforms.imagenet_transform.BilinearImagenetTransform"]], "labelshift (class in neural_compressor.data.transforms.imagenet_transform)": [[179, "neural_compressor.data.transforms.imagenet_transform.LabelShift"]], "onnxresizecropimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[179, "neural_compressor.data.transforms.imagenet_transform.ONNXResizeCropImagenetTransform"]], "onnxbilinearimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[179, "neural_compressor.data.transforms.imagenet_transform.OnnxBilinearImagenetTransform"]], "parsedecodeimagenet (class in neural_compressor.data.transforms.imagenet_transform)": [[179, "neural_compressor.data.transforms.imagenet_transform.ParseDecodeImagenet"]], "parsedecodeimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[179, "neural_compressor.data.transforms.imagenet_transform.ParseDecodeImagenetTransform"]], "quantizedinput (class in neural_compressor.data.transforms.imagenet_transform)": [[179, "neural_compressor.data.transforms.imagenet_transform.QuantizedInput"]], "resizewithaspectratio (class in neural_compressor.data.transforms.imagenet_transform)": [[179, "neural_compressor.data.transforms.imagenet_transform.ResizeWithAspectRatio"]], "tensorflowresizecropimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[179, "neural_compressor.data.transforms.imagenet_transform.TensorflowResizeCropImagenetTransform"]], "neural_compressor.data.transforms.imagenet_transform": [[179, "module-neural_compressor.data.transforms.imagenet_transform"]], "basetransform (class in neural_compressor.data.transforms)": [[180, "neural_compressor.data.transforms.BaseTransform"]], "postprocess (class in neural_compressor.data.transforms)": [[180, "neural_compressor.data.transforms.Postprocess"]], "transforms (class in neural_compressor.data.transforms)": [[180, "neural_compressor.data.transforms.TRANSFORMS"]], "neural_compressor.data.transforms": [[180, "module-neural_compressor.data.transforms"]], "register() (neural_compressor.data.transforms.transforms method)": [[180, "neural_compressor.data.transforms.TRANSFORMS.register"]], "transform_registry() (in module neural_compressor.data.transforms)": [[180, "neural_compressor.data.transforms.transform_registry"]], "postprocess (class in neural_compressor.data.transforms.postprocess)": [[181, "neural_compressor.data.transforms.postprocess.Postprocess"]], "neural_compressor.data.transforms.postprocess": [[181, "module-neural_compressor.data.transforms.postprocess"]], "basictokenizer (class in neural_compressor.data.transforms.tokenization)": [[182, "neural_compressor.data.transforms.tokenization.BasicTokenizer"]], "fulltokenizer (class in neural_compressor.data.transforms.tokenization)": [[182, "neural_compressor.data.transforms.tokenization.FullTokenizer"]], "wordpiecetokenizer (class in neural_compressor.data.transforms.tokenization)": [[182, "neural_compressor.data.transforms.tokenization.WordpieceTokenizer"]], "convert_by_vocab() (in module neural_compressor.data.transforms.tokenization)": [[182, "neural_compressor.data.transforms.tokenization.convert_by_vocab"]], "convert_ids_to_tokens() (neural_compressor.data.transforms.tokenization.fulltokenizer method)": [[182, "neural_compressor.data.transforms.tokenization.FullTokenizer.convert_ids_to_tokens"]], "convert_to_unicode() (in module neural_compressor.data.transforms.tokenization)": [[182, "neural_compressor.data.transforms.tokenization.convert_to_unicode"]], "convert_tokens_to_ids() (neural_compressor.data.transforms.tokenization.fulltokenizer method)": [[182, "neural_compressor.data.transforms.tokenization.FullTokenizer.convert_tokens_to_ids"]], "load_vocab() (in module neural_compressor.data.transforms.tokenization)": [[182, "neural_compressor.data.transforms.tokenization.load_vocab"]], "neural_compressor.data.transforms.tokenization": [[182, "module-neural_compressor.data.transforms.tokenization"]], "tokenize() (neural_compressor.data.transforms.tokenization.basictokenizer method)": [[182, "neural_compressor.data.transforms.tokenization.BasicTokenizer.tokenize"]], "tokenize() (neural_compressor.data.transforms.tokenization.fulltokenizer method)": [[182, "neural_compressor.data.transforms.tokenization.FullTokenizer.tokenize"]], "tokenize() (neural_compressor.data.transforms.tokenization.wordpiecetokenizer method)": [[182, "neural_compressor.data.transforms.tokenization.WordpieceTokenizer.tokenize"]], "whitespace_tokenize() (in module neural_compressor.data.transforms.tokenization)": [[182, "neural_compressor.data.transforms.tokenization.whitespace_tokenize"]], "alignimagechanneltransform (class in neural_compressor.data.transforms.transform)": [[183, "neural_compressor.data.transforms.transform.AlignImageChannelTransform"]], "basetransform (class in neural_compressor.data.transforms.transform)": [[183, "neural_compressor.data.transforms.transform.BaseTransform"]], "castonnxtransform (class in neural_compressor.data.transforms.transform)": [[183, "neural_compressor.data.transforms.transform.CastONNXTransform"]], "castpytorchtransform (class in neural_compressor.data.transforms.transform)": [[183, "neural_compressor.data.transforms.transform.CastPyTorchTransform"]], "casttftransform (class in neural_compressor.data.transforms.transform)": [[183, "neural_compressor.data.transforms.transform.CastTFTransform"]], "centercroptftransform (class in neural_compressor.data.transforms.transform)": [[183, "neural_compressor.data.transforms.transform.CenterCropTFTransform"]], "centercroptransform (class in neural_compressor.data.transforms.transform)": [[183, "neural_compressor.data.transforms.transform.CenterCropTransform"]], "collecttransform (class in neural_compressor.data.transforms.transform)": [[183, "neural_compressor.data.transforms.transform.CollectTransform"]], "composetransform (class in neural_compressor.data.transforms.transform)": [[183, "neural_compressor.data.transforms.transform.ComposeTransform"]], "cropresizetftransform (class in neural_compressor.data.transforms.transform)": [[183, "neural_compressor.data.transforms.transform.CropResizeTFTransform"]], "cropresizetransform (class in neural_compressor.data.transforms.transform)": [[183, "neural_compressor.data.transforms.transform.CropResizeTransform"]], "croptoboundingbox (class in neural_compressor.data.transforms.transform)": [[183, "neural_compressor.data.transforms.transform.CropToBoundingBox"]], "inputfeatures (class in neural_compressor.data.transforms.transform)": [[183, "neural_compressor.data.transforms.transform.InputFeatures"]], "mxnetcropresizetransform (class in neural_compressor.data.transforms.transform)": [[183, "neural_compressor.data.transforms.transform.MXNetCropResizeTransform"]], "mxnetcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[183, "neural_compressor.data.transforms.transform.MXNetCropToBoundingBox"]], "mxnetnormalizetransform (class in neural_compressor.data.transforms.transform)": [[183, "neural_compressor.data.transforms.transform.MXNetNormalizeTransform"]], "mxnettransforms (class in neural_compressor.data.transforms.transform)": [[183, "neural_compressor.data.transforms.transform.MXNetTransforms"]], "mxnettranspose (class in neural_compressor.data.transforms.transform)": [[183, "neural_compressor.data.transforms.transform.MXNetTranspose"]], "normalizetftransform (class in neural_compressor.data.transforms.transform)": [[183, "neural_compressor.data.transforms.transform.NormalizeTFTransform"]], "normalizetransform (class in neural_compressor.data.transforms.transform)": [[183, "neural_compressor.data.transforms.transform.NormalizeTransform"]], "onnxrtcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[183, "neural_compressor.data.transforms.transform.ONNXRTCropToBoundingBox"]], "onnxrtittransforms (class in neural_compressor.data.transforms.transform)": [[183, "neural_compressor.data.transforms.transform.ONNXRTITTransforms"]], "onnxrtqltransforms (class in neural_compressor.data.transforms.transform)": [[183, "neural_compressor.data.transforms.transform.ONNXRTQLTransforms"]], "paddedcentercroptransform (class in neural_compressor.data.transforms.transform)": [[183, "neural_compressor.data.transforms.transform.PaddedCenterCropTransform"]], "parsedecodevoctransform (class in neural_compressor.data.transforms.transform)": [[183, "neural_compressor.data.transforms.transform.ParseDecodeVocTransform"]], "pytorchalignimagechannel (class in neural_compressor.data.transforms.transform)": [[183, "neural_compressor.data.transforms.transform.PyTorchAlignImageChannel"]], "pytorchcropresizetransform (class in neural_compressor.data.transforms.transform)": [[183, "neural_compressor.data.transforms.transform.PyTorchCropResizeTransform"]], "pytorchnormalizetransform (class in neural_compressor.data.transforms.transform)": [[183, "neural_compressor.data.transforms.transform.PyTorchNormalizeTransform"]], "pytorchtransforms (class in neural_compressor.data.transforms.transform)": [[183, "neural_compressor.data.transforms.transform.PyTorchTransforms"]], "pytorchtranspose (class in neural_compressor.data.transforms.transform)": [[183, "neural_compressor.data.transforms.transform.PyTorchTranspose"]], "pytorchmxnettransform (class in neural_compressor.data.transforms.transform)": [[183, "neural_compressor.data.transforms.transform.PytorchMxnetTransform"]], "pytorchmxnetwrapfunction (class in neural_compressor.data.transforms.transform)": [[183, "neural_compressor.data.transforms.transform.PytorchMxnetWrapFunction"]], "randomcroptftransform (class in neural_compressor.data.transforms.transform)": [[183, "neural_compressor.data.transforms.transform.RandomCropTFTransform"]], "randomcroptransform (class in neural_compressor.data.transforms.transform)": [[183, "neural_compressor.data.transforms.transform.RandomCropTransform"]], "randomhorizontalflip (class in neural_compressor.data.transforms.transform)": [[183, "neural_compressor.data.transforms.transform.RandomHorizontalFlip"]], "randomresizedcropmxnettransform (class in neural_compressor.data.transforms.transform)": [[183, "neural_compressor.data.transforms.transform.RandomResizedCropMXNetTransform"]], "randomresizedcroppytorchtransform (class in neural_compressor.data.transforms.transform)": [[183, "neural_compressor.data.transforms.transform.RandomResizedCropPytorchTransform"]], "randomresizedcroptftransform (class in neural_compressor.data.transforms.transform)": [[183, "neural_compressor.data.transforms.transform.RandomResizedCropTFTransform"]], "randomresizedcroptransform (class in neural_compressor.data.transforms.transform)": [[183, "neural_compressor.data.transforms.transform.RandomResizedCropTransform"]], "randomverticalflip (class in neural_compressor.data.transforms.transform)": [[183, "neural_compressor.data.transforms.transform.RandomVerticalFlip"]], "rescalekeraspretraintransform (class in neural_compressor.data.transforms.transform)": [[183, "neural_compressor.data.transforms.transform.RescaleKerasPretrainTransform"]], "rescaletftransform (class in neural_compressor.data.transforms.transform)": [[183, "neural_compressor.data.transforms.transform.RescaleTFTransform"]], "rescaletransform (class in neural_compressor.data.transforms.transform)": [[183, "neural_compressor.data.transforms.transform.RescaleTransform"]], "resizemxnettransform (class in neural_compressor.data.transforms.transform)": [[183, "neural_compressor.data.transforms.transform.ResizeMXNetTransform"]], "resizepytorchtransform (class in neural_compressor.data.transforms.transform)": [[183, "neural_compressor.data.transforms.transform.ResizePytorchTransform"]], "resizetftransform (class in neural_compressor.data.transforms.transform)": [[183, "neural_compressor.data.transforms.transform.ResizeTFTransform"]], "resizetransform (class in neural_compressor.data.transforms.transform)": [[183, "neural_compressor.data.transforms.transform.ResizeTransform"]], "resizewithratio (class in neural_compressor.data.transforms.transform)": [[183, "neural_compressor.data.transforms.transform.ResizeWithRatio"]], "squadexample (class in neural_compressor.data.transforms.transform)": [[183, "neural_compressor.data.transforms.transform.SquadExample"]], "tfmodelzoocollecttransform (class in neural_compressor.data.transforms.transform)": [[183, "neural_compressor.data.transforms.transform.TFModelZooCollectTransform"]], "tfsquadv1modelzooposttransform (class in neural_compressor.data.transforms.transform)": [[183, "neural_compressor.data.transforms.transform.TFSquadV1ModelZooPostTransform"]], "tfsquadv1posttransform (class in neural_compressor.data.transforms.transform)": [[183, "neural_compressor.data.transforms.transform.TFSquadV1PostTransform"]], "transforms (class in neural_compressor.data.transforms.transform)": [[183, "neural_compressor.data.transforms.transform.TRANSFORMS"], [183, "neural_compressor.data.transforms.transform.Transforms"]], "tensorflowcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[183, "neural_compressor.data.transforms.transform.TensorflowCropToBoundingBox"]], "tensorflowrandomhorizontalflip (class in neural_compressor.data.transforms.transform)": [[183, "neural_compressor.data.transforms.transform.TensorflowRandomHorizontalFlip"]], "tensorflowrandomverticalflip (class in neural_compressor.data.transforms.transform)": [[183, "neural_compressor.data.transforms.transform.TensorflowRandomVerticalFlip"]], "tensorflowresizewithratio (class in neural_compressor.data.transforms.transform)": [[183, "neural_compressor.data.transforms.transform.TensorflowResizeWithRatio"]], "tensorflowtransform (class in neural_compressor.data.transforms.transform)": [[183, "neural_compressor.data.transforms.transform.TensorflowTransform"]], "tensorflowtransforms (class in neural_compressor.data.transforms.transform)": [[183, "neural_compressor.data.transforms.transform.TensorflowTransforms"]], "tensorflowtranspose (class in neural_compressor.data.transforms.transform)": [[183, "neural_compressor.data.transforms.transform.TensorflowTranspose"]], "tensorflowwrapfunction (class in neural_compressor.data.transforms.transform)": [[183, "neural_compressor.data.transforms.transform.TensorflowWrapFunction"]], "toarray (class in neural_compressor.data.transforms.transform)": [[183, "neural_compressor.data.transforms.transform.ToArray"]], "tondarraytransform (class in neural_compressor.data.transforms.transform)": [[183, "neural_compressor.data.transforms.transform.ToNDArrayTransform"]], "transpose (class in neural_compressor.data.transforms.transform)": [[183, "neural_compressor.data.transforms.transform.Transpose"]], "convert_examples_to_features() (in module neural_compressor.data.transforms.transform)": [[183, "neural_compressor.data.transforms.transform.convert_examples_to_features"]], "get_final_text() (in module neural_compressor.data.transforms.transform)": [[183, "neural_compressor.data.transforms.transform.get_final_text"]], "get_params() (neural_compressor.data.transforms.transform.randomresizedcroptftransform method)": [[183, "neural_compressor.data.transforms.transform.RandomResizedCropTFTransform.get_params"]], "get_params() (neural_compressor.data.transforms.transform.randomresizedcroptransform method)": [[183, "neural_compressor.data.transforms.transform.RandomResizedCropTransform.get_params"]], "get_postprocess_result() (neural_compressor.data.transforms.transform.tfsquadv1posttransform method)": [[183, "neural_compressor.data.transforms.transform.TFSquadV1PostTransform.get_postprocess_result"]], "get_torchvision_map() (in module neural_compressor.data.transforms.transform)": [[183, "neural_compressor.data.transforms.transform.get_torchvision_map"]], "neural_compressor.data.transforms.transform": [[183, "module-neural_compressor.data.transforms.transform"]], "process_result() (neural_compressor.data.transforms.transform.tfsquadv1posttransform method)": [[183, "neural_compressor.data.transforms.transform.TFSquadV1PostTransform.process_result"]], "read_squad_examples() (in module neural_compressor.data.transforms.transform)": [[183, "neural_compressor.data.transforms.transform.read_squad_examples"]], "register() (neural_compressor.data.transforms.transform.transforms method)": [[183, "neural_compressor.data.transforms.transform.TRANSFORMS.register"]], "transform_registry() (in module neural_compressor.data.transforms.transform)": [[183, "neural_compressor.data.transforms.transform.transform_registry"]], "benchmark (class in neural_compressor.experimental.benchmark)": [[184, "neural_compressor.experimental.benchmark.Benchmark"]], "b_dataloader (neural_compressor.experimental.benchmark.benchmark property)": [[184, "neural_compressor.experimental.benchmark.Benchmark.b_dataloader"]], "b_func (neural_compressor.experimental.benchmark.benchmark property)": [[184, "neural_compressor.experimental.benchmark.Benchmark.b_func"]], "config_instance() (neural_compressor.experimental.benchmark.benchmark method)": [[184, "neural_compressor.experimental.benchmark.Benchmark.config_instance"]], "generate_prefix() (neural_compressor.experimental.benchmark.benchmark method)": [[184, "neural_compressor.experimental.benchmark.Benchmark.generate_prefix"]], "get_architecture() (in module neural_compressor.experimental.benchmark)": [[184, "neural_compressor.experimental.benchmark.get_architecture"]], "get_bounded_threads() (in module neural_compressor.experimental.benchmark)": [[184, "neural_compressor.experimental.benchmark.get_bounded_threads"]], "get_core_ids() (in module neural_compressor.experimental.benchmark)": [[184, "neural_compressor.experimental.benchmark.get_core_ids"]], "get_physical_ids() (in module neural_compressor.experimental.benchmark)": [[184, "neural_compressor.experimental.benchmark.get_physical_ids"]], "get_threads() (in module neural_compressor.experimental.benchmark)": [[184, "neural_compressor.experimental.benchmark.get_threads"]], "get_threads_per_core() (in module neural_compressor.experimental.benchmark)": [[184, "neural_compressor.experimental.benchmark.get_threads_per_core"]], "metric (neural_compressor.experimental.benchmark.benchmark property)": [[184, "neural_compressor.experimental.benchmark.Benchmark.metric"]], "model (neural_compressor.experimental.benchmark.benchmark property)": [[184, "neural_compressor.experimental.benchmark.Benchmark.model"]], "neural_compressor.experimental.benchmark": [[184, "module-neural_compressor.experimental.benchmark"]], "postprocess (neural_compressor.experimental.benchmark.benchmark property)": [[184, "neural_compressor.experimental.benchmark.Benchmark.postprocess"]], "results (neural_compressor.experimental.benchmark.benchmark property)": [[184, "neural_compressor.experimental.benchmark.Benchmark.results"]], "run_instance() (neural_compressor.experimental.benchmark.benchmark method)": [[184, "neural_compressor.experimental.benchmark.Benchmark.run_instance"]], "set_all_env_var() (in module neural_compressor.experimental.benchmark)": [[184, "neural_compressor.experimental.benchmark.set_all_env_var"]], "set_env_var() (in module neural_compressor.experimental.benchmark)": [[184, "neural_compressor.experimental.benchmark.set_env_var"]], "summary_benchmark() (neural_compressor.experimental.benchmark.benchmark method)": [[184, "neural_compressor.experimental.benchmark.Benchmark.summary_benchmark"]], "criterions (class in neural_compressor.experimental.common.criterion)": [[185, "neural_compressor.experimental.common.criterion.Criterions"]], "intermediatelayersknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[185, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss"]], "knowledgedistillationframework (class in neural_compressor.experimental.common.criterion)": [[185, "neural_compressor.experimental.common.criterion.KnowledgeDistillationFramework"]], "knowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[185, "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss"]], "kullbackleiblerdivergence() (neural_compressor.experimental.common.criterion.pytorchknowledgedistillationloss method)": [[185, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss.KullbackLeiblerDivergence"]], "kullbackleiblerdivergence() (neural_compressor.experimental.common.criterion.pytorchselfknowledgedistillationloss method)": [[185, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss.KullbackLeiblerDivergence"]], "l2divergence() (neural_compressor.experimental.common.criterion.pytorchselfknowledgedistillationloss method)": [[185, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss.L2Divergence"]], "pytorchcriterions (class in neural_compressor.experimental.common.criterion)": [[185, "neural_compressor.experimental.common.criterion.PyTorchCriterions"]], "pytorchcrossentropyloss (class in neural_compressor.experimental.common.criterion)": [[185, "neural_compressor.experimental.common.criterion.PyTorchCrossEntropyLoss"]], "pytorchintermediatelayersknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[185, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss"]], "pytorchintermediatelayersknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[185, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"]], "pytorchknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[185, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss"]], "pytorchknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[185, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLossWrapper"]], "pytorchselfknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[185, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss"]], "pytorchselfknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[185, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLossWrapper"]], "selfknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[185, "neural_compressor.experimental.common.criterion.SelfKnowledgeDistillationLoss"]], "softcrossentropy() (neural_compressor.experimental.common.criterion.pytorchknowledgedistillationloss method)": [[185, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss.SoftCrossEntropy"]], "softcrossentropy() (neural_compressor.experimental.common.criterion.pytorchselfknowledgedistillationloss method)": [[185, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss.SoftCrossEntropy"]], "softcrossentropy() (neural_compressor.experimental.common.criterion.tensorflowknowledgedistillationloss method)": [[185, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLoss.SoftCrossEntropy"]], "tensorflowcrossentropyloss (class in neural_compressor.experimental.common.criterion)": [[185, "neural_compressor.experimental.common.criterion.TensorFlowCrossEntropyLoss"]], "tensorflowsparsecategoricalcrossentropy (class in neural_compressor.experimental.common.criterion)": [[185, "neural_compressor.experimental.common.criterion.TensorFlowSparseCategoricalCrossentropy"]], "tensorflowcriterions (class in neural_compressor.experimental.common.criterion)": [[185, "neural_compressor.experimental.common.criterion.TensorflowCriterions"]], "tensorflowknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[185, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLoss"]], "tensorflowknowledgedistillationlossexternal (class in neural_compressor.experimental.common.criterion)": [[185, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossExternal"]], "tensorflowknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[185, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossWrapper"]], "clear_features() (neural_compressor.experimental.common.criterion.intermediatelayersknowledgedistillationloss method)": [[185, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss.clear_features"]], "criterion_registry() (in module neural_compressor.experimental.common.criterion)": [[185, "neural_compressor.experimental.common.criterion.criterion_registry"]], "init_feature_matcher() (neural_compressor.experimental.common.criterion.intermediatelayersknowledgedistillationloss method)": [[185, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss.init_feature_matcher"]], "init_feature_matcher() (neural_compressor.experimental.common.criterion.pytorchintermediatelayersknowledgedistillationloss method)": [[185, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss.init_feature_matcher"]], "init_loss_funcs() (neural_compressor.experimental.common.criterion.intermediatelayersknowledgedistillationloss method)": [[185, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss.init_loss_funcs"]], "init_loss_funcs() (neural_compressor.experimental.common.criterion.pytorchintermediatelayersknowledgedistillationloss method)": [[185, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss.init_loss_funcs"]], "init_loss_funcs() (neural_compressor.experimental.common.criterion.pytorchselfknowledgedistillationloss method)": [[185, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss.init_loss_funcs"]], "init_loss_funcs() (neural_compressor.experimental.common.criterion.selfknowledgedistillationloss method)": [[185, "neural_compressor.experimental.common.criterion.SelfKnowledgeDistillationLoss.init_loss_funcs"]], "loss_cal() (neural_compressor.experimental.common.criterion.intermediatelayersknowledgedistillationloss method)": [[185, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss.loss_cal"]], "loss_cal() (neural_compressor.experimental.common.criterion.knowledgedistillationloss method)": [[185, "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss.loss_cal"]], "loss_cal() (neural_compressor.experimental.common.criterion.pytorchintermediatelayersknowledgedistillationloss method)": [[185, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss.loss_cal"]], "loss_cal() (neural_compressor.experimental.common.criterion.pytorchselfknowledgedistillationloss method)": [[185, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss.loss_cal"]], "loss_cal() (neural_compressor.experimental.common.criterion.selfknowledgedistillationloss method)": [[185, "neural_compressor.experimental.common.criterion.SelfKnowledgeDistillationLoss.loss_cal"]], "loss_cal_sloss() (neural_compressor.experimental.common.criterion.intermediatelayersknowledgedistillationloss method)": [[185, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss.loss_cal_sloss"]], "loss_cal_sloss() (neural_compressor.experimental.common.criterion.knowledgedistillationloss method)": [[185, "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss.loss_cal_sloss"]], "loss_cal_sloss() (neural_compressor.experimental.common.criterion.pytorchintermediatelayersknowledgedistillationloss method)": [[185, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss.loss_cal_sloss"]], "loss_cal_sloss() (neural_compressor.experimental.common.criterion.selfknowledgedistillationloss method)": [[185, "neural_compressor.experimental.common.criterion.SelfKnowledgeDistillationLoss.loss_cal_sloss"]], "neural_compressor.experimental.common.criterion": [[185, "module-neural_compressor.experimental.common.criterion"]], "register() (neural_compressor.experimental.common.criterion.criterions method)": [[185, "neural_compressor.experimental.common.criterion.Criterions.register"]], "register_hooks_for_models() (neural_compressor.experimental.common.criterion.pytorchintermediatelayersknowledgedistillationloss method)": [[185, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss.register_hooks_for_models"]], "remove_all_hooks() (neural_compressor.experimental.common.criterion.pytorchintermediatelayersknowledgedistillationloss method)": [[185, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss.remove_all_hooks"]], "student_model (neural_compressor.experimental.common.criterion.knowledgedistillationframework property)": [[185, "neural_compressor.experimental.common.criterion.KnowledgeDistillationFramework.student_model"]], "student_targets_loss_cal() (neural_compressor.experimental.common.criterion.knowledgedistillationloss method)": [[185, "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss.student_targets_loss_cal"]], "student_targets_loss_cal() (neural_compressor.experimental.common.criterion.pytorchknowledgedistillationloss method)": [[185, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss.student_targets_loss_cal"]], "student_targets_loss_cal() (neural_compressor.experimental.common.criterion.tensorflowknowledgedistillationloss method)": [[185, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLoss.student_targets_loss_cal"]], "student_targets_loss_cal() (neural_compressor.experimental.common.criterion.tensorflowknowledgedistillationlossexternal method)": [[185, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossExternal.student_targets_loss_cal"]], "teacher_model (neural_compressor.experimental.common.criterion.knowledgedistillationframework property)": [[185, "neural_compressor.experimental.common.criterion.KnowledgeDistillationFramework.teacher_model"]], "teacher_model_forward() (neural_compressor.experimental.common.criterion.intermediatelayersknowledgedistillationloss method)": [[185, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss.teacher_model_forward"]], "teacher_model_forward() (neural_compressor.experimental.common.criterion.knowledgedistillationloss method)": [[185, "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss.teacher_model_forward"]], "teacher_model_forward() (neural_compressor.experimental.common.criterion.pytorchintermediatelayersknowledgedistillationloss method)": [[185, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss.teacher_model_forward"]], "teacher_model_forward() (neural_compressor.experimental.common.criterion.pytorchknowledgedistillationloss method)": [[185, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss.teacher_model_forward"]], "teacher_model_forward() (neural_compressor.experimental.common.criterion.pytorchselfknowledgedistillationloss method)": [[185, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss.teacher_model_forward"]], "teacher_model_forward() (neural_compressor.experimental.common.criterion.selfknowledgedistillationloss method)": [[185, "neural_compressor.experimental.common.criterion.SelfKnowledgeDistillationLoss.teacher_model_forward"]], "teacher_model_forward() (neural_compressor.experimental.common.criterion.tensorflowknowledgedistillationloss method)": [[185, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLoss.teacher_model_forward"]], "teacher_model_forward() (neural_compressor.experimental.common.criterion.tensorflowknowledgedistillationlossexternal method)": [[185, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossExternal.teacher_model_forward"]], "teacher_student_loss_cal() (neural_compressor.experimental.common.criterion.knowledgedistillationloss method)": [[185, "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss.teacher_student_loss_cal"]], "teacher_student_loss_cal() (neural_compressor.experimental.common.criterion.pytorchknowledgedistillationloss method)": [[185, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss.teacher_student_loss_cal"]], "teacher_student_loss_cal() (neural_compressor.experimental.common.criterion.tensorflowknowledgedistillationloss method)": [[185, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLoss.teacher_student_loss_cal"]], "teacher_student_loss_cal() (neural_compressor.experimental.common.criterion.tensorflowknowledgedistillationlossexternal method)": [[185, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossExternal.teacher_student_loss_cal"]], "dataloader (class in neural_compressor.experimental.common.dataloader)": [[186, "neural_compressor.experimental.common.dataloader.DataLoader"]], "neural_compressor.experimental.common.dataloader": [[186, "module-neural_compressor.experimental.common.dataloader"]], "dataloader (class in neural_compressor.experimental.common)": [[187, "neural_compressor.experimental.common.DataLoader"]], "metric (class in neural_compressor.experimental.common)": [[187, "neural_compressor.experimental.common.Metric"]], "model (class in neural_compressor.experimental.common)": [[187, "neural_compressor.experimental.common.Model"]], "postprocess (class in neural_compressor.experimental.common)": [[187, "neural_compressor.experimental.common.Postprocess"]], "neural_compressor.experimental.common": [[187, "module-neural_compressor.experimental.common"]], "metric (class in neural_compressor.experimental.common.metric)": [[188, "neural_compressor.experimental.common.metric.Metric"]], "neural_compressor.experimental.common.metric": [[188, "module-neural_compressor.experimental.common.metric"]], "model (class in neural_compressor.experimental.common.model)": [[189, "neural_compressor.experimental.common.model.Model"]], "neural_compressor.experimental.common.model": [[189, "module-neural_compressor.experimental.common.model"]], "optimizers (class in neural_compressor.experimental.common.optimizer)": [[190, "neural_compressor.experimental.common.optimizer.Optimizers"]], "pytorchoptimizers (class in neural_compressor.experimental.common.optimizer)": [[190, "neural_compressor.experimental.common.optimizer.PyTorchOptimizers"]], "pytorchsgd (class in neural_compressor.experimental.common.optimizer)": [[190, "neural_compressor.experimental.common.optimizer.PyTorchSGD"]], "tensorflowadam (class in neural_compressor.experimental.common.optimizer)": [[190, "neural_compressor.experimental.common.optimizer.TensorFlowAdam"]], "tensorflowadamw (class in neural_compressor.experimental.common.optimizer)": [[190, "neural_compressor.experimental.common.optimizer.TensorFlowAdamW"]], "tensorflowsgd (class in neural_compressor.experimental.common.optimizer)": [[190, "neural_compressor.experimental.common.optimizer.TensorFlowSGD"]], "tensorflowoptimizers (class in neural_compressor.experimental.common.optimizer)": [[190, "neural_compressor.experimental.common.optimizer.TensorflowOptimizers"]], "neural_compressor.experimental.common.optimizer": [[190, "module-neural_compressor.experimental.common.optimizer"]], "optimizer_registry() (in module neural_compressor.experimental.common.optimizer)": [[190, "neural_compressor.experimental.common.optimizer.optimizer_registry"]], "register() (neural_compressor.experimental.common.optimizer.optimizers method)": [[190, "neural_compressor.experimental.common.optimizer.Optimizers.register"]], "postprocess (class in neural_compressor.experimental.common.postprocess)": [[191, "neural_compressor.experimental.common.postprocess.Postprocess"]], "neural_compressor.experimental.common.postprocess": [[191, "module-neural_compressor.experimental.common.postprocess"]], "get_activation() (in module neural_compressor.experimental.common.torch_utils)": [[192, "neural_compressor.experimental.common.torch_utils.get_activation"]], "neural_compressor.experimental.common.torch_utils": [[192, "module-neural_compressor.experimental.common.torch_utils"]], "record_output() (in module neural_compressor.experimental.common.torch_utils)": [[192, "neural_compressor.experimental.common.torch_utils.record_output"]], "component (class in neural_compressor.experimental.component)": [[193, "neural_compressor.experimental.component.Component"]], "eval_dataloader (neural_compressor.experimental.component.component property)": [[193, "neural_compressor.experimental.component.Component.eval_dataloader"]], "eval_func (neural_compressor.experimental.component.component property)": [[193, "neural_compressor.experimental.component.Component.eval_func"]], "execute() (neural_compressor.experimental.component.component method)": [[193, "neural_compressor.experimental.component.Component.execute"]], "model (neural_compressor.experimental.component.component property)": [[193, "neural_compressor.experimental.component.Component.model"]], "neural_compressor.experimental.component": [[193, "module-neural_compressor.experimental.component"]], "on_after_compute_loss() (neural_compressor.experimental.component.component method)": [[193, "neural_compressor.experimental.component.Component.on_after_compute_loss"]], "on_after_eval() (neural_compressor.experimental.component.component method)": [[193, "neural_compressor.experimental.component.Component.on_after_eval"]], "on_after_optimizer_step() (neural_compressor.experimental.component.component method)": [[193, "neural_compressor.experimental.component.Component.on_after_optimizer_step"]], "on_batch_begin() (neural_compressor.experimental.component.component method)": [[193, "neural_compressor.experimental.component.Component.on_batch_begin"]], "on_batch_end() (neural_compressor.experimental.component.component method)": [[193, "neural_compressor.experimental.component.Component.on_batch_end"]], "on_before_eval() (neural_compressor.experimental.component.component method)": [[193, "neural_compressor.experimental.component.Component.on_before_eval"]], "on_before_optimizer_step() (neural_compressor.experimental.component.component method)": [[193, "neural_compressor.experimental.component.Component.on_before_optimizer_step"]], "on_epoch_begin() (neural_compressor.experimental.component.component method)": [[193, "neural_compressor.experimental.component.Component.on_epoch_begin"]], "on_epoch_end() (neural_compressor.experimental.component.component method)": [[193, "neural_compressor.experimental.component.Component.on_epoch_end"]], "on_post_grad() (neural_compressor.experimental.component.component method)": [[193, "neural_compressor.experimental.component.Component.on_post_grad"]], "on_step_begin() (neural_compressor.experimental.component.component method)": [[193, "neural_compressor.experimental.component.Component.on_step_begin"]], "on_step_end() (neural_compressor.experimental.component.component method)": [[193, "neural_compressor.experimental.component.Component.on_step_end"]], "on_train_begin() (neural_compressor.experimental.component.component method)": [[193, "neural_compressor.experimental.component.Component.on_train_begin"]], "on_train_end() (neural_compressor.experimental.component.component method)": [[193, "neural_compressor.experimental.component.Component.on_train_end"]], "post_epoch_end() (neural_compressor.experimental.component.component method)": [[193, "neural_compressor.experimental.component.Component.post_epoch_end"]], "post_process() (neural_compressor.experimental.component.component method)": [[193, "neural_compressor.experimental.component.Component.post_process"]], "pre_epoch_begin() (neural_compressor.experimental.component.component method)": [[193, "neural_compressor.experimental.component.Component.pre_epoch_begin"]], "pre_process() (neural_compressor.experimental.component.component method)": [[193, "neural_compressor.experimental.component.Component.pre_process"]], "prepare() (neural_compressor.experimental.component.component method)": [[193, "neural_compressor.experimental.component.Component.prepare"]], "prepare_qat() (neural_compressor.experimental.component.component method)": [[193, "neural_compressor.experimental.component.Component.prepare_qat"]], "register_hook() (neural_compressor.experimental.component.component method)": [[193, "neural_compressor.experimental.component.Component.register_hook"]], "train_dataloader (neural_compressor.experimental.component.component property)": [[193, "neural_compressor.experimental.component.Component.train_dataloader"]], "train_func (neural_compressor.experimental.component.component property)": [[193, "neural_compressor.experimental.component.Component.train_func"]], "basedataloader (class in neural_compressor.experimental.data.dataloaders.base_dataloader)": [[194, "neural_compressor.experimental.data.dataloaders.base_dataloader.BaseDataLoader"]], "batch() (neural_compressor.experimental.data.dataloaders.base_dataloader.basedataloader method)": [[194, "neural_compressor.experimental.data.dataloaders.base_dataloader.BaseDataLoader.batch"]], "batch_size (neural_compressor.experimental.data.dataloaders.base_dataloader.basedataloader property)": [[194, "neural_compressor.experimental.data.dataloaders.base_dataloader.BaseDataLoader.batch_size"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[194, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"]], "neural_compressor.experimental.data.dataloaders.dataloader": [[195, "module-neural_compressor.experimental.data.dataloaders.dataloader"]], "defaultdataloader (class in neural_compressor.experimental.data.dataloaders.default_dataloader)": [[196, "neural_compressor.experimental.data.dataloaders.default_dataloader.DefaultDataLoader"]], "batch() (neural_compressor.experimental.data.dataloaders.default_dataloader.defaultdataloader method)": [[196, "neural_compressor.experimental.data.dataloaders.default_dataloader.DefaultDataLoader.batch"]], "dataloader (neural_compressor.experimental.data.dataloaders.default_dataloader.defaultdataloader property)": [[196, "neural_compressor.experimental.data.dataloaders.default_dataloader.DefaultDataLoader.dataloader"]], "default_collate() (in module neural_compressor.experimental.data.dataloaders.default_dataloader)": [[196, "neural_compressor.experimental.data.dataloaders.default_dataloader.default_collate"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[196, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"]], "fetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[197, "neural_compressor.experimental.data.dataloaders.fetcher.Fetcher"]], "indexfetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[197, "neural_compressor.experimental.data.dataloaders.fetcher.IndexFetcher"]], "iterablefetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[197, "neural_compressor.experimental.data.dataloaders.fetcher.IterableFetcher"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[197, "module-neural_compressor.experimental.data.dataloaders.fetcher"]], "neural_compressor.experimental.data.dataloaders": [[198, "module-neural_compressor.experimental.data.dataloaders"]], "mxnetdataloader (class in neural_compressor.experimental.data.dataloaders.mxnet_dataloader)": [[199, "neural_compressor.experimental.data.dataloaders.mxnet_dataloader.MXNetDataLoader"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[199, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"]], "onnxrtbertdataloader (class in neural_compressor.experimental.data.dataloaders.onnxrt_dataloader)": [[200, "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader.ONNXRTBertDataLoader"]], "onnxrtdataloader (class in neural_compressor.experimental.data.dataloaders.onnxrt_dataloader)": [[200, "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader.ONNXRTDataLoader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[200, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"]], "pytorchdataloader (class in neural_compressor.experimental.data.dataloaders.pytorch_dataloader)": [[201, "neural_compressor.experimental.data.dataloaders.pytorch_dataloader.PyTorchDataLoader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[201, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"]], "batchsampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[202, "neural_compressor.experimental.data.dataloaders.sampler.BatchSampler"]], "iterablesampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[202, "neural_compressor.experimental.data.dataloaders.sampler.IterableSampler"]], "sampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[202, "neural_compressor.experimental.data.dataloaders.sampler.Sampler"]], "sequentialsampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[202, "neural_compressor.experimental.data.dataloaders.sampler.SequentialSampler"]], "neural_compressor.experimental.data.dataloaders.sampler": [[202, "module-neural_compressor.experimental.data.dataloaders.sampler"]], "tfdatadataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[203, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TFDataDataLoader"]], "tensorflowbertdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[203, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowBertDataLoader"]], "tensorflowdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[203, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowDataLoader"]], "tensorflowmodelzoobertdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[203, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowModelZooBertDataLoader"]], "batch() (neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.tfdatadataloader method)": [[203, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TFDataDataLoader.batch"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[203, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"]], "inputfeatures (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[204, "neural_compressor.experimental.data.datasets.bert_dataset.InputFeatures"]], "onnxrtbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[204, "neural_compressor.experimental.data.datasets.bert_dataset.ONNXRTBertDataset"]], "parsedecodebert (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[204, "neural_compressor.experimental.data.datasets.bert_dataset.ParseDecodeBert"]], "pytorchbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[204, "neural_compressor.experimental.data.datasets.bert_dataset.PytorchBertDataset"]], "tensorflowbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[204, "neural_compressor.experimental.data.datasets.bert_dataset.TensorflowBertDataset"]], "tensorflowmodelzoobertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[204, "neural_compressor.experimental.data.datasets.bert_dataset.TensorflowModelZooBertDataset"]], "convert_examples_to_features() (in module neural_compressor.experimental.data.datasets.bert_dataset)": [[204, "neural_compressor.experimental.data.datasets.bert_dataset.convert_examples_to_features"]], "load_and_cache_examples() (in module neural_compressor.experimental.data.datasets.bert_dataset)": [[204, "neural_compressor.experimental.data.datasets.bert_dataset.load_and_cache_examples"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[204, "module-neural_compressor.experimental.data.datasets.bert_dataset"]], "to_json_string() (neural_compressor.experimental.data.datasets.bert_dataset.inputfeatures method)": [[204, "neural_compressor.experimental.data.datasets.bert_dataset.InputFeatures.to_json_string"]], "coconpy (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[205, "neural_compressor.experimental.data.datasets.coco_dataset.COCONpy"]], "cocoraw (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[205, "neural_compressor.experimental.data.datasets.coco_dataset.COCORaw"]], "cocorecorddataset (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[205, "neural_compressor.experimental.data.datasets.coco_dataset.COCORecordDataset"]], "parsedecodecoco (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[205, "neural_compressor.experimental.data.datasets.coco_dataset.ParseDecodeCoco"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[205, "module-neural_compressor.experimental.data.datasets.coco_dataset"]], "cifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[206, "neural_compressor.experimental.data.datasets.dataset.CIFAR10"]], "cifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[206, "neural_compressor.experimental.data.datasets.dataset.CIFAR100"]], "dataset (class in neural_compressor.experimental.data.datasets.dataset)": [[206, "neural_compressor.experimental.data.datasets.dataset.Dataset"]], "datasets (class in neural_compressor.experimental.data.datasets.dataset)": [[206, "neural_compressor.experimental.data.datasets.dataset.Datasets"]], "fashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[206, "neural_compressor.experimental.data.datasets.dataset.FashionMNIST"]], "imagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[206, "neural_compressor.experimental.data.datasets.dataset.ImageFolder"]], "iterabledataset (class in neural_compressor.experimental.data.datasets.dataset)": [[206, "neural_compressor.experimental.data.datasets.dataset.IterableDataset"]], "mnist (class in neural_compressor.experimental.data.datasets.dataset)": [[206, "neural_compressor.experimental.data.datasets.dataset.MNIST"]], "mxnetcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[206, "neural_compressor.experimental.data.datasets.dataset.MXNetCIFAR10"]], "mxnetcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[206, "neural_compressor.experimental.data.datasets.dataset.MXNetCIFAR100"]], "mxnetdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[206, "neural_compressor.experimental.data.datasets.dataset.MXNetDatasets"]], "mxnetfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[206, "neural_compressor.experimental.data.datasets.dataset.MXNetFashionMNIST"]], "mxnetimagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[206, "neural_compressor.experimental.data.datasets.dataset.MXNetImageFolder"]], "mxnetmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[206, "neural_compressor.experimental.data.datasets.dataset.MXNetMNIST"]], "onnxrtitdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[206, "neural_compressor.experimental.data.datasets.dataset.ONNXRTITDatasets"]], "onnxrtqldatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[206, "neural_compressor.experimental.data.datasets.dataset.ONNXRTQLDatasets"]], "pytorchdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[206, "neural_compressor.experimental.data.datasets.dataset.PyTorchDatasets"]], "pytorchcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[206, "neural_compressor.experimental.data.datasets.dataset.PytorchCIFAR10"]], "pytorchcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[206, "neural_compressor.experimental.data.datasets.dataset.PytorchCIFAR100"]], "pytorchfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[206, "neural_compressor.experimental.data.datasets.dataset.PytorchFashionMNIST"]], "pytorchmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[206, "neural_compressor.experimental.data.datasets.dataset.PytorchMNIST"]], "pytorchmxnetwrapdataset (class in neural_compressor.experimental.data.datasets.dataset)": [[206, "neural_compressor.experimental.data.datasets.dataset.PytorchMxnetWrapDataset"]], "pytorchmxnetwrapfunction (class in neural_compressor.experimental.data.datasets.dataset)": [[206, "neural_compressor.experimental.data.datasets.dataset.PytorchMxnetWrapFunction"]], "tensorflowcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[206, "neural_compressor.experimental.data.datasets.dataset.TensorflowCIFAR10"]], "tensorflowcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[206, "neural_compressor.experimental.data.datasets.dataset.TensorflowCIFAR100"]], "tensorflowdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[206, "neural_compressor.experimental.data.datasets.dataset.TensorflowDatasets"]], "tensorflowfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[206, "neural_compressor.experimental.data.datasets.dataset.TensorflowFashionMNIST"]], "tensorflowimagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[206, "neural_compressor.experimental.data.datasets.dataset.TensorflowImageFolder"]], "tensorflowimagerecord (class in neural_compressor.experimental.data.datasets.dataset)": [[206, "neural_compressor.experimental.data.datasets.dataset.TensorflowImageRecord"]], "tensorflowmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[206, "neural_compressor.experimental.data.datasets.dataset.TensorflowMNIST"]], "tensorflowtfrecorddataset (class in neural_compressor.experimental.data.datasets.dataset)": [[206, "neural_compressor.experimental.data.datasets.dataset.TensorflowTFRecordDataset"]], "tensorflowvocrecord (class in neural_compressor.experimental.data.datasets.dataset)": [[206, "neural_compressor.experimental.data.datasets.dataset.TensorflowVOCRecord"]], "calculate_md5() (in module neural_compressor.experimental.data.datasets.dataset)": [[206, "neural_compressor.experimental.data.datasets.dataset.calculate_md5"]], "check_integrity() (in module neural_compressor.experimental.data.datasets.dataset)": [[206, "neural_compressor.experimental.data.datasets.dataset.check_integrity"]], "class_to_idx (neural_compressor.experimental.data.datasets.dataset.mnist property)": [[206, "neural_compressor.experimental.data.datasets.dataset.MNIST.class_to_idx"]], "dataset_registry() (in module neural_compressor.experimental.data.datasets.dataset)": [[206, "neural_compressor.experimental.data.datasets.dataset.dataset_registry"]], "download() (neural_compressor.experimental.data.datasets.dataset.cifar10 method)": [[206, "neural_compressor.experimental.data.datasets.dataset.CIFAR10.download"]], "download() (neural_compressor.experimental.data.datasets.dataset.mnist method)": [[206, "neural_compressor.experimental.data.datasets.dataset.MNIST.download"]], "download_url() (in module neural_compressor.experimental.data.datasets.dataset)": [[206, "neural_compressor.experimental.data.datasets.dataset.download_url"]], "framework_datasets (in module neural_compressor.experimental.data.datasets.dataset)": [[206, "neural_compressor.experimental.data.datasets.dataset.framework_datasets"]], "gen_bar_updater() (in module neural_compressor.experimental.data.datasets.dataset)": [[206, "neural_compressor.experimental.data.datasets.dataset.gen_bar_updater"]], "load_meta() (neural_compressor.experimental.data.datasets.dataset.cifar10 method)": [[206, "neural_compressor.experimental.data.datasets.dataset.CIFAR10.load_meta"]], "neural_compressor.experimental.data.datasets.dataset": [[206, "module-neural_compressor.experimental.data.datasets.dataset"]], "read_data() (neural_compressor.experimental.data.datasets.dataset.fashionmnist method)": [[206, "neural_compressor.experimental.data.datasets.dataset.FashionMNIST.read_data"]], "read_data() (neural_compressor.experimental.data.datasets.dataset.mnist method)": [[206, "neural_compressor.experimental.data.datasets.dataset.MNIST.read_data"]], "dummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset)": [[207, "neural_compressor.experimental.data.datasets.dummy_dataset.DummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[207, "module-neural_compressor.experimental.data.datasets.dummy_dataset"]], "dummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset_v2)": [[208, "neural_compressor.experimental.data.datasets.dummy_dataset_v2.DummyDataset"]], "sparsedummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset_v2)": [[208, "neural_compressor.experimental.data.datasets.dummy_dataset_v2.SparseDummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[208, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"]], "imagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[209, "neural_compressor.experimental.data.datasets.imagenet_dataset.ImagenetRaw"]], "mxnetimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[209, "neural_compressor.experimental.data.datasets.imagenet_dataset.MXNetImagenetRaw"]], "onnxrtimagenetdataset (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[209, "neural_compressor.experimental.data.datasets.imagenet_dataset.ONNXRTImagenetDataset"]], "pytorchimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[209, "neural_compressor.experimental.data.datasets.imagenet_dataset.PytorchImagenetRaw"]], "tensorflowimagenetdataset (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[209, "neural_compressor.experimental.data.datasets.imagenet_dataset.TensorflowImagenetDataset"]], "tensorflowimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[209, "neural_compressor.experimental.data.datasets.imagenet_dataset.TensorflowImagenetRaw"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[209, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"]], "dataset (class in neural_compressor.experimental.data.datasets)": [[210, "neural_compressor.experimental.data.datasets.Dataset"]], "datasets (class in neural_compressor.experimental.data.datasets)": [[210, "neural_compressor.experimental.data.datasets.Datasets"]], "iterabledataset (class in neural_compressor.experimental.data.datasets)": [[210, "neural_compressor.experimental.data.datasets.IterableDataset"]], "dataset_registry() (in module neural_compressor.experimental.data.datasets)": [[210, "neural_compressor.experimental.data.datasets.dataset_registry"]], "neural_compressor.experimental.data.datasets": [[210, "module-neural_compressor.experimental.data.datasets"]], "styletransferdataset (class in neural_compressor.experimental.data.datasets.style_transfer_dataset)": [[211, "neural_compressor.experimental.data.datasets.style_transfer_dataset.StyleTransferDataset"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[211, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"]], "labelbalancecocorawfilter (class in neural_compressor.experimental.data.filters.coco_filter)": [[212, "neural_compressor.experimental.data.filters.coco_filter.LabelBalanceCOCORawFilter"]], "labelbalancecocorecordfilter (class in neural_compressor.experimental.data.filters.coco_filter)": [[212, "neural_compressor.experimental.data.filters.coco_filter.LabelBalanceCOCORecordFilter"]], "neural_compressor.experimental.data.filters.coco_filter": [[212, "module-neural_compressor.experimental.data.filters.coco_filter"]], "filters (class in neural_compressor.experimental.data.filters.filter)": [[213, "neural_compressor.experimental.data.filters.filter.FILTERS"]], "filter (class in neural_compressor.experimental.data.filters.filter)": [[213, "neural_compressor.experimental.data.filters.filter.Filter"]], "mxnetfilters (class in neural_compressor.experimental.data.filters.filter)": [[213, "neural_compressor.experimental.data.filters.filter.MXNetFilters"]], "onnxrtitfilters (class in neural_compressor.experimental.data.filters.filter)": [[213, "neural_compressor.experimental.data.filters.filter.ONNXRTITFilters"]], "onnxrtqlfilters (class in neural_compressor.experimental.data.filters.filter)": [[213, "neural_compressor.experimental.data.filters.filter.ONNXRTQLFilters"]], "pytorchfilters (class in neural_compressor.experimental.data.filters.filter)": [[213, "neural_compressor.experimental.data.filters.filter.PyTorchFilters"]], "tensorflowfilters (class in neural_compressor.experimental.data.filters.filter)": [[213, "neural_compressor.experimental.data.filters.filter.TensorflowFilters"]], "filter_registry() (in module neural_compressor.experimental.data.filters.filter)": [[213, "neural_compressor.experimental.data.filters.filter.filter_registry"]], "neural_compressor.experimental.data.filters.filter": [[213, "module-neural_compressor.experimental.data.filters.filter"]], "filters (class in neural_compressor.experimental.data.filters)": [[214, "neural_compressor.experimental.data.filters.FILTERS"]], "filter (class in neural_compressor.experimental.data.filters)": [[214, "neural_compressor.experimental.data.filters.Filter"]], "filter_registry() (in module neural_compressor.experimental.data.filters)": [[214, "neural_compressor.experimental.data.filters.filter_registry"]], "neural_compressor.experimental.data.filters": [[214, "module-neural_compressor.experimental.data.filters"]], "basetransform (class in neural_compressor.experimental.data)": [[215, "neural_compressor.experimental.data.BaseTransform"]], "dataset (class in neural_compressor.experimental.data)": [[215, "neural_compressor.experimental.data.Dataset"]], "datasets (class in neural_compressor.experimental.data)": [[215, "neural_compressor.experimental.data.Datasets"]], "filters (class in neural_compressor.experimental.data)": [[215, "neural_compressor.experimental.data.FILTERS"]], "filter (class in neural_compressor.experimental.data)": [[215, "neural_compressor.experimental.data.Filter"]], "iterabledataset (class in neural_compressor.experimental.data)": [[215, "neural_compressor.experimental.data.IterableDataset"]], "transforms (class in neural_compressor.experimental.data)": [[215, "neural_compressor.experimental.data.TRANSFORMS"]], "dataset_registry() (in module neural_compressor.experimental.data)": [[215, "neural_compressor.experimental.data.dataset_registry"]], "filter_registry() (in module neural_compressor.experimental.data)": [[215, "neural_compressor.experimental.data.filter_registry"]], "neural_compressor.experimental.data": [[215, "module-neural_compressor.experimental.data"]], "register() (neural_compressor.experimental.data.transforms method)": [[215, "neural_compressor.experimental.data.TRANSFORMS.register"]], "transform_registry() (in module neural_compressor.experimental.data)": [[215, "neural_compressor.experimental.data.transform_registry"]], "bilinearimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[216, "neural_compressor.experimental.data.transforms.imagenet_transform.BilinearImagenetTransform"]], "labelshift (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[216, "neural_compressor.experimental.data.transforms.imagenet_transform.LabelShift"]], "onnxresizecropimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[216, "neural_compressor.experimental.data.transforms.imagenet_transform.ONNXResizeCropImagenetTransform"]], "onnxbilinearimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[216, "neural_compressor.experimental.data.transforms.imagenet_transform.OnnxBilinearImagenetTransform"]], "parsedecodeimagenet (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[216, "neural_compressor.experimental.data.transforms.imagenet_transform.ParseDecodeImagenet"]], "parsedecodeimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[216, "neural_compressor.experimental.data.transforms.imagenet_transform.ParseDecodeImagenetTransform"]], "quantizedinput (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[216, "neural_compressor.experimental.data.transforms.imagenet_transform.QuantizedInput"]], "resizewithaspectratio (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[216, "neural_compressor.experimental.data.transforms.imagenet_transform.ResizeWithAspectRatio"]], "tensorflowresizecropimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[216, "neural_compressor.experimental.data.transforms.imagenet_transform.TensorflowResizeCropImagenetTransform"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[216, "module-neural_compressor.experimental.data.transforms.imagenet_transform"]], "basetransform (class in neural_compressor.experimental.data.transforms)": [[217, "neural_compressor.experimental.data.transforms.BaseTransform"]], "transforms (class in neural_compressor.experimental.data.transforms)": [[217, "neural_compressor.experimental.data.transforms.TRANSFORMS"]], "neural_compressor.experimental.data.transforms": [[217, "module-neural_compressor.experimental.data.transforms"]], "register() (neural_compressor.experimental.data.transforms.transforms method)": [[217, "neural_compressor.experimental.data.transforms.TRANSFORMS.register"]], "transform_registry() (in module neural_compressor.experimental.data.transforms)": [[217, "neural_compressor.experimental.data.transforms.transform_registry"]], "basictokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[218, "neural_compressor.experimental.data.transforms.tokenization.BasicTokenizer"]], "fulltokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[218, "neural_compressor.experimental.data.transforms.tokenization.FullTokenizer"]], "wordpiecetokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[218, "neural_compressor.experimental.data.transforms.tokenization.WordpieceTokenizer"]], "convert_by_vocab() (in module neural_compressor.experimental.data.transforms.tokenization)": [[218, "neural_compressor.experimental.data.transforms.tokenization.convert_by_vocab"]], "convert_ids_to_tokens() (neural_compressor.experimental.data.transforms.tokenization.fulltokenizer method)": [[218, "neural_compressor.experimental.data.transforms.tokenization.FullTokenizer.convert_ids_to_tokens"]], "convert_to_unicode() (in module neural_compressor.experimental.data.transforms.tokenization)": [[218, "neural_compressor.experimental.data.transforms.tokenization.convert_to_unicode"]], "convert_tokens_to_ids() (neural_compressor.experimental.data.transforms.tokenization.fulltokenizer method)": [[218, "neural_compressor.experimental.data.transforms.tokenization.FullTokenizer.convert_tokens_to_ids"]], "load_vocab() (in module neural_compressor.experimental.data.transforms.tokenization)": [[218, "neural_compressor.experimental.data.transforms.tokenization.load_vocab"]], "neural_compressor.experimental.data.transforms.tokenization": [[218, "module-neural_compressor.experimental.data.transforms.tokenization"]], "tokenize() (neural_compressor.experimental.data.transforms.tokenization.basictokenizer method)": [[218, "neural_compressor.experimental.data.transforms.tokenization.BasicTokenizer.tokenize"]], "tokenize() (neural_compressor.experimental.data.transforms.tokenization.fulltokenizer method)": [[218, "neural_compressor.experimental.data.transforms.tokenization.FullTokenizer.tokenize"]], "tokenize() (neural_compressor.experimental.data.transforms.tokenization.wordpiecetokenizer method)": [[218, "neural_compressor.experimental.data.transforms.tokenization.WordpieceTokenizer.tokenize"]], "whitespace_tokenize() (in module neural_compressor.experimental.data.transforms.tokenization)": [[218, "neural_compressor.experimental.data.transforms.tokenization.whitespace_tokenize"]], "alignimagechanneltransform (class in neural_compressor.experimental.data.transforms.transform)": [[219, "neural_compressor.experimental.data.transforms.transform.AlignImageChannelTransform"]], "basetransform (class in neural_compressor.experimental.data.transforms.transform)": [[219, "neural_compressor.experimental.data.transforms.transform.BaseTransform"]], "castonnxtransform (class in neural_compressor.experimental.data.transforms.transform)": [[219, "neural_compressor.experimental.data.transforms.transform.CastONNXTransform"]], "castpytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[219, "neural_compressor.experimental.data.transforms.transform.CastPyTorchTransform"]], "casttftransform (class in neural_compressor.experimental.data.transforms.transform)": [[219, "neural_compressor.experimental.data.transforms.transform.CastTFTransform"]], "centercroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[219, "neural_compressor.experimental.data.transforms.transform.CenterCropTFTransform"]], "centercroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[219, "neural_compressor.experimental.data.transforms.transform.CenterCropTransform"]], "collecttransform (class in neural_compressor.experimental.data.transforms.transform)": [[219, "neural_compressor.experimental.data.transforms.transform.CollectTransform"]], "composetransform (class in neural_compressor.experimental.data.transforms.transform)": [[219, "neural_compressor.experimental.data.transforms.transform.ComposeTransform"]], "cropresizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[219, "neural_compressor.experimental.data.transforms.transform.CropResizeTFTransform"]], "cropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[219, "neural_compressor.experimental.data.transforms.transform.CropResizeTransform"]], "croptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[219, "neural_compressor.experimental.data.transforms.transform.CropToBoundingBox"]], "inputfeatures (class in neural_compressor.experimental.data.transforms.transform)": [[219, "neural_compressor.experimental.data.transforms.transform.InputFeatures"]], "mxnetcropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[219, "neural_compressor.experimental.data.transforms.transform.MXNetCropResizeTransform"]], "mxnetcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[219, "neural_compressor.experimental.data.transforms.transform.MXNetCropToBoundingBox"]], "mxnetnormalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[219, "neural_compressor.experimental.data.transforms.transform.MXNetNormalizeTransform"]], "mxnettransforms (class in neural_compressor.experimental.data.transforms.transform)": [[219, "neural_compressor.experimental.data.transforms.transform.MXNetTransforms"]], "mxnettranspose (class in neural_compressor.experimental.data.transforms.transform)": [[219, "neural_compressor.experimental.data.transforms.transform.MXNetTranspose"]], "normalizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[219, "neural_compressor.experimental.data.transforms.transform.NormalizeTFTransform"]], "normalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[219, "neural_compressor.experimental.data.transforms.transform.NormalizeTransform"]], "onnxrtcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[219, "neural_compressor.experimental.data.transforms.transform.ONNXRTCropToBoundingBox"]], "onnxrtittransforms (class in neural_compressor.experimental.data.transforms.transform)": [[219, "neural_compressor.experimental.data.transforms.transform.ONNXRTITTransforms"]], "onnxrtqltransforms (class in neural_compressor.experimental.data.transforms.transform)": [[219, "neural_compressor.experimental.data.transforms.transform.ONNXRTQLTransforms"]], "paddedcentercroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[219, "neural_compressor.experimental.data.transforms.transform.PaddedCenterCropTransform"]], "parsedecodevoctransform (class in neural_compressor.experimental.data.transforms.transform)": [[219, "neural_compressor.experimental.data.transforms.transform.ParseDecodeVocTransform"]], "pytorchalignimagechannel (class in neural_compressor.experimental.data.transforms.transform)": [[219, "neural_compressor.experimental.data.transforms.transform.PyTorchAlignImageChannel"]], "pytorchcropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[219, "neural_compressor.experimental.data.transforms.transform.PyTorchCropResizeTransform"]], "pytorchnormalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[219, "neural_compressor.experimental.data.transforms.transform.PyTorchNormalizeTransform"]], "pytorchtransforms (class in neural_compressor.experimental.data.transforms.transform)": [[219, "neural_compressor.experimental.data.transforms.transform.PyTorchTransforms"]], "pytorchtranspose (class in neural_compressor.experimental.data.transforms.transform)": [[219, "neural_compressor.experimental.data.transforms.transform.PyTorchTranspose"]], "pytorchmxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[219, "neural_compressor.experimental.data.transforms.transform.PytorchMxnetTransform"]], "pytorchmxnetwrapfunction (class in neural_compressor.experimental.data.transforms.transform)": [[219, "neural_compressor.experimental.data.transforms.transform.PytorchMxnetWrapFunction"]], "randomcroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[219, "neural_compressor.experimental.data.transforms.transform.RandomCropTFTransform"]], "randomcroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[219, "neural_compressor.experimental.data.transforms.transform.RandomCropTransform"]], "randomhorizontalflip (class in neural_compressor.experimental.data.transforms.transform)": [[219, "neural_compressor.experimental.data.transforms.transform.RandomHorizontalFlip"]], "randomresizedcropmxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[219, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropMXNetTransform"]], "randomresizedcroppytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[219, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropPytorchTransform"]], "randomresizedcroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[219, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTFTransform"]], "randomresizedcroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[219, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTransform"]], "randomverticalflip (class in neural_compressor.experimental.data.transforms.transform)": [[219, "neural_compressor.experimental.data.transforms.transform.RandomVerticalFlip"]], "rescalekeraspretraintransform (class in neural_compressor.experimental.data.transforms.transform)": [[219, "neural_compressor.experimental.data.transforms.transform.RescaleKerasPretrainTransform"]], "rescaletftransform (class in neural_compressor.experimental.data.transforms.transform)": [[219, "neural_compressor.experimental.data.transforms.transform.RescaleTFTransform"]], "rescaletransform (class in neural_compressor.experimental.data.transforms.transform)": [[219, "neural_compressor.experimental.data.transforms.transform.RescaleTransform"]], "resizemxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[219, "neural_compressor.experimental.data.transforms.transform.ResizeMXNetTransform"]], "resizepytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[219, "neural_compressor.experimental.data.transforms.transform.ResizePytorchTransform"]], "resizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[219, "neural_compressor.experimental.data.transforms.transform.ResizeTFTransform"]], "resizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[219, "neural_compressor.experimental.data.transforms.transform.ResizeTransform"]], "resizewithratio (class in neural_compressor.experimental.data.transforms.transform)": [[219, "neural_compressor.experimental.data.transforms.transform.ResizeWithRatio"]], "squadexample (class in neural_compressor.experimental.data.transforms.transform)": [[219, "neural_compressor.experimental.data.transforms.transform.SquadExample"]], "tfmodelzoocollecttransform (class in neural_compressor.experimental.data.transforms.transform)": [[219, "neural_compressor.experimental.data.transforms.transform.TFModelZooCollectTransform"]], "tfsquadv1modelzooposttransform (class in neural_compressor.experimental.data.transforms.transform)": [[219, "neural_compressor.experimental.data.transforms.transform.TFSquadV1ModelZooPostTransform"]], "tfsquadv1posttransform (class in neural_compressor.experimental.data.transforms.transform)": [[219, "neural_compressor.experimental.data.transforms.transform.TFSquadV1PostTransform"]], "transforms (class in neural_compressor.experimental.data.transforms.transform)": [[219, "neural_compressor.experimental.data.transforms.transform.TRANSFORMS"], [219, "neural_compressor.experimental.data.transforms.transform.Transforms"]], "tensorflowcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[219, "neural_compressor.experimental.data.transforms.transform.TensorflowCropToBoundingBox"]], "tensorflowrandomhorizontalflip (class in neural_compressor.experimental.data.transforms.transform)": [[219, "neural_compressor.experimental.data.transforms.transform.TensorflowRandomHorizontalFlip"]], "tensorflowrandomverticalflip (class in neural_compressor.experimental.data.transforms.transform)": [[219, "neural_compressor.experimental.data.transforms.transform.TensorflowRandomVerticalFlip"]], "tensorflowresizewithratio (class in neural_compressor.experimental.data.transforms.transform)": [[219, "neural_compressor.experimental.data.transforms.transform.TensorflowResizeWithRatio"]], "tensorflowtransform (class in neural_compressor.experimental.data.transforms.transform)": [[219, "neural_compressor.experimental.data.transforms.transform.TensorflowTransform"]], "tensorflowtransforms (class in neural_compressor.experimental.data.transforms.transform)": [[219, "neural_compressor.experimental.data.transforms.transform.TensorflowTransforms"]], "tensorflowtranspose (class in neural_compressor.experimental.data.transforms.transform)": [[219, "neural_compressor.experimental.data.transforms.transform.TensorflowTranspose"]], "tensorflowwrapfunction (class in neural_compressor.experimental.data.transforms.transform)": [[219, "neural_compressor.experimental.data.transforms.transform.TensorflowWrapFunction"]], "toarray (class in neural_compressor.experimental.data.transforms.transform)": [[219, "neural_compressor.experimental.data.transforms.transform.ToArray"]], "tondarraytransform (class in neural_compressor.experimental.data.transforms.transform)": [[219, "neural_compressor.experimental.data.transforms.transform.ToNDArrayTransform"]], "transpose (class in neural_compressor.experimental.data.transforms.transform)": [[219, "neural_compressor.experimental.data.transforms.transform.Transpose"]], "convert_examples_to_features() (in module neural_compressor.experimental.data.transforms.transform)": [[219, "neural_compressor.experimental.data.transforms.transform.convert_examples_to_features"]], "get_final_text() (in module neural_compressor.experimental.data.transforms.transform)": [[219, "neural_compressor.experimental.data.transforms.transform.get_final_text"]], "get_params() (neural_compressor.experimental.data.transforms.transform.randomresizedcroptftransform method)": [[219, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTFTransform.get_params"]], "get_params() (neural_compressor.experimental.data.transforms.transform.randomresizedcroptransform method)": [[219, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTransform.get_params"]], "get_postprocess_result() (neural_compressor.experimental.data.transforms.transform.tfsquadv1posttransform method)": [[219, "neural_compressor.experimental.data.transforms.transform.TFSquadV1PostTransform.get_postprocess_result"]], "get_torchvision_map() (in module neural_compressor.experimental.data.transforms.transform)": [[219, "neural_compressor.experimental.data.transforms.transform.get_torchvision_map"]], "neural_compressor.experimental.data.transforms.transform": [[219, "module-neural_compressor.experimental.data.transforms.transform"]], "process_result() (neural_compressor.experimental.data.transforms.transform.tfsquadv1posttransform method)": [[219, "neural_compressor.experimental.data.transforms.transform.TFSquadV1PostTransform.process_result"]], "read_squad_examples() (in module neural_compressor.experimental.data.transforms.transform)": [[219, "neural_compressor.experimental.data.transforms.transform.read_squad_examples"]], "register() (neural_compressor.experimental.data.transforms.transform.transforms method)": [[219, "neural_compressor.experimental.data.transforms.transform.TRANSFORMS.register"]], "transform_registry() (in module neural_compressor.experimental.data.transforms.transform)": [[219, "neural_compressor.experimental.data.transforms.transform.transform_registry"]], "distillation (class in neural_compressor.experimental.distillation)": [[220, "neural_compressor.experimental.distillation.Distillation"]], "_epoch_ran (neural_compressor.experimental.distillation.distillation attribute)": [[220, "neural_compressor.experimental.distillation.Distillation._epoch_ran"]], "best_model (neural_compressor.experimental.distillation.distillation attribute)": [[220, "neural_compressor.experimental.distillation.Distillation.best_model"]], "best_score (neural_compressor.experimental.distillation.distillation attribute)": [[220, "neural_compressor.experimental.distillation.Distillation.best_score"]], "create_criterion() (neural_compressor.experimental.distillation.distillation method)": [[220, "neural_compressor.experimental.distillation.Distillation.create_criterion"]], "create_optimizer() (neural_compressor.experimental.distillation.distillation method)": [[220, "neural_compressor.experimental.distillation.Distillation.create_optimizer"]], "criterion (neural_compressor.experimental.distillation.distillation property)": [[220, "neural_compressor.experimental.distillation.Distillation.criterion"]], "eval_frequency (neural_compressor.experimental.distillation.distillation attribute)": [[220, "neural_compressor.experimental.distillation.Distillation.eval_frequency"]], "evaluation_distributed (neural_compressor.experimental.distillation.distillation property)": [[220, "neural_compressor.experimental.distillation.Distillation.evaluation_distributed"]], "execute() (neural_compressor.experimental.distillation.distillation method)": [[220, "neural_compressor.experimental.distillation.Distillation.execute"]], "generate_hooks() (neural_compressor.experimental.distillation.distillation method)": [[220, "neural_compressor.experimental.distillation.Distillation.generate_hooks"]], "init_train_cfg() (neural_compressor.experimental.distillation.distillation method)": [[220, "neural_compressor.experimental.distillation.Distillation.init_train_cfg"]], "neural_compressor.experimental.distillation": [[220, "module-neural_compressor.experimental.distillation"]], "on_post_forward() (neural_compressor.experimental.distillation.distillation method)": [[220, "neural_compressor.experimental.distillation.Distillation.on_post_forward"]], "optimizer (neural_compressor.experimental.distillation.distillation property)": [[220, "neural_compressor.experimental.distillation.Distillation.optimizer"]], "pre_process() (neural_compressor.experimental.distillation.distillation method)": [[220, "neural_compressor.experimental.distillation.Distillation.pre_process"]], "prepare() (neural_compressor.experimental.distillation.distillation method)": [[220, "neural_compressor.experimental.distillation.Distillation.prepare"]], "student_model (neural_compressor.experimental.distillation.distillation property)": [[220, "neural_compressor.experimental.distillation.Distillation.student_model"]], "teacher_model (neural_compressor.experimental.distillation.distillation property)": [[220, "neural_compressor.experimental.distillation.Distillation.teacher_model"]], "train_cfg (neural_compressor.experimental.distillation.distillation property)": [[220, "neural_compressor.experimental.distillation.Distillation.train_cfg"]], "train_distributed (neural_compressor.experimental.distillation.distillation property)": [[220, "neural_compressor.experimental.distillation.Distillation.train_distributed"]], "neural_compressor.experimental.export": [[221, "module-neural_compressor.experimental.export"]], "onnx_qlinear_to_qdq() (in module neural_compressor.experimental.export)": [[221, "neural_compressor.experimental.export.onnx_qlinear_to_qdq"]], "torch_to_fp32_onnx() (in module neural_compressor.experimental.export)": [[221, "neural_compressor.experimental.export.torch_to_fp32_onnx"]], "torch_to_int8_onnx() (in module neural_compressor.experimental.export)": [[221, "neural_compressor.experimental.export.torch_to_int8_onnx"]], "check_model() (in module neural_compressor.experimental.export.qlinear2qdq)": [[222, "neural_compressor.experimental.export.qlinear2qdq.check_model"]], "neural_compressor.experimental.export.qlinear2qdq": [[222, "module-neural_compressor.experimental.export.qlinear2qdq"]], "onnx_qlinear_to_qdq() (in module neural_compressor.experimental.export.qlinear2qdq)": [[222, "neural_compressor.experimental.export.qlinear2qdq.onnx_qlinear_to_qdq"]], "build_scale_mapping() (in module neural_compressor.experimental.export.torch2onnx)": [[223, "neural_compressor.experimental.export.torch2onnx.build_scale_mapping"]], "get_node_mapping() (in module neural_compressor.experimental.export.torch2onnx)": [[223, "neural_compressor.experimental.export.torch2onnx.get_node_mapping"]], "get_quantizable_onnx_ops() (in module neural_compressor.experimental.export.torch2onnx)": [[223, "neural_compressor.experimental.export.torch2onnx.get_quantizable_onnx_ops"]], "neural_compressor.experimental.export.torch2onnx": [[223, "module-neural_compressor.experimental.export.torch2onnx"]], "qdq_fp32_bias() (in module neural_compressor.experimental.export.torch2onnx)": [[223, "neural_compressor.experimental.export.torch2onnx.qdq_fp32_bias"]], "qdq_fp32_bias_qdq() (in module neural_compressor.experimental.export.torch2onnx)": [[223, "neural_compressor.experimental.export.torch2onnx.qdq_fp32_bias_qdq"]], "qdq_int32_bias() (in module neural_compressor.experimental.export.torch2onnx)": [[223, "neural_compressor.experimental.export.torch2onnx.qdq_int32_bias"]], "recalculate_bias() (in module neural_compressor.experimental.export.torch2onnx)": [[223, "neural_compressor.experimental.export.torch2onnx.recalculate_bias"]], "remove_nodes_by_name() (in module neural_compressor.experimental.export.torch2onnx)": [[223, "neural_compressor.experimental.export.torch2onnx.remove_nodes_by_name"]], "set_data_type() (in module neural_compressor.experimental.export.torch2onnx)": [[223, "neural_compressor.experimental.export.torch2onnx.set_data_type"]], "set_scale_info() (in module neural_compressor.experimental.export.torch2onnx)": [[223, "neural_compressor.experimental.export.torch2onnx.set_scale_info"]], "sub_graph_with_int32_bias() (in module neural_compressor.experimental.export.torch2onnx)": [[223, "neural_compressor.experimental.export.torch2onnx.sub_graph_with_int32_bias"]], "torch_to_fp32_onnx() (in module neural_compressor.experimental.export.torch2onnx)": [[223, "neural_compressor.experimental.export.torch2onnx.torch_to_fp32_onnx"]], "torch_to_int8_onnx() (in module neural_compressor.experimental.export.torch2onnx)": [[223, "neural_compressor.experimental.export.torch2onnx.torch_to_int8_onnx"]], "update_weight_bias() (in module neural_compressor.experimental.export.torch2onnx)": [[223, "neural_compressor.experimental.export.torch2onnx.update_weight_bias"]], "dummydatareader (class in neural_compressor.experimental.export.utils)": [[224, "neural_compressor.experimental.export.utils.DummyDataReader"]], "onnx2numpy_dtype() (in module neural_compressor.experimental.export.utils)": [[224, "neural_compressor.experimental.export.utils.ONNX2Numpy_dtype"]], "get_next() (neural_compressor.experimental.export.utils.dummydatareader method)": [[224, "neural_compressor.experimental.export.utils.DummyDataReader.get_next"]], "neural_compressor.experimental.export.utils": [[224, "module-neural_compressor.experimental.export.utils"]], "graph_optimization (class in neural_compressor.experimental.graph_optimization)": [[225, "neural_compressor.experimental.graph_optimization.Graph_Optimization"]], "dataset() (neural_compressor.experimental.graph_optimization.graph_optimization method)": [[225, "neural_compressor.experimental.graph_optimization.Graph_Optimization.dataset"]], "eval_dataloader (neural_compressor.experimental.graph_optimization.graph_optimization property)": [[225, "neural_compressor.experimental.graph_optimization.Graph_Optimization.eval_dataloader"]], "eval_func (neural_compressor.experimental.graph_optimization.graph_optimization property)": [[225, "neural_compressor.experimental.graph_optimization.Graph_Optimization.eval_func"]], "input (neural_compressor.experimental.graph_optimization.graph_optimization property)": [[225, "neural_compressor.experimental.graph_optimization.Graph_Optimization.input"]], "metric (neural_compressor.experimental.graph_optimization.graph_optimization property)": [[225, "neural_compressor.experimental.graph_optimization.Graph_Optimization.metric"]], "model (neural_compressor.experimental.graph_optimization.graph_optimization property)": [[225, "neural_compressor.experimental.graph_optimization.Graph_Optimization.model"]], "neural_compressor.experimental.graph_optimization": [[225, "module-neural_compressor.experimental.graph_optimization"]], "output (neural_compressor.experimental.graph_optimization.graph_optimization property)": [[225, "neural_compressor.experimental.graph_optimization.Graph_Optimization.output"]], "postprocess (neural_compressor.experimental.graph_optimization.graph_optimization property)": [[225, "neural_compressor.experimental.graph_optimization.Graph_Optimization.postprocess"]], "precisions (neural_compressor.experimental.graph_optimization.graph_optimization property)": [[225, "neural_compressor.experimental.graph_optimization.Graph_Optimization.precisions"]], "set_config_by_model() (neural_compressor.experimental.graph_optimization.graph_optimization method)": [[225, "neural_compressor.experimental.graph_optimization.Graph_Optimization.set_config_by_model"]], "benchmark (class in neural_compressor.experimental)": [[226, "neural_compressor.experimental.Benchmark"]], "component (class in neural_compressor.experimental)": [[226, "neural_compressor.experimental.Component"]], "distillation (class in neural_compressor.experimental)": [[226, "neural_compressor.experimental.Distillation"]], "graph_optimization (class in neural_compressor.experimental)": [[226, "neural_compressor.experimental.Graph_Optimization"]], "mixedprecision (class in neural_compressor.experimental)": [[226, "neural_compressor.experimental.MixedPrecision"]], "modelconversion (class in neural_compressor.experimental)": [[226, "neural_compressor.experimental.ModelConversion"]], "nas (class in neural_compressor.experimental)": [[226, "neural_compressor.experimental.NAS"]], "pruning (class in neural_compressor.experimental)": [[226, "neural_compressor.experimental.Pruning"]], "quantization (class in neural_compressor.experimental)": [[226, "neural_compressor.experimental.Quantization"]], "_epoch_ran (neural_compressor.experimental.distillation attribute)": [[226, "neural_compressor.experimental.Distillation._epoch_ran"]], "b_dataloader (neural_compressor.experimental.benchmark property)": [[226, "neural_compressor.experimental.Benchmark.b_dataloader"]], "b_func (neural_compressor.experimental.benchmark property)": [[226, "neural_compressor.experimental.Benchmark.b_func"]], "best_model (neural_compressor.experimental.distillation attribute)": [[226, "neural_compressor.experimental.Distillation.best_model"]], "best_score (neural_compressor.experimental.distillation attribute)": [[226, "neural_compressor.experimental.Distillation.best_score"]], "calib_dataloader (neural_compressor.experimental.quantization property)": [[226, "neural_compressor.experimental.Quantization.calib_dataloader"]], "conf (neural_compressor.experimental.pruning attribute)": [[226, "neural_compressor.experimental.Pruning.conf"]], "config_instance() (neural_compressor.experimental.benchmark method)": [[226, "neural_compressor.experimental.Benchmark.config_instance"]], "create_criterion() (neural_compressor.experimental.distillation method)": [[226, "neural_compressor.experimental.Distillation.create_criterion"]], "create_optimizer() (neural_compressor.experimental.distillation method)": [[226, "neural_compressor.experimental.Distillation.create_optimizer"]], "criterion (neural_compressor.experimental.distillation property)": [[226, "neural_compressor.experimental.Distillation.criterion"]], "dataset() (neural_compressor.experimental.graph_optimization method)": [[226, "neural_compressor.experimental.Graph_Optimization.dataset"]], "dataset() (neural_compressor.experimental.modelconversion method)": [[226, "neural_compressor.experimental.ModelConversion.dataset"]], "dataset() (neural_compressor.experimental.quantization method)": [[226, "neural_compressor.experimental.Quantization.dataset"]], "destination (neural_compressor.experimental.modelconversion property)": [[226, "neural_compressor.experimental.ModelConversion.destination"]], "eval_dataloader (neural_compressor.experimental.component property)": [[226, "neural_compressor.experimental.Component.eval_dataloader"]], "eval_dataloader (neural_compressor.experimental.graph_optimization property)": [[226, "neural_compressor.experimental.Graph_Optimization.eval_dataloader"]], "eval_dataloader (neural_compressor.experimental.modelconversion property)": [[226, "neural_compressor.experimental.ModelConversion.eval_dataloader"]], "eval_frequency (neural_compressor.experimental.distillation attribute)": [[226, "neural_compressor.experimental.Distillation.eval_frequency"]], "eval_func (neural_compressor.experimental.component property)": [[226, "neural_compressor.experimental.Component.eval_func"]], "eval_func (neural_compressor.experimental.graph_optimization property)": [[226, "neural_compressor.experimental.Graph_Optimization.eval_func"]], "eval_func (neural_compressor.experimental.modelconversion property)": [[226, "neural_compressor.experimental.ModelConversion.eval_func"]], "evaluation_distributed (neural_compressor.experimental.distillation property)": [[226, "neural_compressor.experimental.Distillation.evaluation_distributed"]], "evaluation_distributed (neural_compressor.experimental.pruning property)": [[226, "neural_compressor.experimental.Pruning.evaluation_distributed"]], "execute() (neural_compressor.experimental.component method)": [[226, "neural_compressor.experimental.Component.execute"]], "execute() (neural_compressor.experimental.distillation method)": [[226, "neural_compressor.experimental.Distillation.execute"]], "execute() (neural_compressor.experimental.pruning method)": [[226, "neural_compressor.experimental.Pruning.execute"]], "execute() (neural_compressor.experimental.quantization method)": [[226, "neural_compressor.experimental.Quantization.execute"]], "generate_hooks() (neural_compressor.experimental.distillation method)": [[226, "neural_compressor.experimental.Distillation.generate_hooks"]], "generate_hooks() (neural_compressor.experimental.pruning method)": [[226, "neural_compressor.experimental.Pruning.generate_hooks"]], "generate_prefix() (neural_compressor.experimental.benchmark method)": [[226, "neural_compressor.experimental.Benchmark.generate_prefix"]], "generate_pruners() (neural_compressor.experimental.pruning method)": [[226, "neural_compressor.experimental.Pruning.generate_pruners"]], "get_sparsity_ratio() (neural_compressor.experimental.pruning method)": [[226, "neural_compressor.experimental.Pruning.get_sparsity_ratio"]], "init_train_cfg() (neural_compressor.experimental.distillation method)": [[226, "neural_compressor.experimental.Distillation.init_train_cfg"]], "input (neural_compressor.experimental.graph_optimization property)": [[226, "neural_compressor.experimental.Graph_Optimization.input"]], "metric (neural_compressor.experimental.benchmark property)": [[226, "neural_compressor.experimental.Benchmark.metric"]], "metric (neural_compressor.experimental.graph_optimization property)": [[226, "neural_compressor.experimental.Graph_Optimization.metric"]], "metric (neural_compressor.experimental.modelconversion property)": [[226, "neural_compressor.experimental.ModelConversion.metric"]], "metric (neural_compressor.experimental.quantization property)": [[226, "neural_compressor.experimental.Quantization.metric"]], "model (neural_compressor.experimental.benchmark property)": [[226, "neural_compressor.experimental.Benchmark.model"]], "model (neural_compressor.experimental.component property)": [[226, "neural_compressor.experimental.Component.model"]], "model (neural_compressor.experimental.graph_optimization property)": [[226, "neural_compressor.experimental.Graph_Optimization.model"]], "model (neural_compressor.experimental.modelconversion property)": [[226, "neural_compressor.experimental.ModelConversion.model"]], "model (neural_compressor.experimental.quantization property)": [[226, "neural_compressor.experimental.Quantization.model"]], "neural_compressor.experimental": [[226, "module-neural_compressor.experimental"]], "objective (neural_compressor.experimental.quantization property)": [[226, "neural_compressor.experimental.Quantization.objective"]], "on_after_compute_loss() (neural_compressor.experimental.component method)": [[226, "neural_compressor.experimental.Component.on_after_compute_loss"]], "on_after_eval() (neural_compressor.experimental.component method)": [[226, "neural_compressor.experimental.Component.on_after_eval"]], "on_after_optimizer_step() (neural_compressor.experimental.component method)": [[226, "neural_compressor.experimental.Component.on_after_optimizer_step"]], "on_batch_begin() (neural_compressor.experimental.component method)": [[226, "neural_compressor.experimental.Component.on_batch_begin"]], "on_batch_end() (neural_compressor.experimental.component method)": [[226, "neural_compressor.experimental.Component.on_batch_end"]], "on_before_eval() (neural_compressor.experimental.component method)": [[226, "neural_compressor.experimental.Component.on_before_eval"]], "on_before_optimizer_step() (neural_compressor.experimental.component method)": [[226, "neural_compressor.experimental.Component.on_before_optimizer_step"]], "on_epoch_begin() (neural_compressor.experimental.component method)": [[226, "neural_compressor.experimental.Component.on_epoch_begin"]], "on_epoch_end() (neural_compressor.experimental.component method)": [[226, "neural_compressor.experimental.Component.on_epoch_end"]], "on_post_forward() (neural_compressor.experimental.distillation method)": [[226, "neural_compressor.experimental.Distillation.on_post_forward"]], "on_post_grad() (neural_compressor.experimental.component method)": [[226, "neural_compressor.experimental.Component.on_post_grad"]], "on_step_begin() (neural_compressor.experimental.component method)": [[226, "neural_compressor.experimental.Component.on_step_begin"]], "on_step_end() (neural_compressor.experimental.component method)": [[226, "neural_compressor.experimental.Component.on_step_end"]], "on_train_begin() (neural_compressor.experimental.component method)": [[226, "neural_compressor.experimental.Component.on_train_begin"]], "on_train_end() (neural_compressor.experimental.component method)": [[226, "neural_compressor.experimental.Component.on_train_end"]], "optimizer (neural_compressor.experimental.distillation property)": [[226, "neural_compressor.experimental.Distillation.optimizer"]], "output (neural_compressor.experimental.graph_optimization property)": [[226, "neural_compressor.experimental.Graph_Optimization.output"]], "post_epoch_end() (neural_compressor.experimental.component method)": [[226, "neural_compressor.experimental.Component.post_epoch_end"]], "post_process() (neural_compressor.experimental.component method)": [[226, "neural_compressor.experimental.Component.post_process"]], "postprocess (neural_compressor.experimental.benchmark property)": [[226, "neural_compressor.experimental.Benchmark.postprocess"]], "postprocess (neural_compressor.experimental.graph_optimization property)": [[226, "neural_compressor.experimental.Graph_Optimization.postprocess"]], "postprocess (neural_compressor.experimental.modelconversion property)": [[226, "neural_compressor.experimental.ModelConversion.postprocess"]], "postprocess (neural_compressor.experimental.quantization property)": [[226, "neural_compressor.experimental.Quantization.postprocess"]], "pre_epoch_begin() (neural_compressor.experimental.component method)": [[226, "neural_compressor.experimental.Component.pre_epoch_begin"]], "pre_process() (neural_compressor.experimental.component method)": [[226, "neural_compressor.experimental.Component.pre_process"]], "pre_process() (neural_compressor.experimental.distillation method)": [[226, "neural_compressor.experimental.Distillation.pre_process"]], "pre_process() (neural_compressor.experimental.pruning method)": [[226, "neural_compressor.experimental.Pruning.pre_process"]], "pre_process() (neural_compressor.experimental.quantization method)": [[226, "neural_compressor.experimental.Quantization.pre_process"]], "precisions (neural_compressor.experimental.graph_optimization property)": [[226, "neural_compressor.experimental.Graph_Optimization.precisions"]], "precisions (neural_compressor.experimental.mixedprecision property)": [[226, "neural_compressor.experimental.MixedPrecision.precisions"]], "prepare() (neural_compressor.experimental.component method)": [[226, "neural_compressor.experimental.Component.prepare"]], "prepare() (neural_compressor.experimental.distillation method)": [[226, "neural_compressor.experimental.Distillation.prepare"]], "prepare() (neural_compressor.experimental.pruning method)": [[226, "neural_compressor.experimental.Pruning.prepare"]], "prepare_qat() (neural_compressor.experimental.component method)": [[226, "neural_compressor.experimental.Component.prepare_qat"]], "pruners (neural_compressor.experimental.pruning attribute)": [[226, "neural_compressor.experimental.Pruning.pruners"]], "pruning_func (neural_compressor.experimental.pruning property)": [[226, "neural_compressor.experimental.Pruning.pruning_func"]], "q_func (neural_compressor.experimental.quantization property)": [[226, "neural_compressor.experimental.Quantization.q_func"]], "register_hook() (neural_compressor.experimental.component method)": [[226, "neural_compressor.experimental.Component.register_hook"]], "results (neural_compressor.experimental.benchmark property)": [[226, "neural_compressor.experimental.Benchmark.results"]], "run_instance() (neural_compressor.experimental.benchmark method)": [[226, "neural_compressor.experimental.Benchmark.run_instance"]], "set_config_by_model() (neural_compressor.experimental.graph_optimization method)": [[226, "neural_compressor.experimental.Graph_Optimization.set_config_by_model"]], "set_config_by_model() (neural_compressor.experimental.mixedprecision method)": [[226, "neural_compressor.experimental.MixedPrecision.set_config_by_model"]], "source (neural_compressor.experimental.modelconversion property)": [[226, "neural_compressor.experimental.ModelConversion.source"]], "student_model (neural_compressor.experimental.distillation property)": [[226, "neural_compressor.experimental.Distillation.student_model"]], "summary_benchmark() (neural_compressor.experimental.benchmark method)": [[226, "neural_compressor.experimental.Benchmark.summary_benchmark"]], "teacher_model (neural_compressor.experimental.distillation property)": [[226, "neural_compressor.experimental.Distillation.teacher_model"]], "train_cfg (neural_compressor.experimental.distillation property)": [[226, "neural_compressor.experimental.Distillation.train_cfg"]], "train_dataloader (neural_compressor.experimental.component property)": [[226, "neural_compressor.experimental.Component.train_dataloader"]], "train_distributed (neural_compressor.experimental.distillation property)": [[226, "neural_compressor.experimental.Distillation.train_distributed"]], "train_distributed (neural_compressor.experimental.pruning property)": [[226, "neural_compressor.experimental.Pruning.train_distributed"]], "train_func (neural_compressor.experimental.component property)": [[226, "neural_compressor.experimental.Component.train_func"]], "update_items_for_all_pruners() (neural_compressor.experimental.pruning method)": [[226, "neural_compressor.experimental.Pruning.update_items_for_all_pruners"]], "bleu (class in neural_compressor.experimental.metric.bleu)": [[227, "neural_compressor.experimental.metric.bleu.BLEU"], [539, "neural_compressor.experimental.metric.bleu.BLEU"]], "unicoderegex (class in neural_compressor.experimental.metric.bleu)": [[227, "neural_compressor.experimental.metric.bleu.UnicodeRegex"]], "bleu_tokenize() (in module neural_compressor.experimental.metric.bleu)": [[227, "neural_compressor.experimental.metric.bleu.bleu_tokenize"]], "labels (neural_compressor.experimental.metric.bleu.bleu attribute)": [[227, "neural_compressor.experimental.metric.bleu.BLEU.labels"], [539, "neural_compressor.experimental.metric.bleu.BLEU.labels"]], "neural_compressor.experimental.metric.bleu": [[227, "module-neural_compressor.experimental.metric.bleu"], [539, "module-neural_compressor.experimental.metric.bleu"]], "nondigit_punct_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[227, "neural_compressor.experimental.metric.bleu.UnicodeRegex.nondigit_punct_re"]], "predictions (neural_compressor.experimental.metric.bleu.bleu attribute)": [[227, "neural_compressor.experimental.metric.bleu.BLEU.predictions"], [539, "neural_compressor.experimental.metric.bleu.BLEU.predictions"]], "property_chars() (neural_compressor.experimental.metric.bleu.unicoderegex method)": [[227, "neural_compressor.experimental.metric.bleu.UnicodeRegex.property_chars"]], "punct_nondigit_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[227, "neural_compressor.experimental.metric.bleu.UnicodeRegex.punct_nondigit_re"]], "reset() (neural_compressor.experimental.metric.bleu.bleu method)": [[227, "neural_compressor.experimental.metric.bleu.BLEU.reset"], [539, "neural_compressor.experimental.metric.bleu.BLEU.reset"]], "result() (neural_compressor.experimental.metric.bleu.bleu method)": [[227, "neural_compressor.experimental.metric.bleu.BLEU.result"], [539, "neural_compressor.experimental.metric.bleu.BLEU.result"]], "symbol_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[227, "neural_compressor.experimental.metric.bleu.UnicodeRegex.symbol_re"]], "update() (neural_compressor.experimental.metric.bleu.bleu method)": [[227, "neural_compressor.experimental.metric.bleu.BLEU.update"], [539, "neural_compressor.experimental.metric.bleu.BLEU.update"]], "compute_bleu() (in module neural_compressor.experimental.metric.bleu_util)": [[228, "neural_compressor.experimental.metric.bleu_util.compute_bleu"]], "neural_compressor.experimental.metric.bleu_util": [[228, "module-neural_compressor.experimental.metric.bleu_util"]], "neural_compressor.experimental.metric.coco_label_map": [[229, "module-neural_compressor.experimental.metric.coco_label_map"]], "cocoevalwrapper (class in neural_compressor.experimental.metric.coco_tools)": [[230, "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper"]], "cocowrapper (class in neural_compressor.experimental.metric.coco_tools)": [[230, "neural_compressor.experimental.metric.coco_tools.COCOWrapper"]], "computemetrics() (neural_compressor.experimental.metric.coco_tools.cocoevalwrapper method)": [[230, "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper.ComputeMetrics"]], "exportsingleimagedetectionboxestococo() (in module neural_compressor.experimental.metric.coco_tools)": [[230, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageDetectionBoxesToCoco"]], "exportsingleimagedetectionmaskstococo() (in module neural_compressor.experimental.metric.coco_tools)": [[230, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageDetectionMasksToCoco"]], "exportsingleimagegroundtruthtococo() (in module neural_compressor.experimental.metric.coco_tools)": [[230, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageGroundtruthToCoco"]], "getagnosticmode() (neural_compressor.experimental.metric.coco_tools.cocoevalwrapper method)": [[230, "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper.GetAgnosticMode"]], "getcategory() (neural_compressor.experimental.metric.coco_tools.cocoevalwrapper method)": [[230, "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper.GetCategory"]], "getcategoryidlist() (neural_compressor.experimental.metric.coco_tools.cocoevalwrapper method)": [[230, "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper.GetCategoryIdList"]], "loadannotations() (neural_compressor.experimental.metric.coco_tools.cocowrapper method)": [[230, "neural_compressor.experimental.metric.coco_tools.COCOWrapper.LoadAnnotations"]], "accumulate() (neural_compressor.experimental.metric.coco_tools.cocoevalwrapper method)": [[230, "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper.accumulate"]], "dataset (neural_compressor.experimental.metric.coco_tools.cocowrapper attribute)": [[230, "neural_compressor.experimental.metric.coco_tools.COCOWrapper.dataset"]], "detection_type (neural_compressor.experimental.metric.coco_tools.cocowrapper attribute)": [[230, "neural_compressor.experimental.metric.coco_tools.COCOWrapper.detection_type"]], "neural_compressor.experimental.metric.coco_tools": [[230, "module-neural_compressor.experimental.metric.coco_tools"]], "evaluate() (in module neural_compressor.experimental.metric.evaluate_squad)": [[231, "neural_compressor.experimental.metric.evaluate_squad.evaluate"]], "exact_match_score() (in module neural_compressor.experimental.metric.evaluate_squad)": [[231, "neural_compressor.experimental.metric.evaluate_squad.exact_match_score"]], "f1_score() (in module neural_compressor.experimental.metric.evaluate_squad)": [[231, "neural_compressor.experimental.metric.evaluate_squad.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.experimental.metric.evaluate_squad)": [[231, "neural_compressor.experimental.metric.evaluate_squad.metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.evaluate_squad": [[231, "module-neural_compressor.experimental.metric.evaluate_squad"]], "evaluate() (in module neural_compressor.experimental.metric.f1)": [[232, "neural_compressor.experimental.metric.f1.evaluate"]], "f1_score() (in module neural_compressor.experimental.metric.f1)": [[232, "neural_compressor.experimental.metric.f1.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.experimental.metric.f1)": [[232, "neural_compressor.experimental.metric.f1.metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.f1": [[232, "module-neural_compressor.experimental.metric.f1"]], "normalize_answer() (in module neural_compressor.experimental.metric.f1)": [[232, "neural_compressor.experimental.metric.f1.normalize_answer"]], "basemetric (class in neural_compressor.experimental.metric)": [[233, "neural_compressor.experimental.metric.BaseMetric"]], "metrics (class in neural_compressor.experimental.metric)": [[233, "neural_compressor.experimental.metric.METRICS"]], "hvd (neural_compressor.experimental.metric.basemetric property)": [[233, "neural_compressor.experimental.metric.BaseMetric.hvd"]], "metric (neural_compressor.experimental.metric.basemetric property)": [[233, "neural_compressor.experimental.metric.BaseMetric.metric"]], "metric_registry() (in module neural_compressor.experimental.metric)": [[233, "neural_compressor.experimental.metric.metric_registry"]], "metrics (neural_compressor.experimental.metric.metrics attribute)": [[233, "neural_compressor.experimental.metric.METRICS.metrics"]], "neural_compressor.experimental.metric": [[233, "module-neural_compressor.experimental.metric"]], "register() (neural_compressor.experimental.metric.metrics method)": [[233, "neural_compressor.experimental.metric.METRICS.register"]], "reset() (neural_compressor.experimental.metric.basemetric method)": [[233, "neural_compressor.experimental.metric.BaseMetric.reset"]], "result() (neural_compressor.experimental.metric.basemetric method)": [[233, "neural_compressor.experimental.metric.BaseMetric.result"]], "update() (neural_compressor.experimental.metric.basemetric method)": [[233, "neural_compressor.experimental.metric.BaseMetric.update"]], "accuracy (class in neural_compressor.experimental.metric.metric)": [[234, "neural_compressor.experimental.metric.metric.Accuracy"]], "basemetric (class in neural_compressor.experimental.metric.metric)": [[234, "neural_compressor.experimental.metric.metric.BaseMetric"]], "cocomapv2 (class in neural_compressor.experimental.metric.metric)": [[234, "neural_compressor.experimental.metric.metric.COCOmAPv2"]], "f1 (class in neural_compressor.experimental.metric.metric)": [[234, "neural_compressor.experimental.metric.metric.F1"]], "generaltopk (class in neural_compressor.experimental.metric.metric)": [[234, "neural_compressor.experimental.metric.metric.GeneralTopK"]], "loss (class in neural_compressor.experimental.metric.metric)": [[234, "neural_compressor.experimental.metric.metric.Loss"]], "mae (class in neural_compressor.experimental.metric.metric)": [[234, "neural_compressor.experimental.metric.metric.MAE"]], "metrics (class in neural_compressor.experimental.metric.metric)": [[234, "neural_compressor.experimental.metric.metric.METRICS"]], "mse (class in neural_compressor.experimental.metric.metric)": [[234, "neural_compressor.experimental.metric.metric.MSE"]], "mxnetmetrics (class in neural_compressor.experimental.metric.metric)": [[234, "neural_compressor.experimental.metric.metric.MXNetMetrics"]], "onnxrtglue (class in neural_compressor.experimental.metric.metric)": [[234, "neural_compressor.experimental.metric.metric.ONNXRTGLUE"]], "onnxrtitmetrics (class in neural_compressor.experimental.metric.metric)": [[234, "neural_compressor.experimental.metric.metric.ONNXRTITMetrics"]], "onnxrtqlmetrics (class in neural_compressor.experimental.metric.metric)": [[234, "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics"]], "pytorchloss (class in neural_compressor.experimental.metric.metric)": [[234, "neural_compressor.experimental.metric.metric.PyTorchLoss"]], "pytorchmetrics (class in neural_compressor.experimental.metric.metric)": [[234, "neural_compressor.experimental.metric.metric.PyTorchMetrics"]], "rmse (class in neural_compressor.experimental.metric.metric)": [[234, "neural_compressor.experimental.metric.metric.RMSE"]], "roc (class in neural_compressor.experimental.metric.metric)": [[234, "neural_compressor.experimental.metric.metric.ROC"]], "squadf1 (class in neural_compressor.experimental.metric.metric)": [[234, "neural_compressor.experimental.metric.metric.SquadF1"]], "tensorflowcocomap (class in neural_compressor.experimental.metric.metric)": [[234, "neural_compressor.experimental.metric.metric.TensorflowCOCOMAP"]], "tensorflowmap (class in neural_compressor.experimental.metric.metric)": [[234, "neural_compressor.experimental.metric.metric.TensorflowMAP"]], "tensorflowmetrics (class in neural_compressor.experimental.metric.metric)": [[234, "neural_compressor.experimental.metric.metric.TensorflowMetrics"]], "tensorflowtopk (class in neural_compressor.experimental.metric.metric)": [[234, "neural_compressor.experimental.metric.metric.TensorflowTopK"]], "tensorflowvocmap (class in neural_compressor.experimental.metric.metric)": [[234, "neural_compressor.experimental.metric.metric.TensorflowVOCMAP"]], "wrapmxnetmetric (class in neural_compressor.experimental.metric.metric)": [[234, "neural_compressor.experimental.metric.metric.WrapMXNetMetric"]], "wraponnxrtmetric (class in neural_compressor.experimental.metric.metric)": [[234, "neural_compressor.experimental.metric.metric.WrapONNXRTMetric"]], "wrappytorchmetric (class in neural_compressor.experimental.metric.metric)": [[234, "neural_compressor.experimental.metric.metric.WrapPyTorchMetric"]], "compare_label (neural_compressor.experimental.metric.metric.mae attribute)": [[234, "neural_compressor.experimental.metric.metric.MAE.compare_label"]], "compare_label (neural_compressor.experimental.metric.metric.mse attribute)": [[234, "neural_compressor.experimental.metric.metric.MSE.compare_label"]], "compute() (neural_compressor.experimental.metric.metric.pytorchloss method)": [[234, "neural_compressor.experimental.metric.metric.PyTorchLoss.compute"]], "hvd (neural_compressor.experimental.metric.metric.basemetric property)": [[234, "neural_compressor.experimental.metric.metric.BaseMetric.hvd"]], "k (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[234, "neural_compressor.experimental.metric.metric.GeneralTopK.k"]], "k (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[234, "neural_compressor.experimental.metric.metric.TensorflowTopK.k"]], "label_list (neural_compressor.experimental.metric.metric.accuracy attribute)": [[234, "neural_compressor.experimental.metric.metric.Accuracy.label_list"]], "label_list (neural_compressor.experimental.metric.metric.mae attribute)": [[234, "neural_compressor.experimental.metric.metric.MAE.label_list"]], "label_list (neural_compressor.experimental.metric.metric.mse attribute)": [[234, "neural_compressor.experimental.metric.metric.MSE.label_list"]], "miou (class in neural_compressor.experimental.metric.metric)": [[234, "neural_compressor.experimental.metric.metric.mIOU"]], "metric (neural_compressor.experimental.metric.metric.basemetric property)": [[234, "neural_compressor.experimental.metric.metric.BaseMetric.metric"]], "metric_registry() (in module neural_compressor.experimental.metric.metric)": [[234, "neural_compressor.experimental.metric.metric.metric_registry"]], "metrics (neural_compressor.experimental.metric.metric.metrics attribute)": [[234, "neural_compressor.experimental.metric.metric.METRICS.metrics"]], "metrics (neural_compressor.experimental.metric.metric.mxnetmetrics attribute)": [[234, "neural_compressor.experimental.metric.metric.MXNetMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.onnxrtitmetrics attribute)": [[234, "neural_compressor.experimental.metric.metric.ONNXRTITMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.onnxrtqlmetrics attribute)": [[234, "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.pytorchmetrics attribute)": [[234, "neural_compressor.experimental.metric.metric.PyTorchMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.tensorflowmetrics attribute)": [[234, "neural_compressor.experimental.metric.metric.TensorflowMetrics.metrics"]], "mse (neural_compressor.experimental.metric.metric.rmse attribute)": [[234, "neural_compressor.experimental.metric.metric.RMSE.mse"]], "neural_compressor.experimental.metric.metric": [[234, "module-neural_compressor.experimental.metric.metric"]], "num_correct (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[234, "neural_compressor.experimental.metric.metric.GeneralTopK.num_correct"]], "num_correct (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[234, "neural_compressor.experimental.metric.metric.TensorflowTopK.num_correct"]], "num_sample (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[234, "neural_compressor.experimental.metric.metric.GeneralTopK.num_sample"]], "num_sample (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[234, "neural_compressor.experimental.metric.metric.TensorflowTopK.num_sample"]], "pred_list (neural_compressor.experimental.metric.metric.accuracy attribute)": [[234, "neural_compressor.experimental.metric.metric.Accuracy.pred_list"]], "pred_list (neural_compressor.experimental.metric.metric.mae attribute)": [[234, "neural_compressor.experimental.metric.metric.MAE.pred_list"]], "pred_list (neural_compressor.experimental.metric.metric.mse attribute)": [[234, "neural_compressor.experimental.metric.metric.MSE.pred_list"]], "register() (neural_compressor.experimental.metric.metric.metrics method)": [[234, "neural_compressor.experimental.metric.metric.METRICS.register"]], "reset() (neural_compressor.experimental.metric.metric.accuracy method)": [[234, "neural_compressor.experimental.metric.metric.Accuracy.reset"]], "reset() (neural_compressor.experimental.metric.metric.basemetric method)": [[234, "neural_compressor.experimental.metric.metric.BaseMetric.reset"]], "reset() (neural_compressor.experimental.metric.metric.cocomapv2 method)": [[234, "neural_compressor.experimental.metric.metric.COCOmAPv2.reset"]], "reset() (neural_compressor.experimental.metric.metric.f1 method)": [[234, "neural_compressor.experimental.metric.metric.F1.reset"]], "reset() (neural_compressor.experimental.metric.metric.generaltopk method)": [[234, "neural_compressor.experimental.metric.metric.GeneralTopK.reset"]], "reset() (neural_compressor.experimental.metric.metric.loss method)": [[234, "neural_compressor.experimental.metric.metric.Loss.reset"]], "reset() (neural_compressor.experimental.metric.metric.mae method)": [[234, "neural_compressor.experimental.metric.metric.MAE.reset"]], "reset() (neural_compressor.experimental.metric.metric.mse method)": [[234, "neural_compressor.experimental.metric.metric.MSE.reset"]], "reset() (neural_compressor.experimental.metric.metric.onnxrtglue method)": [[234, "neural_compressor.experimental.metric.metric.ONNXRTGLUE.reset"]], "reset() (neural_compressor.experimental.metric.metric.pytorchloss method)": [[234, "neural_compressor.experimental.metric.metric.PyTorchLoss.reset"]], "reset() (neural_compressor.experimental.metric.metric.rmse method)": [[234, "neural_compressor.experimental.metric.metric.RMSE.reset"]], "reset() (neural_compressor.experimental.metric.metric.roc method)": [[234, "neural_compressor.experimental.metric.metric.ROC.reset"]], "reset() (neural_compressor.experimental.metric.metric.squadf1 method)": [[234, "neural_compressor.experimental.metric.metric.SquadF1.reset"]], "reset() (neural_compressor.experimental.metric.metric.tensorflowmap method)": [[234, "neural_compressor.experimental.metric.metric.TensorflowMAP.reset"]], "reset() (neural_compressor.experimental.metric.metric.tensorflowtopk method)": [[234, "neural_compressor.experimental.metric.metric.TensorflowTopK.reset"]], "reset() (neural_compressor.experimental.metric.metric.wrapmxnetmetric method)": [[234, "neural_compressor.experimental.metric.metric.WrapMXNetMetric.reset"]], "reset() (neural_compressor.experimental.metric.metric.wraponnxrtmetric method)": [[234, "neural_compressor.experimental.metric.metric.WrapONNXRTMetric.reset"]], "reset() (neural_compressor.experimental.metric.metric.wrappytorchmetric method)": [[234, "neural_compressor.experimental.metric.metric.WrapPyTorchMetric.reset"]], "reset() (neural_compressor.experimental.metric.metric.miou method)": [[234, "neural_compressor.experimental.metric.metric.mIOU.reset"]], "result() (neural_compressor.experimental.metric.metric.accuracy method)": [[234, "neural_compressor.experimental.metric.metric.Accuracy.result"]], "result() (neural_compressor.experimental.metric.metric.basemetric method)": [[234, "neural_compressor.experimental.metric.metric.BaseMetric.result"]], "result() (neural_compressor.experimental.metric.metric.cocomapv2 method)": [[234, "neural_compressor.experimental.metric.metric.COCOmAPv2.result"]], "result() (neural_compressor.experimental.metric.metric.f1 method)": [[234, "neural_compressor.experimental.metric.metric.F1.result"]], "result() (neural_compressor.experimental.metric.metric.generaltopk method)": [[234, "neural_compressor.experimental.metric.metric.GeneralTopK.result"]], "result() (neural_compressor.experimental.metric.metric.loss method)": [[234, "neural_compressor.experimental.metric.metric.Loss.result"]], "result() (neural_compressor.experimental.metric.metric.mae method)": [[234, "neural_compressor.experimental.metric.metric.MAE.result"]], "result() (neural_compressor.experimental.metric.metric.mse method)": [[234, "neural_compressor.experimental.metric.metric.MSE.result"]], "result() (neural_compressor.experimental.metric.metric.onnxrtglue method)": [[234, "neural_compressor.experimental.metric.metric.ONNXRTGLUE.result"]], "result() (neural_compressor.experimental.metric.metric.rmse method)": [[234, "neural_compressor.experimental.metric.metric.RMSE.result"]], "result() (neural_compressor.experimental.metric.metric.roc method)": [[234, "neural_compressor.experimental.metric.metric.ROC.result"]], "result() (neural_compressor.experimental.metric.metric.squadf1 method)": [[234, "neural_compressor.experimental.metric.metric.SquadF1.result"]], "result() (neural_compressor.experimental.metric.metric.tensorflowmap method)": [[234, "neural_compressor.experimental.metric.metric.TensorflowMAP.result"]], "result() (neural_compressor.experimental.metric.metric.tensorflowtopk method)": [[234, "neural_compressor.experimental.metric.metric.TensorflowTopK.result"]], "result() (neural_compressor.experimental.metric.metric.wrapmxnetmetric method)": [[234, "neural_compressor.experimental.metric.metric.WrapMXNetMetric.result"]], "result() (neural_compressor.experimental.metric.metric.wraponnxrtmetric method)": [[234, "neural_compressor.experimental.metric.metric.WrapONNXRTMetric.result"]], "result() (neural_compressor.experimental.metric.metric.wrappytorchmetric method)": [[234, "neural_compressor.experimental.metric.metric.WrapPyTorchMetric.result"]], "result() (neural_compressor.experimental.metric.metric.miou method)": [[234, "neural_compressor.experimental.metric.metric.mIOU.result"]], "sample (neural_compressor.experimental.metric.metric.accuracy attribute)": [[234, "neural_compressor.experimental.metric.metric.Accuracy.sample"]], "sample (neural_compressor.experimental.metric.metric.loss attribute)": [[234, "neural_compressor.experimental.metric.metric.Loss.sample"]], "sum (neural_compressor.experimental.metric.metric.loss attribute)": [[234, "neural_compressor.experimental.metric.metric.Loss.sum"]], "update() (neural_compressor.experimental.metric.metric.accuracy method)": [[234, "neural_compressor.experimental.metric.metric.Accuracy.update"]], "update() (neural_compressor.experimental.metric.metric.basemetric method)": [[234, "neural_compressor.experimental.metric.metric.BaseMetric.update"]], "update() (neural_compressor.experimental.metric.metric.cocomapv2 method)": [[234, "neural_compressor.experimental.metric.metric.COCOmAPv2.update"]], "update() (neural_compressor.experimental.metric.metric.f1 method)": [[234, "neural_compressor.experimental.metric.metric.F1.update"]], "update() (neural_compressor.experimental.metric.metric.generaltopk method)": [[234, "neural_compressor.experimental.metric.metric.GeneralTopK.update"]], "update() (neural_compressor.experimental.metric.metric.loss method)": [[234, "neural_compressor.experimental.metric.metric.Loss.update"]], "update() (neural_compressor.experimental.metric.metric.mae method)": [[234, "neural_compressor.experimental.metric.metric.MAE.update"]], "update() (neural_compressor.experimental.metric.metric.mse method)": [[234, "neural_compressor.experimental.metric.metric.MSE.update"]], "update() (neural_compressor.experimental.metric.metric.onnxrtglue method)": [[234, "neural_compressor.experimental.metric.metric.ONNXRTGLUE.update"]], "update() (neural_compressor.experimental.metric.metric.pytorchloss method)": [[234, "neural_compressor.experimental.metric.metric.PyTorchLoss.update"]], "update() (neural_compressor.experimental.metric.metric.rmse method)": [[234, "neural_compressor.experimental.metric.metric.RMSE.update"]], "update() (neural_compressor.experimental.metric.metric.roc method)": [[234, "neural_compressor.experimental.metric.metric.ROC.update"]], "update() (neural_compressor.experimental.metric.metric.squadf1 method)": [[234, "neural_compressor.experimental.metric.metric.SquadF1.update"]], "update() (neural_compressor.experimental.metric.metric.tensorflowmap method)": [[234, "neural_compressor.experimental.metric.metric.TensorflowMAP.update"]], "update() (neural_compressor.experimental.metric.metric.tensorflowtopk method)": [[234, "neural_compressor.experimental.metric.metric.TensorflowTopK.update"]], "update() (neural_compressor.experimental.metric.metric.wrapmxnetmetric method)": [[234, "neural_compressor.experimental.metric.metric.WrapMXNetMetric.update"]], "update() (neural_compressor.experimental.metric.metric.wraponnxrtmetric method)": [[234, "neural_compressor.experimental.metric.metric.WrapONNXRTMetric.update"]], "update() (neural_compressor.experimental.metric.metric.wrappytorchmetric method)": [[234, "neural_compressor.experimental.metric.metric.WrapPyTorchMetric.update"]], "update() (neural_compressor.experimental.metric.metric.miou method)": [[234, "neural_compressor.experimental.metric.metric.mIOU.update"]], "mixedprecision (class in neural_compressor.experimental.mixed_precision)": [[235, "neural_compressor.experimental.mixed_precision.MixedPrecision"]], "neural_compressor.experimental.mixed_precision": [[235, "module-neural_compressor.experimental.mixed_precision"]], "precisions (neural_compressor.experimental.mixed_precision.mixedprecision property)": [[235, "neural_compressor.experimental.mixed_precision.MixedPrecision.precisions"]], "set_config_by_model() (neural_compressor.experimental.mixed_precision.mixedprecision method)": [[235, "neural_compressor.experimental.mixed_precision.MixedPrecision.set_config_by_model"]], "modelconversion (class in neural_compressor.experimental.model_conversion)": [[236, "neural_compressor.experimental.model_conversion.ModelConversion"]], "dataset() (neural_compressor.experimental.model_conversion.modelconversion method)": [[236, "neural_compressor.experimental.model_conversion.ModelConversion.dataset"]], "destination (neural_compressor.experimental.model_conversion.modelconversion property)": [[236, "neural_compressor.experimental.model_conversion.ModelConversion.destination"]], "eval_dataloader (neural_compressor.experimental.model_conversion.modelconversion property)": [[236, "neural_compressor.experimental.model_conversion.ModelConversion.eval_dataloader"]], "eval_func (neural_compressor.experimental.model_conversion.modelconversion property)": [[236, "neural_compressor.experimental.model_conversion.ModelConversion.eval_func"]], "metric (neural_compressor.experimental.model_conversion.modelconversion property)": [[236, "neural_compressor.experimental.model_conversion.ModelConversion.metric"]], "model (neural_compressor.experimental.model_conversion.modelconversion property)": [[236, "neural_compressor.experimental.model_conversion.ModelConversion.model"]], "neural_compressor.experimental.model_conversion": [[236, "module-neural_compressor.experimental.model_conversion"]], "postprocess (neural_compressor.experimental.model_conversion.modelconversion property)": [[236, "neural_compressor.experimental.model_conversion.ModelConversion.postprocess"]], "source (neural_compressor.experimental.model_conversion.modelconversion property)": [[236, "neural_compressor.experimental.model_conversion.ModelConversion.source"]], "basicnas (class in neural_compressor.experimental.nas.basic_nas)": [[237, "neural_compressor.experimental.nas.basic_nas.BasicNAS"]], "estimate() (neural_compressor.experimental.nas.basic_nas.basicnas method)": [[237, "neural_compressor.experimental.nas.basic_nas.BasicNAS.estimate"]], "execute() (neural_compressor.experimental.nas.basic_nas.basicnas method)": [[237, "neural_compressor.experimental.nas.basic_nas.BasicNAS.execute"]], "init_by_cfg() (neural_compressor.experimental.nas.basic_nas.basicnas method)": [[237, "neural_compressor.experimental.nas.basic_nas.BasicNAS.init_by_cfg"]], "neural_compressor.experimental.nas.basic_nas": [[237, "module-neural_compressor.experimental.nas.basic_nas"]], "pre_process() (neural_compressor.experimental.nas.basic_nas.basicnas method)": [[237, "neural_compressor.experimental.nas.basic_nas.BasicNAS.pre_process"]], "dynas (class in neural_compressor.experimental.nas.dynas)": [[238, "neural_compressor.experimental.nas.dynas.DyNAS"]], "create_acc_predictor() (neural_compressor.experimental.nas.dynas.dynas method)": [[238, "neural_compressor.experimental.nas.dynas.DyNAS.create_acc_predictor"]], "create_latency_predictor() (neural_compressor.experimental.nas.dynas.dynas method)": [[238, "neural_compressor.experimental.nas.dynas.DyNAS.create_latency_predictor"]], "create_macs_predictor() (neural_compressor.experimental.nas.dynas.dynas method)": [[238, "neural_compressor.experimental.nas.dynas.DyNAS.create_macs_predictor"]], "estimate() (neural_compressor.experimental.nas.dynas.dynas method)": [[238, "neural_compressor.experimental.nas.dynas.DyNAS.estimate"]], "init_cfg() (neural_compressor.experimental.nas.dynas.dynas method)": [[238, "neural_compressor.experimental.nas.dynas.DyNAS.init_cfg"]], "init_for_search() (neural_compressor.experimental.nas.dynas.dynas method)": [[238, "neural_compressor.experimental.nas.dynas.DyNAS.init_for_search"]], "neural_compressor.experimental.nas.dynas": [[238, "module-neural_compressor.experimental.nas.dynas"]], "search() (neural_compressor.experimental.nas.dynas.dynas method)": [[238, "neural_compressor.experimental.nas.dynas.DyNAS.search"]], "select_model_arch() (neural_compressor.experimental.nas.dynas.dynas method)": [[238, "neural_compressor.experimental.nas.dynas.DyNAS.select_model_arch"]], "parametermanager (class in neural_compressor.experimental.nas.dynast.dynas_manager)": [[239, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager"]], "transformerltencoding (class in neural_compressor.experimental.nas.dynast.dynas_manager)": [[239, "neural_compressor.experimental.nas.dynast.dynas_manager.TransformerLTEncoding"]], "create_training_set() (neural_compressor.experimental.nas.dynast.dynas_manager.parametermanager static method)": [[239, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager.create_training_set"]], "create_training_set() (neural_compressor.experimental.nas.dynast.dynas_manager.transformerltencoding method)": [[239, "neural_compressor.experimental.nas.dynast.dynas_manager.TransformerLTEncoding.create_training_set"]], "import_csv() (neural_compressor.experimental.nas.dynast.dynas_manager.parametermanager method)": [[239, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager.import_csv"]], "import_csv() (neural_compressor.experimental.nas.dynast.dynas_manager.transformerltencoding method)": [[239, "neural_compressor.experimental.nas.dynast.dynas_manager.TransformerLTEncoding.import_csv"]], "neural_compressor.experimental.nas.dynast.dynas_manager": [[239, "module-neural_compressor.experimental.nas.dynast.dynas_manager"]], "onehot_generic() (neural_compressor.experimental.nas.dynast.dynas_manager.parametermanager method)": [[239, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager.onehot_generic"]], "process_param_dict() (neural_compressor.experimental.nas.dynast.dynas_manager.parametermanager method)": [[239, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager.process_param_dict"]], "random_sample() (neural_compressor.experimental.nas.dynast.dynas_manager.parametermanager method)": [[239, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager.random_sample"]], "random_samples() (neural_compressor.experimental.nas.dynast.dynas_manager.parametermanager method)": [[239, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager.random_samples"]], "set_seed() (neural_compressor.experimental.nas.dynast.dynas_manager.parametermanager method)": [[239, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager.set_seed"]], "translate2param() (neural_compressor.experimental.nas.dynast.dynas_manager.parametermanager method)": [[239, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager.translate2param"]], "translate2pymoo() (neural_compressor.experimental.nas.dynast.dynas_manager.parametermanager method)": [[239, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager.translate2pymoo"]], "predictor (class in neural_compressor.experimental.nas.dynast.dynas_predictor)": [[240, "neural_compressor.experimental.nas.dynast.dynas_predictor.Predictor"]], "get_metrics() (neural_compressor.experimental.nas.dynast.dynas_predictor.predictor method)": [[240, "neural_compressor.experimental.nas.dynast.dynas_predictor.Predictor.get_metrics"]], "get_parameters() (neural_compressor.experimental.nas.dynast.dynas_predictor.predictor method)": [[240, "neural_compressor.experimental.nas.dynast.dynas_predictor.Predictor.get_parameters"]], "load() (neural_compressor.experimental.nas.dynast.dynas_predictor.predictor method)": [[240, "neural_compressor.experimental.nas.dynast.dynas_predictor.Predictor.load"]], "neural_compressor.experimental.nas.dynast.dynas_predictor": [[240, "module-neural_compressor.experimental.nas.dynast.dynas_predictor"]], "predict() (neural_compressor.experimental.nas.dynast.dynas_predictor.predictor method)": [[240, "neural_compressor.experimental.nas.dynast.dynas_predictor.Predictor.predict"]], "save() (neural_compressor.experimental.nas.dynast.dynas_predictor.predictor method)": [[240, "neural_compressor.experimental.nas.dynast.dynas_predictor.Predictor.save"]], "train() (neural_compressor.experimental.nas.dynast.dynas_predictor.predictor method)": [[240, "neural_compressor.experimental.nas.dynast.dynas_predictor.Predictor.train"]], "problemmultiobjective (class in neural_compressor.experimental.nas.dynast.dynas_search)": [[241, "neural_compressor.experimental.nas.dynast.dynas_search.ProblemMultiObjective"]], "searchalgomanager (class in neural_compressor.experimental.nas.dynast.dynas_search)": [[241, "neural_compressor.experimental.nas.dynast.dynas_search.SearchAlgoManager"]], "configure_age() (neural_compressor.experimental.nas.dynast.dynas_search.searchalgomanager method)": [[241, "neural_compressor.experimental.nas.dynast.dynas_search.SearchAlgoManager.configure_age"]], "configure_nsga2() (neural_compressor.experimental.nas.dynast.dynas_search.searchalgomanager method)": [[241, "neural_compressor.experimental.nas.dynast.dynas_search.SearchAlgoManager.configure_nsga2"]], "neural_compressor.experimental.nas.dynast.dynas_search": [[241, "module-neural_compressor.experimental.nas.dynast.dynas_search"]], "run_search() (neural_compressor.experimental.nas.dynast.dynas_search.searchalgomanager method)": [[241, "neural_compressor.experimental.nas.dynast.dynas_search.SearchAlgoManager.run_search"]], "evaluationinterface (class in neural_compressor.experimental.nas.dynast.dynas_utils)": [[242, "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterface"]], "evaluationinterfacemobilenetv3 (class in neural_compressor.experimental.nas.dynast.dynas_utils)": [[242, "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterfaceMobileNetV3"]], "evaluationinterfaceresnet50 (class in neural_compressor.experimental.nas.dynast.dynas_utils)": [[242, "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterfaceResNet50"]], "evaluationinterfacetransformerlt (class in neural_compressor.experimental.nas.dynast.dynas_utils)": [[242, "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterfaceTransformerLT"]], "ofarunner (class in neural_compressor.experimental.nas.dynast.dynas_utils)": [[242, "neural_compressor.experimental.nas.dynast.dynas_utils.OFARunner"]], "runner (class in neural_compressor.experimental.nas.dynast.dynas_utils)": [[242, "neural_compressor.experimental.nas.dynast.dynas_utils.Runner"]], "torchvisionreference (class in neural_compressor.experimental.nas.dynast.dynas_utils)": [[242, "neural_compressor.experimental.nas.dynast.dynas_utils.TorchVisionReference"]], "transformerltrunner (class in neural_compressor.experimental.nas.dynast.dynas_utils)": [[242, "neural_compressor.experimental.nas.dynast.dynas_utils.TransformerLTRunner"]], "clear_csv() (neural_compressor.experimental.nas.dynast.dynas_utils.evaluationinterface method)": [[242, "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterface.clear_csv"]], "clear_csv() (neural_compressor.experimental.nas.dynast.dynas_utils.evaluationinterfacetransformerlt method)": [[242, "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterfaceTransformerLT.clear_csv"]], "estimate_accuracy_top1() (neural_compressor.experimental.nas.dynast.dynas_utils.ofarunner method)": [[242, "neural_compressor.experimental.nas.dynast.dynas_utils.OFARunner.estimate_accuracy_top1"]], "estimate_latency() (neural_compressor.experimental.nas.dynast.dynas_utils.ofarunner method)": [[242, "neural_compressor.experimental.nas.dynast.dynas_utils.OFARunner.estimate_latency"]], "estimate_macs() (neural_compressor.experimental.nas.dynast.dynas_utils.ofarunner method)": [[242, "neural_compressor.experimental.nas.dynast.dynas_utils.OFARunner.estimate_macs"]], "eval_subnet() (neural_compressor.experimental.nas.dynast.dynas_utils.evaluationinterface method)": [[242, "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterface.eval_subnet"]], "eval_subnet() (neural_compressor.experimental.nas.dynast.dynas_utils.evaluationinterfacemobilenetv3 method)": [[242, "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterfaceMobileNetV3.eval_subnet"]], "eval_subnet() (neural_compressor.experimental.nas.dynast.dynas_utils.evaluationinterfaceresnet50 method)": [[242, "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterfaceResNet50.eval_subnet"]], "eval_subnet() (neural_compressor.experimental.nas.dynast.dynas_utils.evaluationinterfacetransformerlt method)": [[242, "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterfaceTransformerLT.eval_subnet"]], "get_macs() (in module neural_compressor.experimental.nas.dynast.dynas_utils)": [[242, "neural_compressor.experimental.nas.dynast.dynas_utils.get_macs"]], "get_subnet() (neural_compressor.experimental.nas.dynast.dynas_utils.ofarunner method)": [[242, "neural_compressor.experimental.nas.dynast.dynas_utils.OFARunner.get_subnet"]], "get_torchvision_model() (in module neural_compressor.experimental.nas.dynast.dynas_utils)": [[242, "neural_compressor.experimental.nas.dynast.dynas_utils.get_torchvision_model"]], "measure_latency() (in module neural_compressor.experimental.nas.dynast.dynas_utils)": [[242, "neural_compressor.experimental.nas.dynast.dynas_utils.measure_latency"]], "measure_latency() (neural_compressor.experimental.nas.dynast.dynas_utils.ofarunner method)": [[242, "neural_compressor.experimental.nas.dynast.dynas_utils.OFARunner.measure_latency"]], "measure_latency() (neural_compressor.experimental.nas.dynast.dynas_utils.torchvisionreference method)": [[242, "neural_compressor.experimental.nas.dynast.dynas_utils.TorchVisionReference.measure_latency"]], "measure_latency() (neural_compressor.experimental.nas.dynast.dynas_utils.transformerltrunner method)": [[242, "neural_compressor.experimental.nas.dynast.dynas_utils.TransformerLTRunner.measure_latency"]], "neural_compressor.experimental.nas.dynast.dynas_utils": [[242, "module-neural_compressor.experimental.nas.dynast.dynas_utils"]], "validate_macs() (neural_compressor.experimental.nas.dynast.dynas_utils.ofarunner method)": [[242, "neural_compressor.experimental.nas.dynast.dynas_utils.OFARunner.validate_macs"]], "validate_macs() (neural_compressor.experimental.nas.dynast.dynas_utils.torchvisionreference method)": [[242, "neural_compressor.experimental.nas.dynast.dynas_utils.TorchVisionReference.validate_macs"]], "validate_macs() (neural_compressor.experimental.nas.dynast.dynas_utils.transformerltrunner method)": [[242, "neural_compressor.experimental.nas.dynast.dynas_utils.TransformerLTRunner.validate_macs"]], "validate_top1() (neural_compressor.experimental.nas.dynast.dynas_utils.ofarunner method)": [[242, "neural_compressor.experimental.nas.dynast.dynas_utils.OFARunner.validate_top1"]], "validate_top1() (neural_compressor.experimental.nas.dynast.dynas_utils.torchvisionreference method)": [[242, "neural_compressor.experimental.nas.dynast.dynas_utils.TorchVisionReference.validate_top1"]], "neural_compressor.experimental.nas.dynast": [[243, "module-neural_compressor.experimental.nas.dynast"]], "neural_compressor.experimental.nas.dynast.supernetwork": [[244, "module-neural_compressor.experimental.nas.dynast.supernetwork"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation": [[245, "module-neural_compressor.experimental.nas.dynast.supernetwork.machine_translation"]], "multiheadattentionsuper (class in neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork)": [[246, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork.MultiheadAttentionSuper"]], "forward() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork.multiheadattentionsuper method)": [[246, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork.MultiheadAttentionSuper.forward"]], "get_incremental_state() (in module neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork)": [[246, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork.get_incremental_state"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork": [[246, "module-neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork"]], "reorder_incremental_state() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork.multiheadattentionsuper method)": [[246, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork.MultiheadAttentionSuper.reorder_incremental_state"]], "set_incremental_state() (in module neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork)": [[246, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork.set_incremental_state"]], "compute_bleu() (in module neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface)": [[247, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface.compute_bleu"]], "compute_latency() (in module neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface)": [[247, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface.compute_latency"]], "compute_macs() (in module neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface)": [[247, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface.compute_macs"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface": [[247, "module-neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface"]], "transformerdecoder (class in neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork)": [[248, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerDecoder"]], "transformerdecoderlayer (class in neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork)": [[248, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerDecoderLayer"]], "transformerencoder (class in neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork)": [[248, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerEncoder"]], "transformerencoderlayer (class in neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork)": [[248, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerEncoderLayer"]], "transformersupernetwork (class in neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork)": [[248, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerSuperNetwork"]], "extract_features() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.transformerdecoder method)": [[248, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerDecoder.extract_features"]], "forward() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.transformerdecoder method)": [[248, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerDecoder.forward"]], "forward() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.transformerdecoderlayer method)": [[248, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerDecoderLayer.forward"]], "forward() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.transformerencoder method)": [[248, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerEncoder.forward"]], "forward() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.transformerencoderlayer method)": [[248, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerEncoderLayer.forward"]], "max_positions() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.transformerdecoder method)": [[248, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerDecoder.max_positions"]], "max_positions() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.transformerencoder method)": [[248, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerEncoder.max_positions"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork": [[248, "module-neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork"]], "output_layer() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.transformerdecoder method)": [[248, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerDecoder.output_layer"]], "reorder_encoder_out() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.transformerencoder method)": [[248, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerEncoder.reorder_encoder_out"]], "upgrade_state_dict_named() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.transformerdecoder method)": [[248, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerDecoder.upgrade_state_dict_named"]], "upgrade_state_dict_named() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.transformerencoder method)": [[248, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerEncoder.upgrade_state_dict_named"]], "upgrade_state_dict_named() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.transformerencoderlayer method)": [[248, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerEncoderLayer.upgrade_state_dict_named"]], "basicnas (class in neural_compressor.experimental.nas)": [[249, "neural_compressor.experimental.nas.BasicNAS"]], "dynas (class in neural_compressor.experimental.nas)": [[249, "neural_compressor.experimental.nas.DyNAS"]], "nas (class in neural_compressor.experimental.nas)": [[249, "neural_compressor.experimental.nas.NAS"]], "create_acc_predictor() (neural_compressor.experimental.nas.dynas method)": [[249, "neural_compressor.experimental.nas.DyNAS.create_acc_predictor"]], "create_latency_predictor() (neural_compressor.experimental.nas.dynas method)": [[249, "neural_compressor.experimental.nas.DyNAS.create_latency_predictor"]], "create_macs_predictor() (neural_compressor.experimental.nas.dynas method)": [[249, "neural_compressor.experimental.nas.DyNAS.create_macs_predictor"]], "estimate() (neural_compressor.experimental.nas.basicnas method)": [[249, "neural_compressor.experimental.nas.BasicNAS.estimate"]], "estimate() (neural_compressor.experimental.nas.dynas method)": [[249, "neural_compressor.experimental.nas.DyNAS.estimate"]], "execute() (neural_compressor.experimental.nas.basicnas method)": [[249, "neural_compressor.experimental.nas.BasicNAS.execute"]], "init_by_cfg() (neural_compressor.experimental.nas.basicnas method)": [[249, "neural_compressor.experimental.nas.BasicNAS.init_by_cfg"]], "init_cfg() (neural_compressor.experimental.nas.dynas method)": [[249, "neural_compressor.experimental.nas.DyNAS.init_cfg"]], "init_for_search() (neural_compressor.experimental.nas.dynas method)": [[249, "neural_compressor.experimental.nas.DyNAS.init_for_search"]], "neural_compressor.experimental.nas": [[249, "module-neural_compressor.experimental.nas"]], "pre_process() (neural_compressor.experimental.nas.basicnas method)": [[249, "neural_compressor.experimental.nas.BasicNAS.pre_process"]], "search() (neural_compressor.experimental.nas.dynas method)": [[249, "neural_compressor.experimental.nas.DyNAS.search"]], "select_model_arch() (neural_compressor.experimental.nas.dynas method)": [[249, "neural_compressor.experimental.nas.DyNAS.select_model_arch"]], "nas (class in neural_compressor.experimental.nas.nas)": [[250, "neural_compressor.experimental.nas.nas.NAS"]], "nasbase (class in neural_compressor.experimental.nas.nas)": [[250, "neural_compressor.experimental.nas.nas.NASBase"]], "count_model_parameters() (neural_compressor.experimental.nas.nas.nasbase method)": [[250, "neural_compressor.experimental.nas.nas.NASBase.count_model_parameters"]], "dump_search_results() (neural_compressor.experimental.nas.nas.nasbase method)": [[250, "neural_compressor.experimental.nas.nas.NASBase.dump_search_results"]], "estimate() (neural_compressor.experimental.nas.nas.nasbase method)": [[250, "neural_compressor.experimental.nas.nas.NASBase.estimate"]], "find_best_model_archs() (neural_compressor.experimental.nas.nas.nasbase method)": [[250, "neural_compressor.experimental.nas.nas.NASBase.find_best_model_archs"]], "init_search_cfg() (neural_compressor.experimental.nas.nas.nasbase method)": [[250, "neural_compressor.experimental.nas.nas.NASBase.init_search_cfg"]], "load_search_results() (neural_compressor.experimental.nas.nas.nasbase method)": [[250, "neural_compressor.experimental.nas.nas.NASBase.load_search_results"]], "metrics_conversion() (neural_compressor.experimental.nas.nas.nasbase method)": [[250, "neural_compressor.experimental.nas.nas.NASBase.metrics_conversion"]], "model_builder (neural_compressor.experimental.nas.nas.nasbase property)": [[250, "neural_compressor.experimental.nas.nas.NASBase.model_builder"]], "neural_compressor.experimental.nas.nas": [[250, "module-neural_compressor.experimental.nas.nas"]], "params_vec2params_dict() (neural_compressor.experimental.nas.nas.nasbase method)": [[250, "neural_compressor.experimental.nas.nas.NASBase.params_vec2params_dict"]], "search() (neural_compressor.experimental.nas.nas.nasbase method)": [[250, "neural_compressor.experimental.nas.nas.NASBase.search"]], "search_algorithm (neural_compressor.experimental.nas.nas.nasbase property)": [[250, "neural_compressor.experimental.nas.nas.NASBase.search_algorithm"]], "search_space (neural_compressor.experimental.nas.nas.nasbase property)": [[250, "neural_compressor.experimental.nas.nas.NASBase.search_space"]], "select_model_arch() (neural_compressor.experimental.nas.nas.nasbase method)": [[250, "neural_compressor.experimental.nas.nas.NASBase.select_model_arch"]], "create_search_space_pool() (in module neural_compressor.experimental.nas.nas_utils)": [[251, "neural_compressor.experimental.nas.nas_utils.create_search_space_pool"]], "find_pareto_front() (in module neural_compressor.experimental.nas.nas_utils)": [[251, "neural_compressor.experimental.nas.nas_utils.find_pareto_front"]], "nas_registry() (in module neural_compressor.experimental.nas.nas_utils)": [[251, "neural_compressor.experimental.nas.nas_utils.nas_registry"]], "neural_compressor.experimental.nas.nas_utils": [[251, "module-neural_compressor.experimental.nas.nas_utils"]], "bayesianoptimizationsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[252, "neural_compressor.experimental.nas.search_algorithms.BayesianOptimizationSearcher"]], "gridsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[252, "neural_compressor.experimental.nas.search_algorithms.GridSearcher"]], "randomsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[252, "neural_compressor.experimental.nas.search_algorithms.RandomSearcher"]], "searcher (class in neural_compressor.experimental.nas.search_algorithms)": [[252, "neural_compressor.experimental.nas.search_algorithms.Searcher"]], "get_feedback() (neural_compressor.experimental.nas.search_algorithms.bayesianoptimizationsearcher method)": [[252, "neural_compressor.experimental.nas.search_algorithms.BayesianOptimizationSearcher.get_feedback"]], "get_feedback() (neural_compressor.experimental.nas.search_algorithms.searcher method)": [[252, "neural_compressor.experimental.nas.search_algorithms.Searcher.get_feedback"]], "indices2params_vec() (neural_compressor.experimental.nas.search_algorithms.bayesianoptimizationsearcher method)": [[252, "neural_compressor.experimental.nas.search_algorithms.BayesianOptimizationSearcher.indices2params_vec"]], "neural_compressor.experimental.nas.search_algorithms": [[252, "module-neural_compressor.experimental.nas.search_algorithms"]], "params_vec2params_dict() (neural_compressor.experimental.nas.search_algorithms.searcher method)": [[252, "neural_compressor.experimental.nas.search_algorithms.Searcher.params_vec2params_dict"]], "suggest() (neural_compressor.experimental.nas.search_algorithms.bayesianoptimizationsearcher method)": [[252, "neural_compressor.experimental.nas.search_algorithms.BayesianOptimizationSearcher.suggest"]], "suggest() (neural_compressor.experimental.nas.search_algorithms.gridsearcher method)": [[252, "neural_compressor.experimental.nas.search_algorithms.GridSearcher.suggest"]], "suggest() (neural_compressor.experimental.nas.search_algorithms.randomsearcher method)": [[252, "neural_compressor.experimental.nas.search_algorithms.RandomSearcher.suggest"]], "suggest() (neural_compressor.experimental.nas.search_algorithms.searcher method)": [[252, "neural_compressor.experimental.nas.search_algorithms.Searcher.suggest"]], "pruning (class in neural_compressor.experimental.pruning)": [[253, "neural_compressor.experimental.pruning.Pruning"]], "tfpruningcallback (class in neural_compressor.experimental.pruning)": [[253, "neural_compressor.experimental.pruning.TfPruningCallback"]], "conf (neural_compressor.experimental.pruning.pruning attribute)": [[253, "neural_compressor.experimental.pruning.Pruning.conf"]], "evaluation_distributed (neural_compressor.experimental.pruning.pruning property)": [[253, "neural_compressor.experimental.pruning.Pruning.evaluation_distributed"]], "execute() (neural_compressor.experimental.pruning.pruning method)": [[253, "neural_compressor.experimental.pruning.Pruning.execute"]], "generate_hooks() (neural_compressor.experimental.pruning.pruning method)": [[253, "neural_compressor.experimental.pruning.Pruning.generate_hooks"]], "generate_pruners() (neural_compressor.experimental.pruning.pruning method)": [[253, "neural_compressor.experimental.pruning.Pruning.generate_pruners"]], "get_sparsity_ratio() (neural_compressor.experimental.pruning.pruning method)": [[253, "neural_compressor.experimental.pruning.Pruning.get_sparsity_ratio"]], "neural_compressor.experimental.pruning": [[253, "module-neural_compressor.experimental.pruning"]], "on_after_compute_loss() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[253, "neural_compressor.experimental.pruning.TfPruningCallback.on_after_compute_loss"]], "on_batch_begin() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[253, "neural_compressor.experimental.pruning.TfPruningCallback.on_batch_begin"]], "on_batch_end() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[253, "neural_compressor.experimental.pruning.TfPruningCallback.on_batch_end"]], "on_epoch_begin() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[253, "neural_compressor.experimental.pruning.TfPruningCallback.on_epoch_begin"]], "on_epoch_end() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[253, "neural_compressor.experimental.pruning.TfPruningCallback.on_epoch_end"]], "on_step_begin() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[253, "neural_compressor.experimental.pruning.TfPruningCallback.on_step_begin"]], "on_step_end() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[253, "neural_compressor.experimental.pruning.TfPruningCallback.on_step_end"]], "on_train_begin() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[253, "neural_compressor.experimental.pruning.TfPruningCallback.on_train_begin"]], "on_train_end() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[253, "neural_compressor.experimental.pruning.TfPruningCallback.on_train_end"]], "post_epoch_end() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[253, "neural_compressor.experimental.pruning.TfPruningCallback.post_epoch_end"]], "pre_epoch_begin() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[253, "neural_compressor.experimental.pruning.TfPruningCallback.pre_epoch_begin"]], "pre_process() (neural_compressor.experimental.pruning.pruning method)": [[253, "neural_compressor.experimental.pruning.Pruning.pre_process"]], "prepare() (neural_compressor.experimental.pruning.pruning method)": [[253, "neural_compressor.experimental.pruning.Pruning.prepare"]], "pruners (neural_compressor.experimental.pruning.pruning attribute)": [[253, "neural_compressor.experimental.pruning.Pruning.pruners"]], "pruning_func (neural_compressor.experimental.pruning.pruning property)": [[253, "neural_compressor.experimental.pruning.Pruning.pruning_func"]], "train_distributed (neural_compressor.experimental.pruning.pruning property)": [[253, "neural_compressor.experimental.pruning.Pruning.train_distributed"]], "update_items_for_all_pruners() (neural_compressor.experimental.pruning.pruning method)": [[253, "neural_compressor.experimental.pruning.Pruning.update_items_for_all_pruners"]], "patterns (class in neural_compressor.experimental.pruning_recipes)": [[254, "neural_compressor.experimental.pruning_recipes.PATTERNS"]], "neural_compressor.experimental.pruning_recipes": [[254, "module-neural_compressor.experimental.pruning_recipes"]], "patterns (neural_compressor.experimental.pruning_recipes.patterns attribute)": [[254, "neural_compressor.experimental.pruning_recipes.PATTERNS.patterns"]], "support_pattern() (neural_compressor.experimental.pruning_recipes.patterns class method)": [[254, "neural_compressor.experimental.pruning_recipes.PATTERNS.support_pattern"]], "patterns (class in neural_compressor.experimental.pruning_recipes.patterns)": [[255, "neural_compressor.experimental.pruning_recipes.patterns.PATTERNS"]], "neural_compressor.experimental.pruning_recipes.patterns": [[255, "module-neural_compressor.experimental.pruning_recipes.patterns"]], "patterns (neural_compressor.experimental.pruning_recipes.patterns.patterns attribute)": [[255, "neural_compressor.experimental.pruning_recipes.patterns.PATTERNS.patterns"]], "support_pattern() (neural_compressor.experimental.pruning_recipes.patterns.patterns class method)": [[255, "neural_compressor.experimental.pruning_recipes.patterns.PATTERNS.support_pattern"]], "patterns (class in neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[256, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS"]], "patternbase (class in neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[256, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PatternBase"]], "compute_sparsity() (neural_compressor.experimental.pruning_recipes.patterns.pattern.patternbase method)": [[256, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PatternBase.compute_sparsity"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[256, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"]], "pattern_registry() (in module neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[256, "neural_compressor.experimental.pruning_recipes.patterns.pattern.pattern_registry"]], "patterns (neural_compressor.experimental.pruning_recipes.patterns.pattern.patterns attribute)": [[256, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS.patterns"]], "reduce() (neural_compressor.experimental.pruning_recipes.patterns.pattern.patternbase method)": [[256, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PatternBase.reduce"]], "reshape() (neural_compressor.experimental.pruning_recipes.patterns.pattern.patternbase method)": [[256, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PatternBase.reshape"]], "support_pattern() (neural_compressor.experimental.pruning_recipes.patterns.pattern.patterns class method)": [[256, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS.support_pattern"]], "tilepatternbase (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[257, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePatternBase"]], "tilepattern_1x1 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[257, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x1"]], "tilepattern_1x16 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[257, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x16"]], "tilepattern_1x2 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[257, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x2"]], "tilepattern_2x2 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[257, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_2x2"]], "tilepattern_4x1 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[257, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_4x1"]], "compute_sparsity() (neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.tilepatternbase method)": [[257, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePatternBase.compute_sparsity"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[257, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"]], "repeat_mask() (neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.tilepatternbase method)": [[257, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePatternBase.repeat_mask"]], "pruning (class in neural_compressor.experimental.pruning_v2)": [[258, "neural_compressor.experimental.pruning_v2.Pruning"]], "tfpruningcallback (class in neural_compressor.experimental.pruning_v2)": [[258, "neural_compressor.experimental.pruning_v2.TfPruningCallback"]], "conf (neural_compressor.experimental.pruning_v2.pruning attribute)": [[258, "neural_compressor.experimental.pruning_v2.Pruning.conf"]], "evaluation_distributed (neural_compressor.experimental.pruning_v2.pruning property)": [[258, "neural_compressor.experimental.pruning_v2.Pruning.evaluation_distributed"]], "execute() (neural_compressor.experimental.pruning_v2.pruning method)": [[258, "neural_compressor.experimental.pruning_v2.Pruning.execute"]], "generate_hooks() (neural_compressor.experimental.pruning_v2.pruning method)": [[258, "neural_compressor.experimental.pruning_v2.Pruning.generate_hooks"]], "get_sparsity_ratio() (neural_compressor.experimental.pruning_v2.pruning method)": [[258, "neural_compressor.experimental.pruning_v2.Pruning.get_sparsity_ratio"]], "neural_compressor.experimental.pruning_v2": [[258, "module-neural_compressor.experimental.pruning_v2"]], "on_after_compute_loss() (neural_compressor.experimental.pruning_v2.tfpruningcallback method)": [[258, "neural_compressor.experimental.pruning_v2.TfPruningCallback.on_after_compute_loss"]], "on_batch_begin() (neural_compressor.experimental.pruning_v2.tfpruningcallback method)": [[258, "neural_compressor.experimental.pruning_v2.TfPruningCallback.on_batch_begin"]], "on_batch_end() (neural_compressor.experimental.pruning_v2.tfpruningcallback method)": [[258, "neural_compressor.experimental.pruning_v2.TfPruningCallback.on_batch_end"]], "on_epoch_begin() (neural_compressor.experimental.pruning_v2.tfpruningcallback method)": [[258, "neural_compressor.experimental.pruning_v2.TfPruningCallback.on_epoch_begin"]], "on_epoch_end() (neural_compressor.experimental.pruning_v2.tfpruningcallback method)": [[258, "neural_compressor.experimental.pruning_v2.TfPruningCallback.on_epoch_end"]], "on_step_begin() (neural_compressor.experimental.pruning_v2.tfpruningcallback method)": [[258, "neural_compressor.experimental.pruning_v2.TfPruningCallback.on_step_begin"]], "on_step_end() (neural_compressor.experimental.pruning_v2.tfpruningcallback method)": [[258, "neural_compressor.experimental.pruning_v2.TfPruningCallback.on_step_end"]], "on_train_begin() (neural_compressor.experimental.pruning_v2.tfpruningcallback method)": [[258, "neural_compressor.experimental.pruning_v2.TfPruningCallback.on_train_begin"]], "on_train_end() (neural_compressor.experimental.pruning_v2.tfpruningcallback method)": [[258, "neural_compressor.experimental.pruning_v2.TfPruningCallback.on_train_end"]], "post_epoch_end() (neural_compressor.experimental.pruning_v2.tfpruningcallback method)": [[258, "neural_compressor.experimental.pruning_v2.TfPruningCallback.post_epoch_end"]], "pre_epoch_begin() (neural_compressor.experimental.pruning_v2.tfpruningcallback method)": [[258, "neural_compressor.experimental.pruning_v2.TfPruningCallback.pre_epoch_begin"]], "pre_process() (neural_compressor.experimental.pruning_v2.pruning method)": [[258, "neural_compressor.experimental.pruning_v2.Pruning.pre_process"]], "prepare() (neural_compressor.experimental.pruning_v2.pruning method)": [[258, "neural_compressor.experimental.pruning_v2.Pruning.prepare"]], "pruners (neural_compressor.experimental.pruning_v2.pruning attribute)": [[258, "neural_compressor.experimental.pruning_v2.Pruning.pruners"]], "pruning_func (neural_compressor.experimental.pruning_v2.pruning property)": [[258, "neural_compressor.experimental.pruning_v2.Pruning.pruning_func"]], "train_distributed (neural_compressor.experimental.pruning_v2.pruning property)": [[258, "neural_compressor.experimental.pruning_v2.Pruning.train_distributed"]], "update_config() (neural_compressor.experimental.pruning_v2.pruning method)": [[258, "neural_compressor.experimental.pruning_v2.Pruning.update_config"]], "neural_compressor.experimental.pytorch_pruner": [[259, "module-neural_compressor.experimental.pytorch_pruner"]], "neural_compressor.experimental.pytorch_pruner.logger": [[260, "module-neural_compressor.experimental.pytorch_pruner.logger"]], "m (neural_compressor.experimental.pytorch_pruner.patterns.patternninm attribute)": [[261, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.M"]], "n (neural_compressor.experimental.pytorch_pruner.patterns.patternninm attribute)": [[261, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.N"]], "pattern (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[261, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern"]], "patternninm (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[261, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM"]], "patternnxm (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[261, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM"]], "block_size (neural_compressor.experimental.pytorch_pruner.patterns.patternnxm attribute)": [[261, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM.block_size"]], "get_block_size_dict() (neural_compressor.experimental.pytorch_pruner.patterns.pattern method)": [[261, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.get_block_size_dict"]], "get_block_size_dict() (neural_compressor.experimental.pytorch_pruner.patterns.patternnxm method)": [[261, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM.get_block_size_dict"]], "get_mask_single() (neural_compressor.experimental.pytorch_pruner.patterns.pattern method)": [[261, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.get_mask_single"]], "get_masks() (neural_compressor.experimental.pytorch_pruner.patterns.pattern method)": [[261, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.get_masks"]], "get_masks_global() (neural_compressor.experimental.pytorch_pruner.patterns.pattern method)": [[261, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.get_masks_global"]], "get_masks_global() (neural_compressor.experimental.pytorch_pruner.patterns.patternninm method)": [[261, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.get_masks_global"]], "get_masks_global() (neural_compressor.experimental.pytorch_pruner.patterns.patternnxm method)": [[261, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM.get_masks_global"]], "get_masks_local() (neural_compressor.experimental.pytorch_pruner.patterns.pattern method)": [[261, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.get_masks_local"]], "get_pattern() (in module neural_compressor.experimental.pytorch_pruner.patterns)": [[261, "neural_compressor.experimental.pytorch_pruner.patterns.get_pattern"]], "get_pattern_lock_masks() (neural_compressor.experimental.pytorch_pruner.patterns.pattern method)": [[261, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.get_pattern_lock_masks"]], "get_pattern_lock_masks() (neural_compressor.experimental.pytorch_pruner.patterns.patternninm method)": [[261, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.get_pattern_lock_masks"]], "get_pattern_lock_masks() (neural_compressor.experimental.pytorch_pruner.patterns.patternnxm method)": [[261, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM.get_pattern_lock_masks"]], "get_sparsity_ratio() (neural_compressor.experimental.pytorch_pruner.patterns.pattern method)": [[261, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.get_sparsity_ratio"]], "get_sparsity_ratio() (neural_compressor.experimental.pytorch_pruner.patterns.patternninm method)": [[261, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.get_sparsity_ratio"]], "get_sparsity_ratio() (neural_compressor.experimental.pytorch_pruner.patterns.patternnxm method)": [[261, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM.get_sparsity_ratio"]], "is_global (neural_compressor.experimental.pytorch_pruner.patterns.pattern attribute)": [[261, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.is_global"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[261, "module-neural_compressor.experimental.pytorch_pruner.patterns"]], "pattern (neural_compressor.experimental.pytorch_pruner.patterns.pattern attribute)": [[261, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.pattern"]], "register_pattern() (in module neural_compressor.experimental.pytorch_pruner.patterns)": [[261, "neural_compressor.experimental.pytorch_pruner.patterns.register_pattern"]], "check_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[262, "neural_compressor.experimental.pytorch_pruner.prune_utils.check_config"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[262, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"]], "parse_not_to_prune() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[262, "neural_compressor.experimental.pytorch_pruner.prune_utils.parse_not_to_prune"]], "parse_to_prune() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[262, "neural_compressor.experimental.pytorch_pruner.prune_utils.parse_to_prune"]], "process_and_check_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[262, "neural_compressor.experimental.pytorch_pruner.prune_utils.process_and_check_config"]], "process_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[262, "neural_compressor.experimental.pytorch_pruner.prune_utils.process_config"]], "reset_non_value_to_default() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[262, "neural_compressor.experimental.pytorch_pruner.prune_utils.reset_non_value_to_default"]], "magnitudepruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[263, "neural_compressor.experimental.pytorch_pruner.pruner.MagnitudePruner"]], "patternlockpruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[263, "neural_compressor.experimental.pytorch_pruner.pruner.PatternLockPruner"]], "pruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[263, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner"]], "snipmomentumpruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[263, "neural_compressor.experimental.pytorch_pruner.pruner.SnipMomentumPruner"]], "snippruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[263, "neural_compressor.experimental.pytorch_pruner.pruner.SnipPruner"]], "check_is_pruned_step() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[263, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.check_is_pruned_step"]], "config (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[263, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.config"]], "current_sparsity_ratio (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[263, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.current_sparsity_ratio"]], "end_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[263, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.end_step"]], "get_pruner() (in module neural_compressor.experimental.pytorch_pruner.pruner)": [[263, "neural_compressor.experimental.pytorch_pruner.pruner.get_pruner"]], "global_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[263, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.global_step"]], "mask_weights() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[263, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.mask_weights"]], "masks (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[263, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.masks"]], "max_sparsity_ratio_per_layer (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[263, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.max_sparsity_ratio_per_layer"]], "modules (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[263, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.modules"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[263, "module-neural_compressor.experimental.pytorch_pruner.pruner"]], "on_after_eval() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[263, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_after_eval"]], "on_after_optimizer_step() (neural_compressor.experimental.pytorch_pruner.pruner.patternlockpruner method)": [[263, "neural_compressor.experimental.pytorch_pruner.pruner.PatternLockPruner.on_after_optimizer_step"]], "on_after_optimizer_step() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[263, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_after_optimizer_step"]], "on_after_optimizer_step() (neural_compressor.experimental.pytorch_pruner.pruner.snipmomentumpruner method)": [[263, "neural_compressor.experimental.pytorch_pruner.pruner.SnipMomentumPruner.on_after_optimizer_step"]], "on_after_optimizer_step() (neural_compressor.experimental.pytorch_pruner.pruner.snippruner method)": [[263, "neural_compressor.experimental.pytorch_pruner.pruner.SnipPruner.on_after_optimizer_step"]], "on_before_eval() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[263, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_before_eval"]], "on_before_optimizer_step() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[263, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_before_optimizer_step"]], "on_epoch_begin() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[263, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_epoch_begin"]], "on_epoch_end() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[263, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_epoch_end"]], "on_step_begin() (neural_compressor.experimental.pytorch_pruner.pruner.patternlockpruner method)": [[263, "neural_compressor.experimental.pytorch_pruner.pruner.PatternLockPruner.on_step_begin"]], "on_step_begin() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[263, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_step_begin"]], "on_step_end() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[263, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_step_end"]], "on_train_begin() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[263, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_train_begin"]], "on_train_end() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[263, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_train_end"]], "pattern (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[263, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.pattern"]], "register_pruners() (in module neural_compressor.experimental.pytorch_pruner.pruner)": [[263, "neural_compressor.experimental.pytorch_pruner.pruner.register_pruners"]], "scheduler (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[263, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.scheduler"]], "scores (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[263, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.scores"]], "start_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[263, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.start_step"]], "target_sparsity_ratio (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[263, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.target_sparsity_ratio"]], "update_frequency_on_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[263, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.update_frequency_on_step"]], "update_scores() (neural_compressor.experimental.pytorch_pruner.pruner.magnitudepruner method)": [[263, "neural_compressor.experimental.pytorch_pruner.pruner.MagnitudePruner.update_scores"]], "update_scores() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[263, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.update_scores"]], "pruning (class in neural_compressor.experimental.pytorch_pruner.pruning)": [[264, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning"]], "config_file_path (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[264, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.config_file_path"]], "get_sparsity_ratio() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[264, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.get_sparsity_ratio"]], "model (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[264, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.model"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[264, "module-neural_compressor.experimental.pytorch_pruner.pruning"]], "on_after_eval() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[264, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_after_eval"]], "on_after_optimizer_step() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[264, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_after_optimizer_step"]], "on_before_eval() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[264, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_before_eval"]], "on_before_optimizer_step() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[264, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_before_optimizer_step"]], "on_epoch_begin() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[264, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_epoch_begin"]], "on_epoch_end() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[264, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_epoch_end"]], "on_step_begin() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[264, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_step_begin"]], "on_step_end() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[264, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_step_end"]], "on_train_begin() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[264, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_train_begin"]], "on_train_end() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[264, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_train_end"]], "prepare() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[264, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.prepare"]], "pruner_info (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[264, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.pruner_info"]], "pruners (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[264, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.pruners"]], "update_items_for_all_pruners() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[264, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.update_items_for_all_pruners"]], "iterativescheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[265, "neural_compressor.experimental.pytorch_pruner.scheduler.IterativeScheduler"]], "oneshotscheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[265, "neural_compressor.experimental.pytorch_pruner.scheduler.OneshotScheduler"]], "scheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[265, "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler"]], "config (neural_compressor.experimental.pytorch_pruner.scheduler.scheduler attribute)": [[265, "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler.config"]], "get_scheduler() (in module neural_compressor.experimental.pytorch_pruner.scheduler)": [[265, "neural_compressor.experimental.pytorch_pruner.scheduler.get_scheduler"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[265, "module-neural_compressor.experimental.pytorch_pruner.scheduler"]], "register_scheduler() (in module neural_compressor.experimental.pytorch_pruner.scheduler)": [[265, "neural_compressor.experimental.pytorch_pruner.scheduler.register_scheduler"]], "update_sparsity_ratio() (neural_compressor.experimental.pytorch_pruner.scheduler.iterativescheduler method)": [[265, "neural_compressor.experimental.pytorch_pruner.scheduler.IterativeScheduler.update_sparsity_ratio"]], "update_sparsity_ratio() (neural_compressor.experimental.pytorch_pruner.scheduler.oneshotscheduler method)": [[265, "neural_compressor.experimental.pytorch_pruner.scheduler.OneshotScheduler.update_sparsity_ratio"]], "update_sparsity_ratio() (neural_compressor.experimental.pytorch_pruner.scheduler.scheduler method)": [[265, "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler.update_sparsity_ratio"]], "quantization (class in neural_compressor.experimental.quantization)": [[266, "neural_compressor.experimental.quantization.Quantization"]], "calib_dataloader (neural_compressor.experimental.quantization.quantization property)": [[266, "neural_compressor.experimental.quantization.Quantization.calib_dataloader"]], "dataset() (neural_compressor.experimental.quantization.quantization method)": [[266, "neural_compressor.experimental.quantization.Quantization.dataset"]], "execute() (neural_compressor.experimental.quantization.quantization method)": [[266, "neural_compressor.experimental.quantization.Quantization.execute"]], "metric (neural_compressor.experimental.quantization.quantization property)": [[266, "neural_compressor.experimental.quantization.Quantization.metric"]], "model (neural_compressor.experimental.quantization.quantization property)": [[266, "neural_compressor.experimental.quantization.Quantization.model"]], "neural_compressor.experimental.quantization": [[266, "module-neural_compressor.experimental.quantization"]], "objective (neural_compressor.experimental.quantization.quantization property)": [[266, "neural_compressor.experimental.quantization.Quantization.objective"]], "postprocess (neural_compressor.experimental.quantization.quantization property)": [[266, "neural_compressor.experimental.quantization.Quantization.postprocess"]], "pre_process() (neural_compressor.experimental.quantization.quantization method)": [[266, "neural_compressor.experimental.quantization.Quantization.pre_process"]], "q_func (neural_compressor.experimental.quantization.quantization property)": [[266, "neural_compressor.experimental.quantization.Quantization.q_func"]], "scheduler (class in neural_compressor.experimental.scheduler)": [[267, "neural_compressor.experimental.scheduler.Scheduler"]], "append() (neural_compressor.experimental.scheduler.scheduler method)": [[267, "neural_compressor.experimental.scheduler.Scheduler.append"]], "combine() (neural_compressor.experimental.scheduler.scheduler method)": [[267, "neural_compressor.experimental.scheduler.Scheduler.combine"]], "eval_func (neural_compressor.experimental.scheduler.scheduler property)": [[267, "neural_compressor.experimental.scheduler.Scheduler.eval_func"]], "model (neural_compressor.experimental.scheduler.scheduler property)": [[267, "neural_compressor.experimental.scheduler.Scheduler.model"]], "neural_compressor.experimental.scheduler": [[267, "module-neural_compressor.experimental.scheduler"]], "train_func (neural_compressor.experimental.scheduler.scheduler property)": [[267, "neural_compressor.experimental.scheduler.Scheduler.train_func"]], "benchmark (class in neural_compressor)": [[268, "neural_compressor.Benchmark"]], "distillationconfig (class in neural_compressor)": [[268, "neural_compressor.DistillationConfig"]], "posttrainingquantconfig (class in neural_compressor)": [[268, "neural_compressor.PostTrainingQuantConfig"]], "quantizationawaretrainingconfig (class in neural_compressor)": [[268, "neural_compressor.QuantizationAwareTrainingConfig"]], "weightpruningconfig (class in neural_compressor)": [[268, "neural_compressor.WeightPruningConfig"]], "approach (neural_compressor.posttrainingquantconfig property)": [[268, "neural_compressor.PostTrainingQuantConfig.approach"]], "approach (neural_compressor.quantizationawaretrainingconfig property)": [[268, "neural_compressor.QuantizationAwareTrainingConfig.approach"]], "criterion (neural_compressor.distillationconfig property)": [[268, "neural_compressor.DistillationConfig.criterion"]], "dataloader() (neural_compressor.benchmark method)": [[268, "neural_compressor.Benchmark.dataloader"]], "metric() (neural_compressor.benchmark method)": [[268, "neural_compressor.Benchmark.metric"]], "neural_compressor": [[268, "module-neural_compressor"]], "optimizer (neural_compressor.distillationconfig property)": [[268, "neural_compressor.DistillationConfig.optimizer"]], "postprocess() (neural_compressor.benchmark method)": [[268, "neural_compressor.Benchmark.postprocess"]], "set_random_seed() (in module neural_compressor)": [[268, "neural_compressor.set_random_seed"]], "set_tensorboard() (in module neural_compressor)": [[268, "neural_compressor.set_tensorboard"]], "set_workspace() (in module neural_compressor)": [[268, "neural_compressor.set_workspace"]], "teacher_model (neural_compressor.distillationconfig property)": [[268, "neural_compressor.DistillationConfig.teacher_model"]], "tuning_criterion (neural_compressor.posttrainingquantconfig property)": [[268, "neural_compressor.PostTrainingQuantConfig.tuning_criterion"]], "weight_compression (neural_compressor.weightpruningconfig property)": [[268, "neural_compressor.WeightPruningConfig.weight_compression"]], "bleu (class in neural_compressor.metric.bleu)": [[269, "neural_compressor.metric.bleu.BLEU"]], "unicoderegex (class in neural_compressor.metric.bleu)": [[269, "neural_compressor.metric.bleu.UnicodeRegex"]], "bleu_tokenize() (in module neural_compressor.metric.bleu)": [[269, "neural_compressor.metric.bleu.bleu_tokenize"]], "labels (neural_compressor.metric.bleu.bleu attribute)": [[269, "neural_compressor.metric.bleu.BLEU.labels"]], "neural_compressor.metric.bleu": [[269, "module-neural_compressor.metric.bleu"]], "nondigit_punct_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[269, "neural_compressor.metric.bleu.UnicodeRegex.nondigit_punct_re"]], "predictions (neural_compressor.metric.bleu.bleu attribute)": [[269, "neural_compressor.metric.bleu.BLEU.predictions"]], "property_chars() (neural_compressor.metric.bleu.unicoderegex method)": [[269, "neural_compressor.metric.bleu.UnicodeRegex.property_chars"]], "punct_nondigit_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[269, "neural_compressor.metric.bleu.UnicodeRegex.punct_nondigit_re"]], "reset() (neural_compressor.metric.bleu.bleu method)": [[269, "neural_compressor.metric.bleu.BLEU.reset"]], "result() (neural_compressor.metric.bleu.bleu method)": [[269, "neural_compressor.metric.bleu.BLEU.result"]], "symbol_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[269, "neural_compressor.metric.bleu.UnicodeRegex.symbol_re"]], "update() (neural_compressor.metric.bleu.bleu method)": [[269, "neural_compressor.metric.bleu.BLEU.update"]], "compute_bleu() (in module neural_compressor.metric.bleu_util)": [[270, "neural_compressor.metric.bleu_util.compute_bleu"]], "neural_compressor.metric.bleu_util": [[270, "module-neural_compressor.metric.bleu_util"]], "neural_compressor.metric.coco_label_map": [[271, "module-neural_compressor.metric.coco_label_map"]], "cocoevalwrapper (class in neural_compressor.metric.coco_tools)": [[272, "neural_compressor.metric.coco_tools.COCOEvalWrapper"]], "cocowrapper (class in neural_compressor.metric.coco_tools)": [[272, "neural_compressor.metric.coco_tools.COCOWrapper"]], "computemetrics() (neural_compressor.metric.coco_tools.cocoevalwrapper method)": [[272, "neural_compressor.metric.coco_tools.COCOEvalWrapper.ComputeMetrics"]], "exportsingleimagedetectionboxestococo() (in module neural_compressor.metric.coco_tools)": [[272, "neural_compressor.metric.coco_tools.ExportSingleImageDetectionBoxesToCoco"]], "exportsingleimagedetectionmaskstococo() (in module neural_compressor.metric.coco_tools)": [[272, "neural_compressor.metric.coco_tools.ExportSingleImageDetectionMasksToCoco"]], "exportsingleimagegroundtruthtococo() (in module neural_compressor.metric.coco_tools)": [[272, "neural_compressor.metric.coco_tools.ExportSingleImageGroundtruthToCoco"]], "getagnosticmode() (neural_compressor.metric.coco_tools.cocoevalwrapper method)": [[272, "neural_compressor.metric.coco_tools.COCOEvalWrapper.GetAgnosticMode"]], "getcategory() (neural_compressor.metric.coco_tools.cocoevalwrapper method)": [[272, "neural_compressor.metric.coco_tools.COCOEvalWrapper.GetCategory"]], "getcategoryidlist() (neural_compressor.metric.coco_tools.cocoevalwrapper method)": [[272, "neural_compressor.metric.coco_tools.COCOEvalWrapper.GetCategoryIdList"]], "loadannotations() (neural_compressor.metric.coco_tools.cocowrapper method)": [[272, "neural_compressor.metric.coco_tools.COCOWrapper.LoadAnnotations"]], "accumulate() (neural_compressor.metric.coco_tools.cocoevalwrapper method)": [[272, "neural_compressor.metric.coco_tools.COCOEvalWrapper.accumulate"]], "dataset (neural_compressor.metric.coco_tools.cocowrapper attribute)": [[272, "neural_compressor.metric.coco_tools.COCOWrapper.dataset"]], "detection_type (neural_compressor.metric.coco_tools.cocowrapper attribute)": [[272, "neural_compressor.metric.coco_tools.COCOWrapper.detection_type"]], "neural_compressor.metric.coco_tools": [[272, "module-neural_compressor.metric.coco_tools"]], "evaluate() (in module neural_compressor.metric.evaluate_squad)": [[273, "neural_compressor.metric.evaluate_squad.evaluate"]], "exact_match_score() (in module neural_compressor.metric.evaluate_squad)": [[273, "neural_compressor.metric.evaluate_squad.exact_match_score"]], "f1_score() (in module neural_compressor.metric.evaluate_squad)": [[273, "neural_compressor.metric.evaluate_squad.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.metric.evaluate_squad)": [[273, "neural_compressor.metric.evaluate_squad.metric_max_over_ground_truths"]], "neural_compressor.metric.evaluate_squad": [[273, "module-neural_compressor.metric.evaluate_squad"]], "evaluate() (in module neural_compressor.metric.f1)": [[274, "neural_compressor.metric.f1.evaluate"]], "f1_score() (in module neural_compressor.metric.f1)": [[274, "neural_compressor.metric.f1.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.metric.f1)": [[274, "neural_compressor.metric.f1.metric_max_over_ground_truths"]], "neural_compressor.metric.f1": [[274, "module-neural_compressor.metric.f1"]], "normalize_answer() (in module neural_compressor.metric.f1)": [[274, "neural_compressor.metric.f1.normalize_answer"]], "basemetric (class in neural_compressor.metric)": [[275, "neural_compressor.metric.BaseMetric"]], "metrics (class in neural_compressor.metric)": [[275, "neural_compressor.metric.METRICS"]], "metric (class in neural_compressor.metric)": [[275, "neural_compressor.metric.Metric"]], "hvd (neural_compressor.metric.basemetric property)": [[275, "neural_compressor.metric.BaseMetric.hvd"]], "metric (neural_compressor.metric.basemetric property)": [[275, "neural_compressor.metric.BaseMetric.metric"]], "metric_registry() (in module neural_compressor.metric)": [[275, "neural_compressor.metric.metric_registry"]], "metrics (neural_compressor.metric.metrics attribute)": [[275, "neural_compressor.metric.METRICS.metrics"]], "neural_compressor.metric": [[275, "module-neural_compressor.metric"]], "register() (neural_compressor.metric.metrics method)": [[275, "neural_compressor.metric.METRICS.register"]], "reset() (neural_compressor.metric.basemetric method)": [[275, "neural_compressor.metric.BaseMetric.reset"]], "result() (neural_compressor.metric.basemetric method)": [[275, "neural_compressor.metric.BaseMetric.result"]], "update() (neural_compressor.metric.basemetric method)": [[275, "neural_compressor.metric.BaseMetric.update"]], "accuracy (class in neural_compressor.metric.metric)": [[276, "neural_compressor.metric.metric.Accuracy"]], "basemetric (class in neural_compressor.metric.metric)": [[276, "neural_compressor.metric.metric.BaseMetric"]], "cocomapv2 (class in neural_compressor.metric.metric)": [[276, "neural_compressor.metric.metric.COCOmAPv2"]], "f1 (class in neural_compressor.metric.metric)": [[276, "neural_compressor.metric.metric.F1"]], "generaltopk (class in neural_compressor.metric.metric)": [[276, "neural_compressor.metric.metric.GeneralTopK"]], "loss (class in neural_compressor.metric.metric)": [[276, "neural_compressor.metric.metric.Loss"]], "mae (class in neural_compressor.metric.metric)": [[276, "neural_compressor.metric.metric.MAE"]], "metrics (class in neural_compressor.metric.metric)": [[276, "neural_compressor.metric.metric.METRICS"]], "mse (class in neural_compressor.metric.metric)": [[276, "neural_compressor.metric.metric.MSE"]], "mxnetmetrics (class in neural_compressor.metric.metric)": [[276, "neural_compressor.metric.metric.MXNetMetrics"]], "metric (class in neural_compressor.metric.metric)": [[276, "neural_compressor.metric.metric.Metric"]], "onnxrtglue (class in neural_compressor.metric.metric)": [[276, "neural_compressor.metric.metric.ONNXRTGLUE"]], "onnxrtitmetrics (class in neural_compressor.metric.metric)": [[276, "neural_compressor.metric.metric.ONNXRTITMetrics"]], "onnxrtqlmetrics (class in neural_compressor.metric.metric)": [[276, "neural_compressor.metric.metric.ONNXRTQLMetrics"]], "pytorchloss (class in neural_compressor.metric.metric)": [[276, "neural_compressor.metric.metric.PyTorchLoss"]], "pytorchmetrics (class in neural_compressor.metric.metric)": [[276, "neural_compressor.metric.metric.PyTorchMetrics"]], "rmse (class in neural_compressor.metric.metric)": [[276, "neural_compressor.metric.metric.RMSE"]], "roc (class in neural_compressor.metric.metric)": [[276, "neural_compressor.metric.metric.ROC"]], "squadf1 (class in neural_compressor.metric.metric)": [[276, "neural_compressor.metric.metric.SquadF1"]], "tensorflowcocomap (class in neural_compressor.metric.metric)": [[276, "neural_compressor.metric.metric.TensorflowCOCOMAP"]], "tensorflowmap (class in neural_compressor.metric.metric)": [[276, "neural_compressor.metric.metric.TensorflowMAP"]], "tensorflowmetrics (class in neural_compressor.metric.metric)": [[276, "neural_compressor.metric.metric.TensorflowMetrics"]], "tensorflowtopk (class in neural_compressor.metric.metric)": [[276, "neural_compressor.metric.metric.TensorflowTopK"]], "tensorflowvocmap (class in neural_compressor.metric.metric)": [[276, "neural_compressor.metric.metric.TensorflowVOCMAP"]], "wrapmxnetmetric (class in neural_compressor.metric.metric)": [[276, "neural_compressor.metric.metric.WrapMXNetMetric"]], "wraponnxrtmetric (class in neural_compressor.metric.metric)": [[276, "neural_compressor.metric.metric.WrapONNXRTMetric"]], "wrappytorchmetric (class in neural_compressor.metric.metric)": [[276, "neural_compressor.metric.metric.WrapPyTorchMetric"]], "compare_label (neural_compressor.metric.metric.mae attribute)": [[276, "neural_compressor.metric.metric.MAE.compare_label"]], "compare_label (neural_compressor.metric.metric.mse attribute)": [[276, "neural_compressor.metric.metric.MSE.compare_label"]], "compute() (neural_compressor.metric.metric.pytorchloss method)": [[276, "neural_compressor.metric.metric.PyTorchLoss.compute"]], "hvd (neural_compressor.metric.metric.basemetric property)": [[276, "neural_compressor.metric.metric.BaseMetric.hvd"]], "k (neural_compressor.metric.metric.generaltopk attribute)": [[276, "neural_compressor.metric.metric.GeneralTopK.k"]], "k (neural_compressor.metric.metric.tensorflowtopk attribute)": [[276, "neural_compressor.metric.metric.TensorflowTopK.k"]], "label_list (neural_compressor.metric.metric.accuracy attribute)": [[276, "neural_compressor.metric.metric.Accuracy.label_list"]], "label_list (neural_compressor.metric.metric.mae attribute)": [[276, "neural_compressor.metric.metric.MAE.label_list"]], "label_list (neural_compressor.metric.metric.mse attribute)": [[276, "neural_compressor.metric.metric.MSE.label_list"]], "miou (class in neural_compressor.metric.metric)": [[276, "neural_compressor.metric.metric.mIOU"]], "metric (neural_compressor.metric.metric.basemetric property)": [[276, "neural_compressor.metric.metric.BaseMetric.metric"]], "metric_registry() (in module neural_compressor.metric.metric)": [[276, "neural_compressor.metric.metric.metric_registry"]], "metrics (neural_compressor.metric.metric.metrics attribute)": [[276, "neural_compressor.metric.metric.METRICS.metrics"]], "metrics (neural_compressor.metric.metric.mxnetmetrics attribute)": [[276, "neural_compressor.metric.metric.MXNetMetrics.metrics"]], "metrics (neural_compressor.metric.metric.onnxrtitmetrics attribute)": [[276, "neural_compressor.metric.metric.ONNXRTITMetrics.metrics"]], "metrics (neural_compressor.metric.metric.onnxrtqlmetrics attribute)": [[276, "neural_compressor.metric.metric.ONNXRTQLMetrics.metrics"]], "metrics (neural_compressor.metric.metric.pytorchmetrics attribute)": [[276, "neural_compressor.metric.metric.PyTorchMetrics.metrics"]], "metrics (neural_compressor.metric.metric.tensorflowmetrics attribute)": [[276, "neural_compressor.metric.metric.TensorflowMetrics.metrics"]], "mse (neural_compressor.metric.metric.rmse attribute)": [[276, "neural_compressor.metric.metric.RMSE.mse"]], "neural_compressor.metric.metric": [[276, "module-neural_compressor.metric.metric"]], "num_correct (neural_compressor.metric.metric.generaltopk attribute)": [[276, "neural_compressor.metric.metric.GeneralTopK.num_correct"]], "num_correct (neural_compressor.metric.metric.tensorflowtopk attribute)": [[276, "neural_compressor.metric.metric.TensorflowTopK.num_correct"]], "num_sample (neural_compressor.metric.metric.generaltopk attribute)": [[276, "neural_compressor.metric.metric.GeneralTopK.num_sample"]], "num_sample (neural_compressor.metric.metric.tensorflowtopk attribute)": [[276, "neural_compressor.metric.metric.TensorflowTopK.num_sample"]], "pred_list (neural_compressor.metric.metric.accuracy attribute)": [[276, "neural_compressor.metric.metric.Accuracy.pred_list"]], "pred_list (neural_compressor.metric.metric.mae attribute)": [[276, "neural_compressor.metric.metric.MAE.pred_list"]], "pred_list (neural_compressor.metric.metric.mse attribute)": [[276, "neural_compressor.metric.metric.MSE.pred_list"]], "register() (neural_compressor.metric.metric.metrics method)": [[276, "neural_compressor.metric.metric.METRICS.register"]], "reset() (neural_compressor.metric.metric.accuracy method)": [[276, "neural_compressor.metric.metric.Accuracy.reset"]], "reset() (neural_compressor.metric.metric.basemetric method)": [[276, "neural_compressor.metric.metric.BaseMetric.reset"]], "reset() (neural_compressor.metric.metric.cocomapv2 method)": [[276, "neural_compressor.metric.metric.COCOmAPv2.reset"]], "reset() (neural_compressor.metric.metric.f1 method)": [[276, "neural_compressor.metric.metric.F1.reset"]], "reset() (neural_compressor.metric.metric.generaltopk method)": [[276, "neural_compressor.metric.metric.GeneralTopK.reset"]], "reset() (neural_compressor.metric.metric.loss method)": [[276, "neural_compressor.metric.metric.Loss.reset"]], "reset() (neural_compressor.metric.metric.mae method)": [[276, "neural_compressor.metric.metric.MAE.reset"]], "reset() (neural_compressor.metric.metric.mse method)": [[276, "neural_compressor.metric.metric.MSE.reset"]], "reset() (neural_compressor.metric.metric.onnxrtglue method)": [[276, "neural_compressor.metric.metric.ONNXRTGLUE.reset"]], "reset() (neural_compressor.metric.metric.pytorchloss method)": [[276, "neural_compressor.metric.metric.PyTorchLoss.reset"]], "reset() (neural_compressor.metric.metric.rmse method)": [[276, "neural_compressor.metric.metric.RMSE.reset"]], "reset() (neural_compressor.metric.metric.roc method)": [[276, "neural_compressor.metric.metric.ROC.reset"]], "reset() (neural_compressor.metric.metric.squadf1 method)": [[276, "neural_compressor.metric.metric.SquadF1.reset"]], "reset() (neural_compressor.metric.metric.tensorflowmap method)": [[276, "neural_compressor.metric.metric.TensorflowMAP.reset"]], "reset() (neural_compressor.metric.metric.tensorflowtopk method)": [[276, "neural_compressor.metric.metric.TensorflowTopK.reset"]], "reset() (neural_compressor.metric.metric.wrapmxnetmetric method)": [[276, "neural_compressor.metric.metric.WrapMXNetMetric.reset"]], "reset() (neural_compressor.metric.metric.wraponnxrtmetric method)": [[276, "neural_compressor.metric.metric.WrapONNXRTMetric.reset"]], "reset() (neural_compressor.metric.metric.wrappytorchmetric method)": [[276, "neural_compressor.metric.metric.WrapPyTorchMetric.reset"]], "reset() (neural_compressor.metric.metric.miou method)": [[276, "neural_compressor.metric.metric.mIOU.reset"]], "result() (neural_compressor.metric.metric.accuracy method)": [[276, "neural_compressor.metric.metric.Accuracy.result"]], "result() (neural_compressor.metric.metric.basemetric method)": [[276, "neural_compressor.metric.metric.BaseMetric.result"]], "result() (neural_compressor.metric.metric.cocomapv2 method)": [[276, "neural_compressor.metric.metric.COCOmAPv2.result"]], "result() (neural_compressor.metric.metric.f1 method)": [[276, "neural_compressor.metric.metric.F1.result"]], "result() (neural_compressor.metric.metric.generaltopk method)": [[276, "neural_compressor.metric.metric.GeneralTopK.result"]], "result() (neural_compressor.metric.metric.loss method)": [[276, "neural_compressor.metric.metric.Loss.result"]], "result() (neural_compressor.metric.metric.mae method)": [[276, "neural_compressor.metric.metric.MAE.result"]], "result() (neural_compressor.metric.metric.mse method)": [[276, "neural_compressor.metric.metric.MSE.result"]], "result() (neural_compressor.metric.metric.onnxrtglue method)": [[276, "neural_compressor.metric.metric.ONNXRTGLUE.result"]], "result() (neural_compressor.metric.metric.rmse method)": [[276, "neural_compressor.metric.metric.RMSE.result"]], "result() (neural_compressor.metric.metric.roc method)": [[276, "neural_compressor.metric.metric.ROC.result"]], "result() (neural_compressor.metric.metric.squadf1 method)": [[276, "neural_compressor.metric.metric.SquadF1.result"]], "result() (neural_compressor.metric.metric.tensorflowmap method)": [[276, "neural_compressor.metric.metric.TensorflowMAP.result"]], "result() (neural_compressor.metric.metric.tensorflowtopk method)": [[276, "neural_compressor.metric.metric.TensorflowTopK.result"]], "result() (neural_compressor.metric.metric.wrapmxnetmetric method)": [[276, "neural_compressor.metric.metric.WrapMXNetMetric.result"]], "result() (neural_compressor.metric.metric.wraponnxrtmetric method)": [[276, "neural_compressor.metric.metric.WrapONNXRTMetric.result"]], "result() (neural_compressor.metric.metric.wrappytorchmetric method)": [[276, "neural_compressor.metric.metric.WrapPyTorchMetric.result"]], "result() (neural_compressor.metric.metric.miou method)": [[276, "neural_compressor.metric.metric.mIOU.result"]], "sample (neural_compressor.metric.metric.accuracy attribute)": [[276, "neural_compressor.metric.metric.Accuracy.sample"]], "sample (neural_compressor.metric.metric.loss attribute)": [[276, "neural_compressor.metric.metric.Loss.sample"]], "sum (neural_compressor.metric.metric.loss attribute)": [[276, "neural_compressor.metric.metric.Loss.sum"]], "update() (neural_compressor.metric.metric.accuracy method)": [[276, "neural_compressor.metric.metric.Accuracy.update"]], "update() (neural_compressor.metric.metric.basemetric method)": [[276, "neural_compressor.metric.metric.BaseMetric.update"]], "update() (neural_compressor.metric.metric.cocomapv2 method)": [[276, "neural_compressor.metric.metric.COCOmAPv2.update"]], "update() (neural_compressor.metric.metric.f1 method)": [[276, "neural_compressor.metric.metric.F1.update"]], "update() (neural_compressor.metric.metric.generaltopk method)": [[276, "neural_compressor.metric.metric.GeneralTopK.update"]], "update() (neural_compressor.metric.metric.loss method)": [[276, "neural_compressor.metric.metric.Loss.update"]], "update() (neural_compressor.metric.metric.mae method)": [[276, "neural_compressor.metric.metric.MAE.update"]], "update() (neural_compressor.metric.metric.mse method)": [[276, "neural_compressor.metric.metric.MSE.update"]], "update() (neural_compressor.metric.metric.onnxrtglue method)": [[276, "neural_compressor.metric.metric.ONNXRTGLUE.update"]], "update() (neural_compressor.metric.metric.pytorchloss method)": [[276, "neural_compressor.metric.metric.PyTorchLoss.update"]], "update() (neural_compressor.metric.metric.rmse method)": [[276, "neural_compressor.metric.metric.RMSE.update"]], "update() (neural_compressor.metric.metric.roc method)": [[276, "neural_compressor.metric.metric.ROC.update"]], "update() (neural_compressor.metric.metric.squadf1 method)": [[276, "neural_compressor.metric.metric.SquadF1.update"]], "update() (neural_compressor.metric.metric.tensorflowmap method)": [[276, "neural_compressor.metric.metric.TensorflowMAP.update"]], "update() (neural_compressor.metric.metric.tensorflowtopk method)": [[276, "neural_compressor.metric.metric.TensorflowTopK.update"]], "update() (neural_compressor.metric.metric.wrapmxnetmetric method)": [[276, "neural_compressor.metric.metric.WrapMXNetMetric.update"]], "update() (neural_compressor.metric.metric.wraponnxrtmetric method)": [[276, "neural_compressor.metric.metric.WrapONNXRTMetric.update"]], "update() (neural_compressor.metric.metric.wrappytorchmetric method)": [[276, "neural_compressor.metric.metric.WrapPyTorchMetric.update"]], "update() (neural_compressor.metric.metric.miou method)": [[276, "neural_compressor.metric.metric.mIOU.update"]], "fit() (in module neural_compressor.mix_precision)": [[277, "neural_compressor.mix_precision.fit"]], "neural_compressor.mix_precision": [[277, "module-neural_compressor.mix_precision"]], "basemodel (class in neural_compressor.model.base_model)": [[278, "neural_compressor.model.base_model.BaseModel"]], "export() (neural_compressor.model.base_model.basemodel method)": [[278, "neural_compressor.model.base_model.BaseModel.export"]], "framework() (neural_compressor.model.base_model.basemodel method)": [[278, "neural_compressor.model.base_model.BaseModel.framework"]], "graph_info (neural_compressor.model.base_model.basemodel property)": [[278, "neural_compressor.model.base_model.BaseModel.graph_info"]], "model (neural_compressor.model.base_model.basemodel property)": [[278, "neural_compressor.model.base_model.BaseModel.model"]], "neural_compressor.model.base_model": [[278, "module-neural_compressor.model.base_model"]], "save() (neural_compressor.model.base_model.basemodel method)": [[278, "neural_compressor.model.base_model.BaseModel.save"]], "basemodel (class in neural_compressor.model)": [[279, "neural_compressor.model.BaseModel"]], "model (class in neural_compressor.model)": [[279, "neural_compressor.model.Model"]], "export() (neural_compressor.model.basemodel method)": [[279, "neural_compressor.model.BaseModel.export"]], "framework() (neural_compressor.model.basemodel method)": [[279, "neural_compressor.model.BaseModel.framework"]], "graph_info (neural_compressor.model.basemodel property)": [[279, "neural_compressor.model.BaseModel.graph_info"]], "model (neural_compressor.model.basemodel property)": [[279, "neural_compressor.model.BaseModel.model"]], "neural_compressor.model": [[279, "module-neural_compressor.model"]], "save() (neural_compressor.model.basemodel method)": [[279, "neural_compressor.model.BaseModel.save"]], "kerasmodel (class in neural_compressor.model.keras_model)": [[280, "neural_compressor.model.keras_model.KerasModel"]], "framework() (neural_compressor.model.keras_model.kerasmodel method)": [[280, "neural_compressor.model.keras_model.KerasModel.framework"]], "graph_info (neural_compressor.model.keras_model.kerasmodel property)": [[280, "neural_compressor.model.keras_model.KerasModel.graph_info"]], "model (neural_compressor.model.keras_model.kerasmodel property)": [[280, "neural_compressor.model.keras_model.KerasModel.model"]], "neural_compressor.model.keras_model": [[280, "module-neural_compressor.model.keras_model"]], "q_config (neural_compressor.model.keras_model.kerasmodel property)": [[280, "neural_compressor.model.keras_model.KerasModel.q_config"]], "save() (neural_compressor.model.keras_model.kerasmodel method)": [[280, "neural_compressor.model.keras_model.KerasModel.save"]], "model (class in neural_compressor.model.model)": [[281, "neural_compressor.model.model.Model"]], "get_model_fwk_name() (in module neural_compressor.model.model)": [[281, "neural_compressor.model.model.get_model_fwk_name"]], "neural_compressor.model.model": [[281, "module-neural_compressor.model.model"]], "mxnetmodel (class in neural_compressor.model.mxnet_model)": [[282, "neural_compressor.model.mxnet_model.MXNetModel"]], "framework() (neural_compressor.model.mxnet_model.mxnetmodel method)": [[282, "neural_compressor.model.mxnet_model.MXNetModel.framework"]], "model (neural_compressor.model.mxnet_model.mxnetmodel property)": [[282, "neural_compressor.model.mxnet_model.MXNetModel.model"]], "neural_compressor.model.mxnet_model": [[282, "module-neural_compressor.model.mxnet_model"]], "save() (neural_compressor.model.mxnet_model.mxnetmodel method)": [[282, "neural_compressor.model.mxnet_model.MXNetModel.save"]], "tfslimnetsfactory (class in neural_compressor.model.nets_factory)": [[283, "neural_compressor.model.nets_factory.TFSlimNetsFactory"]], "neural_compressor.model.nets_factory": [[283, "module-neural_compressor.model.nets_factory"]], "register() (neural_compressor.model.nets_factory.tfslimnetsfactory method)": [[283, "neural_compressor.model.nets_factory.TFSlimNetsFactory.register"]], "onnxmodel (class in neural_compressor.model.onnx_model)": [[284, "neural_compressor.model.onnx_model.ONNXModel"]], "add_initializer() (neural_compressor.model.onnx_model.onnxmodel method)": [[284, "neural_compressor.model.onnx_model.ONNXModel.add_initializer"]], "add_initializers() (neural_compressor.model.onnx_model.onnxmodel method)": [[284, "neural_compressor.model.onnx_model.ONNXModel.add_initializers"]], "add_node() (neural_compressor.model.onnx_model.onnxmodel method)": [[284, "neural_compressor.model.onnx_model.ONNXModel.add_node"]], "add_nodes() (neural_compressor.model.onnx_model.onnxmodel method)": [[284, "neural_compressor.model.onnx_model.ONNXModel.add_nodes"]], "export() (neural_compressor.model.onnx_model.onnxmodel method)": [[284, "neural_compressor.model.onnx_model.ONNXModel.export"]], "find_node_by_name() (neural_compressor.model.onnx_model.onnxmodel method)": [[284, "neural_compressor.model.onnx_model.ONNXModel.find_node_by_name"]], "find_nodes_by_initializer() (neural_compressor.model.onnx_model.onnxmodel method)": [[284, "neural_compressor.model.onnx_model.ONNXModel.find_nodes_by_initializer"]], "framework() (neural_compressor.model.onnx_model.onnxmodel method)": [[284, "neural_compressor.model.onnx_model.ONNXModel.framework"]], "get_children() (neural_compressor.model.onnx_model.onnxmodel method)": [[284, "neural_compressor.model.onnx_model.ONNXModel.get_children"]], "get_initializer() (neural_compressor.model.onnx_model.onnxmodel method)": [[284, "neural_compressor.model.onnx_model.ONNXModel.get_initializer"]], "get_nodes_chain() (neural_compressor.model.onnx_model.onnxmodel method)": [[284, "neural_compressor.model.onnx_model.ONNXModel.get_nodes_chain"]], "get_parent() (neural_compressor.model.onnx_model.onnxmodel method)": [[284, "neural_compressor.model.onnx_model.ONNXModel.get_parent"]], "get_parents() (neural_compressor.model.onnx_model.onnxmodel method)": [[284, "neural_compressor.model.onnx_model.ONNXModel.get_parents"]], "get_scale_zero() (neural_compressor.model.onnx_model.onnxmodel method)": [[284, "neural_compressor.model.onnx_model.ONNXModel.get_scale_zero"]], "graph() (neural_compressor.model.onnx_model.onnxmodel method)": [[284, "neural_compressor.model.onnx_model.ONNXModel.graph"]], "graph_info (neural_compressor.model.onnx_model.onnxmodel property)": [[284, "neural_compressor.model.onnx_model.ONNXModel.graph_info"]], "initializer() (neural_compressor.model.onnx_model.onnxmodel method)": [[284, "neural_compressor.model.onnx_model.ONNXModel.initializer"]], "input() (neural_compressor.model.onnx_model.onnxmodel method)": [[284, "neural_compressor.model.onnx_model.ONNXModel.input"]], "input_name_to_nodes (neural_compressor.model.onnx_model.onnxmodel property)": [[284, "neural_compressor.model.onnx_model.ONNXModel.input_name_to_nodes"]], "ir_version() (neural_compressor.model.onnx_model.onnxmodel method)": [[284, "neural_compressor.model.onnx_model.ONNXModel.ir_version"]], "large_size (neural_compressor.model.onnx_model.onnxmodel property)": [[284, "neural_compressor.model.onnx_model.ONNXModel.large_size"]], "model (neural_compressor.model.onnx_model.onnxmodel property)": [[284, "neural_compressor.model.onnx_model.ONNXModel.model"]], "model_path (neural_compressor.model.onnx_model.onnxmodel property)": [[284, "neural_compressor.model.onnx_model.ONNXModel.model_path"]], "neural_compressor.model.onnx_model": [[284, "module-neural_compressor.model.onnx_model"]], "nodes() (neural_compressor.model.onnx_model.onnxmodel method)": [[284, "neural_compressor.model.onnx_model.ONNXModel.nodes"]], "opset_import() (neural_compressor.model.onnx_model.onnxmodel method)": [[284, "neural_compressor.model.onnx_model.ONNXModel.opset_import"]], "output() (neural_compressor.model.onnx_model.onnxmodel method)": [[284, "neural_compressor.model.onnx_model.ONNXModel.output"]], "output_name_to_node (neural_compressor.model.onnx_model.onnxmodel property)": [[284, "neural_compressor.model.onnx_model.ONNXModel.output_name_to_node"]], "q_config (neural_compressor.model.onnx_model.onnxmodel property)": [[284, "neural_compressor.model.onnx_model.ONNXModel.q_config"]], "remove_initializer() (neural_compressor.model.onnx_model.onnxmodel method)": [[284, "neural_compressor.model.onnx_model.ONNXModel.remove_initializer"]], "remove_initializers() (neural_compressor.model.onnx_model.onnxmodel method)": [[284, "neural_compressor.model.onnx_model.ONNXModel.remove_initializers"]], "remove_node() (neural_compressor.model.onnx_model.onnxmodel method)": [[284, "neural_compressor.model.onnx_model.ONNXModel.remove_node"]], "remove_nodes() (neural_compressor.model.onnx_model.onnxmodel method)": [[284, "neural_compressor.model.onnx_model.ONNXModel.remove_nodes"]], "remove_unused_constant() (neural_compressor.model.onnx_model.onnxmodel method)": [[284, "neural_compressor.model.onnx_model.ONNXModel.remove_unused_constant"]], "replace_input_of_all_nodes() (neural_compressor.model.onnx_model.onnxmodel method)": [[284, "neural_compressor.model.onnx_model.ONNXModel.replace_input_of_all_nodes"]], "replace_node_input() (neural_compressor.model.onnx_model.onnxmodel static method)": [[284, "neural_compressor.model.onnx_model.ONNXModel.replace_node_input"]], "replace_node_output() (neural_compressor.model.onnx_model.onnxmodel static method)": [[284, "neural_compressor.model.onnx_model.ONNXModel.replace_node_output"]], "replace_output_of_all_nodes() (neural_compressor.model.onnx_model.onnxmodel method)": [[284, "neural_compressor.model.onnx_model.ONNXModel.replace_output_of_all_nodes"]], "save() (neural_compressor.model.onnx_model.onnxmodel method)": [[284, "neural_compressor.model.onnx_model.ONNXModel.save"]], "save_model_to_file() (neural_compressor.model.onnx_model.onnxmodel method)": [[284, "neural_compressor.model.onnx_model.ONNXModel.save_model_to_file"]], "set_initializer() (neural_compressor.model.onnx_model.onnxmodel method)": [[284, "neural_compressor.model.onnx_model.ONNXModel.set_initializer"]], "topological_sort() (neural_compressor.model.onnx_model.onnxmodel method)": [[284, "neural_compressor.model.onnx_model.ONNXModel.topological_sort"]], "update() (neural_compressor.model.onnx_model.onnxmodel method)": [[284, "neural_compressor.model.onnx_model.ONNXModel.update"]], "tensorflowbasemodel (class in neural_compressor.model.tensorflow_model)": [[285, "neural_compressor.model.tensorflow_model.TensorflowBaseModel"]], "tensorflowcheckpointmodel (class in neural_compressor.model.tensorflow_model)": [[285, "neural_compressor.model.tensorflow_model.TensorflowCheckpointModel"]], "tensorflowmodel (class in neural_compressor.model.tensorflow_model)": [[285, "neural_compressor.model.tensorflow_model.TensorflowModel"]], "tensorflowqatmodel (class in neural_compressor.model.tensorflow_model)": [[285, "neural_compressor.model.tensorflow_model.TensorflowQATModel"]], "tensorflowsavedmodelmodel (class in neural_compressor.model.tensorflow_model)": [[285, "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel"]], "build_saved_model() (neural_compressor.model.tensorflow_model.tensorflowsavedmodelmodel method)": [[285, "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel.build_saved_model"]], "checkpoint_session() (in module neural_compressor.model.tensorflow_model)": [[285, "neural_compressor.model.tensorflow_model.checkpoint_session"]], "estimator_session() (in module neural_compressor.model.tensorflow_model)": [[285, "neural_compressor.model.tensorflow_model.estimator_session"]], "framework() (neural_compressor.model.tensorflow_model.tensorflowbasemodel method)": [[285, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.framework"]], "frozen_pb_session() (in module neural_compressor.model.tensorflow_model)": [[285, "neural_compressor.model.tensorflow_model.frozen_pb_session"]], "get_all_weight_names() (neural_compressor.model.tensorflow_model.tensorflowsavedmodelmodel method)": [[285, "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel.get_all_weight_names"]], "get_model_type() (in module neural_compressor.model.tensorflow_model)": [[285, "neural_compressor.model.tensorflow_model.get_model_type"]], "get_weight() (neural_compressor.model.tensorflow_model.tensorflowsavedmodelmodel method)": [[285, "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel.get_weight"]], "graph (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[285, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.graph"]], "graph_def (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[285, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.graph_def"]], "graph_def (neural_compressor.model.tensorflow_model.tensorflowcheckpointmodel property)": [[285, "neural_compressor.model.tensorflow_model.TensorflowCheckpointModel.graph_def"]], "graph_def_session() (in module neural_compressor.model.tensorflow_model)": [[285, "neural_compressor.model.tensorflow_model.graph_def_session"]], "graph_info (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[285, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.graph_info"]], "graph_session() (in module neural_compressor.model.tensorflow_model)": [[285, "neural_compressor.model.tensorflow_model.graph_session"]], "input_node_names (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[285, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.input_node_names"]], "input_tensor (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[285, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.input_tensor"]], "input_tensor_names (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[285, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.input_tensor_names"]], "iter_op (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[285, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.iter_op"]], "keras_session() (in module neural_compressor.model.tensorflow_model)": [[285, "neural_compressor.model.tensorflow_model.keras_session"]], "load_saved_model() (in module neural_compressor.model.tensorflow_model)": [[285, "neural_compressor.model.tensorflow_model.load_saved_model"]], "model (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[285, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.model"]], "model (neural_compressor.model.tensorflow_model.tensorflowqatmodel property)": [[285, "neural_compressor.model.tensorflow_model.TensorflowQATModel.model"]], "model (neural_compressor.model.tensorflow_model.tensorflowsavedmodelmodel property)": [[285, "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel.model"]], "model_type (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[285, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.model_type"]], "name (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[285, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.name"]], "neural_compressor.model.tensorflow_model": [[285, "module-neural_compressor.model.tensorflow_model"]], "output_node_names (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[285, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.output_node_names"]], "output_tensor (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[285, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.output_tensor"]], "output_tensor_names (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[285, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.output_tensor_names"]], "q_config (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[285, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.q_config"]], "report_sparsity() (neural_compressor.model.tensorflow_model.tensorflowsavedmodelmodel method)": [[285, "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel.report_sparsity"]], "save() (neural_compressor.model.tensorflow_model.tensorflowbasemodel method)": [[285, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.save"]], "save() (neural_compressor.model.tensorflow_model.tensorflowqatmodel method)": [[285, "neural_compressor.model.tensorflow_model.TensorflowQATModel.save"]], "save() (neural_compressor.model.tensorflow_model.tensorflowsavedmodelmodel method)": [[285, "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel.save"]], "saved_model_session() (in module neural_compressor.model.tensorflow_model)": [[285, "neural_compressor.model.tensorflow_model.saved_model_session"]], "sess (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[285, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.sess"]], "slim_session() (in module neural_compressor.model.tensorflow_model)": [[285, "neural_compressor.model.tensorflow_model.slim_session"]], "update_weights() (neural_compressor.model.tensorflow_model.tensorflowsavedmodelmodel method)": [[285, "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel.update_weights"]], "validate_and_inference_input_output() (in module neural_compressor.model.tensorflow_model)": [[285, "neural_compressor.model.tensorflow_model.validate_and_inference_input_output"]], "validate_graph_node() (in module neural_compressor.model.tensorflow_model)": [[285, "neural_compressor.model.tensorflow_model.validate_graph_node"]], "weights (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[285, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.weights"]], "workspace_path (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[285, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.workspace_path"]], "ipexmodel (class in neural_compressor.model.torch_model)": [[286, "neural_compressor.model.torch_model.IPEXModel"]], "pytorchbasemodel (class in neural_compressor.model.torch_model)": [[286, "neural_compressor.model.torch_model.PyTorchBaseModel"]], "pytorchfxmodel (class in neural_compressor.model.torch_model)": [[286, "neural_compressor.model.torch_model.PyTorchFXModel"]], "pytorchmodel (class in neural_compressor.model.torch_model)": [[286, "neural_compressor.model.torch_model.PyTorchModel"]], "export() (neural_compressor.model.torch_model.pytorchmodel method)": [[286, "neural_compressor.model.torch_model.PyTorchModel.export"]], "export_to_bf16_onnx() (neural_compressor.model.torch_model.pytorchmodel method)": [[286, "neural_compressor.model.torch_model.PyTorchModel.export_to_bf16_onnx"]], "export_to_fp32_onnx() (neural_compressor.model.torch_model.pytorchmodel method)": [[286, "neural_compressor.model.torch_model.PyTorchModel.export_to_fp32_onnx"]], "export_to_int8_onnx() (neural_compressor.model.torch_model.pytorchmodel method)": [[286, "neural_compressor.model.torch_model.PyTorchModel.export_to_int8_onnx"]], "export_to_jit() (neural_compressor.model.torch_model.pytorchmodel method)": [[286, "neural_compressor.model.torch_model.PyTorchModel.export_to_jit"]], "forward() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[286, "neural_compressor.model.torch_model.PyTorchBaseModel.forward"]], "fp32_model (neural_compressor.model.torch_model.pytorchbasemodel property)": [[286, "neural_compressor.model.torch_model.PyTorchBaseModel.fp32_model"]], "framework() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[286, "neural_compressor.model.torch_model.PyTorchBaseModel.framework"]], "generate_forward_pre_hook() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[286, "neural_compressor.model.torch_model.PyTorchBaseModel.generate_forward_pre_hook"]], "get_all_weight_names() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[286, "neural_compressor.model.torch_model.PyTorchBaseModel.get_all_weight_names"]], "get_gradient() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[286, "neural_compressor.model.torch_model.PyTorchBaseModel.get_gradient"]], "get_inputs() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[286, "neural_compressor.model.torch_model.PyTorchBaseModel.get_inputs"]], "get_weight() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[286, "neural_compressor.model.torch_model.PyTorchBaseModel.get_weight"]], "graph_info (neural_compressor.model.torch_model.pytorchmodel property)": [[286, "neural_compressor.model.torch_model.PyTorchModel.graph_info"]], "load_quantized_state_dict() (neural_compressor.model.torch_model.pytorchmodel method)": [[286, "neural_compressor.model.torch_model.PyTorchModel.load_quantized_state_dict"]], "model (neural_compressor.model.torch_model.pytorchbasemodel property)": [[286, "neural_compressor.model.torch_model.PyTorchBaseModel.model"]], "neural_compressor.model.torch_model": [[286, "module-neural_compressor.model.torch_model"]], "prune_weights_() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[286, "neural_compressor.model.torch_model.PyTorchBaseModel.prune_weights_"]], "quantized_state_dict() (neural_compressor.model.torch_model.pytorchmodel method)": [[286, "neural_compressor.model.torch_model.PyTorchModel.quantized_state_dict"]], "register_forward_pre_hook() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[286, "neural_compressor.model.torch_model.PyTorchBaseModel.register_forward_pre_hook"]], "remove_hooks() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[286, "neural_compressor.model.torch_model.PyTorchBaseModel.remove_hooks"]], "report_sparsity() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[286, "neural_compressor.model.torch_model.PyTorchBaseModel.report_sparsity"]], "save() (neural_compressor.model.torch_model.ipexmodel method)": [[286, "neural_compressor.model.torch_model.IPEXModel.save"]], "save() (neural_compressor.model.torch_model.pytorchmodel method)": [[286, "neural_compressor.model.torch_model.PyTorchModel.save"]], "update_gradient() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[286, "neural_compressor.model.torch_model.PyTorchBaseModel.update_gradient"]], "update_weights() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[286, "neural_compressor.model.torch_model.PyTorchBaseModel.update_weights"]], "workspace_path (neural_compressor.model.torch_model.ipexmodel property)": [[286, "neural_compressor.model.torch_model.IPEXModel.workspace_path"]], "workspace_path (neural_compressor.model.torch_model.pytorchmodel property)": [[286, "neural_compressor.model.torch_model.PyTorchModel.workspace_path"]], "accuracy (class in neural_compressor.objective)": [[287, "neural_compressor.objective.Accuracy"]], "footprint (class in neural_compressor.objective)": [[287, "neural_compressor.objective.Footprint"]], "modelsize (class in neural_compressor.objective)": [[287, "neural_compressor.objective.ModelSize"]], "multiobjective (class in neural_compressor.objective)": [[287, "neural_compressor.objective.MultiObjective"]], "objective (class in neural_compressor.objective)": [[287, "neural_compressor.objective.Objective"]], "performance (class in neural_compressor.objective)": [[287, "neural_compressor.objective.Performance"]], "accuracy_meets() (neural_compressor.objective.multiobjective method)": [[287, "neural_compressor.objective.MultiObjective.accuracy_meets"]], "accuracy_target (neural_compressor.objective.multiobjective property)": [[287, "neural_compressor.objective.MultiObjective.accuracy_target"]], "baseline (neural_compressor.objective.multiobjective property)": [[287, "neural_compressor.objective.MultiObjective.baseline"]], "best_result() (neural_compressor.objective.multiobjective method)": [[287, "neural_compressor.objective.MultiObjective.best_result"]], "compare() (neural_compressor.objective.multiobjective method)": [[287, "neural_compressor.objective.MultiObjective.compare"]], "end() (neural_compressor.objective.accuracy method)": [[287, "neural_compressor.objective.Accuracy.end"]], "end() (neural_compressor.objective.footprint method)": [[287, "neural_compressor.objective.Footprint.end"]], "end() (neural_compressor.objective.modelsize method)": [[287, "neural_compressor.objective.ModelSize.end"]], "end() (neural_compressor.objective.multiobjective method)": [[287, "neural_compressor.objective.MultiObjective.end"]], "end() (neural_compressor.objective.objective method)": [[287, "neural_compressor.objective.Objective.end"]], "end() (neural_compressor.objective.performance method)": [[287, "neural_compressor.objective.Performance.end"]], "evaluate() (neural_compressor.objective.multiobjective method)": [[287, "neural_compressor.objective.MultiObjective.evaluate"]], "model (neural_compressor.objective.objective property)": [[287, "neural_compressor.objective.Objective.model"]], "neural_compressor.objective": [[287, "module-neural_compressor.objective"]], "objective_custom_registry() (in module neural_compressor.objective)": [[287, "neural_compressor.objective.objective_custom_registry"]], "objective_registry() (in module neural_compressor.objective)": [[287, "neural_compressor.objective.objective_registry"]], "reset() (neural_compressor.objective.multiobjective method)": [[287, "neural_compressor.objective.MultiObjective.reset"]], "reset() (neural_compressor.objective.objective method)": [[287, "neural_compressor.objective.Objective.reset"]], "result() (neural_compressor.objective.multiobjective method)": [[287, "neural_compressor.objective.MultiObjective.result"]], "result() (neural_compressor.objective.objective method)": [[287, "neural_compressor.objective.Objective.result"]], "result_list() (neural_compressor.objective.objective method)": [[287, "neural_compressor.objective.Objective.result_list"]], "set_model() (neural_compressor.objective.multiobjective method)": [[287, "neural_compressor.objective.MultiObjective.set_model"]], "start() (neural_compressor.objective.accuracy method)": [[287, "neural_compressor.objective.Accuracy.start"]], "start() (neural_compressor.objective.footprint method)": [[287, "neural_compressor.objective.Footprint.start"]], "start() (neural_compressor.objective.modelsize method)": [[287, "neural_compressor.objective.ModelSize.start"]], "start() (neural_compressor.objective.multiobjective method)": [[287, "neural_compressor.objective.MultiObjective.start"]], "start() (neural_compressor.objective.objective method)": [[287, "neural_compressor.objective.Objective.start"]], "start() (neural_compressor.objective.performance method)": [[287, "neural_compressor.objective.Performance.start"]], "gradientcriterion (class in neural_compressor.pruner.criteria)": [[288, "neural_compressor.pruner.criteria.GradientCriterion"]], "magnitudecriterion (class in neural_compressor.pruner.criteria)": [[288, "neural_compressor.pruner.criteria.MagnitudeCriterion"]], "pruningcriterion (class in neural_compressor.pruner.criteria)": [[288, "neural_compressor.pruner.criteria.PruningCriterion"]], "snipcriterion (class in neural_compressor.pruner.criteria)": [[288, "neural_compressor.pruner.criteria.SnipCriterion"]], "snipmomentumcriterion (class in neural_compressor.pruner.criteria)": [[288, "neural_compressor.pruner.criteria.SnipMomentumCriterion"]], "get_criterion() (in module neural_compressor.pruner.criteria)": [[288, "neural_compressor.pruner.criteria.get_criterion"]], "neural_compressor.pruner.criteria": [[288, "module-neural_compressor.pruner.criteria"]], "on_after_optimizer_step() (neural_compressor.pruner.criteria.pruningcriterion method)": [[288, "neural_compressor.pruner.criteria.PruningCriterion.on_after_optimizer_step"]], "on_before_optimizer_step() (neural_compressor.pruner.criteria.gradientcriterion method)": [[288, "neural_compressor.pruner.criteria.GradientCriterion.on_before_optimizer_step"]], "on_before_optimizer_step() (neural_compressor.pruner.criteria.pruningcriterion method)": [[288, "neural_compressor.pruner.criteria.PruningCriterion.on_before_optimizer_step"]], "on_before_optimizer_step() (neural_compressor.pruner.criteria.snipcriterion method)": [[288, "neural_compressor.pruner.criteria.SnipCriterion.on_before_optimizer_step"]], "on_before_optimizer_step() (neural_compressor.pruner.criteria.snipmomentumcriterion method)": [[288, "neural_compressor.pruner.criteria.SnipMomentumCriterion.on_before_optimizer_step"]], "on_step_begin() (neural_compressor.pruner.criteria.magnitudecriterion method)": [[288, "neural_compressor.pruner.criteria.MagnitudeCriterion.on_step_begin"]], "on_step_begin() (neural_compressor.pruner.criteria.pruningcriterion method)": [[288, "neural_compressor.pruner.criteria.PruningCriterion.on_step_begin"]], "register_criterion() (in module neural_compressor.pruner.criteria)": [[288, "neural_compressor.pruner.criteria.register_criterion"]], "scores (neural_compressor.pruner.criteria.gradientcriterion attribute)": [[288, "neural_compressor.pruner.criteria.GradientCriterion.scores"]], "scores (neural_compressor.pruner.criteria.magnitudecriterion attribute)": [[288, "neural_compressor.pruner.criteria.MagnitudeCriterion.scores"]], "scores (neural_compressor.pruner.criteria.pruningcriterion attribute)": [[288, "neural_compressor.pruner.criteria.PruningCriterion.scores"]], "scores (neural_compressor.pruner.criteria.snipcriterion attribute)": [[288, "neural_compressor.pruner.criteria.SnipCriterion.scores"]], "scores (neural_compressor.pruner.criteria.snipmomentumcriterion attribute)": [[288, "neural_compressor.pruner.criteria.SnipMomentumCriterion.scores"]], "neural_compressor.pruner": [[289, "module-neural_compressor.pruner"]], "neural_compressor.pruner.logger": [[290, "module-neural_compressor.pruner.logger"]], "basepattern (class in neural_compressor.pruner.patterns)": [[291, "neural_compressor.pruner.patterns.BasePattern"]], "m (neural_compressor.pruner.patterns.patternninm attribute)": [[291, "neural_compressor.pruner.patterns.PatternNInM.M"]], "n (neural_compressor.pruner.patterns.patternninm attribute)": [[291, "neural_compressor.pruner.patterns.PatternNInM.N"]], "patternninm (class in neural_compressor.pruner.patterns)": [[291, "neural_compressor.pruner.patterns.PatternNInM"]], "patternnxm (class in neural_compressor.pruner.patterns)": [[291, "neural_compressor.pruner.patterns.PatternNxM"]], "adjust_ratio() (neural_compressor.pruner.patterns.basepattern method)": [[291, "neural_compressor.pruner.patterns.BasePattern.adjust_ratio"]], "block_size (neural_compressor.pruner.patterns.patternnxm attribute)": [[291, "neural_compressor.pruner.patterns.PatternNxM.block_size"]], "check_layer_validity() (neural_compressor.pruner.patterns.basepattern method)": [[291, "neural_compressor.pruner.patterns.BasePattern.check_layer_validity"]], "check_layer_validity() (neural_compressor.pruner.patterns.patternninm method)": [[291, "neural_compressor.pruner.patterns.PatternNInM.check_layer_validity"]], "check_layer_validity() (neural_compressor.pruner.patterns.patternnxm method)": [[291, "neural_compressor.pruner.patterns.PatternNxM.check_layer_validity"]], "config (neural_compressor.pruner.patterns.basepattern attribute)": [[291, "neural_compressor.pruner.patterns.BasePattern.config"]], "count_new_masked_cnts() (neural_compressor.pruner.patterns.patternnxm method)": [[291, "neural_compressor.pruner.patterns.PatternNxM.count_new_masked_cnts"]], "get_block_size_dict() (neural_compressor.pruner.patterns.basepattern method)": [[291, "neural_compressor.pruner.patterns.BasePattern.get_block_size_dict"]], "get_block_size_dict() (neural_compressor.pruner.patterns.patternnxm method)": [[291, "neural_compressor.pruner.patterns.PatternNxM.get_block_size_dict"]], "get_ele_mask_per_threshold() (neural_compressor.pruner.patterns.patternninm method)": [[291, "neural_compressor.pruner.patterns.PatternNInM.get_ele_mask_per_threshold"]], "get_least_ninm_mask_from_data() (neural_compressor.pruner.patterns.patternninm method)": [[291, "neural_compressor.pruner.patterns.PatternNInM.get_least_ninm_mask_from_data"]], "get_mask_per_threshold() (neural_compressor.pruner.patterns.patternnxm method)": [[291, "neural_compressor.pruner.patterns.PatternNxM.get_mask_per_threshold"]], "get_masks() (neural_compressor.pruner.patterns.basepattern method)": [[291, "neural_compressor.pruner.patterns.BasePattern.get_masks"]], "get_masks_global() (neural_compressor.pruner.patterns.basepattern method)": [[291, "neural_compressor.pruner.patterns.BasePattern.get_masks_global"]], "get_masks_global() (neural_compressor.pruner.patterns.patternninm method)": [[291, "neural_compressor.pruner.patterns.PatternNInM.get_masks_global"]], "get_masks_global() (neural_compressor.pruner.patterns.patternnxm method)": [[291, "neural_compressor.pruner.patterns.PatternNxM.get_masks_global"]], "get_masks_local() (neural_compressor.pruner.patterns.basepattern method)": [[291, "neural_compressor.pruner.patterns.BasePattern.get_masks_local"]], "get_pattern() (in module neural_compressor.pruner.patterns)": [[291, "neural_compressor.pruner.patterns.get_pattern"]], "get_pattern_lock_masks() (neural_compressor.pruner.patterns.basepattern method)": [[291, "neural_compressor.pruner.patterns.BasePattern.get_pattern_lock_masks"]], "get_pattern_lock_masks() (neural_compressor.pruner.patterns.patternninm method)": [[291, "neural_compressor.pruner.patterns.PatternNInM.get_pattern_lock_masks"]], "get_pattern_lock_masks() (neural_compressor.pruner.patterns.patternnxm method)": [[291, "neural_compressor.pruner.patterns.PatternNxM.get_pattern_lock_masks"]], "get_reduced_masks_from_data() (neural_compressor.pruner.patterns.basepattern method)": [[291, "neural_compressor.pruner.patterns.BasePattern.get_reduced_masks_from_data"]], "get_reduced_masks_from_data() (neural_compressor.pruner.patterns.patternninm method)": [[291, "neural_compressor.pruner.patterns.PatternNInM.get_reduced_masks_from_data"]], "get_reduced_masks_from_data() (neural_compressor.pruner.patterns.patternnxm method)": [[291, "neural_compressor.pruner.patterns.PatternNxM.get_reduced_masks_from_data"]], "get_single_mask_per_target_ratio() (neural_compressor.pruner.patterns.basepattern method)": [[291, "neural_compressor.pruner.patterns.BasePattern.get_single_mask_per_target_ratio"]], "get_sparsity_ratio() (neural_compressor.pruner.patterns.basepattern method)": [[291, "neural_compressor.pruner.patterns.BasePattern.get_sparsity_ratio"]], "get_sparsity_ratio() (neural_compressor.pruner.patterns.patternninm method)": [[291, "neural_compressor.pruner.patterns.PatternNInM.get_sparsity_ratio"]], "get_sparsity_ratio() (neural_compressor.pruner.patterns.patternnxm method)": [[291, "neural_compressor.pruner.patterns.PatternNxM.get_sparsity_ratio"]], "get_sparsity_ratio_each_layer() (neural_compressor.pruner.patterns.basepattern method)": [[291, "neural_compressor.pruner.patterns.BasePattern.get_sparsity_ratio_each_layer"]], "get_sparsity_ratio_progressive() (neural_compressor.pruner.patterns.patternnxm method)": [[291, "neural_compressor.pruner.patterns.PatternNxM.get_sparsity_ratio_progressive"]], "invalid_layers (neural_compressor.pruner.patterns.basepattern attribute)": [[291, "neural_compressor.pruner.patterns.BasePattern.invalid_layers"]], "is_global (neural_compressor.pruner.patterns.basepattern attribute)": [[291, "neural_compressor.pruner.patterns.BasePattern.is_global"]], "keep_mask_layers (neural_compressor.pruner.patterns.basepattern attribute)": [[291, "neural_compressor.pruner.patterns.BasePattern.keep_mask_layers"]], "max_sparsity_ratio_per_op (neural_compressor.pruner.patterns.basepattern attribute)": [[291, "neural_compressor.pruner.patterns.BasePattern.max_sparsity_ratio_per_op"]], "min_sparsity_ratio_per_op (neural_compressor.pruner.patterns.basepattern attribute)": [[291, "neural_compressor.pruner.patterns.BasePattern.min_sparsity_ratio_per_op"]], "modules (neural_compressor.pruner.patterns.basepattern attribute)": [[291, "neural_compressor.pruner.patterns.BasePattern.modules"]], "neural_compressor.pruner.patterns": [[291, "module-neural_compressor.pruner.patterns"]], "pattern (neural_compressor.pruner.patterns.basepattern attribute)": [[291, "neural_compressor.pruner.patterns.BasePattern.pattern"]], "reduce_scores() (neural_compressor.pruner.patterns.patternninm method)": [[291, "neural_compressor.pruner.patterns.PatternNInM.reduce_scores"]], "reduce_scores() (neural_compressor.pruner.patterns.patternnxm method)": [[291, "neural_compressor.pruner.patterns.PatternNxM.reduce_scores"]], "reduce_tensor() (neural_compressor.pruner.patterns.basepattern method)": [[291, "neural_compressor.pruner.patterns.BasePattern.reduce_tensor"]], "register_pattern() (in module neural_compressor.pruner.patterns)": [[291, "neural_compressor.pruner.patterns.register_pattern"]], "reshape_orig_to_pattern() (neural_compressor.pruner.patterns.patternninm method)": [[291, "neural_compressor.pruner.patterns.PatternNInM.reshape_orig_to_pattern"]], "reshape_orig_to_pattern() (neural_compressor.pruner.patterns.patternnxm method)": [[291, "neural_compressor.pruner.patterns.PatternNxM.reshape_orig_to_pattern"]], "reshape_reduced_to_orig() (neural_compressor.pruner.patterns.patternninm method)": [[291, "neural_compressor.pruner.patterns.PatternNInM.reshape_reduced_to_orig"]], "reshape_reduced_to_orig() (neural_compressor.pruner.patterns.patternnxm method)": [[291, "neural_compressor.pruner.patterns.PatternNxM.reshape_reduced_to_orig"]], "target_sparsity (neural_compressor.pruner.patterns.basepattern attribute)": [[291, "neural_compressor.pruner.patterns.BasePattern.target_sparsity"]], "update_new_added_masks() (neural_compressor.pruner.patterns.patternnxm method)": [[291, "neural_compressor.pruner.patterns.PatternNxM.update_new_added_masks"]], "update_progressive_masks() (neural_compressor.pruner.patterns.patternnxm method)": [[291, "neural_compressor.pruner.patterns.PatternNxM.update_progressive_masks"]], "update_progressive_masks_global() (neural_compressor.pruner.patterns.patternnxm method)": [[291, "neural_compressor.pruner.patterns.PatternNxM.update_progressive_masks_global"]], "update_progressive_masks_linear() (neural_compressor.pruner.patterns.patternnxm method)": [[291, "neural_compressor.pruner.patterns.PatternNxM.update_progressive_masks_linear"]], "update_progressive_masks_local() (neural_compressor.pruner.patterns.patternnxm method)": [[291, "neural_compressor.pruner.patterns.PatternNxM.update_progressive_masks_local"]], "update_progressive_masks_scores() (neural_compressor.pruner.patterns.patternnxm method)": [[291, "neural_compressor.pruner.patterns.PatternNxM.update_progressive_masks_scores"]], "update_residual_cnt() (neural_compressor.pruner.patterns.basepattern method)": [[291, "neural_compressor.pruner.patterns.BasePattern.update_residual_cnt"]], "gradientsensitivitypruner (class in neural_compressor.pruner.pruner_legacy.gradient_sensitivity)": [[292, "neural_compressor.pruner.pruner_legacy.gradient_sensitivity.GradientSensitivityPruner"]], "compute_mask() (neural_compressor.pruner.pruner_legacy.gradient_sensitivity.gradientsensitivitypruner method)": [[292, "neural_compressor.pruner.pruner_legacy.gradient_sensitivity.GradientSensitivityPruner.compute_mask"]], "neural_compressor.pruner.pruner_legacy.gradient_sensitivity": [[292, "module-neural_compressor.pruner.pruner_legacy.gradient_sensitivity"]], "on_epoch_begin() (neural_compressor.pruner.pruner_legacy.gradient_sensitivity.gradientsensitivitypruner method)": [[292, "neural_compressor.pruner.pruner_legacy.gradient_sensitivity.GradientSensitivityPruner.on_epoch_begin"]], "on_epoch_end() (neural_compressor.pruner.pruner_legacy.gradient_sensitivity.gradientsensitivitypruner method)": [[292, "neural_compressor.pruner.pruner_legacy.gradient_sensitivity.GradientSensitivityPruner.on_epoch_end"]], "on_step_begin() (neural_compressor.pruner.pruner_legacy.gradient_sensitivity.gradientsensitivitypruner method)": [[292, "neural_compressor.pruner.pruner_legacy.gradient_sensitivity.GradientSensitivityPruner.on_step_begin"]], "on_step_end() (neural_compressor.pruner.pruner_legacy.gradient_sensitivity.gradientsensitivitypruner method)": [[292, "neural_compressor.pruner.pruner_legacy.gradient_sensitivity.GradientSensitivityPruner.on_step_end"]], "parse_weight_name() (neural_compressor.pruner.pruner_legacy.gradient_sensitivity.gradientsensitivitypruner method)": [[292, "neural_compressor.pruner.pruner_legacy.gradient_sensitivity.GradientSensitivityPruner.parse_weight_name"]], "prune_by_importance() (neural_compressor.pruner.pruner_legacy.gradient_sensitivity.gradientsensitivitypruner method)": [[292, "neural_compressor.pruner.pruner_legacy.gradient_sensitivity.GradientSensitivityPruner.prune_by_importance"]], "prune_weight() (neural_compressor.pruner.pruner_legacy.gradient_sensitivity.gradientsensitivitypruner method)": [[292, "neural_compressor.pruner.pruner_legacy.gradient_sensitivity.GradientSensitivityPruner.prune_weight"]], "update_importance_abs() (neural_compressor.pruner.pruner_legacy.gradient_sensitivity.gradientsensitivitypruner method)": [[292, "neural_compressor.pruner.pruner_legacy.gradient_sensitivity.GradientSensitivityPruner.update_importance_abs"]], "update_importance_elementwise() (neural_compressor.pruner.pruner_legacy.gradient_sensitivity.gradientsensitivitypruner method)": [[292, "neural_compressor.pruner.pruner_legacy.gradient_sensitivity.GradientSensitivityPruner.update_importance_elementwise"]], "update_importance_weighted() (neural_compressor.pruner.pruner_legacy.gradient_sensitivity.gradientsensitivitypruner method)": [[292, "neural_compressor.pruner.pruner_legacy.gradient_sensitivity.GradientSensitivityPruner.update_importance_weighted"]], "grouplassopruner (class in neural_compressor.pruner.pruner_legacy.group_lasso)": [[293, "neural_compressor.pruner.pruner_legacy.group_lasso.GroupLassoPruner"]], "neural_compressor.pruner.pruner_legacy.group_lasso": [[293, "module-neural_compressor.pruner.pruner_legacy.group_lasso"]], "on_before_optimizer_step() (neural_compressor.pruner.pruner_legacy.group_lasso.grouplassopruner method)": [[293, "neural_compressor.pruner.pruner_legacy.group_lasso.GroupLassoPruner.on_before_optimizer_step"]], "neural_compressor.pruner.pruner_legacy": [[294, "module-neural_compressor.pruner.pruner_legacy"]], "basicmagnitudepruner (class in neural_compressor.pruner.pruner_legacy.magnitude)": [[295, "neural_compressor.pruner.pruner_legacy.magnitude.BasicMagnitudePruner"]], "compute_mask() (neural_compressor.pruner.pruner_legacy.magnitude.basicmagnitudepruner method)": [[295, "neural_compressor.pruner.pruner_legacy.magnitude.BasicMagnitudePruner.compute_mask"]], "neural_compressor.pruner.pruner_legacy.magnitude": [[295, "module-neural_compressor.pruner.pruner_legacy.magnitude"]], "on_epoch_begin() (neural_compressor.pruner.pruner_legacy.magnitude.basicmagnitudepruner method)": [[295, "neural_compressor.pruner.pruner_legacy.magnitude.BasicMagnitudePruner.on_epoch_begin"]], "on_epoch_end() (neural_compressor.pruner.pruner_legacy.magnitude.basicmagnitudepruner method)": [[295, "neural_compressor.pruner.pruner_legacy.magnitude.BasicMagnitudePruner.on_epoch_end"]], "on_step_begin() (neural_compressor.pruner.pruner_legacy.magnitude.basicmagnitudepruner method)": [[295, "neural_compressor.pruner.pruner_legacy.magnitude.BasicMagnitudePruner.on_step_begin"]], "on_step_end() (neural_compressor.pruner.pruner_legacy.magnitude.basicmagnitudepruner method)": [[295, "neural_compressor.pruner.pruner_legacy.magnitude.BasicMagnitudePruner.on_step_end"]], "patternlockpruner (class in neural_compressor.pruner.pruner_legacy.pattern_lock)": [[296, "neural_compressor.pruner.pruner_legacy.pattern_lock.PatternLockPruner"]], "compute_mask() (neural_compressor.pruner.pruner_legacy.pattern_lock.patternlockpruner method)": [[296, "neural_compressor.pruner.pruner_legacy.pattern_lock.PatternLockPruner.compute_mask"]], "neural_compressor.pruner.pruner_legacy.pattern_lock": [[296, "module-neural_compressor.pruner.pruner_legacy.pattern_lock"]], "on_epoch_begin() (neural_compressor.pruner.pruner_legacy.pattern_lock.patternlockpruner method)": [[296, "neural_compressor.pruner.pruner_legacy.pattern_lock.PatternLockPruner.on_epoch_begin"]], "on_epoch_end() (neural_compressor.pruner.pruner_legacy.pattern_lock.patternlockpruner method)": [[296, "neural_compressor.pruner.pruner_legacy.pattern_lock.PatternLockPruner.on_epoch_end"]], "on_step_begin() (neural_compressor.pruner.pruner_legacy.pattern_lock.patternlockpruner method)": [[296, "neural_compressor.pruner.pruner_legacy.pattern_lock.PatternLockPruner.on_step_begin"]], "on_step_end() (neural_compressor.pruner.pruner_legacy.pattern_lock.patternlockpruner method)": [[296, "neural_compressor.pruner.pruner_legacy.pattern_lock.PatternLockPruner.on_step_end"]], "update_weights() (neural_compressor.pruner.pruner_legacy.pattern_lock.patternlockpruner method)": [[296, "neural_compressor.pruner.pruner_legacy.pattern_lock.PatternLockPruner.update_weights"]], "pruner (class in neural_compressor.pruner.pruner_legacy.pruner)": [[297, "neural_compressor.pruner.pruner_legacy.pruner.Pruner"]], "neural_compressor.pruner.pruner_legacy.pruner": [[297, "module-neural_compressor.pruner.pruner_legacy.pruner"]], "on_before_optimizer_step() (neural_compressor.pruner.pruner_legacy.pruner.pruner method)": [[297, "neural_compressor.pruner.pruner_legacy.pruner.Pruner.on_before_optimizer_step"]], "on_epoch_begin() (neural_compressor.pruner.pruner_legacy.pruner.pruner method)": [[297, "neural_compressor.pruner.pruner_legacy.pruner.Pruner.on_epoch_begin"]], "on_epoch_end() (neural_compressor.pruner.pruner_legacy.pruner.pruner method)": [[297, "neural_compressor.pruner.pruner_legacy.pruner.Pruner.on_epoch_end"]], "on_step_begin() (neural_compressor.pruner.pruner_legacy.pruner.pruner method)": [[297, "neural_compressor.pruner.pruner_legacy.pruner.Pruner.on_step_begin"]], "on_step_end() (neural_compressor.pruner.pruner_legacy.pruner.pruner method)": [[297, "neural_compressor.pruner.pruner_legacy.pruner.Pruner.on_step_end"]], "on_train_begin() (neural_compressor.pruner.pruner_legacy.pruner.pruner method)": [[297, "neural_compressor.pruner.pruner_legacy.pruner.Pruner.on_train_begin"]], "on_train_end() (neural_compressor.pruner.pruner_legacy.pruner.pruner method)": [[297, "neural_compressor.pruner.pruner_legacy.pruner.Pruner.on_train_end"]], "pruner_registry() (in module neural_compressor.pruner.pruner_legacy.pruner)": [[297, "neural_compressor.pruner.pruner_legacy.pruner.pruner_registry"]], "update_sparsity() (neural_compressor.pruner.pruner_legacy.pruner.pruner method)": [[297, "neural_compressor.pruner.pruner_legacy.pruner.Pruner.update_sparsity"]], "basepruner (class in neural_compressor.pruner.pruners)": [[298, "neural_compressor.pruner.pruners.BasePruner"]], "basicpruner (class in neural_compressor.pruner.pruners)": [[298, "neural_compressor.pruner.pruners.BasicPruner"]], "patternlockpruner (class in neural_compressor.pruner.pruners)": [[298, "neural_compressor.pruner.pruners.PatternLockPruner"]], "progressivepruner (class in neural_compressor.pruner.pruners)": [[298, "neural_compressor.pruner.pruners.ProgressivePruner"]], "check_is_pruned_progressive_step() (neural_compressor.pruner.pruners.progressivepruner method)": [[298, "neural_compressor.pruner.pruners.ProgressivePruner.check_is_pruned_progressive_step"]], "check_is_pruned_step() (neural_compressor.pruner.pruners.basepruner method)": [[298, "neural_compressor.pruner.pruners.BasePruner.check_is_pruned_step"]], "check_progressive_validity() (neural_compressor.pruner.pruners.progressivepruner method)": [[298, "neural_compressor.pruner.pruners.ProgressivePruner.check_progressive_validity"]], "config (neural_compressor.pruner.pruners.basepruner attribute)": [[298, "neural_compressor.pruner.pruners.BasePruner.config"]], "criterion (neural_compressor.pruner.pruners.basicpruner attribute)": [[298, "neural_compressor.pruner.pruners.BasicPruner.criterion"]], "current_sparsity_ratio (neural_compressor.pruner.pruners.basepruner attribute)": [[298, "neural_compressor.pruner.pruners.BasePruner.current_sparsity_ratio"]], "end_step (neural_compressor.pruner.pruners.basepruner attribute)": [[298, "neural_compressor.pruner.pruners.BasePruner.end_step"]], "get_pruner() (in module neural_compressor.pruner.pruners)": [[298, "neural_compressor.pruner.pruners.get_pruner"]], "global_step (neural_compressor.pruner.pruners.basepruner attribute)": [[298, "neural_compressor.pruner.pruners.BasePruner.global_step"]], "mask_weights() (neural_compressor.pruner.pruners.basepruner method)": [[298, "neural_compressor.pruner.pruners.BasePruner.mask_weights"]], "mask_weights_general() (neural_compressor.pruner.pruners.basepruner method)": [[298, "neural_compressor.pruner.pruners.BasePruner.mask_weights_general"]], "masks (neural_compressor.pruner.pruners.basepruner attribute)": [[298, "neural_compressor.pruner.pruners.BasePruner.masks"]], "max_sparsity_ratio_per_op (neural_compressor.pruner.pruners.basepruner attribute)": [[298, "neural_compressor.pruner.pruners.BasePruner.max_sparsity_ratio_per_op"]], "modules (neural_compressor.pruner.pruners.basepruner attribute)": [[298, "neural_compressor.pruner.pruners.BasePruner.modules"]], "neural_compressor.pruner.pruners": [[298, "module-neural_compressor.pruner.pruners"]], "on_after_eval() (neural_compressor.pruner.pruners.basepruner method)": [[298, "neural_compressor.pruner.pruners.BasePruner.on_after_eval"]], "on_after_optimizer_step() (neural_compressor.pruner.pruners.basepruner method)": [[298, "neural_compressor.pruner.pruners.BasePruner.on_after_optimizer_step"]], "on_after_optimizer_step() (neural_compressor.pruner.pruners.basicpruner method)": [[298, "neural_compressor.pruner.pruners.BasicPruner.on_after_optimizer_step"]], "on_after_optimizer_step() (neural_compressor.pruner.pruners.patternlockpruner method)": [[298, "neural_compressor.pruner.pruners.PatternLockPruner.on_after_optimizer_step"]], "on_after_optimizer_step() (neural_compressor.pruner.pruners.progressivepruner method)": [[298, "neural_compressor.pruner.pruners.ProgressivePruner.on_after_optimizer_step"]], "on_before_eval() (neural_compressor.pruner.pruners.basepruner method)": [[298, "neural_compressor.pruner.pruners.BasePruner.on_before_eval"]], "on_before_optimizer_step() (neural_compressor.pruner.pruners.basepruner method)": [[298, "neural_compressor.pruner.pruners.BasePruner.on_before_optimizer_step"]], "on_before_optimizer_step() (neural_compressor.pruner.pruners.basicpruner method)": [[298, "neural_compressor.pruner.pruners.BasicPruner.on_before_optimizer_step"]], "on_before_optimizer_step() (neural_compressor.pruner.pruners.progressivepruner method)": [[298, "neural_compressor.pruner.pruners.ProgressivePruner.on_before_optimizer_step"]], "on_epoch_begin() (neural_compressor.pruner.pruners.basepruner method)": [[298, "neural_compressor.pruner.pruners.BasePruner.on_epoch_begin"]], "on_epoch_end() (neural_compressor.pruner.pruners.basepruner method)": [[298, "neural_compressor.pruner.pruners.BasePruner.on_epoch_end"]], "on_step_begin() (neural_compressor.pruner.pruners.basepruner method)": [[298, "neural_compressor.pruner.pruners.BasePruner.on_step_begin"]], "on_step_begin() (neural_compressor.pruner.pruners.progressivepruner method)": [[298, "neural_compressor.pruner.pruners.ProgressivePruner.on_step_begin"]], "on_step_end() (neural_compressor.pruner.pruners.basepruner method)": [[298, "neural_compressor.pruner.pruners.BasePruner.on_step_end"]], "on_train_begin() (neural_compressor.pruner.pruners.basepruner method)": [[298, "neural_compressor.pruner.pruners.BasePruner.on_train_begin"]], "on_train_end() (neural_compressor.pruner.pruners.basepruner method)": [[298, "neural_compressor.pruner.pruners.BasePruner.on_train_end"]], "parse_valid_pruner_types() (in module neural_compressor.pruner.pruners)": [[298, "neural_compressor.pruner.pruners.parse_valid_pruner_types"]], "pattern (neural_compressor.pruner.pruners.basepruner attribute)": [[298, "neural_compressor.pruner.pruners.BasePruner.pattern"]], "pattern (neural_compressor.pruner.pruners.basicpruner attribute)": [[298, "neural_compressor.pruner.pruners.BasicPruner.pattern"]], "print_progressive_sparsity() (neural_compressor.pruner.pruners.progressivepruner method)": [[298, "neural_compressor.pruner.pruners.ProgressivePruner.print_progressive_sparsity"]], "pruning_frequency (neural_compressor.pruner.pruners.basepruner attribute)": [[298, "neural_compressor.pruner.pruners.BasePruner.pruning_frequency"]], "reg (neural_compressor.pruner.pruners.basicpruner attribute)": [[298, "neural_compressor.pruner.pruners.BasicPruner.reg"]], "register_pruner() (in module neural_compressor.pruner.pruners)": [[298, "neural_compressor.pruner.pruners.register_pruner"]], "scheduler (neural_compressor.pruner.pruners.basepruner attribute)": [[298, "neural_compressor.pruner.pruners.BasePruner.scheduler"]], "scheduler (neural_compressor.pruner.pruners.basicpruner attribute)": [[298, "neural_compressor.pruner.pruners.BasicPruner.scheduler"]], "scores (neural_compressor.pruner.pruners.basepruner attribute)": [[298, "neural_compressor.pruner.pruners.BasePruner.scores"]], "set_global_step() (neural_compressor.pruner.pruners.basicpruner method)": [[298, "neural_compressor.pruner.pruners.BasicPruner.set_global_step"]], "start_step (neural_compressor.pruner.pruners.basepruner attribute)": [[298, "neural_compressor.pruner.pruners.BasePruner.start_step"]], "target_sparsity_ratio (neural_compressor.pruner.pruners.basepruner attribute)": [[298, "neural_compressor.pruner.pruners.BasePruner.target_sparsity_ratio"]], "update_masks() (neural_compressor.pruner.pruners.basepruner method)": [[298, "neural_compressor.pruner.pruners.BasePruner.update_masks"]], "update_masks() (neural_compressor.pruner.pruners.basicpruner method)": [[298, "neural_compressor.pruner.pruners.BasicPruner.update_masks"]], "update_masks() (neural_compressor.pruner.pruners.patternlockpruner method)": [[298, "neural_compressor.pruner.pruners.PatternLockPruner.update_masks"]], "update_masks_progressive() (neural_compressor.pruner.pruners.progressivepruner method)": [[298, "neural_compressor.pruner.pruners.ProgressivePruner.update_masks_progressive"]], "pruning (class in neural_compressor.pruner.pruning)": [[299, "neural_compressor.pruner.pruning.Pruning"]], "config_file_path (neural_compressor.pruner.pruning.pruning attribute)": [[299, "neural_compressor.pruner.pruning.Pruning.config_file_path"]], "get_sparsity_ratio() (neural_compressor.pruner.pruning.pruning method)": [[299, "neural_compressor.pruner.pruning.Pruning.get_sparsity_ratio"]], "model (neural_compressor.pruner.pruning.pruning attribute)": [[299, "neural_compressor.pruner.pruning.Pruning.model"]], "model (neural_compressor.pruner.pruning.pruning property)": [[299, "id0"]], "neural_compressor.pruner.pruning": [[299, "module-neural_compressor.pruner.pruning"]], "on_after_eval() (neural_compressor.pruner.pruning.pruning method)": [[299, "neural_compressor.pruner.pruning.Pruning.on_after_eval"]], "on_after_optimizer_step() (neural_compressor.pruner.pruning.pruning method)": [[299, "neural_compressor.pruner.pruning.Pruning.on_after_optimizer_step"]], "on_before_eval() (neural_compressor.pruner.pruning.pruning method)": [[299, "neural_compressor.pruner.pruning.Pruning.on_before_eval"]], "on_before_optimizer_step() (neural_compressor.pruner.pruning.pruning method)": [[299, "neural_compressor.pruner.pruning.Pruning.on_before_optimizer_step"]], "on_epoch_begin() (neural_compressor.pruner.pruning.pruning method)": [[299, "neural_compressor.pruner.pruning.Pruning.on_epoch_begin"]], "on_epoch_end() (neural_compressor.pruner.pruning.pruning method)": [[299, "neural_compressor.pruner.pruning.Pruning.on_epoch_end"]], "on_step_begin() (neural_compressor.pruner.pruning.pruning method)": [[299, "neural_compressor.pruner.pruning.Pruning.on_step_begin"]], "on_step_end() (neural_compressor.pruner.pruning.pruning method)": [[299, "neural_compressor.pruner.pruning.Pruning.on_step_end"]], "on_train_begin() (neural_compressor.pruner.pruning.pruning method)": [[299, "neural_compressor.pruner.pruning.Pruning.on_train_begin"]], "on_train_end() (neural_compressor.pruner.pruning.pruning method)": [[299, "neural_compressor.pruner.pruning.Pruning.on_train_end"]], "pruner_info (neural_compressor.pruner.pruning.pruning attribute)": [[299, "neural_compressor.pruner.pruning.Pruning.pruner_info"]], "pruners (neural_compressor.pruner.pruning.pruning attribute)": [[299, "neural_compressor.pruner.pruning.Pruning.pruners"]], "update_config() (neural_compressor.pruner.pruning.pruning method)": [[299, "neural_compressor.pruner.pruning.Pruning.update_config"]], "basereg (class in neural_compressor.pruner.regs)": [[300, "neural_compressor.pruner.regs.BaseReg"]], "grouplasso (class in neural_compressor.pruner.regs)": [[300, "neural_compressor.pruner.regs.GroupLasso"]], "alpha (neural_compressor.pruner.regs.grouplasso attribute)": [[300, "neural_compressor.pruner.regs.GroupLasso.alpha"]], "get_reg() (in module neural_compressor.pruner.regs)": [[300, "neural_compressor.pruner.regs.get_reg"]], "get_reg_type() (in module neural_compressor.pruner.regs)": [[300, "neural_compressor.pruner.regs.get_reg_type"]], "neural_compressor.pruner.regs": [[300, "module-neural_compressor.pruner.regs"]], "on_after_optimizer_step() (neural_compressor.pruner.regs.basereg method)": [[300, "neural_compressor.pruner.regs.BaseReg.on_after_optimizer_step"]], "on_after_optimizer_step() (neural_compressor.pruner.regs.grouplasso method)": [[300, "neural_compressor.pruner.regs.GroupLasso.on_after_optimizer_step"]], "on_before_optimizer_step() (neural_compressor.pruner.regs.basereg method)": [[300, "neural_compressor.pruner.regs.BaseReg.on_before_optimizer_step"]], "on_before_optimizer_step() (neural_compressor.pruner.regs.grouplasso method)": [[300, "neural_compressor.pruner.regs.GroupLasso.on_before_optimizer_step"]], "reg_terms (neural_compressor.pruner.regs.grouplasso attribute)": [[300, "neural_compressor.pruner.regs.GroupLasso.reg_terms"]], "register_reg() (in module neural_compressor.pruner.regs)": [[300, "neural_compressor.pruner.regs.register_reg"]], "iterativescheduler (class in neural_compressor.pruner.schedulers)": [[301, "neural_compressor.pruner.schedulers.IterativeScheduler"]], "oneshotscheduler (class in neural_compressor.pruner.schedulers)": [[301, "neural_compressor.pruner.schedulers.OneshotScheduler"]], "pruningscheduler (class in neural_compressor.pruner.schedulers)": [[301, "neural_compressor.pruner.schedulers.PruningScheduler"]], "config (neural_compressor.pruner.schedulers.pruningscheduler attribute)": [[301, "neural_compressor.pruner.schedulers.PruningScheduler.config"]], "get_scheduler() (in module neural_compressor.pruner.schedulers)": [[301, "neural_compressor.pruner.schedulers.get_scheduler"]], "neural_compressor.pruner.schedulers": [[301, "module-neural_compressor.pruner.schedulers"]], "register_scheduler() (in module neural_compressor.pruner.schedulers)": [[301, "neural_compressor.pruner.schedulers.register_scheduler"]], "update_sparsity_ratio() (neural_compressor.pruner.schedulers.iterativescheduler method)": [[301, "neural_compressor.pruner.schedulers.IterativeScheduler.update_sparsity_ratio"]], "update_sparsity_ratio() (neural_compressor.pruner.schedulers.oneshotscheduler method)": [[301, "neural_compressor.pruner.schedulers.OneshotScheduler.update_sparsity_ratio"]], "update_sparsity_ratio() (neural_compressor.pruner.schedulers.pruningscheduler method)": [[301, "neural_compressor.pruner.schedulers.PruningScheduler.update_sparsity_ratio"]], "check_config() (in module neural_compressor.pruner.utils)": [[302, "neural_compressor.pruner.utils.check_config"]], "check_key_validity() (in module neural_compressor.pruner.utils)": [[302, "neural_compressor.pruner.utils.check_key_validity"]], "neural_compressor.pruner.utils": [[302, "module-neural_compressor.pruner.utils"]], "parse_to_prune() (in module neural_compressor.pruner.utils)": [[302, "neural_compressor.pruner.utils.parse_to_prune"]], "process_and_check_config() (in module neural_compressor.pruner.utils)": [[302, "neural_compressor.pruner.utils.process_and_check_config"]], "process_config() (in module neural_compressor.pruner.utils)": [[302, "neural_compressor.pruner.utils.process_config"]], "process_weight_config() (in module neural_compressor.pruner.utils)": [[302, "neural_compressor.pruner.utils.process_weight_config"]], "process_yaml_config() (in module neural_compressor.pruner.utils)": [[302, "neural_compressor.pruner.utils.process_yaml_config"]], "reset_none_to_default() (in module neural_compressor.pruner.utils)": [[302, "neural_compressor.pruner.utils.reset_none_to_default"]], "update_params() (in module neural_compressor.pruner.utils)": [[302, "neural_compressor.pruner.utils.update_params"]], "fit() (in module neural_compressor.quantization)": [[303, "neural_compressor.quantization.fit"]], "neural_compressor.quantization": [[303, "module-neural_compressor.quantization"]], "automixedprecisiontunestrategy (class in neural_compressor.strategy.auto_mixed_precision)": [[304, "neural_compressor.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy"]], "neural_compressor.strategy.auto_mixed_precision": [[304, "module-neural_compressor.strategy.auto_mixed_precision"]], "next_tune_cfg() (neural_compressor.strategy.auto_mixed_precision.automixedprecisiontunestrategy method)": [[304, "neural_compressor.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy.next_tune_cfg"]], "traverse() (neural_compressor.strategy.auto_mixed_precision.automixedprecisiontunestrategy method)": [[304, "neural_compressor.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy.traverse"]], "basictunestrategy (class in neural_compressor.strategy.basic)": [[305, "neural_compressor.strategy.basic.BasicTuneStrategy"]], "neural_compressor.strategy.basic": [[305, "module-neural_compressor.strategy.basic"]], "next_tune_cfg() (neural_compressor.strategy.basic.basictunestrategy method)": [[305, "neural_compressor.strategy.basic.BasicTuneStrategy.next_tune_cfg"]], "bayesianoptimization (class in neural_compressor.strategy.bayesian)": [[306, "neural_compressor.strategy.bayesian.BayesianOptimization"]], "bayesiantunestrategy (class in neural_compressor.strategy.bayesian)": [[306, "neural_compressor.strategy.bayesian.BayesianTuneStrategy"]], "targetspace (class in neural_compressor.strategy.bayesian)": [[306, "neural_compressor.strategy.bayesian.TargetSpace"]], "acq_max() (in module neural_compressor.strategy.bayesian)": [[306, "neural_compressor.strategy.bayesian.acq_max"]], "array_to_params() (neural_compressor.strategy.bayesian.targetspace method)": [[306, "neural_compressor.strategy.bayesian.TargetSpace.array_to_params"]], "bounds (neural_compressor.strategy.bayesian.targetspace property)": [[306, "neural_compressor.strategy.bayesian.TargetSpace.bounds"]], "dim (neural_compressor.strategy.bayesian.targetspace property)": [[306, "neural_compressor.strategy.bayesian.TargetSpace.dim"]], "empty (neural_compressor.strategy.bayesian.targetspace property)": [[306, "neural_compressor.strategy.bayesian.TargetSpace.empty"]], "gen_next_params() (neural_compressor.strategy.bayesian.bayesianoptimization method)": [[306, "neural_compressor.strategy.bayesian.BayesianOptimization.gen_next_params"]], "get_target() (neural_compressor.strategy.bayesian.targetspace method)": [[306, "neural_compressor.strategy.bayesian.TargetSpace.get_target"]], "keys (neural_compressor.strategy.bayesian.targetspace property)": [[306, "neural_compressor.strategy.bayesian.TargetSpace.keys"]], "max (neural_compressor.strategy.bayesian.bayesianoptimization property)": [[306, "neural_compressor.strategy.bayesian.BayesianOptimization.max"]], "max() (neural_compressor.strategy.bayesian.targetspace method)": [[306, "neural_compressor.strategy.bayesian.TargetSpace.max"]], "neural_compressor.strategy.bayesian": [[306, "module-neural_compressor.strategy.bayesian"]], "next_tune_cfg() (neural_compressor.strategy.bayesian.bayesiantunestrategy method)": [[306, "neural_compressor.strategy.bayesian.BayesianTuneStrategy.next_tune_cfg"]], "params (neural_compressor.strategy.bayesian.targetspace property)": [[306, "neural_compressor.strategy.bayesian.TargetSpace.params"]], "params_to_array() (neural_compressor.strategy.bayesian.targetspace method)": [[306, "neural_compressor.strategy.bayesian.TargetSpace.params_to_array"]], "random_sample() (neural_compressor.strategy.bayesian.targetspace method)": [[306, "neural_compressor.strategy.bayesian.TargetSpace.random_sample"]], "register() (neural_compressor.strategy.bayesian.targetspace method)": [[306, "neural_compressor.strategy.bayesian.TargetSpace.register"]], "res (neural_compressor.strategy.bayesian.bayesianoptimization property)": [[306, "neural_compressor.strategy.bayesian.BayesianOptimization.res"]], "res() (neural_compressor.strategy.bayesian.targetspace method)": [[306, "neural_compressor.strategy.bayesian.TargetSpace.res"]], "space (neural_compressor.strategy.bayesian.bayesianoptimization property)": [[306, "neural_compressor.strategy.bayesian.BayesianOptimization.space"]], "suggest() (neural_compressor.strategy.bayesian.bayesianoptimization method)": [[306, "neural_compressor.strategy.bayesian.BayesianOptimization.suggest"]], "target (neural_compressor.strategy.bayesian.targetspace property)": [[306, "neural_compressor.strategy.bayesian.TargetSpace.target"]], "conservativetunestrategy (class in neural_compressor.strategy.conservative)": [[307, "neural_compressor.strategy.conservative.ConservativeTuneStrategy"]], "neural_compressor.strategy.conservative": [[307, "module-neural_compressor.strategy.conservative"]], "next_tune_cfg() (neural_compressor.strategy.conservative.conservativetunestrategy method)": [[307, "neural_compressor.strategy.conservative.ConservativeTuneStrategy.next_tune_cfg"]], "stop() (neural_compressor.strategy.conservative.conservativetunestrategy method)": [[307, "neural_compressor.strategy.conservative.ConservativeTuneStrategy.stop"]], "traverse() (neural_compressor.strategy.conservative.conservativetunestrategy method)": [[307, "neural_compressor.strategy.conservative.ConservativeTuneStrategy.traverse"]], "exhaustivetunestrategy (class in neural_compressor.strategy.exhaustive)": [[308, "neural_compressor.strategy.exhaustive.ExhaustiveTuneStrategy"]], "neural_compressor.strategy.exhaustive": [[308, "module-neural_compressor.strategy.exhaustive"]], "next_tune_cfg() (neural_compressor.strategy.exhaustive.exhaustivetunestrategy method)": [[308, "neural_compressor.strategy.exhaustive.ExhaustiveTuneStrategy.next_tune_cfg"]], "hawq_v2tunestrategy (class in neural_compressor.strategy.hawq_v2)": [[309, "neural_compressor.strategy.hawq_v2.HAWQ_V2TuneStrategy"]], "neural_compressor.strategy.hawq_v2": [[309, "module-neural_compressor.strategy.hawq_v2"]], "next_tune_cfg() (neural_compressor.strategy.hawq_v2.hawq_v2tunestrategy method)": [[309, "neural_compressor.strategy.hawq_v2.HAWQ_V2TuneStrategy.next_tune_cfg"]], "neural_compressor.strategy": [[310, "module-neural_compressor.strategy"]], "msetunestrategy (class in neural_compressor.strategy.mse)": [[311, "neural_compressor.strategy.mse.MSETuneStrategy"]], "mse_impact_lst() (neural_compressor.strategy.mse.msetunestrategy method)": [[311, "neural_compressor.strategy.mse.MSETuneStrategy.mse_impact_lst"]], "neural_compressor.strategy.mse": [[311, "module-neural_compressor.strategy.mse"]], "next_tune_cfg() (neural_compressor.strategy.mse.msetunestrategy method)": [[311, "neural_compressor.strategy.mse.MSETuneStrategy.next_tune_cfg"]], "mse_v2tunestrategy (class in neural_compressor.strategy.mse_v2)": [[312, "neural_compressor.strategy.mse_v2.MSE_V2TuneStrategy"]], "neural_compressor.strategy.mse_v2": [[312, "module-neural_compressor.strategy.mse_v2"]], "next_tune_cfg() (neural_compressor.strategy.mse_v2.mse_v2tunestrategy method)": [[312, "neural_compressor.strategy.mse_v2.MSE_V2TuneStrategy.next_tune_cfg"]], "randomtunestrategy (class in neural_compressor.strategy.random)": [[313, "neural_compressor.strategy.random.RandomTuneStrategy"]], "neural_compressor.strategy.random": [[313, "module-neural_compressor.strategy.random"]], "next_tune_cfg() (neural_compressor.strategy.random.randomtunestrategy method)": [[313, "neural_compressor.strategy.random.RandomTuneStrategy.next_tune_cfg"]], "tunestrategy (class in neural_compressor.strategy.strategy)": [[314, "neural_compressor.strategy.strategy.TuneStrategy"]], "deploy_config() (neural_compressor.strategy.strategy.tunestrategy method)": [[314, "neural_compressor.strategy.strategy.TuneStrategy.deploy_config"]], "evaluation_result (neural_compressor.strategy.strategy.tunestrategy property)": [[314, "neural_compressor.strategy.strategy.TuneStrategy.evaluation_result"]], "initial_best_acc() (neural_compressor.strategy.strategy.tunestrategy method)": [[314, "neural_compressor.strategy.strategy.TuneStrategy.initial_best_acc"]], "initial_tuning_cfg() (neural_compressor.strategy.strategy.tunestrategy method)": [[314, "neural_compressor.strategy.strategy.TuneStrategy.initial_tuning_cfg"]], "neural_compressor.strategy.strategy": [[314, "module-neural_compressor.strategy.strategy"]], "next_tune_cfg() (neural_compressor.strategy.strategy.tunestrategy method)": [[314, "neural_compressor.strategy.strategy.TuneStrategy.next_tune_cfg"]], "set_q_func() (neural_compressor.strategy.strategy.tunestrategy method)": [[314, "neural_compressor.strategy.strategy.TuneStrategy.set_q_func"]], "set_tuning_space() (neural_compressor.strategy.strategy.tunestrategy method)": [[314, "neural_compressor.strategy.strategy.TuneStrategy.set_tuning_space"]], "setup_resume() (neural_compressor.strategy.strategy.tunestrategy method)": [[314, "neural_compressor.strategy.strategy.TuneStrategy.setup_resume"]], "show_baseline_info() (neural_compressor.strategy.strategy.tunestrategy method)": [[314, "neural_compressor.strategy.strategy.TuneStrategy.show_baseline_info"]], "stop() (neural_compressor.strategy.strategy.tunestrategy method)": [[314, "neural_compressor.strategy.strategy.TuneStrategy.stop"]], "strategy_registry() (in module neural_compressor.strategy.strategy)": [[314, "neural_compressor.strategy.strategy.strategy_registry"]], "traverse() (neural_compressor.strategy.strategy.tunestrategy method)": [[314, "neural_compressor.strategy.strategy.TuneStrategy.traverse"]], "update_best_op_tuning_cfg() (neural_compressor.strategy.strategy.tunestrategy method)": [[314, "neural_compressor.strategy.strategy.TuneStrategy.update_best_op_tuning_cfg"]], "fallbacktuningsampler (class in neural_compressor.strategy.utils)": [[315, "neural_compressor.strategy.utils.FallbackTuningSampler"]], "optuningconfig (class in neural_compressor.strategy.utils)": [[315, "neural_compressor.strategy.utils.OpTuningConfig"]], "optypewisetuningsampler (class in neural_compressor.strategy.utils)": [[315, "neural_compressor.strategy.utils.OpTypeWiseTuningSampler"]], "opwisetuningsampler (class in neural_compressor.strategy.utils)": [[315, "neural_compressor.strategy.utils.OpWiseTuningSampler"]], "tuningitem (class in neural_compressor.strategy.utils)": [[315, "neural_compressor.strategy.utils.TuningItem"]], "tuningsampler (class in neural_compressor.strategy.utils)": [[315, "neural_compressor.strategy.utils.TuningSampler"]], "tuningspace (class in neural_compressor.strategy.utils)": [[315, "neural_compressor.strategy.utils.TuningSpace"]], "append() (neural_compressor.strategy.utils.tuningitem method)": [[315, "neural_compressor.strategy.utils.TuningItem.append"]], "from_state() (neural_compressor.strategy.utils.optuningconfig class method)": [[315, "neural_compressor.strategy.utils.OpTuningConfig.from_state"]], "get_details() (neural_compressor.strategy.utils.tuningitem method)": [[315, "neural_compressor.strategy.utils.TuningItem.get_details"]], "get_option_by_name() (neural_compressor.strategy.utils.tuningitem method)": [[315, "neural_compressor.strategy.utils.TuningItem.get_option_by_name"]], "get_opwise_candidate() (neural_compressor.strategy.utils.opwisetuningsampler method)": [[315, "neural_compressor.strategy.utils.OpWiseTuningSampler.get_opwise_candidate"]], "get_state() (neural_compressor.strategy.utils.optuningconfig method)": [[315, "neural_compressor.strategy.utils.OpTuningConfig.get_state"]], "neural_compressor.strategy.utils": [[315, "module-neural_compressor.strategy.utils"]], "options (neural_compressor.strategy.utils.tuningitem property)": [[315, "neural_compressor.strategy.utils.TuningItem.options"]], "query_item_option() (neural_compressor.strategy.utils.tuningspace method)": [[315, "neural_compressor.strategy.utils.TuningSpace.query_item_option"]], "query_items_by_quant_mode() (neural_compressor.strategy.utils.tuningspace method)": [[315, "neural_compressor.strategy.utils.TuningSpace.query_items_by_quant_mode"]], "query_quant_mode_item() (neural_compressor.strategy.utils.tuningspace method)": [[315, "neural_compressor.strategy.utils.TuningSpace.query_quant_mode_item"]], "remove() (neural_compressor.strategy.utils.tuningitem method)": [[315, "neural_compressor.strategy.utils.TuningItem.remove"]], "set_deafult_config() (neural_compressor.strategy.utils.tuningspace method)": [[315, "neural_compressor.strategy.utils.TuningSpace.set_deafult_config"]], "fallbacktuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[316, "neural_compressor.strategy.utils.tuning_sampler.FallbackTuningSampler"]], "modelwisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[316, "neural_compressor.strategy.utils.tuning_sampler.ModelWiseTuningSampler"]], "optypewisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[316, "neural_compressor.strategy.utils.tuning_sampler.OpTypeWiseTuningSampler"]], "opwisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[316, "neural_compressor.strategy.utils.tuning_sampler.OpWiseTuningSampler"]], "tuningorder (class in neural_compressor.strategy.utils.tuning_sampler)": [[316, "neural_compressor.strategy.utils.tuning_sampler.TuningOrder"]], "tuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[316, "neural_compressor.strategy.utils.tuning_sampler.TuningSampler"]], "get_opwise_candidate() (neural_compressor.strategy.utils.tuning_sampler.opwisetuningsampler method)": [[316, "neural_compressor.strategy.utils.tuning_sampler.OpWiseTuningSampler.get_opwise_candidate"]], "neural_compressor.strategy.utils.tuning_sampler": [[316, "module-neural_compressor.strategy.utils.tuning_sampler"]], "tuningitem (class in neural_compressor.strategy.utils.tuning_space)": [[317, "neural_compressor.strategy.utils.tuning_space.TuningItem"]], "tuningspace (class in neural_compressor.strategy.utils.tuning_space)": [[317, "neural_compressor.strategy.utils.tuning_space.TuningSpace"]], "append() (neural_compressor.strategy.utils.tuning_space.tuningitem method)": [[317, "neural_compressor.strategy.utils.tuning_space.TuningItem.append"]], "get_details() (neural_compressor.strategy.utils.tuning_space.tuningitem method)": [[317, "neural_compressor.strategy.utils.tuning_space.TuningItem.get_details"]], "get_option_by_name() (neural_compressor.strategy.utils.tuning_space.tuningitem method)": [[317, "neural_compressor.strategy.utils.tuning_space.TuningItem.get_option_by_name"]], "neural_compressor.strategy.utils.tuning_space": [[317, "module-neural_compressor.strategy.utils.tuning_space"]], "options (neural_compressor.strategy.utils.tuning_space.tuningitem property)": [[317, "neural_compressor.strategy.utils.tuning_space.TuningItem.options"]], "query_item_option() (neural_compressor.strategy.utils.tuning_space.tuningspace method)": [[317, "neural_compressor.strategy.utils.tuning_space.TuningSpace.query_item_option"]], "query_items_by_quant_mode() (neural_compressor.strategy.utils.tuning_space.tuningspace method)": [[317, "neural_compressor.strategy.utils.tuning_space.TuningSpace.query_items_by_quant_mode"]], "query_quant_mode_item() (neural_compressor.strategy.utils.tuning_space.tuningspace method)": [[317, "neural_compressor.strategy.utils.tuning_space.TuningSpace.query_quant_mode_item"]], "remove() (neural_compressor.strategy.utils.tuning_space.tuningitem method)": [[317, "neural_compressor.strategy.utils.tuning_space.TuningItem.remove"]], "set_deafult_config() (neural_compressor.strategy.utils.tuning_space.tuningspace method)": [[317, "neural_compressor.strategy.utils.tuning_space.TuningSpace.set_deafult_config"]], "optuningconfig (class in neural_compressor.strategy.utils.tuning_structs)": [[318, "neural_compressor.strategy.utils.tuning_structs.OpTuningConfig"]], "from_state() (neural_compressor.strategy.utils.tuning_structs.optuningconfig class method)": [[318, "neural_compressor.strategy.utils.tuning_structs.OpTuningConfig.from_state"]], "get_state() (neural_compressor.strategy.utils.tuning_structs.optuningconfig method)": [[318, "neural_compressor.strategy.utils.tuning_structs.OpTuningConfig.get_state"]], "neural_compressor.strategy.utils.tuning_structs": [[318, "module-neural_compressor.strategy.utils.tuning_structs"]], "compressionmanager (class in neural_compressor.training)": [[319, "neural_compressor.training.CompressionManager"]], "compressionmanager.callbacks (class in neural_compressor.training)": [[319, "neural_compressor.training.CompressionManager.CallBacks"]], "export() (neural_compressor.training.compressionmanager method)": [[319, "neural_compressor.training.CompressionManager.export"]], "neural_compressor.training": [[319, "module-neural_compressor.training"]], "on_after_compute_loss() (neural_compressor.training.compressionmanager.callbacks method)": [[319, "neural_compressor.training.CompressionManager.CallBacks.on_after_compute_loss"]], "on_after_optimizer_step() (neural_compressor.training.compressionmanager.callbacks method)": [[319, "neural_compressor.training.CompressionManager.CallBacks.on_after_optimizer_step"]], "on_before_optimizer_step() (neural_compressor.training.compressionmanager.callbacks method)": [[319, "neural_compressor.training.CompressionManager.CallBacks.on_before_optimizer_step"]], "on_epoch_begin() (neural_compressor.training.compressionmanager.callbacks method)": [[319, "neural_compressor.training.CompressionManager.CallBacks.on_epoch_begin"]], "on_epoch_end() (neural_compressor.training.compressionmanager.callbacks method)": [[319, "neural_compressor.training.CompressionManager.CallBacks.on_epoch_end"]], "on_step_begin() (neural_compressor.training.compressionmanager.callbacks method)": [[319, "neural_compressor.training.CompressionManager.CallBacks.on_step_begin"]], "on_step_end() (neural_compressor.training.compressionmanager.callbacks method)": [[319, "neural_compressor.training.CompressionManager.CallBacks.on_step_end"]], "on_train_begin() (neural_compressor.training.compressionmanager.callbacks method)": [[319, "neural_compressor.training.CompressionManager.CallBacks.on_train_begin"]], "on_train_end() (neural_compressor.training.compressionmanager.callbacks method)": [[319, "neural_compressor.training.CompressionManager.CallBacks.on_train_end"]], "prepare_compression() (in module neural_compressor.training)": [[319, "neural_compressor.training.prepare_compression"]], "save() (neural_compressor.training.compressionmanager method)": [[319, "neural_compressor.training.CompressionManager.save"]], "layerhistogramcollector (class in neural_compressor.utils.collect_layer_histogram)": [[320, "neural_compressor.utils.collect_layer_histogram.LayerHistogramCollector"]], "collect() (neural_compressor.utils.collect_layer_histogram.layerhistogramcollector method)": [[320, "neural_compressor.utils.collect_layer_histogram.LayerHistogramCollector.collect"]], "neural_compressor.utils.collect_layer_histogram": [[320, "module-neural_compressor.utils.collect_layer_histogram"]], "neural_compressor.utils.constant": [[321, "module-neural_compressor.utils.constant"]], "create_dataloader() (in module neural_compressor.utils.create_obj_from_config)": [[322, "neural_compressor.utils.create_obj_from_config.create_dataloader"]], "create_dataset() (in module neural_compressor.utils.create_obj_from_config)": [[322, "neural_compressor.utils.create_obj_from_config.create_dataset"]], "create_eval_func() (in module neural_compressor.utils.create_obj_from_config)": [[322, "neural_compressor.utils.create_obj_from_config.create_eval_func"]], "create_train_func() (in module neural_compressor.utils.create_obj_from_config)": [[322, "neural_compressor.utils.create_obj_from_config.create_train_func"]], "get_algorithm() (in module neural_compressor.utils.create_obj_from_config)": [[322, "neural_compressor.utils.create_obj_from_config.get_algorithm"]], "get_func_from_config() (in module neural_compressor.utils.create_obj_from_config)": [[322, "neural_compressor.utils.create_obj_from_config.get_func_from_config"]], "get_metrics() (in module neural_compressor.utils.create_obj_from_config)": [[322, "neural_compressor.utils.create_obj_from_config.get_metrics"]], "get_postprocess() (in module neural_compressor.utils.create_obj_from_config)": [[322, "neural_compressor.utils.create_obj_from_config.get_postprocess"]], "get_preprocess() (in module neural_compressor.utils.create_obj_from_config)": [[322, "neural_compressor.utils.create_obj_from_config.get_preprocess"]], "neural_compressor.utils.create_obj_from_config": [[322, "module-neural_compressor.utils.create_obj_from_config"]], "layerhistogramcollector (class in neural_compressor.utils)": [[323, "neural_compressor.utils.LayerHistogramCollector"]], "collect() (neural_compressor.utils.layerhistogramcollector method)": [[323, "neural_compressor.utils.LayerHistogramCollector.collect"]], "debug() (in module neural_compressor.utils)": [[323, "neural_compressor.utils.debug"]], "error() (in module neural_compressor.utils)": [[323, "neural_compressor.utils.error"]], "fatal() (in module neural_compressor.utils)": [[323, "neural_compressor.utils.fatal"]], "info() (in module neural_compressor.utils)": [[323, "neural_compressor.utils.info"]], "log() (in module neural_compressor.utils)": [[323, "neural_compressor.utils.log"]], "neural_compressor.utils": [[323, "module-neural_compressor.utils"]], "warn() (in module neural_compressor.utils)": [[323, "neural_compressor.utils.warn"]], "warning() (in module neural_compressor.utils)": [[323, "neural_compressor.utils.warning"]], "kl_divergence (class in neural_compressor.utils.kl_divergence)": [[324, "neural_compressor.utils.kl_divergence.KL_Divergence"]], "expand_quantized_bins() (neural_compressor.utils.kl_divergence.kl_divergence method)": [[324, "neural_compressor.utils.kl_divergence.KL_Divergence.expand_quantized_bins"]], "get_threshold() (neural_compressor.utils.kl_divergence.kl_divergence method)": [[324, "neural_compressor.utils.kl_divergence.KL_Divergence.get_threshold"]], "neural_compressor.utils.kl_divergence": [[324, "module-neural_compressor.utils.kl_divergence"]], "safe_entropy() (neural_compressor.utils.kl_divergence.kl_divergence method)": [[324, "neural_compressor.utils.kl_divergence.KL_Divergence.safe_entropy"]], "optimizedmodel (class in neural_compressor.utils.load_huggingface)": [[325, "neural_compressor.utils.load_huggingface.OptimizedModel"]], "from_pretrained() (neural_compressor.utils.load_huggingface.optimizedmodel class method)": [[325, "neural_compressor.utils.load_huggingface.OptimizedModel.from_pretrained"]], "neural_compressor.utils.load_huggingface": [[325, "module-neural_compressor.utils.load_huggingface"]], "save_for_huggingface_upstream() (in module neural_compressor.utils.load_huggingface)": [[325, "neural_compressor.utils.load_huggingface.save_for_huggingface_upstream"]], "logger (class in neural_compressor.utils.logger)": [[326, "neural_compressor.utils.logger.Logger"]], "debug() (in module neural_compressor.utils.logger)": [[326, "neural_compressor.utils.logger.debug"]], "error() (in module neural_compressor.utils.logger)": [[326, "neural_compressor.utils.logger.error"]], "fatal() (in module neural_compressor.utils.logger)": [[326, "neural_compressor.utils.logger.fatal"]], "get_logger() (neural_compressor.utils.logger.logger method)": [[326, "neural_compressor.utils.logger.Logger.get_logger"]], "info() (in module neural_compressor.utils.logger)": [[326, "neural_compressor.utils.logger.info"]], "log() (in module neural_compressor.utils.logger)": [[326, "neural_compressor.utils.logger.log"]], "neural_compressor.utils.logger": [[326, "module-neural_compressor.utils.logger"]], "warn() (in module neural_compressor.utils.logger)": [[326, "neural_compressor.utils.logger.warn"]], "warning() (in module neural_compressor.utils.logger)": [[326, "neural_compressor.utils.logger.warning"]], "neural_compressor.utils.options": [[327, "module-neural_compressor.utils.options"]], "onnxrt (class in neural_compressor.utils.options)": [[327, "neural_compressor.utils.options.onnxrt"]], "load() (in module neural_compressor.utils.pytorch)": [[328, "neural_compressor.utils.pytorch.load"]], "neural_compressor.utils.pytorch": [[328, "module-neural_compressor.utils.pytorch"]], "captureoutputtofile (class in neural_compressor.utils.utility)": [[329, "neural_compressor.utils.utility.CaptureOutputToFile"]], "cpuinfo (class in neural_compressor.utils.utility)": [[329, "neural_compressor.utils.utility.CpuInfo"]], "dequantize() (in module neural_compressor.utils.utility)": [[329, "neural_compressor.utils.utility.Dequantize"]], "dequantizeweight() (in module neural_compressor.utils.utility)": [[329, "neural_compressor.utils.utility.DequantizeWeight"]], "global_state (class in neural_compressor.utils.utility)": [[329, "neural_compressor.utils.utility.GLOBAL_STATE"]], "lazyimport (class in neural_compressor.utils.utility)": [[329, "neural_compressor.utils.utility.LazyImport"]], "mode (class in neural_compressor.utils.utility)": [[329, "neural_compressor.utils.utility.MODE"]], "statistics (class in neural_compressor.utils.utility)": [[329, "neural_compressor.utils.utility.Statistics"]], "bf16 (neural_compressor.utils.utility.cpuinfo property)": [[329, "neural_compressor.utils.utility.CpuInfo.bf16"]], "combine_histogram() (in module neural_compressor.utils.utility)": [[329, "neural_compressor.utils.utility.combine_histogram"]], "compute_sparsity() (in module neural_compressor.utils.utility)": [[329, "neural_compressor.utils.utility.compute_sparsity"]], "cores_per_socket (neural_compressor.utils.utility.cpuinfo property)": [[329, "neural_compressor.utils.utility.CpuInfo.cores_per_socket"]], "dump_data_to_local() (in module neural_compressor.utils.utility)": [[329, "neural_compressor.utils.utility.dump_data_to_local"]], "dump_elapsed_time() (in module neural_compressor.utils.utility)": [[329, "neural_compressor.utils.utility.dump_elapsed_time"]], "equal_dicts() (in module neural_compressor.utils.utility)": [[329, "neural_compressor.utils.utility.equal_dicts"]], "fault_tolerant_file() (in module neural_compressor.utils.utility)": [[329, "neural_compressor.utils.utility.fault_tolerant_file"]], "get_all_fp32_data() (in module neural_compressor.utils.utility)": [[329, "neural_compressor.utils.utility.get_all_fp32_data"]], "get_number_of_sockets() (neural_compressor.utils.utility.cpuinfo method)": [[329, "neural_compressor.utils.utility.CpuInfo.get_number_of_sockets"]], "get_size() (in module neural_compressor.utils.utility)": [[329, "neural_compressor.utils.utility.get_size"]], "get_tensor_histogram() (in module neural_compressor.utils.utility)": [[329, "neural_compressor.utils.utility.get_tensor_histogram"]], "get_tuning_history() (in module neural_compressor.utils.utility)": [[329, "neural_compressor.utils.utility.get_tuning_history"]], "load_data_from_pkl() (in module neural_compressor.utils.utility)": [[329, "neural_compressor.utils.utility.load_data_from_pkl"]], "neural_compressor.utils.utility": [[329, "module-neural_compressor.utils.utility"]], "print_stat() (neural_compressor.utils.utility.statistics method)": [[329, "neural_compressor.utils.utility.Statistics.print_stat"]], "recover() (in module neural_compressor.utils.utility)": [[329, "neural_compressor.utils.utility.recover"]], "set_random_seed() (in module neural_compressor.utils.utility)": [[329, "neural_compressor.utils.utility.set_random_seed"]], "set_resume_from() (in module neural_compressor.utils.utility)": [[329, "neural_compressor.utils.utility.set_resume_from"]], "set_tensorboard() (in module neural_compressor.utils.utility)": [[329, "neural_compressor.utils.utility.set_tensorboard"]], "set_workspace() (in module neural_compressor.utils.utility)": [[329, "neural_compressor.utils.utility.set_workspace"]], "singleton() (in module neural_compressor.utils.utility)": [[329, "neural_compressor.utils.utility.singleton"]], "str2array() (in module neural_compressor.utils.utility)": [[329, "neural_compressor.utils.utility.str2array"]], "time_limit() (in module neural_compressor.utils.utility)": [[329, "neural_compressor.utils.utility.time_limit"]], "version1_eq_version2() (in module neural_compressor.utils.utility)": [[329, "neural_compressor.utils.utility.version1_eq_version2"]], "version1_gt_version2() (in module neural_compressor.utils.utility)": [[329, "neural_compressor.utils.utility.version1_gt_version2"]], "version1_gte_version2() (in module neural_compressor.utils.utility)": [[329, "neural_compressor.utils.utility.version1_gte_version2"]], "version1_lt_version2() (in module neural_compressor.utils.utility)": [[329, "neural_compressor.utils.utility.version1_lt_version2"]], "version1_lte_version2() (in module neural_compressor.utils.utility)": [[329, "neural_compressor.utils.utility.version1_lte_version2"]], "vnni (neural_compressor.utils.utility.cpuinfo property)": [[329, "neural_compressor.utils.utility.CpuInfo.vnni"]], "benchmark (class in neural_compressor.ux.components.benchmark.benchmark)": [[330, "neural_compressor.ux.components.benchmark.benchmark.Benchmark"]], "dataloaderinterface (class in neural_compressor.ux.components.benchmark.benchmark)": [[330, "neural_compressor.ux.components.benchmark.benchmark.DataloaderInterface"]], "config_filename (neural_compressor.ux.components.benchmark.benchmark.benchmark property)": [[330, "neural_compressor.ux.components.benchmark.benchmark.Benchmark.config_filename"]], "configuration_data (neural_compressor.ux.components.benchmark.benchmark.benchmark property)": [[330, "neural_compressor.ux.components.benchmark.benchmark.Benchmark.configuration_data"]], "execute() (neural_compressor.ux.components.benchmark.benchmark.benchmark method)": [[330, "neural_compressor.ux.components.benchmark.benchmark.Benchmark.execute"]], "generate_config() (neural_compressor.ux.components.benchmark.benchmark.benchmark method)": [[330, "neural_compressor.ux.components.benchmark.benchmark.Benchmark.generate_config"]], "neural_compressor.ux.components.benchmark.benchmark": [[330, "module-neural_compressor.ux.components.benchmark.benchmark"]], "workdir (neural_compressor.ux.components.benchmark.benchmark.benchmark property)": [[330, "neural_compressor.ux.components.benchmark.benchmark.Benchmark.workdir"]], "benchmark_model() (in module neural_compressor.ux.components.benchmark.benchmark_model)": [[331, "neural_compressor.ux.components.benchmark.benchmark_model.benchmark_model"]], "neural_compressor.ux.components.benchmark.benchmark_model": [[331, "module-neural_compressor.ux.components.benchmark.benchmark_model"]], "parse_args() (in module neural_compressor.ux.components.benchmark.benchmark_model)": [[331, "neural_compressor.ux.components.benchmark.benchmark_model.parse_args"]], "set_eager_execution() (in module neural_compressor.ux.components.benchmark.benchmark_model)": [[331, "neural_compressor.ux.components.benchmark.benchmark_model.set_eager_execution"]], "benchmark_result_update() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[332, "neural_compressor.ux.components.benchmark.execute_benchmark.benchmark_result_update"]], "benchmark_result_update_pytorch_script() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[332, "neural_compressor.ux.components.benchmark.execute_benchmark.benchmark_result_update_pytorch_script"]], "execute_benchmark() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[332, "neural_compressor.ux.components.benchmark.execute_benchmark.execute_benchmark"]], "execute_real_benchmark() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[332, "neural_compressor.ux.components.benchmark.execute_benchmark.execute_real_benchmark"]], "neural_compressor.ux.components.benchmark.execute_benchmark": [[332, "module-neural_compressor.ux.components.benchmark.execute_benchmark"]], "pytorch_script_bench_optimizations() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[332, "neural_compressor.ux.components.benchmark.execute_benchmark.pytorch_script_bench_optimizations"]], "pytorch_script_bench_original_model() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[332, "neural_compressor.ux.components.benchmark.execute_benchmark.pytorch_script_bench_original_model"]], "benchmarks (class in neural_compressor.ux.components.benchmark)": [[333, "neural_compressor.ux.components.benchmark.Benchmarks"]], "neural_compressor.ux.components.benchmark": [[333, "module-neural_compressor.ux.components.benchmark"]], "benchmarkconfiggenerator (class in neural_compressor.ux.components.config_generator.benchmark_config_generator)": [[334, "neural_compressor.ux.components.config_generator.benchmark_config_generator.BenchmarkConfigGenerator"]], "generate() (neural_compressor.ux.components.config_generator.benchmark_config_generator.benchmarkconfiggenerator method)": [[334, "neural_compressor.ux.components.config_generator.benchmark_config_generator.BenchmarkConfigGenerator.generate"]], "generate_accuracy_config() (neural_compressor.ux.components.config_generator.benchmark_config_generator.benchmarkconfiggenerator method)": [[334, "neural_compressor.ux.components.config_generator.benchmark_config_generator.BenchmarkConfigGenerator.generate_accuracy_config"]], "generate_evaluation_config() (neural_compressor.ux.components.config_generator.benchmark_config_generator.benchmarkconfiggenerator method)": [[334, "neural_compressor.ux.components.config_generator.benchmark_config_generator.BenchmarkConfigGenerator.generate_evaluation_config"]], "generate_performance_config() (neural_compressor.ux.components.config_generator.benchmark_config_generator.benchmarkconfiggenerator method)": [[334, "neural_compressor.ux.components.config_generator.benchmark_config_generator.BenchmarkConfigGenerator.generate_performance_config"]], "neural_compressor.ux.components.config_generator.benchmark_config_generator": [[334, "module-neural_compressor.ux.components.config_generator.benchmark_config_generator"]], "configgenerator (class in neural_compressor.ux.components.config_generator.config_generator)": [[335, "neural_compressor.ux.components.config_generator.config_generator.ConfigGenerator"]], "generate() (neural_compressor.ux.components.config_generator.config_generator.configgenerator method)": [[335, "neural_compressor.ux.components.config_generator.config_generator.ConfigGenerator.generate"]], "generate_dataloader_config() (neural_compressor.ux.components.config_generator.config_generator.configgenerator method)": [[335, "neural_compressor.ux.components.config_generator.config_generator.ConfigGenerator.generate_dataloader_config"]], "generate_model_config() (neural_compressor.ux.components.config_generator.config_generator.configgenerator method)": [[335, "neural_compressor.ux.components.config_generator.config_generator.ConfigGenerator.generate_model_config"]], "get_predefined_config_path() (neural_compressor.ux.components.config_generator.config_generator.configgenerator method)": [[335, "neural_compressor.ux.components.config_generator.config_generator.ConfigGenerator.get_predefined_config_path"]], "neural_compressor.ux.components.config_generator.config_generator": [[335, "module-neural_compressor.ux.components.config_generator.config_generator"]], "graphoptimizationconfiggenerator (class in neural_compressor.ux.components.config_generator.graph_optimization_config_generator)": [[336, "neural_compressor.ux.components.config_generator.graph_optimization_config_generator.GraphOptimizationConfigGenerator"]], "generate() (neural_compressor.ux.components.config_generator.graph_optimization_config_generator.graphoptimizationconfiggenerator method)": [[336, "neural_compressor.ux.components.config_generator.graph_optimization_config_generator.GraphOptimizationConfigGenerator.generate"]], "generate_evaluation_config() (neural_compressor.ux.components.config_generator.graph_optimization_config_generator.graphoptimizationconfiggenerator method)": [[336, "neural_compressor.ux.components.config_generator.graph_optimization_config_generator.GraphOptimizationConfigGenerator.generate_evaluation_config"]], "generate_graph_optimization_config() (neural_compressor.ux.components.config_generator.graph_optimization_config_generator.graphoptimizationconfiggenerator method)": [[336, "neural_compressor.ux.components.config_generator.graph_optimization_config_generator.GraphOptimizationConfigGenerator.generate_graph_optimization_config"]], "neural_compressor.ux.components.config_generator.graph_optimization_config_generator": [[336, "module-neural_compressor.ux.components.config_generator.graph_optimization_config_generator"]], "neural_compressor.ux.components.config_generator": [[337, "module-neural_compressor.ux.components.config_generator"]], "mixedprecisionconfiggenerator (class in neural_compressor.ux.components.config_generator.mixed_precision_config_generator)": [[338, "neural_compressor.ux.components.config_generator.mixed_precision_config_generator.MixedPrecisionConfigGenerator"]], "generate() (neural_compressor.ux.components.config_generator.mixed_precision_config_generator.mixedprecisionconfiggenerator method)": [[338, "neural_compressor.ux.components.config_generator.mixed_precision_config_generator.MixedPrecisionConfigGenerator.generate"]], "generate_evaluation_config() (neural_compressor.ux.components.config_generator.mixed_precision_config_generator.mixedprecisionconfiggenerator method)": [[338, "neural_compressor.ux.components.config_generator.mixed_precision_config_generator.MixedPrecisionConfigGenerator.generate_evaluation_config"]], "generate_mixed_precision_config() (neural_compressor.ux.components.config_generator.mixed_precision_config_generator.mixedprecisionconfiggenerator method)": [[338, "neural_compressor.ux.components.config_generator.mixed_precision_config_generator.MixedPrecisionConfigGenerator.generate_mixed_precision_config"]], "neural_compressor.ux.components.config_generator.mixed_precision_config_generator": [[338, "module-neural_compressor.ux.components.config_generator.mixed_precision_config_generator"]], "profilingconfiggenerator (class in neural_compressor.ux.components.config_generator.profiling_config_generator)": [[339, "neural_compressor.ux.components.config_generator.profiling_config_generator.ProfilingConfigGenerator"]], "generate() (neural_compressor.ux.components.config_generator.profiling_config_generator.profilingconfiggenerator method)": [[339, "neural_compressor.ux.components.config_generator.profiling_config_generator.ProfilingConfigGenerator.generate"]], "neural_compressor.ux.components.config_generator.profiling_config_generator": [[339, "module-neural_compressor.ux.components.config_generator.profiling_config_generator"]], "pruningconfiggenerator (class in neural_compressor.ux.components.config_generator.pruning_config_generator)": [[340, "neural_compressor.ux.components.config_generator.pruning_config_generator.PruningConfigGenerator"]], "generate() (neural_compressor.ux.components.config_generator.pruning_config_generator.pruningconfiggenerator method)": [[340, "neural_compressor.ux.components.config_generator.pruning_config_generator.PruningConfigGenerator.generate"]], "generate_evaluation_config() (neural_compressor.ux.components.config_generator.pruning_config_generator.pruningconfiggenerator method)": [[340, "neural_compressor.ux.components.config_generator.pruning_config_generator.PruningConfigGenerator.generate_evaluation_config"]], "generate_pruning_config() (neural_compressor.ux.components.config_generator.pruning_config_generator.pruningconfiggenerator method)": [[340, "neural_compressor.ux.components.config_generator.pruning_config_generator.PruningConfigGenerator.generate_pruning_config"]], "neural_compressor.ux.components.config_generator.pruning_config_generator": [[340, "module-neural_compressor.ux.components.config_generator.pruning_config_generator"]], "quantizationconfiggenerator (class in neural_compressor.ux.components.config_generator.quantization_config_generator)": [[341, "neural_compressor.ux.components.config_generator.quantization_config_generator.QuantizationConfigGenerator"]], "generate() (neural_compressor.ux.components.config_generator.quantization_config_generator.quantizationconfiggenerator method)": [[341, "neural_compressor.ux.components.config_generator.quantization_config_generator.QuantizationConfigGenerator.generate"]], "generate_evaluation_config() (neural_compressor.ux.components.config_generator.quantization_config_generator.quantizationconfiggenerator method)": [[341, "neural_compressor.ux.components.config_generator.quantization_config_generator.QuantizationConfigGenerator.generate_evaluation_config"]], "generate_quantization_config() (neural_compressor.ux.components.config_generator.quantization_config_generator.quantizationconfiggenerator method)": [[341, "neural_compressor.ux.components.config_generator.quantization_config_generator.QuantizationConfigGenerator.generate_quantization_config"]], "generate_tuning_config() (neural_compressor.ux.components.config_generator.quantization_config_generator.quantizationconfiggenerator method)": [[341, "neural_compressor.ux.components.config_generator.quantization_config_generator.QuantizationConfigGenerator.generate_tuning_config"]], "neural_compressor.ux.components.config_generator.quantization_config_generator": [[341, "module-neural_compressor.ux.components.config_generator.quantization_config_generator"]], "configurationparser (class in neural_compressor.ux.components.configuration_wizard.configuration_parser)": [[342, "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser"]], "get_param_type() (neural_compressor.ux.components.configuration_wizard.configuration_parser.configurationparser method)": [[342, "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser.get_param_type"]], "neural_compressor.ux.components.configuration_wizard.configuration_parser": [[342, "module-neural_compressor.ux.components.configuration_wizard.configuration_parser"]], "normalize_string_list() (in module neural_compressor.ux.components.configuration_wizard.configuration_parser)": [[342, "neural_compressor.ux.components.configuration_wizard.configuration_parser.normalize_string_list"]], "parse() (neural_compressor.ux.components.configuration_wizard.configuration_parser.configurationparser method)": [[342, "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser.parse"]], "parse_dataloader() (neural_compressor.ux.components.configuration_wizard.configuration_parser.configurationparser method)": [[342, "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser.parse_dataloader"]], "parse_evaluation_data() (neural_compressor.ux.components.configuration_wizard.configuration_parser.configurationparser method)": [[342, "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser.parse_evaluation_data"]], "parse_list_value() (in module neural_compressor.ux.components.configuration_wizard.configuration_parser)": [[342, "neural_compressor.ux.components.configuration_wizard.configuration_parser.parse_list_value"]], "parse_metric() (neural_compressor.ux.components.configuration_wizard.configuration_parser.configurationparser method)": [[342, "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser.parse_metric"]], "parse_multidim_list() (in module neural_compressor.ux.components.configuration_wizard.configuration_parser)": [[342, "neural_compressor.ux.components.configuration_wizard.configuration_parser.parse_multidim_list"]], "parse_transforms() (neural_compressor.ux.components.configuration_wizard.configuration_parser.configurationparser method)": [[342, "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser.parse_transforms"]], "parse_value() (neural_compressor.ux.components.configuration_wizard.configuration_parser.configurationparser static method)": [[342, "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser.parse_value"]], "get_boundary_nodes() (in module neural_compressor.ux.components.configuration_wizard.get_boundary_nodes)": [[343, "neural_compressor.ux.components.configuration_wizard.get_boundary_nodes.get_boundary_nodes"]], "neural_compressor.ux.components.configuration_wizard.get_boundary_nodes": [[343, "module-neural_compressor.ux.components.configuration_wizard.get_boundary_nodes"]], "get_predefined_configuration() (in module neural_compressor.ux.components.configuration_wizard.get_configuration)": [[344, "neural_compressor.ux.components.configuration_wizard.get_configuration.get_predefined_configuration"]], "neural_compressor.ux.components.configuration_wizard.get_configuration": [[344, "module-neural_compressor.ux.components.configuration_wizard.get_configuration"]], "update_config_to_machine_specification() (in module neural_compressor.ux.components.configuration_wizard.get_configuration)": [[344, "neural_compressor.ux.components.configuration_wizard.get_configuration.update_config_to_machine_specification"]], "neural_compressor.ux.components.configuration_wizard": [[345, "module-neural_compressor.ux.components.configuration_wizard"]], "feeder (class in neural_compressor.ux.components.configuration_wizard.params_feeder)": [[346, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder"]], "feed() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder method)": [[346, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.feed"]], "get_dataloaders() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder method)": [[346, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_dataloaders"]], "get_domains() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder method)": [[346, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_domains"]], "get_frameworks() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder static method)": [[346, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_frameworks"]], "get_metrics() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder method)": [[346, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_metrics"]], "get_models() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder method)": [[346, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_models"]], "get_objectives() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder static method)": [[346, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_objectives"]], "get_possible_values() (in module neural_compressor.ux.components.configuration_wizard.params_feeder)": [[346, "neural_compressor.ux.components.configuration_wizard.params_feeder.get_possible_values"]], "get_precisions() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder method)": [[346, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_precisions"]], "get_quantization_approaches() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder method)": [[346, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_quantization_approaches"]], "get_strategies() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder static method)": [[346, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_strategies"]], "get_transforms() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder method)": [[346, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_transforms"]], "neural_compressor.ux.components.configuration_wizard.params_feeder": [[346, "module-neural_compressor.ux.components.configuration_wizard.params_feeder"]], "pruningconfigparser (class in neural_compressor.ux.components.configuration_wizard.pruning_config_parser)": [[347, "neural_compressor.ux.components.configuration_wizard.pruning_config_parser.PruningConfigParser"]], "generate_tree() (neural_compressor.ux.components.configuration_wizard.pruning_config_parser.pruningconfigparser method)": [[347, "neural_compressor.ux.components.configuration_wizard.pruning_config_parser.PruningConfigParser.generate_tree"]], "neural_compressor.ux.components.configuration_wizard.pruning_config_parser": [[347, "module-neural_compressor.ux.components.configuration_wizard.pruning_config_parser"]], "parse() (neural_compressor.ux.components.configuration_wizard.pruning_config_parser.pruningconfigparser method)": [[347, "neural_compressor.ux.components.configuration_wizard.pruning_config_parser.PruningConfigParser.parse"]], "parse_entry() (neural_compressor.ux.components.configuration_wizard.pruning_config_parser.pruningconfigparser method)": [[347, "neural_compressor.ux.components.configuration_wizard.pruning_config_parser.PruningConfigParser.parse_entry"]], "dbmanager (class in neural_compressor.ux.components.db_manager.db_manager)": [[348, "neural_compressor.ux.components.db_manager.db_manager.DBManager"]], "create_all() (neural_compressor.ux.components.db_manager.db_manager.dbmanager method)": [[348, "neural_compressor.ux.components.db_manager.db_manager.DBManager.create_all"]], "create_sqlalchemy_engine() (neural_compressor.ux.components.db_manager.db_manager.dbmanager method)": [[348, "neural_compressor.ux.components.db_manager.db_manager.DBManager.create_sqlalchemy_engine"]], "engine (neural_compressor.ux.components.db_manager.db_manager.dbmanager property)": [[348, "neural_compressor.ux.components.db_manager.db_manager.DBManager.engine"]], "initialize_database() (neural_compressor.ux.components.db_manager.db_manager.dbmanager method)": [[348, "neural_compressor.ux.components.db_manager.db_manager.DBManager.initialize_database"]], "neural_compressor.ux.components.db_manager.db_manager": [[348, "module-neural_compressor.ux.components.db_manager.db_manager"]], "benchmark (class in neural_compressor.ux.components.db_manager.db_models.benchmark)": [[349, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark"]], "add() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[349, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.add"]], "build_info() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[349, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.build_info"]], "clean_status() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[349, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.clean_status"]], "delete_benchmark() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[349, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.delete_benchmark"]], "details() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[349, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.details"]], "list() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[349, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.list"]], "neural_compressor.ux.components.db_manager.db_models.benchmark": [[349, "module-neural_compressor.ux.components.db_manager.db_models.benchmark"]], "update_batch_size() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[349, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_batch_size"]], "update_config_path() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[349, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_config_path"]], "update_cores_per_instance() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[349, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_cores_per_instance"]], "update_dataset() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[349, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_dataset"]], "update_duration() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[349, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_duration"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[349, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_execution_command"]], "update_log_path() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[349, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_log_path"]], "update_mode() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[349, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_mode"]], "update_number_of_instance() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[349, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_number_of_instance"]], "update_status() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[349, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_status"]], "benchmarkresult (class in neural_compressor.ux.components.db_manager.db_models.benchmark_result)": [[350, "neural_compressor.ux.components.db_manager.db_models.benchmark_result.BenchmarkResult"]], "add() (neural_compressor.ux.components.db_manager.db_models.benchmark_result.benchmarkresult static method)": [[350, "neural_compressor.ux.components.db_manager.db_models.benchmark_result.BenchmarkResult.add"]], "build_info() (neural_compressor.ux.components.db_manager.db_models.benchmark_result.benchmarkresult static method)": [[350, "neural_compressor.ux.components.db_manager.db_models.benchmark_result.BenchmarkResult.build_info"]], "neural_compressor.ux.components.db_manager.db_models.benchmark_result": [[350, "module-neural_compressor.ux.components.db_manager.db_models.benchmark_result"]], "update_accuracy() (neural_compressor.ux.components.db_manager.db_models.benchmark_result.benchmarkresult static method)": [[350, "neural_compressor.ux.components.db_manager.db_models.benchmark_result.BenchmarkResult.update_accuracy"]], "update_performance() (neural_compressor.ux.components.db_manager.db_models.benchmark_result.benchmarkresult static method)": [[350, "neural_compressor.ux.components.db_manager.db_models.benchmark_result.BenchmarkResult.update_performance"]], "dataloader (class in neural_compressor.ux.components.db_manager.db_models.dataloader)": [[351, "neural_compressor.ux.components.db_manager.db_models.dataloader.Dataloader"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.dataloader)": [[351, "neural_compressor.ux.components.db_manager.db_models.dataloader.fill_dictionary"]], "list() (neural_compressor.ux.components.db_manager.db_models.dataloader.dataloader static method)": [[351, "neural_compressor.ux.components.db_manager.db_models.dataloader.Dataloader.list"]], "list_by_framework() (neural_compressor.ux.components.db_manager.db_models.dataloader.dataloader static method)": [[351, "neural_compressor.ux.components.db_manager.db_models.dataloader.Dataloader.list_by_framework"]], "neural_compressor.ux.components.db_manager.db_models.dataloader": [[351, "module-neural_compressor.ux.components.db_manager.db_models.dataloader"]], "query_to_list() (neural_compressor.ux.components.db_manager.db_models.dataloader.dataloader static method)": [[351, "neural_compressor.ux.components.db_manager.db_models.dataloader.Dataloader.query_to_list"]], "update_params() (neural_compressor.ux.components.db_manager.db_models.dataloader.dataloader static method)": [[351, "neural_compressor.ux.components.db_manager.db_models.dataloader.Dataloader.update_params"]], "dataset (class in neural_compressor.ux.components.db_manager.db_models.dataset)": [[352, "neural_compressor.ux.components.db_manager.db_models.dataset.Dataset"]], "add() (neural_compressor.ux.components.db_manager.db_models.dataset.dataset static method)": [[352, "neural_compressor.ux.components.db_manager.db_models.dataset.Dataset.add"]], "build_info() (neural_compressor.ux.components.db_manager.db_models.dataset.dataset static method)": [[352, "neural_compressor.ux.components.db_manager.db_models.dataset.Dataset.build_info"]], "delete_dataset() (neural_compressor.ux.components.db_manager.db_models.dataset.dataset static method)": [[352, "neural_compressor.ux.components.db_manager.db_models.dataset.Dataset.delete_dataset"]], "details() (neural_compressor.ux.components.db_manager.db_models.dataset.dataset static method)": [[352, "neural_compressor.ux.components.db_manager.db_models.dataset.Dataset.details"]], "list() (neural_compressor.ux.components.db_manager.db_models.dataset.dataset static method)": [[352, "neural_compressor.ux.components.db_manager.db_models.dataset.Dataset.list"]], "neural_compressor.ux.components.db_manager.db_models.dataset": [[352, "module-neural_compressor.ux.components.db_manager.db_models.dataset"]], "update_template_path() (neural_compressor.ux.components.db_manager.db_models.dataset.dataset static method)": [[352, "neural_compressor.ux.components.db_manager.db_models.dataset.Dataset.update_template_path"]], "domain (class in neural_compressor.ux.components.db_manager.db_models.domain)": [[353, "neural_compressor.ux.components.db_manager.db_models.domain.Domain"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.domain)": [[353, "neural_compressor.ux.components.db_manager.db_models.domain.fill_dictionary"]], "get_domain_id() (neural_compressor.ux.components.db_manager.db_models.domain.domain static method)": [[353, "neural_compressor.ux.components.db_manager.db_models.domain.Domain.get_domain_id"]], "list() (neural_compressor.ux.components.db_manager.db_models.domain.domain static method)": [[353, "neural_compressor.ux.components.db_manager.db_models.domain.Domain.list"]], "neural_compressor.ux.components.db_manager.db_models.domain": [[353, "module-neural_compressor.ux.components.db_manager.db_models.domain"]], "domainflavour (class in neural_compressor.ux.components.db_manager.db_models.domain_flavour)": [[354, "neural_compressor.ux.components.db_manager.db_models.domain_flavour.DomainFlavour"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.domain_flavour)": [[354, "neural_compressor.ux.components.db_manager.db_models.domain_flavour.fill_dictionary"]], "get_domain_flavour_id() (neural_compressor.ux.components.db_manager.db_models.domain_flavour.domainflavour static method)": [[354, "neural_compressor.ux.components.db_manager.db_models.domain_flavour.DomainFlavour.get_domain_flavour_id"]], "list() (neural_compressor.ux.components.db_manager.db_models.domain_flavour.domainflavour static method)": [[354, "neural_compressor.ux.components.db_manager.db_models.domain_flavour.DomainFlavour.list"]], "neural_compressor.ux.components.db_manager.db_models.domain_flavour": [[354, "module-neural_compressor.ux.components.db_manager.db_models.domain_flavour"]], "example (class in neural_compressor.ux.components.db_manager.db_models.example)": [[355, "neural_compressor.ux.components.db_manager.db_models.example.Example"]], "neural_compressor.ux.components.db_manager.db_models.example": [[355, "module-neural_compressor.ux.components.db_manager.db_models.example"]], "framework (class in neural_compressor.ux.components.db_manager.db_models.framework)": [[356, "neural_compressor.ux.components.db_manager.db_models.framework.Framework"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.framework)": [[356, "neural_compressor.ux.components.db_manager.db_models.framework.fill_dictionary"]], "get_framework_id() (neural_compressor.ux.components.db_manager.db_models.framework.framework static method)": [[356, "neural_compressor.ux.components.db_manager.db_models.framework.Framework.get_framework_id"]], "neural_compressor.ux.components.db_manager.db_models.framework": [[356, "module-neural_compressor.ux.components.db_manager.db_models.framework"]], "neural_compressor.ux.components.db_manager.db_models": [[357, "module-neural_compressor.ux.components.db_manager.db_models"]], "metric (class in neural_compressor.ux.components.db_manager.db_models.metric)": [[358, "neural_compressor.ux.components.db_manager.db_models.metric.Metric"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.metric)": [[358, "neural_compressor.ux.components.db_manager.db_models.metric.fill_dictionary"]], "list() (neural_compressor.ux.components.db_manager.db_models.metric.metric static method)": [[358, "neural_compressor.ux.components.db_manager.db_models.metric.Metric.list"]], "list_by_framework() (neural_compressor.ux.components.db_manager.db_models.metric.metric static method)": [[358, "neural_compressor.ux.components.db_manager.db_models.metric.Metric.list_by_framework"]], "neural_compressor.ux.components.db_manager.db_models.metric": [[358, "module-neural_compressor.ux.components.db_manager.db_models.metric"]], "query_to_list() (neural_compressor.ux.components.db_manager.db_models.metric.metric static method)": [[358, "neural_compressor.ux.components.db_manager.db_models.metric.Metric.query_to_list"]], "model (class in neural_compressor.ux.components.db_manager.db_models.model)": [[359, "neural_compressor.ux.components.db_manager.db_models.model.Model"]], "add() (neural_compressor.ux.components.db_manager.db_models.model.model static method)": [[359, "neural_compressor.ux.components.db_manager.db_models.model.Model.add"]], "build_info() (neural_compressor.ux.components.db_manager.db_models.model.model static method)": [[359, "neural_compressor.ux.components.db_manager.db_models.model.Model.build_info"]], "delete_model() (neural_compressor.ux.components.db_manager.db_models.model.model static method)": [[359, "neural_compressor.ux.components.db_manager.db_models.model.Model.delete_model"]], "details() (neural_compressor.ux.components.db_manager.db_models.model.model static method)": [[359, "neural_compressor.ux.components.db_manager.db_models.model.Model.details"]], "list() (neural_compressor.ux.components.db_manager.db_models.model.model static method)": [[359, "neural_compressor.ux.components.db_manager.db_models.model.Model.list"]], "neural_compressor.ux.components.db_manager.db_models.model": [[359, "module-neural_compressor.ux.components.db_manager.db_models.model"]], "optimization (class in neural_compressor.ux.components.db_manager.db_models.optimization)": [[360, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization"]], "add() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[360, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.add"]], "build_info() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[360, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.build_info"]], "clean_status() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[360, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.clean_status"]], "delete_optimization() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[360, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.delete_optimization"]], "details() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[360, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.details"]], "get_optimization_by_project_and_model() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[360, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.get_optimization_by_project_and_model"]], "get_pinned_benchmarks() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[360, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.get_pinned_benchmarks"]], "list() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[360, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.list"]], "neural_compressor.ux.components.db_manager.db_models.optimization": [[360, "module-neural_compressor.ux.components.db_manager.db_models.optimization"]], "pin_accuracy_benchmark() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[360, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.pin_accuracy_benchmark"]], "pin_performance_benchmark() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[360, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.pin_performance_benchmark"]], "unpin_benchmark() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[360, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.unpin_benchmark"]], "update_batch_size() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[360, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_batch_size"]], "update_config_path() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[360, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_config_path"]], "update_dataset() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[360, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_dataset"]], "update_duration() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[360, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_duration"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[360, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_execution_command"]], "update_log_path() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[360, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_log_path"]], "update_optimized_model() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[360, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_optimized_model"]], "update_precision() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[360, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_precision"]], "update_pruning_details() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[360, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_pruning_details"]], "update_sampling_size() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[360, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_sampling_size"]], "update_status() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[360, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_status"]], "update_tuning_details() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[360, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_tuning_details"]], "optimizationtype (class in neural_compressor.ux.components.db_manager.db_models.optimization_type)": [[361, "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType"]], "add() (neural_compressor.ux.components.db_manager.db_models.optimization_type.optimizationtype static method)": [[361, "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType.add"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.optimization_type)": [[361, "neural_compressor.ux.components.db_manager.db_models.optimization_type.fill_dictionary"]], "get_optimization_type_by_id() (neural_compressor.ux.components.db_manager.db_models.optimization_type.optimizationtype static method)": [[361, "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType.get_optimization_type_by_id"]], "get_optimization_type_by_name() (neural_compressor.ux.components.db_manager.db_models.optimization_type.optimizationtype static method)": [[361, "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType.get_optimization_type_by_name"]], "get_optimization_type_for_precision() (neural_compressor.ux.components.db_manager.db_models.optimization_type.optimizationtype static method)": [[361, "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType.get_optimization_type_for_precision"]], "get_optimization_type_id() (neural_compressor.ux.components.db_manager.db_models.optimization_type.optimizationtype static method)": [[361, "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType.get_optimization_type_id"]], "list() (neural_compressor.ux.components.db_manager.db_models.optimization_type.optimizationtype static method)": [[361, "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType.list"]], "list_for_precision() (neural_compressor.ux.components.db_manager.db_models.optimization_type.optimizationtype static method)": [[361, "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType.list_for_precision"]], "neural_compressor.ux.components.db_manager.db_models.optimization_type": [[361, "module-neural_compressor.ux.components.db_manager.db_models.optimization_type"]], "precision (class in neural_compressor.ux.components.db_manager.db_models.precision)": [[362, "neural_compressor.ux.components.db_manager.db_models.precision.Precision"]], "add() (neural_compressor.ux.components.db_manager.db_models.precision.precision static method)": [[362, "neural_compressor.ux.components.db_manager.db_models.precision.Precision.add"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.precision)": [[362, "neural_compressor.ux.components.db_manager.db_models.precision.fill_dictionary"]], "get_precision_by_id() (neural_compressor.ux.components.db_manager.db_models.precision.precision static method)": [[362, "neural_compressor.ux.components.db_manager.db_models.precision.Precision.get_precision_by_id"]], "get_precision_by_name() (neural_compressor.ux.components.db_manager.db_models.precision.precision static method)": [[362, "neural_compressor.ux.components.db_manager.db_models.precision.Precision.get_precision_by_name"]], "get_precision_id() (neural_compressor.ux.components.db_manager.db_models.precision.precision static method)": [[362, "neural_compressor.ux.components.db_manager.db_models.precision.Precision.get_precision_id"]], "list() (neural_compressor.ux.components.db_manager.db_models.precision.precision static method)": [[362, "neural_compressor.ux.components.db_manager.db_models.precision.Precision.list"]], "neural_compressor.ux.components.db_manager.db_models.precision": [[362, "module-neural_compressor.ux.components.db_manager.db_models.precision"]], "profiling (class in neural_compressor.ux.components.db_manager.db_models.profiling)": [[363, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling"]], "add() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[363, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.add"]], "build_info() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[363, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.build_info"]], "clean_status() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[363, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.clean_status"]], "delete_profiling() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[363, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.delete_profiling"]], "details() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[363, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.details"]], "list() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[363, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.list"]], "neural_compressor.ux.components.db_manager.db_models.profiling": [[363, "module-neural_compressor.ux.components.db_manager.db_models.profiling"]], "update_dataset() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[363, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.update_dataset"]], "update_duration() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[363, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.update_duration"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[363, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.update_execution_command"]], "update_log_path() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[363, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.update_log_path"]], "update_num_threads() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[363, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.update_num_threads"]], "update_status() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[363, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.update_status"]], "profilingresult (class in neural_compressor.ux.components.db_manager.db_models.profiling_result)": [[364, "neural_compressor.ux.components.db_manager.db_models.profiling_result.ProfilingResult"]], "add() (neural_compressor.ux.components.db_manager.db_models.profiling_result.profilingresult static method)": [[364, "neural_compressor.ux.components.db_manager.db_models.profiling_result.ProfilingResult.add"]], "build_info() (neural_compressor.ux.components.db_manager.db_models.profiling_result.profilingresult static method)": [[364, "neural_compressor.ux.components.db_manager.db_models.profiling_result.ProfilingResult.build_info"]], "bulk_add() (neural_compressor.ux.components.db_manager.db_models.profiling_result.profilingresult static method)": [[364, "neural_compressor.ux.components.db_manager.db_models.profiling_result.ProfilingResult.bulk_add"]], "delete_results() (neural_compressor.ux.components.db_manager.db_models.profiling_result.profilingresult static method)": [[364, "neural_compressor.ux.components.db_manager.db_models.profiling_result.ProfilingResult.delete_results"]], "get_results() (neural_compressor.ux.components.db_manager.db_models.profiling_result.profilingresult static method)": [[364, "neural_compressor.ux.components.db_manager.db_models.profiling_result.ProfilingResult.get_results"]], "neural_compressor.ux.components.db_manager.db_models.profiling_result": [[364, "module-neural_compressor.ux.components.db_manager.db_models.profiling_result"]], "project (class in neural_compressor.ux.components.db_manager.db_models.project)": [[365, "neural_compressor.ux.components.db_manager.db_models.project.Project"]], "create_project() (neural_compressor.ux.components.db_manager.db_models.project.project static method)": [[365, "neural_compressor.ux.components.db_manager.db_models.project.Project.create_project"]], "delete_project() (neural_compressor.ux.components.db_manager.db_models.project.project static method)": [[365, "neural_compressor.ux.components.db_manager.db_models.project.Project.delete_project"]], "get_model_by_name() (neural_compressor.ux.components.db_manager.db_models.project.project static method)": [[365, "neural_compressor.ux.components.db_manager.db_models.project.Project.get_model_by_name"]], "list_projects() (neural_compressor.ux.components.db_manager.db_models.project.project static method)": [[365, "neural_compressor.ux.components.db_manager.db_models.project.Project.list_projects"]], "neural_compressor.ux.components.db_manager.db_models.project": [[365, "module-neural_compressor.ux.components.db_manager.db_models.project"]], "project_details() (neural_compressor.ux.components.db_manager.db_models.project.project static method)": [[365, "neural_compressor.ux.components.db_manager.db_models.project.Project.project_details"]], "update_notes() (neural_compressor.ux.components.db_manager.db_models.project.project static method)": [[365, "neural_compressor.ux.components.db_manager.db_models.project.Project.update_notes"]], "pruningdetails (class in neural_compressor.ux.components.db_manager.db_models.pruning_details)": [[366, "neural_compressor.ux.components.db_manager.db_models.pruning_details.PruningDetails"]], "add() (neural_compressor.ux.components.db_manager.db_models.pruning_details.pruningdetails static method)": [[366, "neural_compressor.ux.components.db_manager.db_models.pruning_details.PruningDetails.add"]], "build_info() (neural_compressor.ux.components.db_manager.db_models.pruning_details.pruningdetails static method)": [[366, "neural_compressor.ux.components.db_manager.db_models.pruning_details.PruningDetails.build_info"]], "delete_pruning_details() (neural_compressor.ux.components.db_manager.db_models.pruning_details.pruningdetails static method)": [[366, "neural_compressor.ux.components.db_manager.db_models.pruning_details.PruningDetails.delete_pruning_details"]], "neural_compressor.ux.components.db_manager.db_models.pruning_details": [[366, "module-neural_compressor.ux.components.db_manager.db_models.pruning_details"]], "update() (neural_compressor.ux.components.db_manager.db_models.pruning_details.pruningdetails static method)": [[366, "neural_compressor.ux.components.db_manager.db_models.pruning_details.PruningDetails.update"]], "transform (class in neural_compressor.ux.components.db_manager.db_models.transform)": [[367, "neural_compressor.ux.components.db_manager.db_models.transform.Transform"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.transform)": [[367, "neural_compressor.ux.components.db_manager.db_models.transform.fill_dictionary"]], "list() (neural_compressor.ux.components.db_manager.db_models.transform.transform static method)": [[367, "neural_compressor.ux.components.db_manager.db_models.transform.Transform.list"]], "list_by_domain() (neural_compressor.ux.components.db_manager.db_models.transform.transform static method)": [[367, "neural_compressor.ux.components.db_manager.db_models.transform.Transform.list_by_domain"]], "list_by_framework() (neural_compressor.ux.components.db_manager.db_models.transform.transform static method)": [[367, "neural_compressor.ux.components.db_manager.db_models.transform.Transform.list_by_framework"]], "neural_compressor.ux.components.db_manager.db_models.transform": [[367, "module-neural_compressor.ux.components.db_manager.db_models.transform"]], "query_to_list() (neural_compressor.ux.components.db_manager.db_models.transform.transform static method)": [[367, "neural_compressor.ux.components.db_manager.db_models.transform.Transform.query_to_list"]], "tuningdetails (class in neural_compressor.ux.components.db_manager.db_models.tuning_details)": [[368, "neural_compressor.ux.components.db_manager.db_models.tuning_details.TuningDetails"]], "add() (neural_compressor.ux.components.db_manager.db_models.tuning_details.tuningdetails static method)": [[368, "neural_compressor.ux.components.db_manager.db_models.tuning_details.TuningDetails.add"]], "delete_tuning_details() (neural_compressor.ux.components.db_manager.db_models.tuning_details.tuningdetails static method)": [[368, "neural_compressor.ux.components.db_manager.db_models.tuning_details.TuningDetails.delete_tuning_details"]], "neural_compressor.ux.components.db_manager.db_models.tuning_details": [[368, "module-neural_compressor.ux.components.db_manager.db_models.tuning_details"]], "update() (neural_compressor.ux.components.db_manager.db_models.tuning_details.tuningdetails static method)": [[368, "neural_compressor.ux.components.db_manager.db_models.tuning_details.TuningDetails.update"]], "update_tuning_history() (neural_compressor.ux.components.db_manager.db_models.tuning_details.tuningdetails static method)": [[368, "neural_compressor.ux.components.db_manager.db_models.tuning_details.TuningDetails.update_tuning_history"]], "tuninghistory (class in neural_compressor.ux.components.db_manager.db_models.tuning_history)": [[369, "neural_compressor.ux.components.db_manager.db_models.tuning_history.TuningHistory"]], "add() (neural_compressor.ux.components.db_manager.db_models.tuning_history.tuninghistory static method)": [[369, "neural_compressor.ux.components.db_manager.db_models.tuning_history.TuningHistory.add"]], "build_info() (neural_compressor.ux.components.db_manager.db_models.tuning_history.tuninghistory static method)": [[369, "neural_compressor.ux.components.db_manager.db_models.tuning_history.TuningHistory.build_info"]], "neural_compressor.ux.components.db_manager.db_models.tuning_history": [[369, "module-neural_compressor.ux.components.db_manager.db_models.tuning_history"]], "benchmarkapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface)": [[370, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface"]], "add_benchmark() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[370, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.add_benchmark"]], "add_result() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[370, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.add_result"]], "before_delete_benchmark_entry() (in module neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface)": [[370, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.before_delete_benchmark_entry"]], "clean_status() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[370, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.clean_status"]], "delete_benchmark() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[370, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.delete_benchmark"]], "edit_benchmark() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[370, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.edit_benchmark"]], "get_benchmark_details() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[370, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.get_benchmark_details"]], "list_benchmarks() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[370, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.list_benchmarks"]], "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface": [[370, "module-neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface"]], "parse_benchmark_data() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[370, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.parse_benchmark_data"]], "parse_benchmark_edit_data() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[370, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.parse_benchmark_edit_data"]], "update_benchmark_accuracy() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[370, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.update_benchmark_accuracy"]], "update_benchmark_duration() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[370, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.update_benchmark_duration"]], "update_benchmark_performance() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[370, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.update_benchmark_performance"]], "update_benchmark_status() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[370, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.update_benchmark_status"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[370, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.update_execution_command"]], "update_paths() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[370, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.update_paths"]], "datasetapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[371, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface"]], "add_dataset() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[371, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.add_dataset"]], "check_if_custom_metric_or_dataloader() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[371, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.check_if_custom_metric_or_dataloader"]], "dataloader_path() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[371, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.dataloader_path"]], "delete_dataset() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[371, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.delete_dataset"]], "generate_custom_template() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[371, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.generate_custom_template"]], "generate_template() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[371, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.generate_template"]], "get_dataset_details() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[371, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.get_dataset_details"]], "get_predefined_dataset() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[371, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.get_predefined_dataset"]], "initialize_associations() (in module neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[371, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.initialize_associations"]], "initialize_precision_optimization_types_association() (in module neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[371, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.initialize_precision_optimization_types_association"]], "list_datasets() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[371, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.list_datasets"]], "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface": [[371, "module-neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface"]], "parse_dataset_data() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[371, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.parse_dataset_data"]], "prepare_predefined_dataloader() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[371, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.prepare_predefined_dataloader"]], "prepare_predefined_transform() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[371, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.prepare_predefined_transform"]], "search_in_list_of_dict() (in module neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[371, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.search_in_list_of_dict"]], "search_in_list_of_dict_for_unique_value() (in module neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[371, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.search_in_list_of_dict_for_unique_value"]], "set_database_version() (in module neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[371, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.set_database_version"]], "set_template_path() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[371, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.set_template_path"]], "initialize_associations() (in module neural_compressor.ux.components.db_manager.db_operations.db_operations)": [[372, "neural_compressor.ux.components.db_manager.db_operations.db_operations.initialize_associations"]], "initialize_precision_optimization_types_association() (in module neural_compressor.ux.components.db_manager.db_operations.db_operations)": [[372, "neural_compressor.ux.components.db_manager.db_operations.db_operations.initialize_precision_optimization_types_association"]], "neural_compressor.ux.components.db_manager.db_operations.db_operations": [[372, "module-neural_compressor.ux.components.db_manager.db_operations.db_operations"]], "search_in_list_of_dict() (in module neural_compressor.ux.components.db_manager.db_operations.db_operations)": [[372, "neural_compressor.ux.components.db_manager.db_operations.db_operations.search_in_list_of_dict"]], "search_in_list_of_dict_for_unique_value() (in module neural_compressor.ux.components.db_manager.db_operations.db_operations)": [[372, "neural_compressor.ux.components.db_manager.db_operations.db_operations.search_in_list_of_dict_for_unique_value"]], "set_database_version() (in module neural_compressor.ux.components.db_manager.db_operations.db_operations)": [[372, "neural_compressor.ux.components.db_manager.db_operations.db_operations.set_database_version"]], "diagnosisapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface)": [[373, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface"]], "generate_optimization() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[373, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.generate_optimization"]], "get_op_details() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[373, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.get_op_details"]], "get_op_list() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[373, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.get_op_list"]], "histogram() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[373, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.histogram"]], "model_wise_params() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[373, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.model_wise_params"]], "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface": [[373, "module-neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface"]], "parse_model_wise_config() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[373, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.parse_model_wise_config"]], "parse_op_wise_config() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[373, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.parse_op_wise_config"]], "parse_optimization_data() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[373, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.parse_optimization_data"]], "parse_wise_parameters() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[373, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.parse_wise_parameters"]], "set_op_wise_pattern_precision() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[373, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.set_op_wise_pattern_precision"]], "dictionariesapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface)": [[374, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface"]], "list_dataloaders() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[374, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_dataloaders"]], "list_dataloaders_by_framework() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[374, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_dataloaders_by_framework"]], "list_domain_flavours() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[374, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_domain_flavours"]], "list_domains() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[374, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_domains"]], "list_metrics() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[374, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_metrics"]], "list_metrics_by_framework() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[374, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_metrics_by_framework"]], "list_optimization_types() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[374, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_optimization_types"]], "list_optimization_types_for_precision() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[374, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_optimization_types_for_precision"]], "list_precisions() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[374, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_precisions"]], "list_transforms() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[374, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_transforms"]], "list_transforms_by_domain() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[374, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_transforms_by_domain"]], "list_transforms_by_framework() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[374, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_transforms_by_framework"]], "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface": [[374, "module-neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface"]], "examplesapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.examples_api_interface)": [[375, "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface.ExamplesAPIInterface"]], "create_project() (neural_compressor.ux.components.db_manager.db_operations.examples_api_interface.examplesapiinterface static method)": [[375, "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface.ExamplesAPIInterface.create_project"]], "get_optimization_data() (neural_compressor.ux.components.db_manager.db_operations.examples_api_interface.examplesapiinterface static method)": [[375, "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface.ExamplesAPIInterface.get_optimization_data"]], "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface": [[375, "module-neural_compressor.ux.components.db_manager.db_operations.examples_api_interface"]], "benchmarkapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[376, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface"]], "datasetapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[376, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface"]], "diagnosisapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[376, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface"]], "dictionariesapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[376, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface"]], "examplesapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[376, "neural_compressor.ux.components.db_manager.db_operations.ExamplesAPIInterface"]], "modelapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[376, "neural_compressor.ux.components.db_manager.db_operations.ModelAPIInterface"]], "optimizationapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[376, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface"]], "profilingapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[376, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface"]], "projectapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[376, "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface"]], "add_benchmark() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[376, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.add_benchmark"]], "add_dataset() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[376, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.add_dataset"]], "add_dummy_dataset() (neural_compressor.ux.components.db_manager.db_operations.projectapiinterface static method)": [[376, "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface.add_dummy_dataset"]], "add_model() (neural_compressor.ux.components.db_manager.db_operations.modelapiinterface static method)": [[376, "neural_compressor.ux.components.db_manager.db_operations.ModelAPIInterface.add_model"]], "add_model() (neural_compressor.ux.components.db_manager.db_operations.projectapiinterface static method)": [[376, "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface.add_model"]], "add_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[376, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.add_optimization"]], "add_profiling() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[376, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.add_profiling"]], "add_pruning_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[376, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.add_pruning_optimization"]], "add_quantization_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[376, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.add_quantization_optimization"]], "add_result() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[376, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.add_result"]], "add_result() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[376, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.add_result"]], "add_standard_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[376, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.add_standard_optimization"]], "add_tuning_history() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[376, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.add_tuning_history"]], "bulk_add_results() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[376, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.bulk_add_results"]], "check_if_custom_metric_or_dataloader() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[376, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.check_if_custom_metric_or_dataloader"]], "clean_status() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[376, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.clean_status"]], "clean_status() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[376, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.clean_status"]], "clean_status() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[376, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.clean_status"]], "create_project() (neural_compressor.ux.components.db_manager.db_operations.examplesapiinterface static method)": [[376, "neural_compressor.ux.components.db_manager.db_operations.ExamplesAPIInterface.create_project"]], "create_project() (neural_compressor.ux.components.db_manager.db_operations.projectapiinterface static method)": [[376, "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface.create_project"]], "dataloader_path() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[376, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.dataloader_path"]], "delete_benchmark() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[376, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.delete_benchmark"]], "delete_dataset() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[376, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.delete_dataset"]], "delete_model() (neural_compressor.ux.components.db_manager.db_operations.modelapiinterface static method)": [[376, "neural_compressor.ux.components.db_manager.db_operations.ModelAPIInterface.delete_model"]], "delete_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[376, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.delete_optimization"]], "delete_profiling() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[376, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.delete_profiling"]], "delete_project() (neural_compressor.ux.components.db_manager.db_operations.projectapiinterface static method)": [[376, "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface.delete_project"]], "edit_benchmark() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[376, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.edit_benchmark"]], "edit_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[376, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.edit_optimization"]], "edit_profiling() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[376, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.edit_profiling"]], "edit_pruning_details() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[376, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.edit_pruning_details"]], "edit_tuning_details() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[376, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.edit_tuning_details"]], "generate_custom_template() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[376, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.generate_custom_template"]], "generate_optimization() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[376, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.generate_optimization"]], "generate_template() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[376, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.generate_template"]], "get_benchmark_details() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[376, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.get_benchmark_details"]], "get_dataset_details() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[376, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.get_dataset_details"]], "get_model_details() (neural_compressor.ux.components.db_manager.db_operations.modelapiinterface static method)": [[376, "neural_compressor.ux.components.db_manager.db_operations.ModelAPIInterface.get_model_details"]], "get_op_details() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[376, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.get_op_details"]], "get_op_list() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[376, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.get_op_list"]], "get_optimization_data() (neural_compressor.ux.components.db_manager.db_operations.examplesapiinterface static method)": [[376, "neural_compressor.ux.components.db_manager.db_operations.ExamplesAPIInterface.get_optimization_data"]], "get_optimization_details() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[376, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.get_optimization_details"]], "get_predefined_dataset() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[376, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.get_predefined_dataset"]], "get_profiling_details() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[376, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.get_profiling_details"]], "get_project_details() (neural_compressor.ux.components.db_manager.db_operations.projectapiinterface static method)": [[376, "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface.get_project_details"]], "get_pruning_details() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[376, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.get_pruning_details"]], "histogram() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[376, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.histogram"]], "list_benchmarks() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[376, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.list_benchmarks"]], "list_dataloaders() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[376, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_dataloaders"]], "list_dataloaders_by_framework() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[376, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_dataloaders_by_framework"]], "list_datasets() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[376, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.list_datasets"]], "list_domain_flavours() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[376, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_domain_flavours"]], "list_domains() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[376, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_domains"]], "list_metrics() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[376, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_metrics"]], "list_metrics_by_framework() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[376, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_metrics_by_framework"]], "list_models() (neural_compressor.ux.components.db_manager.db_operations.modelapiinterface static method)": [[376, "neural_compressor.ux.components.db_manager.db_operations.ModelAPIInterface.list_models"]], "list_optimization_types() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[376, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_optimization_types"]], "list_optimization_types_for_precision() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[376, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_optimization_types_for_precision"]], "list_optimizations() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[376, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.list_optimizations"]], "list_precisions() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[376, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_precisions"]], "list_profilings() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[376, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.list_profilings"]], "list_projects() (neural_compressor.ux.components.db_manager.db_operations.projectapiinterface static method)": [[376, "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface.list_projects"]], "list_transforms() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[376, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_transforms"]], "list_transforms_by_domain() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[376, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_transforms_by_domain"]], "list_transforms_by_framework() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[376, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_transforms_by_framework"]], "load_pruning_details_config() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[376, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.load_pruning_details_config"]], "model_wise_params() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[376, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.model_wise_params"]], "neural_compressor.ux.components.db_manager.db_operations": [[376, "module-neural_compressor.ux.components.db_manager.db_operations"]], "parse_benchmark_data() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[376, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.parse_benchmark_data"]], "parse_benchmark_edit_data() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[376, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.parse_benchmark_edit_data"]], "parse_dataset_data() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[376, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.parse_dataset_data"]], "parse_model_data() (neural_compressor.ux.components.db_manager.db_operations.modelapiinterface static method)": [[376, "neural_compressor.ux.components.db_manager.db_operations.ModelAPIInterface.parse_model_data"]], "parse_model_wise_config() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[376, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.parse_model_wise_config"]], "parse_op_wise_config() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[376, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.parse_op_wise_config"]], "parse_optimization_data() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[376, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.parse_optimization_data"]], "parse_optimization_data() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[376, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.parse_optimization_data"]], "parse_optimization_edit_data() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[376, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.parse_optimization_edit_data"]], "parse_profiling_data() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[376, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.parse_profiling_data"]], "parse_profiling_edit_data() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[376, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.parse_profiling_edit_data"]], "parse_profiling_result_data() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[376, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.parse_profiling_result_data"]], "parse_tuning_history() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[376, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.parse_tuning_history"]], "parse_wise_parameters() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[376, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.parse_wise_parameters"]], "pin_accuracy_benchmark() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[376, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.pin_accuracy_benchmark"]], "pin_performance_benchmark() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[376, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.pin_performance_benchmark"]], "prepare_predefined_dataloader() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[376, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.prepare_predefined_dataloader"]], "prepare_predefined_transform() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[376, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.prepare_predefined_transform"]], "set_op_wise_pattern_precision() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[376, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.set_op_wise_pattern_precision"]], "set_template_path() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[376, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.set_template_path"]], "update_benchmark_accuracy() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[376, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.update_benchmark_accuracy"]], "update_benchmark_duration() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[376, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.update_benchmark_duration"]], "update_benchmark_performance() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[376, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.update_benchmark_performance"]], "update_benchmark_status() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[376, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.update_benchmark_status"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[376, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.update_execution_command"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[376, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.update_execution_command"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[376, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.update_execution_command"]], "update_log_path() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[376, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.update_log_path"]], "update_optimization_duration() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[376, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.update_optimization_duration"]], "update_optimization_status() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[376, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.update_optimization_status"]], "update_optimized_model() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[376, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.update_optimized_model"]], "update_paths() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[376, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.update_paths"]], "update_paths() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[376, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.update_paths"]], "update_profiling_duration() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[376, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.update_profiling_duration"]], "update_profiling_status() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[376, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.update_profiling_status"]], "update_project_notes() (neural_compressor.ux.components.db_manager.db_operations.projectapiinterface static method)": [[376, "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface.update_project_notes"]], "modelapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.model_api_interface)": [[377, "neural_compressor.ux.components.db_manager.db_operations.model_api_interface.ModelAPIInterface"]], "add_model() (neural_compressor.ux.components.db_manager.db_operations.model_api_interface.modelapiinterface static method)": [[377, "neural_compressor.ux.components.db_manager.db_operations.model_api_interface.ModelAPIInterface.add_model"]], "delete_model() (neural_compressor.ux.components.db_manager.db_operations.model_api_interface.modelapiinterface static method)": [[377, "neural_compressor.ux.components.db_manager.db_operations.model_api_interface.ModelAPIInterface.delete_model"]], "get_model_details() (neural_compressor.ux.components.db_manager.db_operations.model_api_interface.modelapiinterface static method)": [[377, "neural_compressor.ux.components.db_manager.db_operations.model_api_interface.ModelAPIInterface.get_model_details"]], "list_models() (neural_compressor.ux.components.db_manager.db_operations.model_api_interface.modelapiinterface static method)": [[377, "neural_compressor.ux.components.db_manager.db_operations.model_api_interface.ModelAPIInterface.list_models"]], "neural_compressor.ux.components.db_manager.db_operations.model_api_interface": [[377, "module-neural_compressor.ux.components.db_manager.db_operations.model_api_interface"]], "parse_model_data() (neural_compressor.ux.components.db_manager.db_operations.model_api_interface.modelapiinterface static method)": [[377, "neural_compressor.ux.components.db_manager.db_operations.model_api_interface.ModelAPIInterface.parse_model_data"]], "optimizationapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface)": [[378, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface"]], "add_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[378, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.add_optimization"]], "add_pruning_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[378, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.add_pruning_optimization"]], "add_quantization_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[378, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.add_quantization_optimization"]], "add_standard_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[378, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.add_standard_optimization"]], "add_tuning_history() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[378, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.add_tuning_history"]], "clean_status() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[378, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.clean_status"]], "delete_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[378, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.delete_optimization"]], "edit_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[378, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.edit_optimization"]], "edit_pruning_details() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[378, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.edit_pruning_details"]], "edit_tuning_details() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[378, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.edit_tuning_details"]], "get_optimization_details() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[378, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.get_optimization_details"]], "get_pruning_details() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[378, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.get_pruning_details"]], "list_optimizations() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[378, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.list_optimizations"]], "load_pruning_details_config() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[378, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.load_pruning_details_config"]], "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface": [[378, "module-neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface"]], "parse_optimization_data() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[378, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.parse_optimization_data"]], "parse_optimization_edit_data() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[378, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.parse_optimization_edit_data"]], "parse_tuning_history() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[378, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.parse_tuning_history"]], "pin_accuracy_benchmark() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[378, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.pin_accuracy_benchmark"]], "pin_performance_benchmark() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[378, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.pin_performance_benchmark"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[378, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.update_execution_command"]], "update_optimization_duration() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[378, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.update_optimization_duration"]], "update_optimization_status() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[378, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.update_optimization_status"]], "update_optimized_model() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[378, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.update_optimized_model"]], "update_paths() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[378, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.update_paths"]], "profilingapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface)": [[379, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface"]], "add_profiling() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[379, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.add_profiling"]], "add_result() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[379, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.add_result"]], "bulk_add_results() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[379, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.bulk_add_results"]], "clean_status() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[379, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.clean_status"]], "delete_profiling() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[379, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.delete_profiling"]], "edit_profiling() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[379, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.edit_profiling"]], "get_profiling_details() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[379, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.get_profiling_details"]], "list_profilings() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[379, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.list_profilings"]], "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface": [[379, "module-neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface"]], "parse_profiling_data() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[379, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.parse_profiling_data"]], "parse_profiling_edit_data() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[379, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.parse_profiling_edit_data"]], "parse_profiling_result_data() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[379, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.parse_profiling_result_data"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[379, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.update_execution_command"]], "update_log_path() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[379, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.update_log_path"]], "update_profiling_duration() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[379, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.update_profiling_duration"]], "update_profiling_status() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[379, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.update_profiling_status"]], "projectapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.project_api_interface)": [[380, "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface"]], "add_dummy_dataset() (neural_compressor.ux.components.db_manager.db_operations.project_api_interface.projectapiinterface static method)": [[380, "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface.add_dummy_dataset"]], "add_model() (neural_compressor.ux.components.db_manager.db_operations.project_api_interface.projectapiinterface static method)": [[380, "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface.add_model"]], "create_project() (neural_compressor.ux.components.db_manager.db_operations.project_api_interface.projectapiinterface static method)": [[380, "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface.create_project"]], "delete_project() (neural_compressor.ux.components.db_manager.db_operations.project_api_interface.projectapiinterface static method)": [[380, "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface.delete_project"]], "get_project_details() (neural_compressor.ux.components.db_manager.db_operations.project_api_interface.projectapiinterface static method)": [[380, "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface.get_project_details"]], "list_projects() (neural_compressor.ux.components.db_manager.db_operations.project_api_interface.projectapiinterface static method)": [[380, "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface.list_projects"]], "neural_compressor.ux.components.db_manager.db_operations.project_api_interface": [[380, "module-neural_compressor.ux.components.db_manager.db_operations.project_api_interface"]], "update_project_notes() (neural_compressor.ux.components.db_manager.db_operations.project_api_interface.projectapiinterface static method)": [[380, "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface.update_project_notes"]], "dbmanager (class in neural_compressor.ux.components.db_manager)": [[381, "neural_compressor.ux.components.db_manager.DBManager"]], "create_all() (neural_compressor.ux.components.db_manager.dbmanager method)": [[381, "neural_compressor.ux.components.db_manager.DBManager.create_all"]], "create_sqlalchemy_engine() (neural_compressor.ux.components.db_manager.dbmanager method)": [[381, "neural_compressor.ux.components.db_manager.DBManager.create_sqlalchemy_engine"]], "engine (neural_compressor.ux.components.db_manager.dbmanager property)": [[381, "neural_compressor.ux.components.db_manager.DBManager.engine"]], "initialize_database() (neural_compressor.ux.components.db_manager.dbmanager method)": [[381, "neural_compressor.ux.components.db_manager.DBManager.initialize_database"]], "neural_compressor.ux.components.db_manager": [[381, "module-neural_compressor.ux.components.db_manager"]], "benchmarkaddparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[382, "neural_compressor.ux.components.db_manager.params_interfaces.BenchmarkAddParamsInterface"]], "benchmarkeditparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[382, "neural_compressor.ux.components.db_manager.params_interfaces.BenchmarkEditParamsInterface"]], "datasetaddparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[382, "neural_compressor.ux.components.db_manager.params_interfaces.DatasetAddParamsInterface"]], "diagnosisoptimizationparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[382, "neural_compressor.ux.components.db_manager.params_interfaces.DiagnosisOptimizationParamsInterface"]], "modeladdparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[382, "neural_compressor.ux.components.db_manager.params_interfaces.ModelAddParamsInterface"]], "optimizationaddparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[382, "neural_compressor.ux.components.db_manager.params_interfaces.OptimizationAddParamsInterface"]], "optimizationeditparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[382, "neural_compressor.ux.components.db_manager.params_interfaces.OptimizationEditParamsInterface"]], "profilingaddparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[382, "neural_compressor.ux.components.db_manager.params_interfaces.ProfilingAddParamsInterface"]], "profilingeditparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[382, "neural_compressor.ux.components.db_manager.params_interfaces.ProfilingEditParamsInterface"]], "profilingresultaddparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[382, "neural_compressor.ux.components.db_manager.params_interfaces.ProfilingResultAddParamsInterface"]], "tuninghistoryinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[382, "neural_compressor.ux.components.db_manager.params_interfaces.TuningHistoryInterface"]], "tuninghistoryiteminterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[382, "neural_compressor.ux.components.db_manager.params_interfaces.TuningHistoryItemInterface"]], "neural_compressor.ux.components.db_manager.params_interfaces": [[382, "module-neural_compressor.ux.components.db_manager.params_interfaces"]], "parse_nodes() (neural_compressor.ux.components.db_manager.params_interfaces.modeladdparamsinterface static method)": [[382, "neural_compressor.ux.components.db_manager.params_interfaces.ModelAddParamsInterface.parse_nodes"]], "serialize() (neural_compressor.ux.components.db_manager.params_interfaces.tuninghistoryinterface method)": [[382, "neural_compressor.ux.components.db_manager.params_interfaces.TuningHistoryInterface.serialize"]], "serialize() (neural_compressor.ux.components.db_manager.params_interfaces.tuninghistoryiteminterface method)": [[382, "neural_compressor.ux.components.db_manager.params_interfaces.TuningHistoryItemInterface.serialize"]], "get_framework_dataloaders_config() (in module neural_compressor.ux.components.db_manager.utils)": [[383, "neural_compressor.ux.components.db_manager.utils.get_framework_dataloaders_config"]], "get_framework_transforms_config() (in module neural_compressor.ux.components.db_manager.utils)": [[383, "neural_compressor.ux.components.db_manager.utils.get_framework_transforms_config"]], "neural_compressor.ux.components.db_manager.utils": [[383, "module-neural_compressor.ux.components.db_manager.utils"]], "update_dataloaders_params() (in module neural_compressor.ux.components.db_manager.utils)": [[383, "neural_compressor.ux.components.db_manager.utils.update_dataloaders_params"]], "diagnosis (class in neural_compressor.ux.components.diagnosis.diagnosis)": [[384, "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis"]], "calculate_mse() (neural_compressor.ux.components.diagnosis.diagnosis.diagnosis method)": [[384, "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis.calculate_mse"]], "get_histogram_data() (neural_compressor.ux.components.diagnosis.diagnosis.diagnosis method)": [[384, "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis.get_histogram_data"]], "get_op_details() (neural_compressor.ux.components.diagnosis.diagnosis.diagnosis method)": [[384, "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis.get_op_details"]], "get_op_list() (neural_compressor.ux.components.diagnosis.diagnosis.diagnosis method)": [[384, "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis.get_op_list"]], "get_tensors_info() (neural_compressor.ux.components.diagnosis.diagnosis.diagnosis method)": [[384, "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis.get_tensors_info"]], "load_quantization_config() (neural_compressor.ux.components.diagnosis.diagnosis.diagnosis method)": [[384, "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis.load_quantization_config"]], "mse_metric_gap() (neural_compressor.ux.components.diagnosis.diagnosis.diagnosis static method)": [[384, "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis.mse_metric_gap"]], "neural_compressor.ux.components.diagnosis.diagnosis": [[384, "module-neural_compressor.ux.components.diagnosis.diagnosis"]], "diagnosisfactory (class in neural_compressor.ux.components.diagnosis.factory)": [[385, "neural_compressor.ux.components.diagnosis.factory.DiagnosisFactory"]], "get_diagnosis() (neural_compressor.ux.components.diagnosis.factory.diagnosisfactory static method)": [[385, "neural_compressor.ux.components.diagnosis.factory.DiagnosisFactory.get_diagnosis"]], "neural_compressor.ux.components.diagnosis.factory": [[385, "module-neural_compressor.ux.components.diagnosis.factory"]], "neural_compressor.ux.components.diagnosis": [[386, "module-neural_compressor.ux.components.diagnosis"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis": [[387, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis"]], "onnxrtdiagnosis (class in neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis)": [[388, "neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis.OnnxRtDiagnosis"]], "model (neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis.onnxrtdiagnosis property)": [[388, "neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis.OnnxRtDiagnosis.model"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis": [[388, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis"]], "opactivation (class in neural_compressor.ux.components.diagnosis.op_details)": [[389, "neural_compressor.ux.components.diagnosis.op_details.OpActivation"]], "opdetails (class in neural_compressor.ux.components.diagnosis.op_details)": [[389, "neural_compressor.ux.components.diagnosis.op_details.OpDetails"]], "oppattern (class in neural_compressor.ux.components.diagnosis.op_details)": [[389, "neural_compressor.ux.components.diagnosis.op_details.OpPattern"]], "opweights (class in neural_compressor.ux.components.diagnosis.op_details)": [[389, "neural_compressor.ux.components.diagnosis.op_details.OpWeights"]], "neural_compressor.ux.components.diagnosis.op_details": [[389, "module-neural_compressor.ux.components.diagnosis.op_details"]], "serialize() (neural_compressor.ux.components.diagnosis.op_details.opdetails method)": [[389, "neural_compressor.ux.components.diagnosis.op_details.OpDetails.serialize"]], "opentry (class in neural_compressor.ux.components.diagnosis.op_entry)": [[390, "neural_compressor.ux.components.diagnosis.op_entry.OpEntry"]], "neural_compressor.ux.components.diagnosis.op_entry": [[390, "module-neural_compressor.ux.components.diagnosis.op_entry"]], "serialize() (neural_compressor.ux.components.diagnosis.op_entry.opentry method)": [[390, "neural_compressor.ux.components.diagnosis.op_entry.OpEntry.serialize"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis": [[391, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis"]], "tensorflowdiagnosis (class in neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis)": [[392, "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis.TensorflowDiagnosis"]], "model (neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis.tensorflowdiagnosis property)": [[392, "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis.TensorflowDiagnosis.model"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis": [[392, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis"]], "create_dir_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[393, "neural_compressor.ux.components.file_browser.file_browser.create_dir_entry"]], "create_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[393, "neural_compressor.ux.components.file_browser.file_browser.create_entry"]], "create_file_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[393, "neural_compressor.ux.components.file_browser.file_browser.create_file_entry"]], "filter_requested_entries() (in module neural_compressor.ux.components.file_browser.file_browser)": [[393, "neural_compressor.ux.components.file_browser.file_browser.filter_requested_entries"]], "get_directory_entries() (in module neural_compressor.ux.components.file_browser.file_browser)": [[393, "neural_compressor.ux.components.file_browser.file_browser.get_directory_entries"]], "get_filter_value() (in module neural_compressor.ux.components.file_browser.file_browser)": [[393, "neural_compressor.ux.components.file_browser.file_browser.get_filter_value"]], "get_non_hidden_directory_entries() (in module neural_compressor.ux.components.file_browser.file_browser)": [[393, "neural_compressor.ux.components.file_browser.file_browser.get_non_hidden_directory_entries"]], "get_requested_path() (in module neural_compressor.ux.components.file_browser.file_browser)": [[393, "neural_compressor.ux.components.file_browser.file_browser.get_requested_path"]], "get_setting_value() (in module neural_compressor.ux.components.file_browser.file_browser)": [[393, "neural_compressor.ux.components.file_browser.file_browser.get_setting_value"]], "is_dataset_or_directory_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[393, "neural_compressor.ux.components.file_browser.file_browser.is_dataset_or_directory_entry"]], "is_directory_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[393, "neural_compressor.ux.components.file_browser.file_browser.is_directory_entry"]], "is_model_or_directory_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[393, "neural_compressor.ux.components.file_browser.file_browser.is_model_or_directory_entry"]], "neural_compressor.ux.components.file_browser.file_browser": [[393, "module-neural_compressor.ux.components.file_browser.file_browser"]], "should_show_files() (in module neural_compressor.ux.components.file_browser.file_browser)": [[393, "neural_compressor.ux.components.file_browser.file_browser.should_show_files"]], "should_show_only_model_files() (in module neural_compressor.ux.components.file_browser.file_browser)": [[393, "neural_compressor.ux.components.file_browser.file_browser.should_show_only_model_files"]], "sort_entries() (in module neural_compressor.ux.components.file_browser.file_browser)": [[393, "neural_compressor.ux.components.file_browser.file_browser.sort_entries"]], "neural_compressor.ux.components.file_browser": [[394, "module-neural_compressor.ux.components.file_browser"]], "attribute (class in neural_compressor.ux.components.graph.attribute)": [[395, "neural_compressor.ux.components.graph.attribute.Attribute"]], "neural_compressor.ux.components.graph.attribute": [[395, "module-neural_compressor.ux.components.graph.attribute"]], "collapser (class in neural_compressor.ux.components.graph.collapser)": [[396, "neural_compressor.ux.components.graph.collapser.Collapser"]], "collapse() (neural_compressor.ux.components.graph.collapser.collapser method)": [[396, "neural_compressor.ux.components.graph.collapser.Collapser.collapse"]], "neural_compressor.ux.components.graph.collapser": [[396, "module-neural_compressor.ux.components.graph.collapser"]], "edge (class in neural_compressor.ux.components.graph.edge)": [[397, "neural_compressor.ux.components.graph.edge.Edge"]], "neural_compressor.ux.components.graph.edge": [[397, "module-neural_compressor.ux.components.graph.edge"]], "source (neural_compressor.ux.components.graph.edge.edge property)": [[397, "neural_compressor.ux.components.graph.edge.Edge.source"]], "target (neural_compressor.ux.components.graph.edge.edge property)": [[397, "neural_compressor.ux.components.graph.edge.Edge.target"]], "graph (class in neural_compressor.ux.components.graph.graph)": [[398, "neural_compressor.ux.components.graph.graph.Graph"]], "add_edge() (neural_compressor.ux.components.graph.graph.graph method)": [[398, "neural_compressor.ux.components.graph.graph.Graph.add_edge"]], "add_node() (neural_compressor.ux.components.graph.graph.graph method)": [[398, "neural_compressor.ux.components.graph.graph.Graph.add_node"]], "edges (neural_compressor.ux.components.graph.graph.graph property)": [[398, "neural_compressor.ux.components.graph.graph.Graph.edges"]], "get_node() (neural_compressor.ux.components.graph.graph.graph method)": [[398, "neural_compressor.ux.components.graph.graph.Graph.get_node"]], "get_target_nodes() (neural_compressor.ux.components.graph.graph.graph method)": [[398, "neural_compressor.ux.components.graph.graph.Graph.get_target_nodes"]], "highlight_pattern() (neural_compressor.ux.components.graph.graph.graph method)": [[398, "neural_compressor.ux.components.graph.graph.Graph.highlight_pattern"]], "neural_compressor.ux.components.graph.graph": [[398, "module-neural_compressor.ux.components.graph.graph"]], "nodes (neural_compressor.ux.components.graph.graph.graph property)": [[398, "neural_compressor.ux.components.graph.graph.Graph.nodes"]], "graphreader (class in neural_compressor.ux.components.graph.graph_reader)": [[399, "neural_compressor.ux.components.graph.graph_reader.GraphReader"]], "find_pattern_in_graph() (neural_compressor.ux.components.graph.graph_reader.graphreader method)": [[399, "neural_compressor.ux.components.graph.graph_reader.GraphReader.find_pattern_in_graph"]], "neural_compressor.ux.components.graph.graph_reader": [[399, "module-neural_compressor.ux.components.graph.graph_reader"]], "read() (neural_compressor.ux.components.graph.graph_reader.graphreader method)": [[399, "neural_compressor.ux.components.graph.graph_reader.GraphReader.read"]], "neural_compressor.ux.components.graph": [[400, "module-neural_compressor.ux.components.graph"]], "groupnode (class in neural_compressor.ux.components.graph.node)": [[401, "neural_compressor.ux.components.graph.node.GroupNode"]], "node (class in neural_compressor.ux.components.graph.node)": [[401, "neural_compressor.ux.components.graph.node.Node"]], "neural_compressor.ux.components.graph.node": [[401, "module-neural_compressor.ux.components.graph.node"]], "neural_compressor.ux.components.graph.reader": [[402, "module-neural_compressor.ux.components.graph.reader"]], "onnxrtreader (class in neural_compressor.ux.components.graph.reader.onnxrt_reader)": [[403, "neural_compressor.ux.components.graph.reader.onnxrt_reader.OnnxrtReader"]], "neural_compressor.ux.components.graph.reader.onnxrt_reader": [[403, "module-neural_compressor.ux.components.graph.reader.onnxrt_reader"]], "read() (neural_compressor.ux.components.graph.reader.onnxrt_reader.onnxrtreader method)": [[403, "neural_compressor.ux.components.graph.reader.onnxrt_reader.OnnxrtReader.read"]], "tensorflowreader (class in neural_compressor.ux.components.graph.reader.tensorflow_reader)": [[404, "neural_compressor.ux.components.graph.reader.tensorflow_reader.TensorflowReader"]], "neural_compressor.ux.components.graph.reader.tensorflow_reader": [[404, "module-neural_compressor.ux.components.graph.reader.tensorflow_reader"]], "read() (neural_compressor.ux.components.graph.reader.tensorflow_reader.tensorflowreader method)": [[404, "neural_compressor.ux.components.graph.reader.tensorflow_reader.TensorflowReader.read"]], "neural_compressor.ux.components": [[405, "module-neural_compressor.ux.components"]], "neural_compressor.ux.components.jobs_management": [[406, "module-neural_compressor.ux.components.jobs_management"]], "neural_compressor.ux.components.jobs_management.jobs_control_queue": [[407, "module-neural_compressor.ux.components.jobs_management.jobs_control_queue"]], "neural_compressor.ux.components.jobs_management.jobs_manager": [[408, "module-neural_compressor.ux.components.jobs_management.jobs_manager"]], "neural_compressor.ux.components.jobs_management.request": [[409, "module-neural_compressor.ux.components.jobs_management.request"]], "get_default_path() (in module neural_compressor.ux.components.manage_workspace)": [[410, "neural_compressor.ux.components.manage_workspace.get_default_path"]], "neural_compressor.ux.components.manage_workspace": [[410, "module-neural_compressor.ux.components.manage_workspace"]], "domain (class in neural_compressor.ux.components.model.domain)": [[411, "neural_compressor.ux.components.model.domain.Domain"]], "neural_compressor.ux.components.model.domain": [[411, "module-neural_compressor.ux.components.model.domain"]], "neural_compressor.ux.components.model": [[412, "module-neural_compressor.ux.components.model"]], "model (class in neural_compressor.ux.components.model.model)": [[413, "neural_compressor.ux.components.model.model.Model"]], "domain (neural_compressor.ux.components.model.model.model property)": [[413, "neural_compressor.ux.components.model.model.Model.domain"]], "ensure_supported_path() (neural_compressor.ux.components.model.model.model method)": [[413, "neural_compressor.ux.components.model.model.Model.ensure_supported_path"]], "get_framework_name() (neural_compressor.ux.components.model.model.model static method)": [[413, "neural_compressor.ux.components.model.model.Model.get_framework_name"]], "get_input_nodes() (neural_compressor.ux.components.model.model.model method)": [[413, "neural_compressor.ux.components.model.model.Model.get_input_nodes"]], "get_model_graph() (neural_compressor.ux.components.model.model.model method)": [[413, "neural_compressor.ux.components.model.model.Model.get_model_graph"]], "get_output_nodes() (neural_compressor.ux.components.model.model.model method)": [[413, "neural_compressor.ux.components.model.model.Model.get_output_nodes"]], "get_tensors_info() (neural_compressor.ux.components.model.model.model method)": [[413, "neural_compressor.ux.components.model.model.Model.get_tensors_info"]], "guard_requirements_installed() (neural_compressor.ux.components.model.model.model method)": [[413, "neural_compressor.ux.components.model.model.Model.guard_requirements_installed"]], "input_shape (neural_compressor.ux.components.model.model.model property)": [[413, "neural_compressor.ux.components.model.model.Model.input_shape"]], "neural_compressor.ux.components.model.model": [[413, "module-neural_compressor.ux.components.model.model"]], "shape_elements_order (neural_compressor.ux.components.model.model.model property)": [[413, "neural_compressor.ux.components.model.model.Model.shape_elements_order"]], "supports_graph (neural_compressor.ux.components.model.model.model property)": [[413, "neural_compressor.ux.components.model.model.Model.supports_graph"]], "supports_path() (neural_compressor.ux.components.model.model.model static method)": [[413, "neural_compressor.ux.components.model.model.Model.supports_path"]], "supports_profiling (neural_compressor.ux.components.model.model.model property)": [[413, "neural_compressor.ux.components.model.model.Model.supports_profiling"]], "supports_pruning (neural_compressor.ux.components.model.model.model property)": [[413, "neural_compressor.ux.components.model.model.Model.supports_pruning"]], "get_model_type() (in module neural_compressor.ux.components.model.model_type_getter)": [[414, "neural_compressor.ux.components.model.model_type_getter.get_model_type"]], "neural_compressor.ux.components.model.model_type_getter": [[414, "module-neural_compressor.ux.components.model.model_type_getter"]], "neural_compressor.ux.components.model.onnxrt": [[415, "module-neural_compressor.ux.components.model.onnxrt"]], "onnxrtmodel (class in neural_compressor.ux.components.model.onnxrt.model)": [[416, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel"]], "domain (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel property)": [[416, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.domain"]], "filtered_input_nodes (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel property)": [[416, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.filtered_input_nodes"]], "get_framework_name() (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel static method)": [[416, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.get_framework_name"]], "get_model_graph() (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel method)": [[416, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.get_model_graph"]], "guard_requirements_installed() (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel method)": [[416, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.guard_requirements_installed"]], "input_shape (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel property)": [[416, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.input_shape"]], "nc_model_instance (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel property)": [[416, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.nc_model_instance"]], "neural_compressor.ux.components.model.onnxrt.model": [[416, "module-neural_compressor.ux.components.model.onnxrt.model"]], "remove_number_of_samples_from_shape() (in module neural_compressor.ux.components.model.onnxrt.model)": [[416, "neural_compressor.ux.components.model.onnxrt.model.remove_number_of_samples_from_shape"]], "shape_elements_order (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel property)": [[416, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.shape_elements_order"]], "supports_path() (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel static method)": [[416, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.supports_path"]], "neural_compressor.ux.components.model.pytorch": [[417, "module-neural_compressor.ux.components.model.pytorch"]], "pytorchscriptmodel (class in neural_compressor.ux.components.model.pytorch.model)": [[418, "neural_compressor.ux.components.model.pytorch.model.PyTorchScriptModel"]], "get_framework_name() (neural_compressor.ux.components.model.pytorch.model.pytorchscriptmodel static method)": [[418, "neural_compressor.ux.components.model.pytorch.model.PyTorchScriptModel.get_framework_name"]], "guard_requirements_installed() (neural_compressor.ux.components.model.pytorch.model.pytorchscriptmodel method)": [[418, "neural_compressor.ux.components.model.pytorch.model.PyTorchScriptModel.guard_requirements_installed"]], "neural_compressor.ux.components.model.pytorch.model": [[418, "module-neural_compressor.ux.components.model.pytorch.model"]], "supports_path() (neural_compressor.ux.components.model.pytorch.model.pytorchscriptmodel static method)": [[418, "neural_compressor.ux.components.model.pytorch.model.PyTorchScriptModel.supports_path"]], "modelrepository (class in neural_compressor.ux.components.model.repository)": [[419, "neural_compressor.ux.components.model.repository.ModelRepository"]], "get_framework_from_path() (neural_compressor.ux.components.model.repository.modelrepository static method)": [[419, "neural_compressor.ux.components.model.repository.ModelRepository.get_framework_from_path"]], "get_frameworks() (neural_compressor.ux.components.model.repository.modelrepository method)": [[419, "neural_compressor.ux.components.model.repository.ModelRepository.get_frameworks"]], "get_model() (neural_compressor.ux.components.model.repository.modelrepository method)": [[419, "neural_compressor.ux.components.model.repository.ModelRepository.get_model"]], "get_supported_frameworks() (neural_compressor.ux.components.model.repository.modelrepository static method)": [[419, "neural_compressor.ux.components.model.repository.ModelRepository.get_supported_frameworks"]], "is_model_path() (neural_compressor.ux.components.model.repository.modelrepository static method)": [[419, "neural_compressor.ux.components.model.repository.ModelRepository.is_model_path"]], "neural_compressor.ux.components.model.repository": [[419, "module-neural_compressor.ux.components.model.repository"]], "shape (class in neural_compressor.ux.components.model.shape)": [[420, "neural_compressor.ux.components.model.shape.Shape"]], "neural_compressor.ux.components.model.shape": [[420, "module-neural_compressor.ux.components.model.shape"]], "serialize() (neural_compressor.ux.components.model.shape.shape method)": [[420, "neural_compressor.ux.components.model.shape.Shape.serialize"]], "frozenpbmodel (class in neural_compressor.ux.components.model.tensorflow.frozen_pb)": [[421, "neural_compressor.ux.components.model.tensorflow.frozen_pb.FrozenPbModel"]], "neural_compressor.ux.components.model.tensorflow.frozen_pb": [[421, "module-neural_compressor.ux.components.model.tensorflow.frozen_pb"]], "supports_path() (neural_compressor.ux.components.model.tensorflow.frozen_pb.frozenpbmodel static method)": [[421, "neural_compressor.ux.components.model.tensorflow.frozen_pb.FrozenPbModel.supports_path"]], "supports_profiling (neural_compressor.ux.components.model.tensorflow.frozen_pb.frozenpbmodel property)": [[421, "neural_compressor.ux.components.model.tensorflow.frozen_pb.FrozenPbModel.supports_profiling"]], "neural_compressor.ux.components.model.tensorflow": [[422, "module-neural_compressor.ux.components.model.tensorflow"]], "kerasmodel (class in neural_compressor.ux.components.model.tensorflow.keras)": [[423, "neural_compressor.ux.components.model.tensorflow.keras.KerasModel"]], "get_input_nodes() (neural_compressor.ux.components.model.tensorflow.keras.kerasmodel method)": [[423, "neural_compressor.ux.components.model.tensorflow.keras.KerasModel.get_input_nodes"]], "get_output_nodes() (neural_compressor.ux.components.model.tensorflow.keras.kerasmodel method)": [[423, "neural_compressor.ux.components.model.tensorflow.keras.KerasModel.get_output_nodes"]], "neural_compressor.ux.components.model.tensorflow.keras": [[423, "module-neural_compressor.ux.components.model.tensorflow.keras"]], "supports_path() (neural_compressor.ux.components.model.tensorflow.keras.kerasmodel static method)": [[423, "neural_compressor.ux.components.model.tensorflow.keras.KerasModel.supports_path"]], "metagraphmodel (class in neural_compressor.ux.components.model.tensorflow.meta_graph)": [[424, "neural_compressor.ux.components.model.tensorflow.meta_graph.MetaGraphModel"]], "get_input_nodes() (neural_compressor.ux.components.model.tensorflow.meta_graph.metagraphmodel method)": [[424, "neural_compressor.ux.components.model.tensorflow.meta_graph.MetaGraphModel.get_input_nodes"]], "get_model_graph() (neural_compressor.ux.components.model.tensorflow.meta_graph.metagraphmodel method)": [[424, "neural_compressor.ux.components.model.tensorflow.meta_graph.MetaGraphModel.get_model_graph"]], "get_output_nodes() (neural_compressor.ux.components.model.tensorflow.meta_graph.metagraphmodel method)": [[424, "neural_compressor.ux.components.model.tensorflow.meta_graph.MetaGraphModel.get_output_nodes"]], "neural_compressor.ux.components.model.tensorflow.meta_graph": [[424, "module-neural_compressor.ux.components.model.tensorflow.meta_graph"]], "supports_path() (neural_compressor.ux.components.model.tensorflow.meta_graph.metagraphmodel static method)": [[424, "neural_compressor.ux.components.model.tensorflow.meta_graph.MetaGraphModel.supports_path"]], "tensorflowmodel (class in neural_compressor.ux.components.model.tensorflow.model)": [[425, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel"]], "get_framework_name() (neural_compressor.ux.components.model.tensorflow.model.tensorflowmodel static method)": [[425, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel.get_framework_name"]], "get_input_nodes() (neural_compressor.ux.components.model.tensorflow.model.tensorflowmodel method)": [[425, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel.get_input_nodes"]], "get_model_graph() (neural_compressor.ux.components.model.tensorflow.model.tensorflowmodel method)": [[425, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel.get_model_graph"]], "get_output_nodes() (neural_compressor.ux.components.model.tensorflow.model.tensorflowmodel method)": [[425, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel.get_output_nodes"]], "guard_requirements_installed() (neural_compressor.ux.components.model.tensorflow.model.tensorflowmodel method)": [[425, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel.guard_requirements_installed"]], "input_shape (neural_compressor.ux.components.model.tensorflow.model.tensorflowmodel property)": [[425, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel.input_shape"]], "nc_model_instance (neural_compressor.ux.components.model.tensorflow.model.tensorflowmodel property)": [[425, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel.nc_model_instance"]], "neural_compressor.ux.components.model.tensorflow.model": [[425, "module-neural_compressor.ux.components.model.tensorflow.model"]], "shape_elements_order (neural_compressor.ux.components.model.tensorflow.model.tensorflowmodel property)": [[425, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel.shape_elements_order"]], "supports_pruning (neural_compressor.ux.components.model.tensorflow.model.tensorflowmodel property)": [[425, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel.supports_pruning"]], "savedmodelmodel (class in neural_compressor.ux.components.model.tensorflow.saved_model)": [[426, "neural_compressor.ux.components.model.tensorflow.saved_model.SavedModelModel"]], "neural_compressor.ux.components.model.tensorflow.saved_model": [[426, "module-neural_compressor.ux.components.model.tensorflow.saved_model"]], "supports_path() (neural_compressor.ux.components.model.tensorflow.saved_model.savedmodelmodel static method)": [[426, "neural_compressor.ux.components.model.tensorflow.saved_model.SavedModelModel.supports_path"]], "get_input_shape() (in module neural_compressor.ux.components.model.tensorflow.utils)": [[427, "neural_compressor.ux.components.model.tensorflow.utils.get_input_shape"]], "neural_compressor.ux.components.model.tensorflow.utils": [[427, "module-neural_compressor.ux.components.model.tensorflow.utils"]], "download_config() (in module neural_compressor.ux.components.model_zoo.download_config)": [[428, "neural_compressor.ux.components.model_zoo.download_config.download_config"]], "neural_compressor.ux.components.model_zoo.download_config": [[428, "module-neural_compressor.ux.components.model_zoo.download_config"]], "download_model() (in module neural_compressor.ux.components.model_zoo.download_model)": [[429, "neural_compressor.ux.components.model_zoo.download_model.download_model"]], "neural_compressor.ux.components.model_zoo.download_model": [[429, "module-neural_compressor.ux.components.model_zoo.download_model"]], "downloader (class in neural_compressor.ux.components.model_zoo.downloader)": [[430, "neural_compressor.ux.components.model_zoo.downloader.Downloader"]], "download() (neural_compressor.ux.components.model_zoo.downloader.downloader method)": [[430, "neural_compressor.ux.components.model_zoo.downloader.Downloader.download"]], "download_config() (neural_compressor.ux.components.model_zoo.downloader.downloader method)": [[430, "neural_compressor.ux.components.model_zoo.downloader.Downloader.download_config"]], "download_file() (neural_compressor.ux.components.model_zoo.downloader.downloader method)": [[430, "neural_compressor.ux.components.model_zoo.downloader.Downloader.download_file"]], "download_model() (neural_compressor.ux.components.model_zoo.downloader.downloader method)": [[430, "neural_compressor.ux.components.model_zoo.downloader.Downloader.download_model"]], "download_yaml_config() (neural_compressor.ux.components.model_zoo.downloader.downloader method)": [[430, "neural_compressor.ux.components.model_zoo.downloader.Downloader.download_yaml_config"]], "get_yaml_url() (neural_compressor.ux.components.model_zoo.downloader.downloader method)": [[430, "neural_compressor.ux.components.model_zoo.downloader.Downloader.get_yaml_url"]], "neural_compressor.ux.components.model_zoo.downloader": [[430, "module-neural_compressor.ux.components.model_zoo.downloader"]], "unpack_archive() (neural_compressor.ux.components.model_zoo.downloader.downloader method)": [[430, "neural_compressor.ux.components.model_zoo.downloader.Downloader.unpack_archive"]], "neural_compressor.ux.components.model_zoo": [[431, "module-neural_compressor.ux.components.model_zoo"]], "check_version() (in module neural_compressor.ux.components.model_zoo.list_models)": [[432, "neural_compressor.ux.components.model_zoo.list_models.check_version"]], "get_available_models() (in module neural_compressor.ux.components.model_zoo.list_models)": [[432, "neural_compressor.ux.components.model_zoo.list_models.get_available_models"]], "get_framework_module_name() (in module neural_compressor.ux.components.model_zoo.list_models)": [[432, "neural_compressor.ux.components.model_zoo.list_models.get_framework_module_name"]], "get_installed_frameworks() (in module neural_compressor.ux.components.model_zoo.list_models)": [[432, "neural_compressor.ux.components.model_zoo.list_models.get_installed_frameworks"]], "list_models() (in module neural_compressor.ux.components.model_zoo.list_models)": [[432, "neural_compressor.ux.components.model_zoo.list_models.list_models"]], "neural_compressor.ux.components.model_zoo.list_models": [[432, "module-neural_compressor.ux.components.model_zoo.list_models"]], "validate_model_list() (in module neural_compressor.ux.components.model_zoo.list_models)": [[432, "neural_compressor.ux.components.model_zoo.list_models.validate_model_list"]], "neural_compressor.ux.components.names_mapper": [[433, "module-neural_compressor.ux.components.names_mapper"]], "mappingdirection (class in neural_compressor.ux.components.names_mapper.names_mapper)": [[434, "neural_compressor.ux.components.names_mapper.names_mapper.MappingDirection"]], "namesmapper (class in neural_compressor.ux.components.names_mapper.names_mapper)": [[434, "neural_compressor.ux.components.names_mapper.names_mapper.NamesMapper"]], "domain_flavour_mappings (neural_compressor.ux.components.names_mapper.names_mapper.namesmapper property)": [[434, "neural_compressor.ux.components.names_mapper.names_mapper.NamesMapper.domain_flavour_mappings"]], "domain_mappings (neural_compressor.ux.components.names_mapper.names_mapper.namesmapper property)": [[434, "neural_compressor.ux.components.names_mapper.names_mapper.NamesMapper.domain_mappings"]], "framework_mappings (neural_compressor.ux.components.names_mapper.names_mapper.namesmapper property)": [[434, "neural_compressor.ux.components.names_mapper.names_mapper.NamesMapper.framework_mappings"]], "map_name() (neural_compressor.ux.components.names_mapper.names_mapper.namesmapper method)": [[434, "neural_compressor.ux.components.names_mapper.names_mapper.NamesMapper.map_name"]], "neural_compressor.ux.components.names_mapper.names_mapper": [[434, "module-neural_compressor.ux.components.names_mapper.names_mapper"]], "precision_mappings (neural_compressor.ux.components.names_mapper.names_mapper.namesmapper property)": [[434, "neural_compressor.ux.components.names_mapper.names_mapper.NamesMapper.precision_mappings"]], "check_if_collect_tuning_history() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[435, "neural_compressor.ux.components.optimization.execute_optimization.check_if_collect_tuning_history"]], "execute_optimization() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[435, "neural_compressor.ux.components.optimization.execute_optimization.execute_optimization"]], "execute_optimization_pytorch_script() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[435, "neural_compressor.ux.components.optimization.execute_optimization.execute_optimization_pytorch_script"]], "execute_optimization_regular() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[435, "neural_compressor.ux.components.optimization.execute_optimization.execute_optimization_regular"]], "neural_compressor.ux.components.optimization.execute_optimization": [[435, "module-neural_compressor.ux.components.optimization.execute_optimization"]], "parse_logs() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[435, "neural_compressor.ux.components.optimization.execute_optimization.parse_logs"]], "parse_model_data_to_bench_names() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[435, "neural_compressor.ux.components.optimization.execute_optimization.parse_model_data_to_bench_names"]], "optimizationfactory (class in neural_compressor.ux.components.optimization.factory)": [[436, "neural_compressor.ux.components.optimization.factory.OptimizationFactory"]], "get_optimization() (neural_compressor.ux.components.optimization.factory.optimizationfactory static method)": [[436, "neural_compressor.ux.components.optimization.factory.OptimizationFactory.get_optimization"]], "neural_compressor.ux.components.optimization.factory": [[436, "module-neural_compressor.ux.components.optimization.factory"]], "graphoptimization (class in neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization)": [[437, "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.GraphOptimization"]], "configuration_data (neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.graphoptimization property)": [[437, "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.GraphOptimization.configuration_data"]], "execute() (neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.graphoptimization method)": [[437, "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.GraphOptimization.execute"]], "generate_config() (neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.graphoptimization method)": [[437, "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.GraphOptimization.generate_config"]], "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization": [[437, "module-neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization"]], "optimization_script (neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.graphoptimization property)": [[437, "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.GraphOptimization.optimization_script"]], "parameters (neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.graphoptimization property)": [[437, "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.GraphOptimization.parameters"]], "neural_compressor.ux.components.optimization.graph_optimizer": [[438, "module-neural_compressor.ux.components.optimization.graph_optimizer"]], "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model": [[439, "module-neural_compressor.ux.components.optimization.graph_optimizer.optimize_model"]], "optimize_graph() (in module neural_compressor.ux.components.optimization.graph_optimizer.optimize_model)": [[439, "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model.optimize_graph"]], "optimize_graph_config() (in module neural_compressor.ux.components.optimization.graph_optimizer.optimize_model)": [[439, "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model.optimize_graph_config"]], "parse_args() (in module neural_compressor.ux.components.optimization.graph_optimizer.optimize_model)": [[439, "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model.parse_args"]], "set_eager_execution() (in module neural_compressor.ux.components.optimization.graph_optimizer.optimize_model)": [[439, "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model.set_eager_execution"]], "optimizations (class in neural_compressor.ux.components.optimization)": [[440, "neural_compressor.ux.components.optimization.Optimizations"]], "neural_compressor.ux.components.optimization": [[440, "module-neural_compressor.ux.components.optimization"]], "neural_compressor.ux.components.optimization.mixed_precision": [[441, "module-neural_compressor.ux.components.optimization.mixed_precision"]], "mixedprecision (class in neural_compressor.ux.components.optimization.mixed_precision.mixed_precision)": [[442, "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.MixedPrecision"]], "configuration_data (neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.mixedprecision property)": [[442, "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.MixedPrecision.configuration_data"]], "execute() (neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.mixedprecision method)": [[442, "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.MixedPrecision.execute"]], "generate_config() (neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.mixedprecision method)": [[442, "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.MixedPrecision.generate_config"]], "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision": [[442, "module-neural_compressor.ux.components.optimization.mixed_precision.mixed_precision"]], "optimization_script (neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.mixedprecision property)": [[442, "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.MixedPrecision.optimization_script"]], "parameters (neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.mixedprecision property)": [[442, "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.MixedPrecision.parameters"]], "neural_compressor.ux.components.optimization.mixed_precision.optimize_model": [[443, "module-neural_compressor.ux.components.optimization.mixed_precision.optimize_model"]], "optimize_graph() (in module neural_compressor.ux.components.optimization.mixed_precision.optimize_model)": [[443, "neural_compressor.ux.components.optimization.mixed_precision.optimize_model.optimize_graph"]], "optimize_graph_config() (in module neural_compressor.ux.components.optimization.mixed_precision.optimize_model)": [[443, "neural_compressor.ux.components.optimization.mixed_precision.optimize_model.optimize_graph_config"]], "parse_args() (in module neural_compressor.ux.components.optimization.mixed_precision.optimize_model)": [[443, "neural_compressor.ux.components.optimization.mixed_precision.optimize_model.parse_args"]], "set_eager_execution() (in module neural_compressor.ux.components.optimization.mixed_precision.optimize_model)": [[443, "neural_compressor.ux.components.optimization.mixed_precision.optimize_model.set_eager_execution"]], "neural_compressor.ux.components.optimization.neural_coder_optimization": [[444, "module-neural_compressor.ux.components.optimization.neural_coder_optimization"]], "neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model": [[445, "module-neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model"]], "optimize_pt_script() (in module neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model)": [[445, "neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model.optimize_pt_script"]], "dataloaderinterface (class in neural_compressor.ux.components.optimization.optimization)": [[446, "neural_compressor.ux.components.optimization.optimization.DataloaderInterface"]], "optimization (class in neural_compressor.ux.components.optimization.optimization)": [[446, "neural_compressor.ux.components.optimization.optimization.Optimization"]], "optimizationinterface (class in neural_compressor.ux.components.optimization.optimization)": [[446, "neural_compressor.ux.components.optimization.optimization.OptimizationInterface"]], "command (neural_compressor.ux.components.optimization.optimization.optimization property)": [[446, "neural_compressor.ux.components.optimization.optimization.Optimization.command"]], "config_filename (neural_compressor.ux.components.optimization.optimization.optimization property)": [[446, "neural_compressor.ux.components.optimization.optimization.Optimization.config_filename"]], "configuration_data (neural_compressor.ux.components.optimization.optimization.optimization property)": [[446, "neural_compressor.ux.components.optimization.optimization.Optimization.configuration_data"]], "execute() (neural_compressor.ux.components.optimization.optimization.optimization method)": [[446, "neural_compressor.ux.components.optimization.optimization.Optimization.execute"]], "generate_config() (neural_compressor.ux.components.optimization.optimization.optimization method)": [[446, "neural_compressor.ux.components.optimization.optimization.Optimization.generate_config"]], "neural_compressor.ux.components.optimization.optimization": [[446, "module-neural_compressor.ux.components.optimization.optimization"]], "optimization_script (neural_compressor.ux.components.optimization.optimization.optimization property)": [[446, "neural_compressor.ux.components.optimization.optimization.Optimization.optimization_script"]], "output_model_dir (neural_compressor.ux.components.optimization.optimization.optimization property)": [[446, "neural_compressor.ux.components.optimization.optimization.Optimization.output_model_dir"]], "output_model_name (neural_compressor.ux.components.optimization.optimization.optimization property)": [[446, "neural_compressor.ux.components.optimization.optimization.Optimization.output_model_name"]], "parameters (neural_compressor.ux.components.optimization.optimization.optimization property)": [[446, "neural_compressor.ux.components.optimization.optimization.Optimization.parameters"]], "workdir (neural_compressor.ux.components.optimization.optimization.optimization property)": [[446, "neural_compressor.ux.components.optimization.optimization.Optimization.workdir"]], "neural_compressor.ux.components.optimization.pruning": [[447, "module-neural_compressor.ux.components.optimization.pruning"]], "neural_compressor.ux.components.optimization.pruning.optimize_model": [[448, "module-neural_compressor.ux.components.optimization.pruning.optimize_model"]], "optimize_model() (in module neural_compressor.ux.components.optimization.pruning.optimize_model)": [[448, "neural_compressor.ux.components.optimization.pruning.optimize_model.optimize_model"]], "parse_args() (in module neural_compressor.ux.components.optimization.pruning.optimize_model)": [[448, "neural_compressor.ux.components.optimization.pruning.optimize_model.parse_args"]], "pruning (class in neural_compressor.ux.components.optimization.pruning.pruning)": [[449, "neural_compressor.ux.components.optimization.pruning.pruning.Pruning"]], "configuration_data (neural_compressor.ux.components.optimization.pruning.pruning.pruning property)": [[449, "neural_compressor.ux.components.optimization.pruning.pruning.Pruning.configuration_data"]], "execute() (neural_compressor.ux.components.optimization.pruning.pruning.pruning method)": [[449, "neural_compressor.ux.components.optimization.pruning.pruning.Pruning.execute"]], "generate_config() (neural_compressor.ux.components.optimization.pruning.pruning.pruning method)": [[449, "neural_compressor.ux.components.optimization.pruning.pruning.Pruning.generate_config"]], "neural_compressor.ux.components.optimization.pruning.pruning": [[449, "module-neural_compressor.ux.components.optimization.pruning.pruning"]], "optimization_script (neural_compressor.ux.components.optimization.pruning.pruning.pruning property)": [[449, "neural_compressor.ux.components.optimization.pruning.pruning.Pruning.optimization_script"]], "parameters (neural_compressor.ux.components.optimization.pruning.pruning.pruning property)": [[449, "neural_compressor.ux.components.optimization.pruning.pruning.Pruning.parameters"]], "neural_compressor.ux.components.optimization.tune": [[450, "module-neural_compressor.ux.components.optimization.tune"]], "neural_compressor.ux.components.optimization.tune.tune_model": [[451, "module-neural_compressor.ux.components.optimization.tune.tune_model"]], "parse_args() (in module neural_compressor.ux.components.optimization.tune.tune_model)": [[451, "neural_compressor.ux.components.optimization.tune.tune_model.parse_args"]], "set_eager_execution() (in module neural_compressor.ux.components.optimization.tune.tune_model)": [[451, "neural_compressor.ux.components.optimization.tune.tune_model.set_eager_execution"]], "tune_model() (in module neural_compressor.ux.components.optimization.tune.tune_model)": [[451, "neural_compressor.ux.components.optimization.tune.tune_model.tune_model"]], "accuracycriterion (class in neural_compressor.ux.components.optimization.tune.tuning)": [[452, "neural_compressor.ux.components.optimization.tune.tuning.AccuracyCriterion"]], "tuning (class in neural_compressor.ux.components.optimization.tune.tuning)": [[452, "neural_compressor.ux.components.optimization.tune.tuning.Tuning"]], "tuningdetails (class in neural_compressor.ux.components.optimization.tune.tuning)": [[452, "neural_compressor.ux.components.optimization.tune.tuning.TuningDetails"]], "configuration_data (neural_compressor.ux.components.optimization.tune.tuning.tuning property)": [[452, "neural_compressor.ux.components.optimization.tune.tuning.Tuning.configuration_data"]], "execute() (neural_compressor.ux.components.optimization.tune.tuning.tuning method)": [[452, "neural_compressor.ux.components.optimization.tune.tuning.Tuning.execute"]], "generate_config() (neural_compressor.ux.components.optimization.tune.tuning.tuning method)": [[452, "neural_compressor.ux.components.optimization.tune.tuning.Tuning.generate_config"]], "neural_compressor.ux.components.optimization.tune.tuning": [[452, "module-neural_compressor.ux.components.optimization.tune.tuning"]], "optimization_script (neural_compressor.ux.components.optimization.tune.tuning.tuning property)": [[452, "neural_compressor.ux.components.optimization.tune.tuning.Tuning.optimization_script"]], "parameters (neural_compressor.ux.components.optimization.tune.tuning.tuning property)": [[452, "neural_compressor.ux.components.optimization.tune.tuning.Tuning.parameters"]], "tuninghistory (class in neural_compressor.ux.components.optimization.tuning_history)": [[453, "neural_compressor.ux.components.optimization.tuning_history.TuningHistory"]], "watcher (class in neural_compressor.ux.components.optimization.tuning_history)": [[453, "neural_compressor.ux.components.optimization.tuning_history.Watcher"]], "history_file_modification_time() (neural_compressor.ux.components.optimization.tuning_history.watcher method)": [[453, "neural_compressor.ux.components.optimization.tuning_history.Watcher.history_file_modification_time"]], "neural_compressor.ux.components.optimization.tuning_history": [[453, "module-neural_compressor.ux.components.optimization.tuning_history"]], "send_history_snapshot() (neural_compressor.ux.components.optimization.tuning_history.tuninghistory static method)": [[453, "neural_compressor.ux.components.optimization.tuning_history.TuningHistory.send_history_snapshot"]], "stop() (neural_compressor.ux.components.optimization.tuning_history.watcher method)": [[453, "neural_compressor.ux.components.optimization.tuning_history.Watcher.stop"]], "tuning_history() (in module neural_compressor.ux.components.optimization.tuning_history)": [[453, "neural_compressor.ux.components.optimization.tuning_history.tuning_history"]], "tuning_history_path() (in module neural_compressor.ux.components.optimization.tuning_history)": [[453, "neural_compressor.ux.components.optimization.tuning_history.tuning_history_path"]], "was_history_file_changed() (neural_compressor.ux.components.optimization.tuning_history.watcher method)": [[453, "neural_compressor.ux.components.optimization.tuning_history.Watcher.was_history_file_changed"]], "execute_profiling() (in module neural_compressor.ux.components.profiling.execute_profiling)": [[454, "neural_compressor.ux.components.profiling.execute_profiling.execute_profiling"]], "execute_real_profiling() (in module neural_compressor.ux.components.profiling.execute_profiling)": [[454, "neural_compressor.ux.components.profiling.execute_profiling.execute_real_profiling"]], "neural_compressor.ux.components.profiling.execute_profiling": [[454, "module-neural_compressor.ux.components.profiling.execute_profiling"]], "profilerfactory (class in neural_compressor.ux.components.profiling.factory)": [[455, "neural_compressor.ux.components.profiling.factory.ProfilerFactory"]], "get_profiler() (neural_compressor.ux.components.profiling.factory.profilerfactory static method)": [[455, "neural_compressor.ux.components.profiling.factory.ProfilerFactory.get_profiler"]], "neural_compressor.ux.components.profiling.factory": [[455, "module-neural_compressor.ux.components.profiling.factory"]], "neural_compressor.ux.components.profiling": [[456, "module-neural_compressor.ux.components.profiling"]], "load_profiling_details() (in module neural_compressor.ux.components.profiling.profile_model)": [[457, "neural_compressor.ux.components.profiling.profile_model.load_profiling_details"]], "neural_compressor.ux.components.profiling.profile_model": [[457, "module-neural_compressor.ux.components.profiling.profile_model"]], "parse_args() (in module neural_compressor.ux.components.profiling.profile_model)": [[457, "neural_compressor.ux.components.profiling.profile_model.parse_args"]], "profiler (class in neural_compressor.ux.components.profiling.profiler)": [[458, "neural_compressor.ux.components.profiling.profiler.Profiler"]], "neural_compressor.ux.components.profiling.profiler": [[458, "module-neural_compressor.ux.components.profiling.profiler"]], "profile_model() (neural_compressor.ux.components.profiling.profiler.profiler method)": [[458, "neural_compressor.ux.components.profiling.profiler.Profiler.profile_model"]], "dataloaderinterface (class in neural_compressor.ux.components.profiling.profiling)": [[459, "neural_compressor.ux.components.profiling.profiling.DataloaderInterface"]], "profiling (class in neural_compressor.ux.components.profiling.profiling)": [[459, "neural_compressor.ux.components.profiling.profiling.Profiling"]], "config_filename (neural_compressor.ux.components.profiling.profiling.profiling property)": [[459, "neural_compressor.ux.components.profiling.profiling.Profiling.config_filename"]], "config_path (neural_compressor.ux.components.profiling.profiling.profiling property)": [[459, "neural_compressor.ux.components.profiling.profiling.Profiling.config_path"]], "execute() (neural_compressor.ux.components.profiling.profiling.profiling method)": [[459, "neural_compressor.ux.components.profiling.profiling.Profiling.execute"]], "generate_config() (neural_compressor.ux.components.profiling.profiling.profiling method)": [[459, "neural_compressor.ux.components.profiling.profiling.Profiling.generate_config"]], "neural_compressor.ux.components.profiling.profiling": [[459, "module-neural_compressor.ux.components.profiling.profiling"]], "profiling_data (neural_compressor.ux.components.profiling.profiling.profiling property)": [[459, "neural_compressor.ux.components.profiling.profiling.Profiling.profiling_data"]], "workdir (neural_compressor.ux.components.profiling.profiling.profiling property)": [[459, "neural_compressor.ux.components.profiling.profiling.Profiling.workdir"]], "profilerfactory (class in neural_compressor.ux.components.profiling.tensorflow_profiler.factory)": [[460, "neural_compressor.ux.components.profiling.tensorflow_profiler.factory.ProfilerFactory"]], "get_profiler() (neural_compressor.ux.components.profiling.tensorflow_profiler.factory.profilerfactory static method)": [[460, "neural_compressor.ux.components.profiling.tensorflow_profiler.factory.ProfilerFactory.get_profiler"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.factory": [[460, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.factory"]], "neural_compressor.ux.components.profiling.tensorflow_profiler": [[461, "module-neural_compressor.ux.components.profiling.tensorflow_profiler"]], "profiler (class in neural_compressor.ux.components.profiling.tensorflow_profiler.profiler)": [[462, "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.Profiler"]], "build_dataloader() (neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.profiler method)": [[462, "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.Profiler.build_dataloader"]], "convert_nodes_to_list() (neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.profiler static method)": [[462, "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.Profiler.convert_nodes_to_list"]], "create_tf_config() (neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.profiler method)": [[462, "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.Profiler.create_tf_config"]], "get_node_by_name() (neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.profiler static method)": [[462, "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.Profiler.get_node_by_name"]], "initialize_graph() (neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.profiler method)": [[462, "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.Profiler.initialize_graph"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler": [[462, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.profiler"]], "profile_model() (neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.profiler method)": [[462, "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.Profiler.profile_model"]], "delete_assign() (in module neural_compressor.ux.components.profiling.tensorflow_profiler.utils)": [[463, "neural_compressor.ux.components.profiling.tensorflow_profiler.utils.delete_assign"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.utils": [[463, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.utils"]], "main() (in module neural_compressor.ux.inc_bench)": [[464, "neural_compressor.ux.inc_bench.main"]], "neural_compressor.ux.inc_bench": [[464, "module-neural_compressor.ux.inc_bench"]], "prepare_environment() (in module neural_compressor.ux.inc_bench)": [[464, "neural_compressor.ux.inc_bench.prepare_environment"]], "neural_compressor.ux": [[465, "module-neural_compressor.ux"]], "domainflavours (class in neural_compressor.ux.utils.consts)": [[466, "neural_compressor.ux.utils.consts.DomainFlavours"]], "domains (class in neural_compressor.ux.utils.consts)": [[466, "neural_compressor.ux.utils.consts.Domains"]], "executionstatus (class in neural_compressor.ux.utils.consts)": [[466, "neural_compressor.ux.utils.consts.ExecutionStatus"]], "frameworks (class in neural_compressor.ux.utils.consts)": [[466, "neural_compressor.ux.utils.consts.Frameworks"]], "optimizationtypes (class in neural_compressor.ux.utils.consts)": [[466, "neural_compressor.ux.utils.consts.OptimizationTypes"]], "precisions (class in neural_compressor.ux.utils.consts)": [[466, "neural_compressor.ux.utils.consts.Precisions"]], "strategies (class in neural_compressor.ux.utils.consts)": [[466, "neural_compressor.ux.utils.consts.Strategies"]], "neural_compressor.ux.utils.consts": [[466, "module-neural_compressor.ux.utils.consts"]], "environment (class in neural_compressor.ux.utils.environment)": [[467, "neural_compressor.ux.utils.environment.Environment"]], "clean_workloads_wip_status() (neural_compressor.ux.utils.environment.environment static method)": [[467, "neural_compressor.ux.utils.environment.Environment.clean_workloads_wip_status"]], "ensure_workdir_exists_and_writeable() (neural_compressor.ux.utils.environment.environment static method)": [[467, "neural_compressor.ux.utils.environment.Environment.ensure_workdir_exists_and_writeable"]], "migrate_database() (neural_compressor.ux.utils.environment.environment static method)": [[467, "neural_compressor.ux.utils.environment.Environment.migrate_database"]], "neural_compressor.ux.utils.environment": [[467, "module-neural_compressor.ux.utils.environment"]], "accessdeniedexception": [[468, "neural_compressor.ux.utils.exceptions.AccessDeniedException"]], "clienterrorexception": [[468, "neural_compressor.ux.utils.exceptions.ClientErrorException"]], "internalexception": [[468, "neural_compressor.ux.utils.exceptions.InternalException"]], "notfoundexception": [[468, "neural_compressor.ux.utils.exceptions.NotFoundException"]], "neural_compressor.ux.utils.exceptions": [[468, "module-neural_compressor.ux.utils.exceptions"]], "executor (class in neural_compressor.ux.utils.executor)": [[469, "neural_compressor.ux.utils.executor.Executor"]], "additional_log_names (neural_compressor.ux.utils.executor.executor property)": [[469, "neural_compressor.ux.utils.executor.Executor.additional_log_names"]], "call() (neural_compressor.ux.utils.executor.executor method)": [[469, "neural_compressor.ux.utils.executor.Executor.call"]], "call_one() (neural_compressor.ux.utils.executor.executor method)": [[469, "neural_compressor.ux.utils.executor.Executor.call_one"]], "is_multi_commands() (neural_compressor.ux.utils.executor.executor static method)": [[469, "neural_compressor.ux.utils.executor.Executor.is_multi_commands"]], "log_name (neural_compressor.ux.utils.executor.executor property)": [[469, "neural_compressor.ux.utils.executor.Executor.log_name"]], "neural_compressor.ux.utils.executor": [[469, "module-neural_compressor.ux.utils.executor"]], "process_duration (neural_compressor.ux.utils.executor.executor property)": [[469, "neural_compressor.ux.utils.executor.Executor.process_duration"]], "refresh_workdir() (neural_compressor.ux.utils.executor.executor method)": [[469, "neural_compressor.ux.utils.executor.Executor.refresh_workdir"]], "request_id (neural_compressor.ux.utils.executor.executor property)": [[469, "neural_compressor.ux.utils.executor.Executor.request_id"]], "workdir (neural_compressor.ux.utils.executor.executor property)": [[469, "neural_compressor.ux.utils.executor.Executor.workdir"]], "expiringdict (class in neural_compressor.ux.utils.expiring_dict)": [[470, "neural_compressor.ux.utils.expiring_dict.ExpiringDict"]], "expiringdictitem (class in neural_compressor.ux.utils.expiring_dict)": [[470, "neural_compressor.ux.utils.expiring_dict.ExpiringDictItem"]], "is_expired() (neural_compressor.ux.utils.expiring_dict.expiringdictitem method)": [[470, "neural_compressor.ux.utils.expiring_dict.ExpiringDictItem.is_expired"]], "neural_compressor.ux.utils.expiring_dict": [[470, "module-neural_compressor.ux.utils.expiring_dict"]], "githubinfo (class in neural_compressor.ux.utils.github_info)": [[471, "neural_compressor.ux.utils.github_info.GithubInfo"]], "neural_compressor.ux.utils.github_info": [[471, "module-neural_compressor.ux.utils.github_info"]], "tag() (neural_compressor.ux.utils.github_info.githubinfo class method)": [[471, "neural_compressor.ux.utils.github_info.GithubInfo.tag"]], "hwinfo (class in neural_compressor.ux.utils.hw_info)": [[472, "neural_compressor.ux.utils.hw_info.HWInfo"]], "get_bios_version() (in module neural_compressor.ux.utils.hw_info)": [[472, "neural_compressor.ux.utils.hw_info.get_bios_version"]], "get_distribution() (in module neural_compressor.ux.utils.hw_info)": [[472, "neural_compressor.ux.utils.hw_info.get_distribution"]], "get_framework_dependency_info() (in module neural_compressor.ux.utils.hw_info)": [[472, "neural_compressor.ux.utils.hw_info.get_framework_dependency_info"]], "get_framework_info() (in module neural_compressor.ux.utils.hw_info)": [[472, "neural_compressor.ux.utils.hw_info.get_framework_info"]], "get_kernel_version() (in module neural_compressor.ux.utils.hw_info)": [[472, "neural_compressor.ux.utils.hw_info.get_kernel_version"]], "get_number_of_sockets() (in module neural_compressor.ux.utils.hw_info)": [[472, "neural_compressor.ux.utils.hw_info.get_number_of_sockets"]], "initialize() (neural_compressor.ux.utils.hw_info.hwinfo method)": [[472, "neural_compressor.ux.utils.hw_info.HWInfo.initialize"]], "is_turbo_boost_enabled() (in module neural_compressor.ux.utils.hw_info)": [[472, "neural_compressor.ux.utils.hw_info.is_turbo_boost_enabled"]], "neural_compressor.ux.utils.hw_info": [[472, "module-neural_compressor.ux.utils.hw_info"]], "serialize() (neural_compressor.ux.utils.hw_info.hwinfo method)": [[472, "neural_compressor.ux.utils.hw_info.HWInfo.serialize"]], "neural_compressor.ux.utils": [[473, "module-neural_compressor.ux.utils"]], "jsonserializer (class in neural_compressor.ux.utils.json_serializer)": [[474, "neural_compressor.ux.utils.json_serializer.JsonSerializer"]], "neural_compressor.ux.utils.json_serializer": [[474, "module-neural_compressor.ux.utils.json_serializer"]], "serialize() (neural_compressor.ux.utils.json_serializer.jsonserializer method)": [[474, "neural_compressor.ux.utils.json_serializer.JsonSerializer.serialize"]], "serialize_item() (neural_compressor.ux.utils.json_serializer.jsonserializer static method)": [[474, "neural_compressor.ux.utils.json_serializer.JsonSerializer.serialize_item"]], "change_log_level() (in module neural_compressor.ux.utils.logger)": [[475, "neural_compressor.ux.utils.logger.change_log_level"]], "neural_compressor.ux.utils.logger": [[475, "module-neural_compressor.ux.utils.logger"]], "accuracyparser (class in neural_compressor.ux.utils.parser)": [[476, "neural_compressor.ux.utils.parser.AccuracyParser"]], "benchmarkparserfactory (class in neural_compressor.ux.utils.parser)": [[476, "neural_compressor.ux.utils.parser.BenchmarkParserFactory"]], "optimizationparser (class in neural_compressor.ux.utils.parser)": [[476, "neural_compressor.ux.utils.parser.OptimizationParser"]], "parser (class in neural_compressor.ux.utils.parser)": [[476, "neural_compressor.ux.utils.parser.Parser"]], "performanceparser (class in neural_compressor.ux.utils.parser)": [[476, "neural_compressor.ux.utils.parser.PerformanceParser"]], "profilingparser (class in neural_compressor.ux.utils.parser)": [[476, "neural_compressor.ux.utils.parser.ProfilingParser"]], "get_parser() (neural_compressor.ux.utils.parser.benchmarkparserfactory static method)": [[476, "neural_compressor.ux.utils.parser.BenchmarkParserFactory.get_parser"]], "neural_compressor.ux.utils.parser": [[476, "module-neural_compressor.ux.utils.parser"]], "patterns (neural_compressor.ux.utils.parser.accuracyparser property)": [[476, "neural_compressor.ux.utils.parser.AccuracyParser.patterns"]], "patterns (neural_compressor.ux.utils.parser.optimizationparser property)": [[476, "neural_compressor.ux.utils.parser.OptimizationParser.patterns"]], "patterns (neural_compressor.ux.utils.parser.parser property)": [[476, "neural_compressor.ux.utils.parser.Parser.patterns"]], "patterns (neural_compressor.ux.utils.parser.performanceparser property)": [[476, "neural_compressor.ux.utils.parser.PerformanceParser.patterns"]], "patterns (neural_compressor.ux.utils.parser.profilingparser property)": [[476, "neural_compressor.ux.utils.parser.ProfilingParser.patterns"]], "process() (neural_compressor.ux.utils.parser.accuracyparser method)": [[476, "neural_compressor.ux.utils.parser.AccuracyParser.process"]], "process() (neural_compressor.ux.utils.parser.optimizationparser method)": [[476, "neural_compressor.ux.utils.parser.OptimizationParser.process"]], "process() (neural_compressor.ux.utils.parser.parser method)": [[476, "neural_compressor.ux.utils.parser.Parser.process"]], "process() (neural_compressor.ux.utils.parser.performanceparser method)": [[476, "neural_compressor.ux.utils.parser.PerformanceParser.process"]], "process() (neural_compressor.ux.utils.parser.profilingparser method)": [[476, "neural_compressor.ux.utils.parser.ProfilingParser.process"]], "summarize_partial() (neural_compressor.ux.utils.parser.performanceparser method)": [[476, "neural_compressor.ux.utils.parser.PerformanceParser.summarize_partial"]], "summarize_value() (neural_compressor.ux.utils.parser.performanceparser static method)": [[476, "neural_compressor.ux.utils.parser.PerformanceParser.summarize_value"]], "unify_time() (neural_compressor.ux.utils.parser.profilingparser static method)": [[476, "neural_compressor.ux.utils.parser.ProfilingParser.unify_time"]], "update_partial() (neural_compressor.ux.utils.parser.performanceparser static method)": [[476, "neural_compressor.ux.utils.parser.PerformanceParser.update_partial"]], "proc (class in neural_compressor.ux.utils.proc)": [[477, "neural_compressor.ux.utils.proc.Proc"]], "info (neural_compressor.ux.utils.proc.proc property)": [[477, "neural_compressor.ux.utils.proc.Proc.info"]], "info_path (neural_compressor.ux.utils.proc.proc property)": [[477, "neural_compressor.ux.utils.proc.Proc.info_path"]], "is_ok (neural_compressor.ux.utils.proc.proc property)": [[477, "neural_compressor.ux.utils.proc.Proc.is_ok"]], "neural_compressor.ux.utils.proc": [[477, "module-neural_compressor.ux.utils.proc"]], "output (neural_compressor.ux.utils.proc.proc property)": [[477, "neural_compressor.ux.utils.proc.Proc.output"]], "output_path (neural_compressor.ux.utils.proc.proc property)": [[477, "neural_compressor.ux.utils.proc.Proc.output_path"]], "remove_logs() (neural_compressor.ux.utils.proc.proc method)": [[477, "neural_compressor.ux.utils.proc.Proc.remove_logs"]], "run() (neural_compressor.ux.utils.proc.proc method)": [[477, "neural_compressor.ux.utils.proc.Proc.run"]], "tail (neural_compressor.ux.utils.proc.proc property)": [[477, "neural_compressor.ux.utils.proc.Proc.tail"]], "ncprocesses (class in neural_compressor.ux.utils.processes)": [[478, "neural_compressor.ux.utils.processes.NCProcesses"]], "is_ok (neural_compressor.ux.utils.processes.ncprocesses property)": [[478, "neural_compressor.ux.utils.processes.NCProcesses.is_ok"]], "neural_compressor.ux.utils.processes": [[478, "module-neural_compressor.ux.utils.processes"]], "remove_successful_logs() (neural_compressor.ux.utils.processes.ncprocesses method)": [[478, "neural_compressor.ux.utils.processes.NCProcesses.remove_successful_logs"]], "return_code_all() (neural_compressor.ux.utils.processes.ncprocesses method)": [[478, "neural_compressor.ux.utils.processes.NCProcesses.return_code_all"]], "singleton (class in neural_compressor.ux.utils.singleton)": [[479, "neural_compressor.ux.utils.singleton.Singleton"]], "neural_compressor.ux.utils.singleton": [[479, "module-neural_compressor.ux.utils.singleton"]], "get_status_update_function() (in module neural_compressor.ux.utils.status_updates)": [[480, "neural_compressor.ux.utils.status_updates.get_status_update_function"]], "neural_compressor.ux.utils.status_updates": [[480, "module-neural_compressor.ux.utils.status_updates"]], "neural_compressor.ux.utils.templates": [[481, "module-neural_compressor.ux.utils.templates"]], "metric (class in neural_compressor.ux.utils.templates.metric)": [[482, "neural_compressor.ux.utils.templates.metric.Metric"]], "acc_input_model (neural_compressor.ux.utils.templates.metric.metric property)": [[482, "neural_compressor.ux.utils.templates.metric.Metric.acc_input_model"]], "acc_optimized_model (neural_compressor.ux.utils.templates.metric.metric property)": [[482, "neural_compressor.ux.utils.templates.metric.Metric.acc_optimized_model"]], "accuracy (neural_compressor.ux.utils.templates.metric.metric property)": [[482, "neural_compressor.ux.utils.templates.metric.Metric.accuracy"]], "calculate_throughput() (neural_compressor.ux.utils.templates.metric.metric static method)": [[482, "neural_compressor.ux.utils.templates.metric.Metric.calculate_throughput"]], "insert_data() (neural_compressor.ux.utils.templates.metric.metric method)": [[482, "neural_compressor.ux.utils.templates.metric.Metric.insert_data"]], "latency (neural_compressor.ux.utils.templates.metric.metric property)": [[482, "neural_compressor.ux.utils.templates.metric.Metric.latency"]], "neural_compressor.ux.utils.templates.metric": [[482, "module-neural_compressor.ux.utils.templates.metric"]], "optimization_time (neural_compressor.ux.utils.templates.metric.metric property)": [[482, "neural_compressor.ux.utils.templates.metric.Metric.optimization_time"]], "path_optimized_model (neural_compressor.ux.utils.templates.metric.metric property)": [[482, "neural_compressor.ux.utils.templates.metric.Metric.path_optimized_model"]], "profiling_data (neural_compressor.ux.utils.templates.metric.metric property)": [[482, "neural_compressor.ux.utils.templates.metric.Metric.profiling_data"]], "size_input_model (neural_compressor.ux.utils.templates.metric.metric property)": [[482, "neural_compressor.ux.utils.templates.metric.Metric.size_input_model"]], "size_optimized_model (neural_compressor.ux.utils.templates.metric.metric property)": [[482, "neural_compressor.ux.utils.templates.metric.Metric.size_optimized_model"]], "throughput (neural_compressor.ux.utils.templates.metric.metric property)": [[482, "neural_compressor.ux.utils.templates.metric.Metric.throughput"]], "workdir (class in neural_compressor.ux.utils.templates.workdir)": [[483, "neural_compressor.ux.utils.templates.workdir.Workdir"]], "clean_logs() (neural_compressor.ux.utils.templates.workdir.workdir static method)": [[483, "neural_compressor.ux.utils.templates.workdir.Workdir.clean_logs"]], "clean_status() (neural_compressor.ux.utils.templates.workdir.workdir static method)": [[483, "neural_compressor.ux.utils.templates.workdir.Workdir.clean_status"]], "ensure_working_path_exists() (neural_compressor.ux.utils.templates.workdir.workdir method)": [[483, "neural_compressor.ux.utils.templates.workdir.Workdir.ensure_working_path_exists"]], "neural_compressor.ux.utils.templates.workdir": [[483, "module-neural_compressor.ux.utils.templates.workdir"]], "check_module() (in module neural_compressor.ux.utils.utils)": [[484, "neural_compressor.ux.utils.utils.check_module"]], "deprecated() (in module neural_compressor.ux.utils.utils)": [[484, "neural_compressor.ux.utils.utils.deprecated"]], "determine_ip() (in module neural_compressor.ux.utils.utils)": [[484, "neural_compressor.ux.utils.utils.determine_ip"]], "export_to_csv() (in module neural_compressor.ux.utils.utils)": [[484, "neural_compressor.ux.utils.utils.export_to_csv"]], "filter_transforms() (in module neural_compressor.ux.utils.utils)": [[484, "neural_compressor.ux.utils.utils.filter_transforms"]], "get_dataset_path() (in module neural_compressor.ux.utils.utils)": [[484, "neural_compressor.ux.utils.utils.get_dataset_path"]], "get_default_pruning_config_path() (in module neural_compressor.ux.utils.utils)": [[484, "neural_compressor.ux.utils.utils.get_default_pruning_config_path"]], "get_file_extension() (in module neural_compressor.ux.utils.utils)": [[484, "neural_compressor.ux.utils.utils.get_file_extension"]], "get_framework_from_path() (in module neural_compressor.ux.utils.utils)": [[484, "neural_compressor.ux.utils.utils.get_framework_from_path"]], "get_height_width_from_size() (in module neural_compressor.ux.utils.utils)": [[484, "neural_compressor.ux.utils.utils.get_height_width_from_size"]], "get_metrics_dict() (in module neural_compressor.ux.utils.utils)": [[484, "neural_compressor.ux.utils.utils.get_metrics_dict"]], "get_model_zoo_config_path() (in module neural_compressor.ux.utils.utils)": [[484, "neural_compressor.ux.utils.utils.get_model_zoo_config_path"]], "get_model_zoo_model_path() (in module neural_compressor.ux.utils.utils)": [[484, "neural_compressor.ux.utils.utils.get_model_zoo_model_path"]], "get_module_version() (in module neural_compressor.ux.utils.utils)": [[484, "neural_compressor.ux.utils.utils.get_module_version"]], "get_predefined_config_path() (in module neural_compressor.ux.utils.utils)": [[484, "neural_compressor.ux.utils.utils.get_predefined_config_path"]], "get_shape_from_transforms() (in module neural_compressor.ux.utils.utils)": [[484, "neural_compressor.ux.utils.utils.get_shape_from_transforms"]], "get_size() (in module neural_compressor.ux.utils.utils)": [[484, "neural_compressor.ux.utils.utils.get_size"]], "is_dataset_file() (in module neural_compressor.ux.utils.utils)": [[484, "neural_compressor.ux.utils.utils.is_dataset_file"]], "is_development_env() (in module neural_compressor.ux.utils.utils)": [[484, "neural_compressor.ux.utils.utils.is_development_env"]], "is_hidden() (in module neural_compressor.ux.utils.utils)": [[484, "neural_compressor.ux.utils.utils.is_hidden"]], "load_dataloader_config() (in module neural_compressor.ux.utils.utils)": [[484, "neural_compressor.ux.utils.utils.load_dataloader_config"]], "load_help_nc_params() (in module neural_compressor.ux.utils.utils)": [[484, "neural_compressor.ux.utils.utils.load_help_nc_params"]], "load_metrics_config() (in module neural_compressor.ux.utils.utils)": [[484, "neural_compressor.ux.utils.utils.load_metrics_config"]], "load_model_config() (in module neural_compressor.ux.utils.utils)": [[484, "neural_compressor.ux.utils.utils.load_model_config"]], "load_model_wise_params() (in module neural_compressor.ux.utils.utils)": [[484, "neural_compressor.ux.utils.utils.load_model_wise_params"]], "load_precisions_config() (in module neural_compressor.ux.utils.utils)": [[484, "neural_compressor.ux.utils.utils.load_precisions_config"]], "load_pruning_details_config() (in module neural_compressor.ux.utils.utils)": [[484, "neural_compressor.ux.utils.utils.load_pruning_details_config"]], "load_transforms_config() (in module neural_compressor.ux.utils.utils)": [[484, "neural_compressor.ux.utils.utils.load_transforms_config"]], "load_transforms_filter_config() (in module neural_compressor.ux.utils.utils)": [[484, "neural_compressor.ux.utils.utils.load_transforms_filter_config"]], "neural_compressor.ux.utils.utils": [[484, "module-neural_compressor.ux.utils.utils"]], "normalize_domain() (in module neural_compressor.ux.utils.utils)": [[484, "neural_compressor.ux.utils.utils.normalize_domain"]], "normalize_framework() (in module neural_compressor.ux.utils.utils)": [[484, "neural_compressor.ux.utils.utils.normalize_framework"]], "normalize_string() (in module neural_compressor.ux.utils.utils)": [[484, "neural_compressor.ux.utils.utils.normalize_string"]], "parse_bool_value() (in module neural_compressor.ux.utils.utils)": [[484, "neural_compressor.ux.utils.utils.parse_bool_value"]], "parse_to_float_list() (in module neural_compressor.ux.utils.utils)": [[484, "neural_compressor.ux.utils.utils.parse_to_float_list"]], "parse_to_string_list() (in module neural_compressor.ux.utils.utils)": [[484, "neural_compressor.ux.utils.utils.parse_to_string_list"]], "parse_version() (in module neural_compressor.ux.utils.utils)": [[484, "neural_compressor.ux.utils.utils.parse_version"]], "release_tag() (in module neural_compressor.ux.utils.utils)": [[484, "neural_compressor.ux.utils.utils.release_tag"]], "replace_with_values() (in module neural_compressor.ux.utils.utils)": [[484, "neural_compressor.ux.utils.utils.replace_with_values"]], "verify_file_path() (in module neural_compressor.ux.utils.utils)": [[484, "neural_compressor.ux.utils.utils.verify_file_path"]], "config (class in neural_compressor.ux.utils.workload.config)": [[485, "neural_compressor.ux.utils.workload.config.Config"]], "dump() (neural_compressor.ux.utils.workload.config.config method)": [[485, "neural_compressor.ux.utils.workload.config.Config.dump"]], "get_performance_configs() (neural_compressor.ux.utils.workload.config.config method)": [[485, "neural_compressor.ux.utils.workload.config.Config.get_performance_configs"]], "get_performance_cores_per_instance() (neural_compressor.ux.utils.workload.config.config method)": [[485, "neural_compressor.ux.utils.workload.config.Config.get_performance_cores_per_instance"]], "get_performance_num_of_instance() (neural_compressor.ux.utils.workload.config.config method)": [[485, "neural_compressor.ux.utils.workload.config.Config.get_performance_num_of_instance"]], "initialize() (neural_compressor.ux.utils.workload.config.config method)": [[485, "neural_compressor.ux.utils.workload.config.Config.initialize"]], "load() (neural_compressor.ux.utils.workload.config.config method)": [[485, "neural_compressor.ux.utils.workload.config.Config.load"]], "neural_compressor.ux.utils.workload.config": [[485, "module-neural_compressor.ux.utils.workload.config"]], "process_transform() (neural_compressor.ux.utils.workload.config.config static method)": [[485, "neural_compressor.ux.utils.workload.config.Config.process_transform"]], "remove_accuracy_metric() (neural_compressor.ux.utils.workload.config.config method)": [[485, "neural_compressor.ux.utils.workload.config.Config.remove_accuracy_metric"]], "remove_dataloader() (neural_compressor.ux.utils.workload.config.config method)": [[485, "neural_compressor.ux.utils.workload.config.Config.remove_dataloader"]], "set_accuracy_and_performance_batch_sizes() (neural_compressor.ux.utils.workload.config.config method)": [[485, "neural_compressor.ux.utils.workload.config.Config.set_accuracy_and_performance_batch_sizes"]], "set_accuracy_goal() (neural_compressor.ux.utils.workload.config.config method)": [[485, "neural_compressor.ux.utils.workload.config.Config.set_accuracy_goal"]], "set_accuracy_metric() (neural_compressor.ux.utils.workload.config.config method)": [[485, "neural_compressor.ux.utils.workload.config.Config.set_accuracy_metric"]], "set_evaluation_dataloader() (neural_compressor.ux.utils.workload.config.config method)": [[485, "neural_compressor.ux.utils.workload.config.Config.set_evaluation_dataloader"]], "set_evaluation_dataset_path() (neural_compressor.ux.utils.workload.config.config method)": [[485, "neural_compressor.ux.utils.workload.config.Config.set_evaluation_dataset_path"]], "set_inputs() (neural_compressor.ux.utils.workload.config.config method)": [[485, "neural_compressor.ux.utils.workload.config.Config.set_inputs"]], "set_optimization_precision() (neural_compressor.ux.utils.workload.config.config method)": [[485, "neural_compressor.ux.utils.workload.config.Config.set_optimization_precision"]], "set_outputs() (neural_compressor.ux.utils.workload.config.config method)": [[485, "neural_compressor.ux.utils.workload.config.Config.set_outputs"]], "set_performance_cores_per_instance() (neural_compressor.ux.utils.workload.config.config method)": [[485, "neural_compressor.ux.utils.workload.config.Config.set_performance_cores_per_instance"]], "set_performance_iterations() (neural_compressor.ux.utils.workload.config.config method)": [[485, "neural_compressor.ux.utils.workload.config.Config.set_performance_iterations"]], "set_performance_num_of_instance() (neural_compressor.ux.utils.workload.config.config method)": [[485, "neural_compressor.ux.utils.workload.config.Config.set_performance_num_of_instance"]], "set_performance_warmup() (neural_compressor.ux.utils.workload.config.config method)": [[485, "neural_compressor.ux.utils.workload.config.Config.set_performance_warmup"]], "set_quantization_approach() (neural_compressor.ux.utils.workload.config.config method)": [[485, "neural_compressor.ux.utils.workload.config.Config.set_quantization_approach"]], "set_quantization_batch_size() (neural_compressor.ux.utils.workload.config.config method)": [[485, "neural_compressor.ux.utils.workload.config.Config.set_quantization_batch_size"]], "set_quantization_dataloader() (neural_compressor.ux.utils.workload.config.config method)": [[485, "neural_compressor.ux.utils.workload.config.Config.set_quantization_dataloader"]], "set_quantization_dataset_path() (neural_compressor.ux.utils.workload.config.config method)": [[485, "neural_compressor.ux.utils.workload.config.Config.set_quantization_dataset_path"]], "set_quantization_sampling_size() (neural_compressor.ux.utils.workload.config.config method)": [[485, "neural_compressor.ux.utils.workload.config.Config.set_quantization_sampling_size"]], "set_transform() (neural_compressor.ux.utils.workload.config.config method)": [[485, "neural_compressor.ux.utils.workload.config.Config.set_transform"]], "set_workspace() (neural_compressor.ux.utils.workload.config.config method)": [[485, "neural_compressor.ux.utils.workload.config.Config.set_workspace"]], "dataloader (class in neural_compressor.ux.utils.workload.dataloader)": [[486, "neural_compressor.ux.utils.workload.dataloader.Dataloader"]], "dataset (class in neural_compressor.ux.utils.workload.dataloader)": [[486, "neural_compressor.ux.utils.workload.dataloader.Dataset"]], "filter (class in neural_compressor.ux.utils.workload.dataloader)": [[486, "neural_compressor.ux.utils.workload.dataloader.Filter"]], "labelbalance (class in neural_compressor.ux.utils.workload.dataloader)": [[486, "neural_compressor.ux.utils.workload.dataloader.LabelBalance"]], "transform (class in neural_compressor.ux.utils.workload.dataloader)": [[486, "neural_compressor.ux.utils.workload.dataloader.Transform"]], "is_dummy() (neural_compressor.ux.utils.workload.dataloader.dataset method)": [[486, "neural_compressor.ux.utils.workload.dataloader.Dataset.is_dummy"]], "neural_compressor.ux.utils.workload.dataloader": [[486, "module-neural_compressor.ux.utils.workload.dataloader"]], "serialize() (neural_compressor.ux.utils.workload.dataloader.dataloader method)": [[486, "neural_compressor.ux.utils.workload.dataloader.Dataloader.serialize"]], "serialize() (neural_compressor.ux.utils.workload.dataloader.dataset method)": [[486, "neural_compressor.ux.utils.workload.dataloader.Dataset.serialize"]], "serialize() (neural_compressor.ux.utils.workload.dataloader.transform method)": [[486, "neural_compressor.ux.utils.workload.dataloader.Transform.serialize"]], "set_dataset() (neural_compressor.ux.utils.workload.dataloader.dataloader method)": [[486, "neural_compressor.ux.utils.workload.dataloader.Dataloader.set_dataset"]], "set_transforms_from_list() (neural_compressor.ux.utils.workload.dataloader.dataloader method)": [[486, "neural_compressor.ux.utils.workload.dataloader.Dataloader.set_transforms_from_list"]], "accuracy (class in neural_compressor.ux.utils.workload.evaluation)": [[487, "neural_compressor.ux.utils.workload.evaluation.Accuracy"]], "configs (class in neural_compressor.ux.utils.workload.evaluation)": [[487, "neural_compressor.ux.utils.workload.evaluation.Configs"]], "evaluation (class in neural_compressor.ux.utils.workload.evaluation)": [[487, "neural_compressor.ux.utils.workload.evaluation.Evaluation"]], "metric (class in neural_compressor.ux.utils.workload.evaluation)": [[487, "neural_compressor.ux.utils.workload.evaluation.Metric"]], "performance (class in neural_compressor.ux.utils.workload.evaluation)": [[487, "neural_compressor.ux.utils.workload.evaluation.Performance"]], "postprocess (class in neural_compressor.ux.utils.workload.evaluation)": [[487, "neural_compressor.ux.utils.workload.evaluation.Postprocess"]], "postprocessschema (class in neural_compressor.ux.utils.workload.evaluation)": [[487, "neural_compressor.ux.utils.workload.evaluation.PostprocessSchema"]], "get_label_shift_value() (neural_compressor.ux.utils.workload.evaluation.postprocessschema static method)": [[487, "neural_compressor.ux.utils.workload.evaluation.PostprocessSchema.get_label_shift_value"]], "name (neural_compressor.ux.utils.workload.evaluation.metric property)": [[487, "neural_compressor.ux.utils.workload.evaluation.Metric.name"]], "neural_compressor.ux.utils.workload.evaluation": [[487, "module-neural_compressor.ux.utils.workload.evaluation"]], "param (neural_compressor.ux.utils.workload.evaluation.metric property)": [[487, "neural_compressor.ux.utils.workload.evaluation.Metric.param"]], "serialize() (neural_compressor.ux.utils.workload.evaluation.metric method)": [[487, "neural_compressor.ux.utils.workload.evaluation.Metric.serialize"]], "set_accuracy_postprocess_transforms() (neural_compressor.ux.utils.workload.evaluation.evaluation method)": [[487, "neural_compressor.ux.utils.workload.evaluation.Evaluation.set_accuracy_postprocess_transforms"]], "graphoptimization (class in neural_compressor.ux.utils.workload.graph_optimization)": [[488, "neural_compressor.ux.utils.workload.graph_optimization.GraphOptimization"]], "neural_compressor.ux.utils.workload.graph_optimization": [[488, "module-neural_compressor.ux.utils.workload.graph_optimization"]], "set_precisions() (neural_compressor.ux.utils.workload.graph_optimization.graphoptimization method)": [[488, "neural_compressor.ux.utils.workload.graph_optimization.GraphOptimization.set_precisions"]], "neural_compressor.ux.utils.workload": [[489, "module-neural_compressor.ux.utils.workload"]], "mixedprecision (class in neural_compressor.ux.utils.workload.mixed_precision)": [[490, "neural_compressor.ux.utils.workload.mixed_precision.MixedPrecision"]], "neural_compressor.ux.utils.workload.mixed_precision": [[490, "module-neural_compressor.ux.utils.workload.mixed_precision"]], "set_precisions() (neural_compressor.ux.utils.workload.mixed_precision.mixedprecision method)": [[490, "neural_compressor.ux.utils.workload.mixed_precision.MixedPrecision.set_precisions"]], "model (class in neural_compressor.ux.utils.workload.model)": [[491, "neural_compressor.ux.utils.workload.model.Model"]], "inputs (neural_compressor.ux.utils.workload.model.model property)": [[491, "neural_compressor.ux.utils.workload.model.Model.inputs"]], "neural_compressor.ux.utils.workload.model": [[491, "module-neural_compressor.ux.utils.workload.model"]], "outputs (neural_compressor.ux.utils.workload.model.model property)": [[491, "neural_compressor.ux.utils.workload.model.Model.outputs"]], "serialize() (neural_compressor.ux.utils.workload.model.model method)": [[491, "neural_compressor.ux.utils.workload.model.Model.serialize"]], "adamoptimizer (class in neural_compressor.ux.utils.workload.pruning)": [[492, "neural_compressor.ux.utils.workload.pruning.AdamOptimizer"]], "adamwoptimizer (class in neural_compressor.ux.utils.workload.pruning)": [[492, "neural_compressor.ux.utils.workload.pruning.AdamWOptimizer"]], "approach (class in neural_compressor.ux.utils.workload.pruning)": [[492, "neural_compressor.ux.utils.workload.pruning.Approach"]], "criterion (class in neural_compressor.ux.utils.workload.pruning)": [[492, "neural_compressor.ux.utils.workload.pruning.Criterion"]], "crossentropylosscriterion (class in neural_compressor.ux.utils.workload.pruning)": [[492, "neural_compressor.ux.utils.workload.pruning.CrossEntropyLossCriterion"]], "intermediatelayersknowledgedistillationloss (class in neural_compressor.ux.utils.workload.pruning)": [[492, "neural_compressor.ux.utils.workload.pruning.IntermediateLayersKnowledgeDistillationLoss"]], "knowledgedistillationlosscriterion (class in neural_compressor.ux.utils.workload.pruning)": [[492, "neural_compressor.ux.utils.workload.pruning.KnowledgeDistillationLossCriterion"]], "optimizer (class in neural_compressor.ux.utils.workload.pruning)": [[492, "neural_compressor.ux.utils.workload.pruning.Optimizer"]], "pruning (class in neural_compressor.ux.utils.workload.pruning)": [[492, "neural_compressor.ux.utils.workload.pruning.Pruning"]], "sgdoptimizer (class in neural_compressor.ux.utils.workload.pruning)": [[492, "neural_compressor.ux.utils.workload.pruning.SGDOptimizer"]], "selfknowledgedistillationloss (class in neural_compressor.ux.utils.workload.pruning)": [[492, "neural_compressor.ux.utils.workload.pruning.SelfKnowledgeDistillationLoss"]], "sparsecategoricalcrossentropycriterion (class in neural_compressor.ux.utils.workload.pruning)": [[492, "neural_compressor.ux.utils.workload.pruning.SparseCategoricalCrossentropyCriterion"]], "train (class in neural_compressor.ux.utils.workload.pruning)": [[492, "neural_compressor.ux.utils.workload.pruning.Train"]], "weightcompressionapproach (class in neural_compressor.ux.utils.workload.pruning)": [[492, "neural_compressor.ux.utils.workload.pruning.WeightCompressionApproach"]], "initialize_pruners() (neural_compressor.ux.utils.workload.pruning.weightcompressionapproach static method)": [[492, "neural_compressor.ux.utils.workload.pruning.WeightCompressionApproach.initialize_pruners"]], "neural_compressor.ux.utils.workload.pruning": [[492, "module-neural_compressor.ux.utils.workload.pruning"]], "parse_dict_value_to_float() (in module neural_compressor.ux.utils.workload.pruning)": [[492, "neural_compressor.ux.utils.workload.pruning.parse_dict_value_to_float"]], "parse_dict_value_to_int() (in module neural_compressor.ux.utils.workload.pruning)": [[492, "neural_compressor.ux.utils.workload.pruning.parse_dict_value_to_int"]], "serialize() (neural_compressor.ux.utils.workload.pruning.train method)": [[492, "neural_compressor.ux.utils.workload.pruning.Train.serialize"]], "serialize() (neural_compressor.ux.utils.workload.pruning.weightcompressionapproach method)": [[492, "neural_compressor.ux.utils.workload.pruning.WeightCompressionApproach.serialize"]], "serialize_pruner() (neural_compressor.ux.utils.workload.pruning.weightcompressionapproach static method)": [[492, "neural_compressor.ux.utils.workload.pruning.WeightCompressionApproach.serialize_pruner"]], "set_postprocess_transforms() (neural_compressor.ux.utils.workload.pruning.train method)": [[492, "neural_compressor.ux.utils.workload.pruning.Train.set_postprocess_transforms"]], "advance (class in neural_compressor.ux.utils.workload.quantization)": [[493, "neural_compressor.ux.utils.workload.quantization.Advance"]], "calibration (class in neural_compressor.ux.utils.workload.quantization)": [[493, "neural_compressor.ux.utils.workload.quantization.Calibration"]], "quantization (class in neural_compressor.ux.utils.workload.quantization)": [[493, "neural_compressor.ux.utils.workload.quantization.Quantization"]], "wiseconfig (class in neural_compressor.ux.utils.workload.quantization)": [[493, "neural_compressor.ux.utils.workload.quantization.WiseConfig"]], "wiseconfigdetails (class in neural_compressor.ux.utils.workload.quantization)": [[493, "neural_compressor.ux.utils.workload.quantization.WiseConfigDetails"]], "neural_compressor.ux.utils.workload.quantization": [[493, "module-neural_compressor.ux.utils.workload.quantization"]], "acccriterion (class in neural_compressor.ux.utils.workload.tuning)": [[494, "neural_compressor.ux.utils.workload.tuning.AccCriterion"]], "diagnosis (class in neural_compressor.ux.utils.workload.tuning)": [[494, "neural_compressor.ux.utils.workload.tuning.Diagnosis"]], "exitpolicy (class in neural_compressor.ux.utils.workload.tuning)": [[494, "neural_compressor.ux.utils.workload.tuning.ExitPolicy"]], "multiobjectives (class in neural_compressor.ux.utils.workload.tuning)": [[494, "neural_compressor.ux.utils.workload.tuning.MultiObjectives"]], "strategy (class in neural_compressor.ux.utils.workload.tuning)": [[494, "neural_compressor.ux.utils.workload.tuning.Strategy"]], "tuning (class in neural_compressor.ux.utils.workload.tuning)": [[494, "neural_compressor.ux.utils.workload.tuning.Tuning"]], "workspace (class in neural_compressor.ux.utils.workload.tuning)": [[494, "neural_compressor.ux.utils.workload.tuning.Workspace"]], "neural_compressor.ux.utils.workload.tuning": [[494, "module-neural_compressor.ux.utils.workload.tuning"]], "objective (neural_compressor.ux.utils.workload.tuning.multiobjectives property)": [[494, "neural_compressor.ux.utils.workload.tuning.MultiObjectives.objective"]], "set_max_trials() (neural_compressor.ux.utils.workload.tuning.tuning method)": [[494, "neural_compressor.ux.utils.workload.tuning.Tuning.set_max_trials"]], "set_performance_only() (neural_compressor.ux.utils.workload.tuning.tuning method)": [[494, "neural_compressor.ux.utils.workload.tuning.Tuning.set_performance_only"]], "set_random_seed() (neural_compressor.ux.utils.workload.tuning.tuning method)": [[494, "neural_compressor.ux.utils.workload.tuning.Tuning.set_random_seed"]], "set_timeout() (neural_compressor.ux.utils.workload.tuning.tuning method)": [[494, "neural_compressor.ux.utils.workload.tuning.Tuning.set_timeout"]], "set_workspace() (neural_compressor.ux.utils.workload.tuning.tuning method)": [[494, "neural_compressor.ux.utils.workload.tuning.Tuning.set_workspace"]], "weight (neural_compressor.ux.utils.workload.tuning.multiobjectives property)": [[494, "neural_compressor.ux.utils.workload.tuning.MultiObjectives.weight"]], "float_representer() (in module neural_compressor.ux.utils.yaml_utils)": [[495, "neural_compressor.ux.utils.yaml_utils.float_representer"]], "neural_compressor.ux.utils.yaml_utils": [[495, "module-neural_compressor.ux.utils.yaml_utils"]], "pruner_representer() (in module neural_compressor.ux.utils.yaml_utils)": [[495, "neural_compressor.ux.utils.yaml_utils.pruner_representer"]], "message (class in neural_compressor.ux.web.communication)": [[496, "neural_compressor.ux.web.communication.Message"]], "messagequeue (class in neural_compressor.ux.web.communication)": [[496, "neural_compressor.ux.web.communication.MessageQueue"]], "request (class in neural_compressor.ux.web.communication)": [[496, "neural_compressor.ux.web.communication.Request"]], "response (class in neural_compressor.ux.web.communication)": [[496, "neural_compressor.ux.web.communication.Response"]], "create_simple_response() (in module neural_compressor.ux.web.communication)": [[496, "neural_compressor.ux.web.communication.create_simple_response"]], "data (neural_compressor.ux.web.communication.message property)": [[496, "neural_compressor.ux.web.communication.Message.data"]], "get() (neural_compressor.ux.web.communication.messagequeue method)": [[496, "neural_compressor.ux.web.communication.MessageQueue.get"]], "neural_compressor.ux.web.communication": [[496, "module-neural_compressor.ux.web.communication"]], "post_error() (neural_compressor.ux.web.communication.messagequeue method)": [[496, "neural_compressor.ux.web.communication.MessageQueue.post_error"]], "post_failure() (neural_compressor.ux.web.communication.messagequeue method)": [[496, "neural_compressor.ux.web.communication.MessageQueue.post_failure"]], "post_success() (neural_compressor.ux.web.communication.messagequeue method)": [[496, "neural_compressor.ux.web.communication.MessageQueue.post_success"]], "status (neural_compressor.ux.web.communication.message property)": [[496, "neural_compressor.ux.web.communication.Message.status"]], "subject (neural_compressor.ux.web.communication.message property)": [[496, "neural_compressor.ux.web.communication.Message.subject"]], "configuration (class in neural_compressor.ux.web.configuration)": [[497, "neural_compressor.ux.web.configuration.Configuration"]], "determine_gui_port() (neural_compressor.ux.web.configuration.configuration method)": [[497, "neural_compressor.ux.web.configuration.Configuration.determine_gui_port"]], "determine_log_level() (neural_compressor.ux.web.configuration.configuration method)": [[497, "neural_compressor.ux.web.configuration.Configuration.determine_log_level"]], "determine_server_port() (neural_compressor.ux.web.configuration.configuration method)": [[497, "neural_compressor.ux.web.configuration.Configuration.determine_server_port"]], "determine_url_prefix() (neural_compressor.ux.web.configuration.configuration static method)": [[497, "neural_compressor.ux.web.configuration.Configuration.determine_url_prefix"]], "determine_values_from_environment() (neural_compressor.ux.web.configuration.configuration method)": [[497, "neural_compressor.ux.web.configuration.Configuration.determine_values_from_environment"]], "dump_token_to_file() (neural_compressor.ux.web.configuration.configuration method)": [[497, "neural_compressor.ux.web.configuration.Configuration.dump_token_to_file"]], "get_command_line_args() (neural_compressor.ux.web.configuration.configuration method)": [[497, "neural_compressor.ux.web.configuration.Configuration.get_command_line_args"]], "get_url() (neural_compressor.ux.web.configuration.configuration method)": [[497, "neural_compressor.ux.web.configuration.Configuration.get_url"]], "global_config_directory (neural_compressor.ux.web.configuration.configuration property)": [[497, "neural_compressor.ux.web.configuration.Configuration.global_config_directory"]], "is_port_taken() (neural_compressor.ux.web.configuration.configuration method)": [[497, "neural_compressor.ux.web.configuration.Configuration.is_port_taken"]], "neural_compressor.ux.web.configuration": [[497, "module-neural_compressor.ux.web.configuration"]], "set_up() (neural_compressor.ux.web.configuration.configuration method)": [[497, "neural_compressor.ux.web.configuration.Configuration.set_up"]], "servicenotfoundexception (class in neural_compressor.ux.web.exceptions)": [[498, "neural_compressor.ux.web.exceptions.ServiceNotFoundException"]], "neural_compressor.ux.web.exceptions": [[498, "module-neural_compressor.ux.web.exceptions"]], "neural_compressor.ux.web": [[499, "module-neural_compressor.ux.web"]], "deferredroutingdefinition (class in neural_compressor.ux.web.router)": [[500, "neural_compressor.ux.web.router.DeferredRoutingDefinition"]], "deferredsubprocessroutingdefinition (class in neural_compressor.ux.web.router)": [[500, "neural_compressor.ux.web.router.DeferredSubprocessRoutingDefinition"]], "realtimeroutingdefinition (class in neural_compressor.ux.web.router)": [[500, "neural_compressor.ux.web.router.RealtimeRoutingDefinition"]], "router (class in neural_compressor.ux.web.router)": [[500, "neural_compressor.ux.web.router.Router"]], "routingdefinition (class in neural_compressor.ux.web.router)": [[500, "neural_compressor.ux.web.router.RoutingDefinition"]], "find_pattern_in_graph() (in module neural_compressor.ux.web.router)": [[500, "neural_compressor.ux.web.router.find_pattern_in_graph"]], "get_model_graph() (in module neural_compressor.ux.web.router)": [[500, "neural_compressor.ux.web.router.get_model_graph"]], "get_system_info() (in module neural_compressor.ux.web.router)": [[500, "neural_compressor.ux.web.router.get_system_info"]], "handle() (neural_compressor.ux.web.router.router method)": [[500, "neural_compressor.ux.web.router.Router.handle"]], "neural_compressor.ux.web.router": [[500, "module-neural_compressor.ux.web.router"]], "allow_api_call() (in module neural_compressor.ux.web.server)": [[501, "neural_compressor.ux.web.server.allow_api_call"]], "block_iframe() (in module neural_compressor.ux.web.server)": [[501, "neural_compressor.ux.web.server.block_iframe"]], "block_sniffing() (in module neural_compressor.ux.web.server)": [[501, "neural_compressor.ux.web.server.block_sniffing"]], "build_parameters() (in module neural_compressor.ux.web.server)": [[501, "neural_compressor.ux.web.server.build_parameters"]], "disable_cache() (in module neural_compressor.ux.web.server)": [[501, "neural_compressor.ux.web.server.disable_cache"]], "get_tls_args() (in module neural_compressor.ux.web.server)": [[501, "neural_compressor.ux.web.server.get_tls_args"]], "handle_api_call() (in module neural_compressor.ux.web.server)": [[501, "neural_compressor.ux.web.server.handle_api_call"]], "neural_compressor.ux.web.server": [[501, "module-neural_compressor.ux.web.server"]], "page_not_found() (in module neural_compressor.ux.web.server)": [[501, "neural_compressor.ux.web.server.page_not_found"]], "require_api_token() (in module neural_compressor.ux.web.server)": [[501, "neural_compressor.ux.web.server.require_api_token"]], "root() (in module neural_compressor.ux.web.server)": [[501, "neural_compressor.ux.web.server.root"]], "run_server() (in module neural_compressor.ux.web.server)": [[501, "neural_compressor.ux.web.server.run_server"]], "web_socket_publisher() (in module neural_compressor.ux.web.server)": [[501, "neural_compressor.ux.web.server.web_socket_publisher"]], "benchmarkservice (class in neural_compressor.ux.web.service.benchmark)": [[502, "neural_compressor.ux.web.service.benchmark.BenchmarkService"]], "neural_compressor.ux.web.service.benchmark": [[502, "module-neural_compressor.ux.web.service.benchmark"]], "historysnapshotparser (class in neural_compressor.ux.web.service.history_snapshot_parser)": [[503, "neural_compressor.ux.web.service.history_snapshot_parser.HistorySnapshotParser"]], "extract_accuracy() (neural_compressor.ux.web.service.history_snapshot_parser.historysnapshotparser method)": [[503, "neural_compressor.ux.web.service.history_snapshot_parser.HistorySnapshotParser.extract_accuracy"]], "extract_performance() (neural_compressor.ux.web.service.history_snapshot_parser.historysnapshotparser method)": [[503, "neural_compressor.ux.web.service.history_snapshot_parser.HistorySnapshotParser.extract_performance"]], "neural_compressor.ux.web.service.history_snapshot_parser": [[503, "module-neural_compressor.ux.web.service.history_snapshot_parser"]], "parse_history_item() (neural_compressor.ux.web.service.history_snapshot_parser.historysnapshotparser method)": [[503, "neural_compressor.ux.web.service.history_snapshot_parser.HistorySnapshotParser.parse_history_item"]], "parse_history_snapshot() (neural_compressor.ux.web.service.history_snapshot_parser.historysnapshotparser method)": [[503, "neural_compressor.ux.web.service.history_snapshot_parser.HistorySnapshotParser.parse_history_snapshot"]], "neural_compressor.ux.web.service": [[504, "module-neural_compressor.ux.web.service"]], "modelservice (class in neural_compressor.ux.web.service.model)": [[505, "neural_compressor.ux.web.service.model.ModelService"]], "get_model() (neural_compressor.ux.web.service.model.modelservice class method)": [[505, "neural_compressor.ux.web.service.model.ModelService.get_model"]], "neural_compressor.ux.web.service.model": [[505, "module-neural_compressor.ux.web.service.model"]], "optimizationservice (class in neural_compressor.ux.web.service.optimization)": [[506, "neural_compressor.ux.web.service.optimization.OptimizationService"]], "neural_compressor.ux.web.service.optimization": [[506, "module-neural_compressor.ux.web.service.optimization"]], "profilingservice (class in neural_compressor.ux.web.service.profiling)": [[507, "neural_compressor.ux.web.service.profiling.ProfilingService"]], "generate_csv() (neural_compressor.ux.web.service.profiling.profilingservice class method)": [[507, "neural_compressor.ux.web.service.profiling.ProfilingService.generate_csv"]], "neural_compressor.ux.web.service.profiling": [[507, "module-neural_compressor.ux.web.service.profiling"]], "requestdataprocessor (class in neural_compressor.ux.web.service.request_data_processor)": [[508, "neural_compressor.ux.web.service.request_data_processor.RequestDataProcessor"]], "get_string_value() (neural_compressor.ux.web.service.request_data_processor.requestdataprocessor static method)": [[508, "neural_compressor.ux.web.service.request_data_processor.RequestDataProcessor.get_string_value"]], "neural_compressor.ux.web.service.request_data_processor": [[508, "module-neural_compressor.ux.web.service.request_data_processor"]], "responsegenerator (class in neural_compressor.ux.web.service.response_generator)": [[509, "neural_compressor.ux.web.service.response_generator.ResponseGenerator"]], "add_refresh() (neural_compressor.ux.web.service.response_generator.responsegenerator static method)": [[509, "neural_compressor.ux.web.service.response_generator.ResponseGenerator.add_refresh"]], "from_exception() (neural_compressor.ux.web.service.response_generator.responsegenerator static method)": [[509, "neural_compressor.ux.web.service.response_generator.ResponseGenerator.from_exception"]], "get_status_code_for_exception() (neural_compressor.ux.web.service.response_generator.responsegenerator static method)": [[509, "neural_compressor.ux.web.service.response_generator.ResponseGenerator.get_status_code_for_exception"]], "neural_compressor.ux.web.service.response_generator": [[509, "module-neural_compressor.ux.web.service.response_generator"]], "serve_from_filesystem() (neural_compressor.ux.web.service.response_generator.responsegenerator static method)": [[509, "neural_compressor.ux.web.service.response_generator.ResponseGenerator.serve_from_filesystem"]], "workloadservice (class in neural_compressor.ux.web.service.workload)": [[510, "neural_compressor.ux.web.service.workload.WorkloadService"]], "get_code_template() (neural_compressor.ux.web.service.workload.workloadservice class method)": [[510, "neural_compressor.ux.web.service.workload.WorkloadService.get_code_template"]], "get_config() (neural_compressor.ux.web.service.workload.workloadservice class method)": [[510, "neural_compressor.ux.web.service.workload.WorkloadService.get_config"]], "get_output() (neural_compressor.ux.web.service.workload.workloadservice class method)": [[510, "neural_compressor.ux.web.service.workload.WorkloadService.get_output"]], "neural_compressor.ux.web.service.workload": [[510, "module-neural_compressor.ux.web.service.workload"]], "neural_compressor.version": [[511, "module-neural_compressor.version"]]}})